
KAMIL_SWG7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005684  08005684  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800568c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  080056fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080056fc  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fca7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bc  00000000  00000000  0002fd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f0  00000000  00000000  00033990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd9a  00000000  00000000  0004aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098231  00000000  00000000  0005a81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f98  00000000  00000000  000f2a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055f8 	.word	0x080055f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055f8 	.word	0x080055f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_RxCpltCallback>:
//		HAL_UART_Transmit_DMA(huart, buffor_tx, TX_size);
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <HAL_UART_RxCpltCallback+0x60>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d121      	bne.n	80005da <HAL_UART_RxCpltCallback+0x56>
		cnt++;
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	b29b      	uxth	r3, r3
 800059c:	3301      	adds	r3, #1
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 80005a2:	801a      	strh	r2, [r3, #0]
		TX_size = snprintf((char*)buffor_tx,sizeof(buffor_tx),"Odebrano: %s, cnt = %d\n",buffor_rx, cnt);
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <HAL_UART_RxCpltCallback+0x64>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_UART_RxCpltCallback+0x68>)
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <HAL_UART_RxCpltCallback+0x6c>)
 80005b0:	2164      	movs	r1, #100	; 0x64
 80005b2:	4810      	ldr	r0, [pc, #64]	; (80005f4 <HAL_UART_RxCpltCallback+0x70>)
 80005b4:	f004 fb9e 	bl	8004cf4 <sniprintf>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_UART_RxCpltCallback+0x74>)
 80005be:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(huart, buffor_tx, TX_size);
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <HAL_UART_RxCpltCallback+0x74>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	490a      	ldr	r1, [pc, #40]	; (80005f4 <HAL_UART_RxCpltCallback+0x70>)
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f003 f9c8 	bl	8003960 <HAL_UART_Transmit_DMA>
		HAL_UART_Receive_DMA(huart, buffor_rx, 2);
 80005d0:	2202      	movs	r2, #2
 80005d2:	4906      	ldr	r1, [pc, #24]	; (80005ec <HAL_UART_RxCpltCallback+0x68>)
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f003 fa41 	bl	8003a5c <HAL_UART_Receive_DMA>

	}

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40004400 	.word	0x40004400
 80005e8:	200002fc 	.word	0x200002fc
 80005ec:	200002e8 	.word	0x200002e8
 80005f0:	08005610 	.word	0x08005610
 80005f4:	20000284 	.word	0x20000284
 80005f8:	20000280 	.word	0x20000280

080005fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_ADC_ConvCpltCallback+0x2c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d108      	bne.n	8000620 <HAL_ADC_ConvCpltCallback+0x24>
		Number = HAL_ADC_GetValue(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f001 f91a 	bl	8001848 <HAL_ADC_GetValue>
 8000614:	4603      	mov	r3, r0
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_ADC_ConvCpltCallback+0x30>)
 800061a:	801a      	strh	r2, [r3, #0]
		count_number();
 800061c:	f000 f8cc 	bl	80007b8 <count_number>
	}


}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40012000 	.word	0x40012000
 800062c:	2000026a 	.word	0x2000026a

08000630 <HAL_GPIO_EXTI_Callback>:

// Funkcja odpowiedzialna za przerwania zewnętrzne
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == S1_Pin){
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d124      	bne.n	800068a <HAL_GPIO_EXTI_Callback+0x5a>
		t2_S1 = HAL_GetTick();
 8000640:	f000 fee4 	bl	800140c <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a21      	ldr	r2, [pc, #132]	; (80006cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000648:	6013      	str	r3, [r2, #0]
		if(t2_S1 - t1_S1 > delay){
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <HAL_GPIO_EXTI_Callback+0x9c>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	22c8      	movs	r2, #200	; 0xc8
 8000656:	4293      	cmp	r3, r2
 8000658:	d934      	bls.n	80006c4 <HAL_GPIO_EXTI_Callback+0x94>
			t1_S1 = t2_S1;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <HAL_GPIO_EXTI_Callback+0x9c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000660:	6013      	str	r3, [r2, #0]
			if(Number == 0){
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b29b      	uxth	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d104      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x46>
					Number = 9999;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800066e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000672:	801a      	strh	r2, [r3, #0]
 8000674:	e006      	b.n	8000684 <HAL_GPIO_EXTI_Callback+0x54>
			}else{
				Number --;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	b29b      	uxth	r3, r3
 800067c:	3b01      	subs	r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000682:	801a      	strh	r2, [r3, #0]
			}
			count_number();
 8000684:	f000 f898 	bl	80007b8 <count_number>
		}

	}


}
 8000688:	e01c      	b.n	80006c4 <HAL_GPIO_EXTI_Callback+0x94>
	}else if(GPIO_Pin == S2_Pin){
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	2b20      	cmp	r3, #32
 800068e:	d119      	bne.n	80006c4 <HAL_GPIO_EXTI_Callback+0x94>
		t2_S2 = HAL_GetTick();
 8000690:	f000 febc 	bl	800140c <HAL_GetTick>
 8000694:	4603      	mov	r3, r0
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000698:	6013      	str	r3, [r2, #0]
		if(t2_S2 - t1_S2 > delay){
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_GPIO_EXTI_Callback+0xac>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	22c8      	movs	r2, #200	; 0xc8
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d90c      	bls.n	80006c4 <HAL_GPIO_EXTI_Callback+0x94>
			t1_S2 = t2_S2;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <HAL_GPIO_EXTI_Callback+0xac>)
 80006b0:	6013      	str	r3, [r2, #0]
			Number ++;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3301      	adds	r3, #1
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 80006be:	801a      	strh	r2, [r3, #0]
			count_number();
 80006c0:	f000 f87a 	bl	80007b8 <count_number>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000274 	.word	0x20000274
 80006d0:	20000270 	.word	0x20000270
 80006d4:	2000026a 	.word	0x2000026a
 80006d8:	2000027c 	.word	0x2000027c
 80006dc:	20000278 	.word	0x20000278

080006e0 <HAL_TIM_PeriodElapsedCallback>:


// funkcja odpowiedzilana z obsługę przerwań związanych z timerem TIM11
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d144      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x9c>
		// Switch umożliwający cykliczną zamianę jednego z 4 wyświetlaczy 7-seg
		switch(NrDisp){
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d848      	bhi.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
 80006fc:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000715 	.word	0x08000715
 8000708:	0800072f 	.word	0x0800072f
 800070c:	08000749 	.word	0x08000749
 8000710:	08000763 	.word	0x08000763
		case 0:
			SetDisp(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8d1 	bl	80008bc <SetDisp>
			SetSeg7(thousandths_number);
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f963 	bl	80009ec <SetSeg7>
			NrDisp = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
			break;
 800072c:	e02f      	b.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
		case 1:
			SetDisp(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f000 f8c4 	bl	80008bc <SetDisp>
			SetSeg7(hundreds_number);
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f956 	bl	80009ec <SetSeg7>
			NrDisp = 2;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000742:	2202      	movs	r2, #2
 8000744:	701a      	strb	r2, [r3, #0]
			break;
 8000746:	e022      	b.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
		case 2:
			SetDisp(2);
 8000748:	2002      	movs	r0, #2
 800074a:	f000 f8b7 	bl	80008bc <SetDisp>
			SetSeg7(decimal_number);
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f949 	bl	80009ec <SetSeg7>
			NrDisp = 3;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800075c:	2203      	movs	r2, #3
 800075e:	701a      	strb	r2, [r3, #0]
			break;
 8000760:	e015      	b.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
		case 3:
			SetDisp(3);
 8000762:	2003      	movs	r0, #3
 8000764:	f000 f8aa 	bl	80008bc <SetDisp>
			SetSeg7(unit_number);
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f93c 	bl	80009ec <SetSeg7>
			NrDisp = 0;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
			break;
 800077a:	e008      	b.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
		}
	}else if(htim->Instance == TIM10){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d103      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
		HAL_ADC_Start_IT(&hadc1);
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000788:	f000 fe90 	bl	80014ac <HAL_ADC_Start_IT>

	}


}
 800078c:	e7ff      	b.n	800078e <HAL_TIM_PeriodElapsedCallback+0xae>
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40014800 	.word	0x40014800
 800079c:	20000268 	.word	0x20000268
 80007a0:	2000026f 	.word	0x2000026f
 80007a4:	2000026e 	.word	0x2000026e
 80007a8:	2000026d 	.word	0x2000026d
 80007ac:	2000026c 	.word	0x2000026c
 80007b0:	40014400 	.word	0x40014400
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <count_number>:


// Funkcja umożliwiająca zlicznie, oraz dekodowanie wartości Number
void count_number(){
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	if(Number > 9999){
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <count_number+0xe4>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d902      	bls.n	80007d0 <count_number+0x18>
		Number = 0;
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <count_number+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	801a      	strh	r2, [r3, #0]
	}
	thousandths_number = Number/1000;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <count_number+0xe4>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <count_number+0xe8>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	099b      	lsrs	r3, r3, #6
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <count_number+0xec>)
 80007e4:	701a      	strb	r2, [r3, #0]
	hundreds_number = (Number%1000)/100;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <count_number+0xe4>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4a2c      	ldr	r2, [pc, #176]	; (80008a0 <count_number+0xe8>)
 80007ee:	fba2 1203 	umull	r1, r2, r2, r3
 80007f2:	0992      	lsrs	r2, r2, #6
 80007f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f8:	fb01 f202 	mul.w	r2, r1, r2
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <count_number+0xf0>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <count_number+0xf4>)
 800080e:	701a      	strb	r2, [r3, #0]
	decimal_number = (Number%1000%100)/10;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <count_number+0xe4>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <count_number+0xe8>)
 8000818:	fba2 1203 	umull	r1, r2, r2, r3
 800081c:	0992      	lsrs	r2, r2, #6
 800081e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000822:	fb01 f202 	mul.w	r2, r1, r2
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	b29b      	uxth	r3, r3
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <count_number+0xf0>)
 800082c:	fba2 1203 	umull	r1, r2, r2, r3
 8000830:	0952      	lsrs	r2, r2, #5
 8000832:	2164      	movs	r1, #100	; 0x64
 8000834:	fb01 f202 	mul.w	r2, r1, r2
 8000838:	1a9b      	subs	r3, r3, r2
 800083a:	b29b      	uxth	r3, r3
 800083c:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <count_number+0xf8>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	b29b      	uxth	r3, r3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <count_number+0xfc>)
 800084a:	701a      	strb	r2, [r3, #0]
	unit_number = (Number%1000%100%10);
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <count_number+0xe4>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <count_number+0xe8>)
 8000854:	fba2 1203 	umull	r1, r2, r2, r3
 8000858:	0992      	lsrs	r2, r2, #6
 800085a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800085e:	fb01 f202 	mul.w	r2, r1, r2
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <count_number+0xf0>)
 8000868:	fba2 1203 	umull	r1, r2, r2, r3
 800086c:	0952      	lsrs	r2, r2, #5
 800086e:	2164      	movs	r1, #100	; 0x64
 8000870:	fb01 f202 	mul.w	r2, r1, r2
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <count_number+0xf8>)
 800087a:	fba3 1302 	umull	r1, r3, r3, r2
 800087e:	08d9      	lsrs	r1, r3, #3
 8000880:	460b      	mov	r3, r1
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <count_number+0x100>)
 8000890:	701a      	strb	r2, [r3, #0]

}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	2000026a 	.word	0x2000026a
 80008a0:	10624dd3 	.word	0x10624dd3
 80008a4:	2000026f 	.word	0x2000026f
 80008a8:	51eb851f 	.word	0x51eb851f
 80008ac:	2000026e 	.word	0x2000026e
 80008b0:	cccccccd 	.word	0xcccccccd
 80008b4:	2000026d 	.word	0x2000026d
 80008b8:	2000026c 	.word	0x2000026c

080008bc <SetDisp>:

// Funkcja umożliwiająca ustawienie odpowiedniego COM-a do wyświetlacza
// w celu wyboru jednego z 4 wyświetlaczy 7-seg
void SetDisp(uint8_t number){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008cc:	4821      	ldr	r0, [pc, #132]	; (8000954 <SetDisp+0x98>)
 80008ce:	f002 f8b9 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d8:	481e      	ldr	r0, [pc, #120]	; (8000954 <SetDisp+0x98>)
 80008da:	f002 f8b3 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	481b      	ldr	r0, [pc, #108]	; (8000954 <SetDisp+0x98>)
 80008e6:	f002 f8ad 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COM4_GPIO_Port, COM4_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f0:	4818      	ldr	r0, [pc, #96]	; (8000954 <SetDisp+0x98>)
 80008f2:	f002 f8a7 	bl	8002a44 <HAL_GPIO_WritePin>
	switch(number){
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d827      	bhi.n	800094c <SetDisp+0x90>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <SetDisp+0x48>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	08000923 	.word	0x08000923
 800090c:	08000931 	.word	0x08000931
 8000910:	0800093f 	.word	0x0800093f
		case 0:
			HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <SetDisp+0x98>)
 800091c:	f002 f892 	bl	8002a44 <HAL_GPIO_WritePin>
			break;
 8000920:	e014      	b.n	800094c <SetDisp+0x90>
		case 1:
			HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <SetDisp+0x98>)
 800092a:	f002 f88b 	bl	8002a44 <HAL_GPIO_WritePin>
			break;
 800092e:	e00d      	b.n	800094c <SetDisp+0x90>
		case 2:
			HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <SetDisp+0x98>)
 8000938:	f002 f884 	bl	8002a44 <HAL_GPIO_WritePin>
			break;
 800093c:	e006      	b.n	800094c <SetDisp+0x90>
		case 3:
			HAL_GPIO_WritePin(COM4_GPIO_Port, COM4_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <SetDisp+0x98>)
 8000946:	f002 f87d 	bl	8002a44 <HAL_GPIO_WritePin>
			break;
 800094a:	bf00      	nop

	}
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40020800 	.word	0x40020800

08000958 <DispSeg7>:

// Funkcja ustawiająca odpowiedni stan na wyjściu zgodnie z maską podaną z funkcji SetSeg7
void DispSeg7(uint8_t mask){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, mask & 0x01);
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <DispSeg7+0x90>)
 8000970:	f002 f868 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, mask & 0x02);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	2110      	movs	r1, #16
 8000980:	4819      	ldr	r0, [pc, #100]	; (80009e8 <DispSeg7+0x90>)
 8000982:	f002 f85f 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, mask & 0x04);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	2108      	movs	r1, #8
 8000992:	4815      	ldr	r0, [pc, #84]	; (80009e8 <DispSeg7+0x90>)
 8000994:	f002 f856 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, mask & 0x08);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	2102      	movs	r1, #2
 80009a4:	4810      	ldr	r0, [pc, #64]	; (80009e8 <DispSeg7+0x90>)
 80009a6:	f002 f84d 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, mask & 0x10);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	2104      	movs	r1, #4
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <DispSeg7+0x90>)
 80009b8:	f002 f844 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, mask & 0x20);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	2120      	movs	r1, #32
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <DispSeg7+0x90>)
 80009ca:	f002 f83b 	bl	8002a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, mask & 0x40);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	2101      	movs	r1, #1
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <DispSeg7+0x90>)
 80009dc:	f002 f832 	bl	8002a44 <HAL_GPIO_WritePin>



}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40020800 	.word	0x40020800

080009ec <SetSeg7>:

// Funkcja deklarująca wyświedlanie odpowiednich segmentów dla poszczególnych liczb
void SetSeg7(uint8_t number){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	switch(number){
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b09      	cmp	r3, #9
 80009fa:	d83f      	bhi.n	8000a7c <SetSeg7+0x90>
 80009fc:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <SetSeg7+0x18>)
 80009fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a2d 	.word	0x08000a2d
 8000a08:	08000a35 	.word	0x08000a35
 8000a0c:	08000a3d 	.word	0x08000a3d
 8000a10:	08000a45 	.word	0x08000a45
 8000a14:	08000a4d 	.word	0x08000a4d
 8000a18:	08000a55 	.word	0x08000a55
 8000a1c:	08000a5d 	.word	0x08000a5d
 8000a20:	08000a65 	.word	0x08000a65
 8000a24:	08000a6d 	.word	0x08000a6d
 8000a28:	08000a75 	.word	0x08000a75
	case 0:
		DispSeg7(0b0111111);
 8000a2c:	203f      	movs	r0, #63	; 0x3f
 8000a2e:	f7ff ff93 	bl	8000958 <DispSeg7>
		break;
 8000a32:	e027      	b.n	8000a84 <SetSeg7+0x98>
	case 1:
		DispSeg7(0b0000110);
 8000a34:	2006      	movs	r0, #6
 8000a36:	f7ff ff8f 	bl	8000958 <DispSeg7>
		break;
 8000a3a:	e023      	b.n	8000a84 <SetSeg7+0x98>
	case 2:
		DispSeg7(0b1011011);
 8000a3c:	205b      	movs	r0, #91	; 0x5b
 8000a3e:	f7ff ff8b 	bl	8000958 <DispSeg7>
		break;
 8000a42:	e01f      	b.n	8000a84 <SetSeg7+0x98>
	case 3:
		DispSeg7(0b1001111);
 8000a44:	204f      	movs	r0, #79	; 0x4f
 8000a46:	f7ff ff87 	bl	8000958 <DispSeg7>
		break;
 8000a4a:	e01b      	b.n	8000a84 <SetSeg7+0x98>
	case 4:
		DispSeg7(0b1100110);
 8000a4c:	2066      	movs	r0, #102	; 0x66
 8000a4e:	f7ff ff83 	bl	8000958 <DispSeg7>
		break;
 8000a52:	e017      	b.n	8000a84 <SetSeg7+0x98>
	case 5:
		DispSeg7(0b1101101);
 8000a54:	206d      	movs	r0, #109	; 0x6d
 8000a56:	f7ff ff7f 	bl	8000958 <DispSeg7>
		break;
 8000a5a:	e013      	b.n	8000a84 <SetSeg7+0x98>
	case 6:
		DispSeg7(0b1111101);
 8000a5c:	207d      	movs	r0, #125	; 0x7d
 8000a5e:	f7ff ff7b 	bl	8000958 <DispSeg7>
		break;
 8000a62:	e00f      	b.n	8000a84 <SetSeg7+0x98>
	case 7:
		DispSeg7(0b0000111);
 8000a64:	2007      	movs	r0, #7
 8000a66:	f7ff ff77 	bl	8000958 <DispSeg7>
		break;
 8000a6a:	e00b      	b.n	8000a84 <SetSeg7+0x98>
	case 8:
		DispSeg7(0b1111111);
 8000a6c:	207f      	movs	r0, #127	; 0x7f
 8000a6e:	f7ff ff73 	bl	8000958 <DispSeg7>
		break;
 8000a72:	e007      	b.n	8000a84 <SetSeg7+0x98>
	case 9:
		DispSeg7(0b1101111);
 8000a74:	206f      	movs	r0, #111	; 0x6f
 8000a76:	f7ff ff6f 	bl	8000958 <DispSeg7>
		break;
 8000a7a:	e003      	b.n	8000a84 <SetSeg7+0x98>
	default:
		DispSeg7(0b1111001);
 8000a7c:	2079      	movs	r0, #121	; 0x79
 8000a7e:	f7ff ff6b 	bl	8000958 <DispSeg7>
		break;
 8000a82:	bf00      	nop
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fc56 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f820 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 f976 	bl	8000d88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a9c:	f000 f94c 	bl	8000d38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000aa0:	f000 f920 	bl	8000ce4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000aa4:	f000 f8fa 	bl	8000c9c <MX_TIM11_Init>
  MX_ADC1_Init();
 8000aa8:	f000 f880 	bl	8000bac <MX_ADC1_Init>
  MX_TIM10_Init();
 8000aac:	f000 f8d2 	bl	8000c54 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <main+0x3c>)
 8000ab2:	f002 fce1 	bl	8003478 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <main+0x40>)
 8000ab8:	f002 fcde 	bl	8003478 <HAL_TIM_Base_Start_IT>

//  uint16_t cnt = 0;
//  TX_size = snprintf(buffor_tx,sizeof(buffor_tx),"Pierwszy: %d",cnt);
//  HAL_UART_Transmit_DMA(&huart2, buffor_tx, TX_size);

  HAL_UART_Receive_DMA(&huart2,buffor_rx, 2);
 8000abc:	2202      	movs	r2, #2
 8000abe:	4904      	ldr	r1, [pc, #16]	; (8000ad0 <main+0x44>)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <main+0x48>)
 8000ac2:	f002 ffcb 	bl	8003a5c <HAL_UART_Receive_DMA>

  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <main+0x3a>
 8000ac8:	2000011c 	.word	0x2000011c
 8000acc:	200000d4 	.word	0x200000d4
 8000ad0:	200002e8 	.word	0x200002e8
 8000ad4:	20000164 	.word	0x20000164

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	2230      	movs	r2, #48	; 0x30
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f004 f8fc 	bl	8004ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <SystemClock_Config+0xcc>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	4a27      	ldr	r2, [pc, #156]	; (8000ba4 <SystemClock_Config+0xcc>)
 8000b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <SystemClock_Config+0xcc>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <SystemClock_Config+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <SystemClock_Config+0xd0>)
 8000b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <SystemClock_Config+0xd0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b52:	2304      	movs	r3, #4
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 ffa2 	bl	8002aa8 <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b6a:	f000 f9af 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b72:	2302      	movs	r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fa04 	bl	8002f98 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b96:	f000 f999 	bl	8000ecc <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3750      	adds	r7, #80	; 0x50
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40007000 	.word	0x40007000

08000bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <MX_ADC1_Init+0x9c>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <MX_ADC1_Init+0xa0>)
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000c0e:	f000 fc09 	bl	8001424 <HAL_ADC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c18:	f000 f958 	bl	8000ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_ADC1_Init+0xa4>)
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c24:	2307      	movs	r3, #7
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_ADC1_Init+0x98>)
 8000c2e:	f000 fe2d 	bl	800188c <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c38:	f000 f948 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000008c 	.word	0x2000008c
 8000c48:	40012000 	.word	0x40012000
 8000c4c:	0f000001 	.word	0x0f000001
 8000c50:	10000012 	.word	0x10000012

08000c54 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <MX_TIM10_Init+0x44>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c60:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c64:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_TIM10_Init+0x40>)
 8000c82:	f002 fba9 	bl	80033d8 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000c8c:	f000 f91e 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000d4 	.word	0x200000d4
 8000c98:	40014400 	.word	0x40014400

08000c9c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <MX_TIM11_Init+0x44>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 200;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000ca8:	22c8      	movs	r2, #200	; 0xc8
 8000caa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_TIM11_Init+0x40>)
 8000cc8:	f002 fb86 	bl	80033d8 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000cd2:	f000 f8fb 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000011c 	.word	0x2000011c
 8000ce0:	40014800 	.word	0x40014800

08000ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART2_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f002 fdd2 	bl	80038c4 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f8d1 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000164 	.word	0x20000164
 8000d34:	40004400 	.word	0x40004400

08000d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_DMA_Init+0x4c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_DMA_Init+0x4c>)
 8000d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_DMA_Init+0x4c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2010      	movs	r0, #16
 8000d60:	f001 f8a7 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d64:	2010      	movs	r0, #16
 8000d66:	f001 f8c0 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2011      	movs	r0, #17
 8000d70:	f001 f89f 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d74:	2011      	movs	r0, #17
 8000d76:	f001 f8b8 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_GPIO_Init+0x134>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_Pin|D_Pin|E_Pin|C_Pin
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f640 717f 	movw	r1, #3967	; 0xf7f
 8000e14:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <MX_GPIO_Init+0x138>)
 8000e16:	f001 fe15 	bl	8002a44 <HAL_GPIO_WritePin>
                          |B_Pin|F_Pin|A_Pin|COM4_Pin
                          |COM3_Pin|COM2_Pin|COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4829      	ldr	r0, [pc, #164]	; (8000ec4 <MX_GPIO_Init+0x13c>)
 8000e20:	f001 fe10 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0x138>)
 8000e3c:	f001 fc7e 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : G_Pin D_Pin E_Pin C_Pin
                           B_Pin F_Pin A_Pin COM4_Pin
                           COM3_Pin COM2_Pin COM1_Pin */
  GPIO_InitStruct.Pin = G_Pin|D_Pin|E_Pin|C_Pin
 8000e40:	f640 737f 	movw	r3, #3967	; 0xf7f
 8000e44:	617b      	str	r3, [r7, #20]
                          |B_Pin|F_Pin|A_Pin|COM4_Pin
                          |COM3_Pin|COM2_Pin|COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <MX_GPIO_Init+0x138>)
 8000e5a:	f001 fc6f 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_GPIO_Init+0x13c>)
 8000e76:	f001 fc61 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000e7a:	2321      	movs	r3, #33	; 0x21
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <MX_GPIO_Init+0x140>)
 8000e90:	f001 fc54 	bl	800273c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2006      	movs	r0, #6
 8000e9a:	f001 f80a 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e9e:	2006      	movs	r0, #6
 8000ea0:	f001 f823 	bl	8001eea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2017      	movs	r0, #23
 8000eaa:	f001 f802 	bl	8001eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eae:	2017      	movs	r0, #23
 8000eb0:	f001 f81b 	bl	8001eea <HAL_NVIC_EnableIRQ>

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f16:	2007      	movs	r0, #7
 8000f18:	f000 ffc0 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_ADC_MspInit+0x48>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d115      	bne.n	8000f66 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_ADC_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_ADC_MspInit+0x4c>)
 8000f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_ADC_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2012      	movs	r0, #18
 8000f5c:	f000 ffa9 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f60:	2012      	movs	r0, #18
 8000f62:	f000 ffc2 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40012000 	.word	0x40012000
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_TIM_Base_MspInit+0x80>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d116      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2019      	movs	r0, #25
 8000fac:	f000 ff81 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fb0:	2019      	movs	r0, #25
 8000fb2:	f000 ff9a 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000fb6:	e01a      	b.n	8000fee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_TIM_Base_MspInit+0x88>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d115      	bne.n	8000fee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x84>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	201a      	movs	r0, #26
 8000fe4:	f000 ff65 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fe8:	201a      	movs	r0, #26
 8000fea:	f000 ff7e 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40014400 	.word	0x40014400
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40014800 	.word	0x40014800

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_UART_MspInit+0x14c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	f040 8090 	bne.w	8001148 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	4b49      	ldr	r3, [pc, #292]	; (8001154 <HAL_UART_MspInit+0x150>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_UART_MspInit+0x150>)
 8001032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <HAL_UART_MspInit+0x150>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b42      	ldr	r3, [pc, #264]	; (8001154 <HAL_UART_MspInit+0x150>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a41      	ldr	r2, [pc, #260]	; (8001154 <HAL_UART_MspInit+0x150>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_UART_MspInit+0x150>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001060:	230c      	movs	r3, #12
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001070:	2307      	movs	r3, #7
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4837      	ldr	r0, [pc, #220]	; (8001158 <HAL_UART_MspInit+0x154>)
 800107c:	f001 fb5e 	bl	800273c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_UART_MspInit+0x158>)
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <HAL_UART_MspInit+0x15c>)
 8001084:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <HAL_UART_MspInit+0x158>)
 8001088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_UART_MspInit+0x158>)
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <HAL_UART_MspInit+0x158>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_UART_MspInit+0x158>)
 800109c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_UART_MspInit+0x158>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_UART_MspInit+0x158>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <HAL_UART_MspInit+0x158>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_UART_MspInit+0x158>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ba:	4b28      	ldr	r3, [pc, #160]	; (800115c <HAL_UART_MspInit+0x158>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010c0:	4826      	ldr	r0, [pc, #152]	; (800115c <HAL_UART_MspInit+0x158>)
 80010c2:	f000 ff39 	bl	8001f38 <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80010cc:	f7ff fefe 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a22      	ldr	r2, [pc, #136]	; (800115c <HAL_UART_MspInit+0x158>)
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <HAL_UART_MspInit+0x158>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_UART_MspInit+0x160>)
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_UART_MspInit+0x164>)
 80010e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_UART_MspInit+0x160>)
 80010e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <HAL_UART_MspInit+0x160>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_UART_MspInit+0x160>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_UART_MspInit+0x160>)
 80010f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_MspInit+0x160>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_UART_MspInit+0x160>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_UART_MspInit+0x160>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_UART_MspInit+0x160>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_UART_MspInit+0x160>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800111c:	4811      	ldr	r0, [pc, #68]	; (8001164 <HAL_UART_MspInit+0x160>)
 800111e:	f000 ff0b 	bl	8001f38 <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001128:	f7ff fed0 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_UART_MspInit+0x160>)
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_UART_MspInit+0x160>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 feb8 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 fed1 	bl	8001eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40004400 	.word	0x40004400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	200001a8 	.word	0x200001a8
 8001160:	400260a0 	.word	0x400260a0
 8001164:	20000208 	.word	0x20000208
 8001168:	40026088 	.word	0x40026088

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f914 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80011bc:	f000 feaf 	bl	8001f1e <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f001 fc55 	bl	8002a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Stream5_IRQHandler+0x10>)
 80011da:	f001 f845 	bl	8002268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000208 	.word	0x20000208

080011e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA1_Stream6_IRQHandler+0x10>)
 80011ee:	f001 f83b 	bl	8002268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001a8 	.word	0x200001a8

080011fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <ADC_IRQHandler+0x10>)
 8001202:	f000 fa11 	bl	8001628 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000008c 	.word	0x2000008c

08001210 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8001214:	2020      	movs	r0, #32
 8001216:	f001 fc2f 	bl	8002a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001226:	f002 f989 	bl	800353c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000d4 	.word	0x200000d4

08001234 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800123a:	f002 f97f 	bl	800353c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000011c 	.word	0x2000011c

08001248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <USART2_IRQHandler+0x10>)
 800124e:	f002 fc35 	bl	8003abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000164 	.word	0x20000164

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f003 fd00 	bl	8004c90 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20020000 	.word	0x20020000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20000300 	.word	0x20000300
 80012c4:	20000318 	.word	0x20000318

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001316:	f7ff ffd7 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f003 fcbf 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fbb5 	bl	8000a8c <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001330:	0800568c 	.word	0x0800568c
  ldr r2, =_sbss
 8001334:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001338:	20000318 	.word	0x20000318

0800133c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <DMA1_Stream0_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 fd97 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fdb0 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fdaf 	bl	8001f06 <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c0:	f000 fd77 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000304 	.word	0x20000304

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000304 	.word	0x20000304

08001424 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e033      	b.n	80014a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fd70 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d118      	bne.n	8001494 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800146a:	f023 0302 	bic.w	r3, r3, #2
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fb3a 	bl	8001af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	e001      	b.n	8001498 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Start_IT+0x1a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e0a1      	b.n	800160a <HAL_ADC_Start_IT+0x15e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d018      	beq.n	800150e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_ADC_Start_IT+0x16c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_ADC_Start_IT+0x170>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9a      	lsrs	r2, r3, #18
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001500:	e002      	b.n	8001508 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3b01      	subs	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d169      	bne.n	80015f0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001546:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800155a:	d106      	bne.n	800156a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f023 0206 	bic.w	r2, r3, #6
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
 8001568:	e002      	b.n	8001570 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_ADC_Start_IT+0x174>)
 800157a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d129      	bne.n	8001608 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	e020      	b.n	8001608 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <HAL_ADC_Start_IT+0x178>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d11b      	bne.n	8001608 <HAL_ADC_Start_IT+0x15c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d114      	bne.n	8001608 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	e00b      	b.n	8001608 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f043 0210 	orr.w	r2, r3, #16
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83
 8001620:	40012300 	.word	0x40012300
 8001624:	40012000 	.word	0x40012000

08001628 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d049      	beq.n	80016f2 <HAL_ADC_IRQHandler+0xca>
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d046      	beq.n	80016f2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d12b      	bne.n	80016e2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800168e:	2b00      	cmp	r3, #0
 8001690:	d127      	bne.n	80016e2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0220 	bic.w	r2, r2, #32
 80016bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7fe ff8a 	bl	80005fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0212 	mvn.w	r2, #18
 80016f0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001700:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d057      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x190>
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d054      	beq.n	80017b8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d139      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800174c:	2b00      	cmp	r3, #0
 800174e:	d12b      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d124      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11d      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001770:	2b00      	cmp	r3, #0
 8001772:	d119      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001782:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa9d 	bl	8001ce8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f06f 020c 	mvn.w	r2, #12
 80017b6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d017      	beq.n	80017fe <HAL_ADC_IRQHandler+0x1d6>
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d014      	beq.n	80017fe <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10d      	bne.n	80017fe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f837 	bl	8001862 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0201 	mvn.w	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800180c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d015      	beq.n	8001840 <HAL_ADC_IRQHandler+0x218>
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d012      	beq.n	8001840 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f06f 0220 	mvn.w	r2, #32
 800182e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f820 	bl	8001876 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f06f 0220 	mvn.w	r2, #32
 800183e:	601a      	str	r2, [r3, #0]
  }
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1c>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e113      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x244>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d925      	bls.n	8001904 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68d9      	ldr	r1, [r3, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43da      	mvns	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	400a      	ands	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	4603      	mov	r3, r0
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4403      	add	r3, r0
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	409a      	lsls	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	e022      	b.n	800194a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6919      	ldr	r1, [r3, #16]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	2207      	movs	r2, #7
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	400a      	ands	r2, r1
 8001926:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	4603      	mov	r3, r0
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4403      	add	r3, r0
 8001940:	409a      	lsls	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b06      	cmp	r3, #6
 8001950:	d824      	bhi.n	800199c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b05      	subs	r3, #5
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b05      	subs	r3, #5
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
 800199a:	e04c      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b23      	subs	r3, #35	; 0x23
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b23      	subs	r3, #35	; 0x23
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
 80019ec:	e023      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b41      	subs	r3, #65	; 0x41
 8001a00:	221f      	movs	r2, #31
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b41      	subs	r3, #65	; 0x41
 8001a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <HAL_ADC_ConfigChannel+0x250>)
 8001a38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <HAL_ADC_ConfigChannel+0x254>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d10f      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1d8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d10b      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_ADC_ConfigChannel+0x254>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d12b      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x23a>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_ADC_ConfigChannel+0x258>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d003      	beq.n	8001a80 <HAL_ADC_ConfigChannel+0x1f4>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b11      	cmp	r3, #17
 8001a7e:	d122      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_ADC_ConfigChannel+0x258>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d111      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_ADC_ConfigChannel+0x25c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_ADC_ConfigChannel+0x260>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	0c9a      	lsrs	r2, r3, #18
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f9      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	40012000 	.word	0x40012000
 8001ae4:	10000012 	.word	0x10000012
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af8:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <ADC_Init+0x1f0>)
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	021a      	lsls	r2, r3, #8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <ADC_Init+0x1f4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6899      	ldr	r1, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e00f      	b.n	8001bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0202 	bic.w	r2, r2, #2
 8001bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e1b      	ldrb	r3, [r3, #24]
 8001c08:	005a      	lsls	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	3b01      	subs	r3, #1
 8001c48:	035a      	lsls	r2, r3, #13
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e007      	b.n	8001c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	051a      	lsls	r2, r3, #20
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ca6:	025a      	lsls	r2, r3, #9
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	029a      	lsls	r2, r3, #10
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40012300 	.word	0x40012300
 8001ce4:	0f000001 	.word	0x0f000001

08001ce8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	; 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f22:	f000 f802 	bl	8001f2a <HAL_SYSTICK_Callback>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fa62 	bl	800140c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e099      	b.n	8002088 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f74:	e00f      	b.n	8001f96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f76:	f7ff fa49 	bl	800140c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d908      	bls.n	8001f96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e078      	b.n	8002088 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e8      	bne.n	8001f76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_DMA_Init+0x158>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f023 0307 	bic.w	r3, r3, #7
 8002016:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b04      	cmp	r3, #4
 8002028:	d117      	bne.n	800205a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fb01 	bl	8002644 <DMA_CheckFifoParam>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002056:	2301      	movs	r3, #1
 8002058:	e016      	b.n	8002088 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fab8 	bl	80025d8 <DMA_CalcBaseAndBitshift>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	223f      	movs	r2, #63	; 0x3f
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	f010803f 	.word	0xf010803f

08002094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_DMA_Start_IT+0x26>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e040      	b.n	800213c <HAL_DMA_Start_IT+0xa8>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d12f      	bne.n	800212e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fa4a 	bl	800257c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	223f      	movs	r2, #63	; 0x3f
 80020ee:	409a      	lsls	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0216 	orr.w	r2, r2, #22
 8002102:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e005      	b.n	800213a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002152:	f7ff f95b 	bl	800140c <HAL_GetTick>
 8002156:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d008      	beq.n	8002176 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e052      	b.n	800221c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0216 	bic.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002194:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_DMA_Abort+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c6:	e013      	b.n	80021f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c8:	f7ff f920 	bl	800140c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d90c      	bls.n	80021f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e015      	b.n	800221c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e4      	bne.n	80021c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	223f      	movs	r2, #63	; 0x3f
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d004      	beq.n	8002242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00c      	b.n	800225c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002274:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <HAL_DMA_IRQHandler+0x248>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a8e      	ldr	r2, [pc, #568]	; (80024b4 <HAL_DMA_IRQHandler+0x24c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2208      	movs	r2, #8
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0204 	bic.w	r2, r2, #4
 80022ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	2208      	movs	r2, #8
 80022c2:	409a      	lsls	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2201      	movs	r2, #1
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d012      	beq.n	800230a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	2201      	movs	r2, #1
 80022f8:	409a      	lsls	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2204      	movs	r2, #4
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d012      	beq.n	8002340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2204      	movs	r2, #4
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2210      	movs	r2, #16
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d043      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03c      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2210      	movs	r2, #16
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d018      	beq.n	80023aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d024      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
 8002396:	e01f      	b.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0208 	bic.w	r2, r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2220      	movs	r2, #32
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 808f 	beq.w	8002508 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8087 	beq.w	8002508 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	2220      	movs	r2, #32
 8002400:	409a      	lsls	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b05      	cmp	r3, #5
 8002410:	d136      	bne.n	8002480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0216 	bic.w	r2, r2, #22
 8002420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_DMA_IRQHandler+0x1da>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0208 	bic.w	r2, r2, #8
 8002450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	223f      	movs	r2, #63	; 0x3f
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002472:	2b00      	cmp	r3, #0
 8002474:	d07e      	beq.n	8002574 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	4798      	blx	r3
        }
        return;
 800247e:	e079      	b.n	8002574 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01d      	beq.n	80024ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e02c      	b.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000
 80024b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e01e      	b.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0210 	bic.w	r2, r2, #16
 80024e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	2b00      	cmp	r3, #0
 800250e:	d032      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d022      	beq.n	8002562 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2205      	movs	r2, #5
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	3301      	adds	r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	d307      	bcc.n	8002550 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f2      	bne.n	8002534 <HAL_DMA_IRQHandler+0x2cc>
 800254e:	e000      	b.n	8002552 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002550:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
 8002572:	e000      	b.n	8002576 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002574:	bf00      	nop
    }
  }
}
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002598:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d108      	bne.n	80025bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ba:	e007      	b.n	80025cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	60da      	str	r2, [r3, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3b10      	subs	r3, #16
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <DMA_CalcBaseAndBitshift+0x64>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <DMA_CalcBaseAndBitshift+0x68>)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d909      	bls.n	800261a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	1d1a      	adds	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	659a      	str	r2, [r3, #88]	; 0x58
 8002618:	e007      	b.n	800262a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002622:	f023 0303 	bic.w	r3, r3, #3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	aaaaaaab 	.word	0xaaaaaaab
 8002640:	08005640 	.word	0x08005640

08002644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11f      	bne.n	800269e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d856      	bhi.n	8002712 <DMA_CheckFifoParam+0xce>
 8002664:	a201      	add	r2, pc, #4	; (adr r2, 800266c <DMA_CheckFifoParam+0x28>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	0800267d 	.word	0x0800267d
 8002670:	0800268f 	.word	0x0800268f
 8002674:	0800267d 	.word	0x0800267d
 8002678:	08002713 	.word	0x08002713
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d046      	beq.n	8002716 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e043      	b.n	8002716 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002696:	d140      	bne.n	800271a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269c:	e03d      	b.n	800271a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a6:	d121      	bne.n	80026ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d837      	bhi.n	800271e <DMA_CheckFifoParam+0xda>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <DMA_CheckFifoParam+0x70>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026cb 	.word	0x080026cb
 80026bc:	080026c5 	.word	0x080026c5
 80026c0:	080026dd 	.word	0x080026dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      break;
 80026c8:	e030      	b.n	800272c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d025      	beq.n	8002722 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026da:	e022      	b.n	8002722 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e4:	d11f      	bne.n	8002726 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ea:	e01c      	b.n	8002726 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d903      	bls.n	80026fa <DMA_CheckFifoParam+0xb6>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d003      	beq.n	8002700 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026f8:	e018      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
      break;
 80026fe:	e015      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e00b      	b.n	800272a <DMA_CheckFifoParam+0xe6>
      break;
 8002712:	bf00      	nop
 8002714:	e00a      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e008      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e006      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
 8002720:	e004      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;   
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <DMA_CheckFifoParam+0xe8>
      break;
 800272a:	bf00      	nop
    }
  } 
  
  return status; 
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e159      	b.n	8002a0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	f040 8148 	bne.w	8002a06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d005      	beq.n	800278e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278a:	2b02      	cmp	r3, #2
 800278c:	d130      	bne.n	80027f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0201 	and.w	r2, r3, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d017      	beq.n	800282c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	2203      	movs	r2, #3
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d123      	bne.n	8002880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	08da      	lsrs	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3208      	adds	r2, #8
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0203 	and.w	r2, r3, #3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80a2 	beq.w	8002a06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <HAL_GPIO_Init+0x2e8>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a56      	ldr	r2, [pc, #344]	; (8002a24 <HAL_GPIO_Init+0x2e8>)
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_GPIO_Init+0x2e8>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_GPIO_Init+0x2ec>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a49      	ldr	r2, [pc, #292]	; (8002a2c <HAL_GPIO_Init+0x2f0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d019      	beq.n	800293e <HAL_GPIO_Init+0x202>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_GPIO_Init+0x2f4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0x1fe>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <HAL_GPIO_Init+0x2f8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00d      	beq.n	8002936 <HAL_GPIO_Init+0x1fa>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <HAL_GPIO_Init+0x2fc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <HAL_GPIO_Init+0x1f6>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <HAL_GPIO_Init+0x300>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_GPIO_Init+0x1f2>
 800292a:	2304      	movs	r3, #4
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x204>
 800292e:	2307      	movs	r3, #7
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x204>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x204>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x204>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x204>
 800293e:	2300      	movs	r3, #0
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f002 0203 	and.w	r2, r2, #3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x2ec>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_GPIO_Init+0x304>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002982:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <HAL_GPIO_Init+0x304>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_GPIO_Init+0x304>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ac:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_GPIO_Init+0x304>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_GPIO_Init+0x304>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_GPIO_Init+0x304>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_GPIO_Init+0x304>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a00:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <HAL_GPIO_Init+0x304>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f aea2 	bls.w	8002758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a60:	e003      	b.n	8002a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	619a      	str	r2, [r3, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fdca 	bl	8000630 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e267      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d075      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac6:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d00c      	beq.n	8002aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad2:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d112      	bne.n	8002b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ade:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aea:	d10b      	bne.n	8002b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	4b7e      	ldr	r3, [pc, #504]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d05b      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x108>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d157      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e242      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0c:	d106      	bne.n	8002b1c <HAL_RCC_OscConfig+0x74>
 8002b0e:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a75      	ldr	r2, [pc, #468]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e01d      	b.n	8002b58 <HAL_RCC_OscConfig+0xb0>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x98>
 8002b26:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a6f      	ldr	r2, [pc, #444]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6c      	ldr	r2, [pc, #432]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xb0>
 8002b40:	4b69      	ldr	r3, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a68      	ldr	r2, [pc, #416]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a65      	ldr	r2, [pc, #404]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fc54 	bl	800140c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe fc50 	bl	800140c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e207      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0xc0>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc40 	bl	800140c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe fc3c 	bl	800140c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1f3      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0xe8>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd6:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x152>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1c7      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4937      	ldr	r1, [pc, #220]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_OscConfig+0x244>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fbf5 	bl	800140c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fbf1 	bl	800140c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1a8      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_OscConfig+0x244>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fbd4 	bl	800140c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe fbd0 	bl	800140c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e187      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d036      	beq.n	8002d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d016      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <HAL_RCC_OscConfig+0x248>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fbb4 	bl	800140c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fbb0 	bl	800140c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e167      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x200>
 8002cc6:	e01b      	b.n	8002d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_OscConfig+0x248>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fb9d 	bl	800140c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	e00e      	b.n	8002cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fb99 	bl	800140c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d907      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e150      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	42470000 	.word	0x42470000
 8002cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b88      	ldr	r3, [pc, #544]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ea      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8097 	beq.w	8002e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d12:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	4b7d      	ldr	r3, [pc, #500]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a7c      	ldr	r2, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	4b7a      	ldr	r3, [pc, #488]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b77      	ldr	r3, [pc, #476]	; (8002f1c <HAL_RCC_OscConfig+0x474>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b74      	ldr	r3, [pc, #464]	; (8002f1c <HAL_RCC_OscConfig+0x474>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a73      	ldr	r2, [pc, #460]	; (8002f1c <HAL_RCC_OscConfig+0x474>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fb59 	bl	800140c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5e:	f7fe fb55 	bl	800140c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e10c      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x474>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2ea>
 8002d84:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d90:	e01c      	b.n	8002dcc <HAL_RCC_OscConfig+0x324>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b05      	cmp	r3, #5
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x30c>
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a5e      	ldr	r2, [pc, #376]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
 8002da6:	4b5c      	ldr	r3, [pc, #368]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a5b      	ldr	r2, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0x324>
 8002db4:	4b58      	ldr	r3, [pc, #352]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a57      	ldr	r2, [pc, #348]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	4b55      	ldr	r3, [pc, #340]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	4a54      	ldr	r2, [pc, #336]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	f023 0304 	bic.w	r3, r3, #4
 8002dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fb1a 	bl	800140c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb16 	bl	800140c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0cb      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ee      	beq.n	8002ddc <HAL_RCC_OscConfig+0x334>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e00:	f7fe fb04 	bl	800140c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe fb00 	bl	800140c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0b5      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a1 	beq.w	8002f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d05c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d141      	bne.n	8002ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_OscConfig+0x478>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fad4 	bl	800140c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe fad0 	bl	800140c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e087      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	491b      	ldr	r1, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x478>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe faa9 	bl	800140c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe faa5 	bl	800140c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e05c      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x416>
 8002edc:	e054      	b.n	8002f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_OscConfig+0x478>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fa92 	bl	800140c <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fa8e 	bl	800140c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e045      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_OscConfig+0x470>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x444>
 8002f0a:	e03d      	b.n	8002f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e038      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCC_OscConfig+0x4ec>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d028      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d121      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d11a      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0cc      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d90c      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b65      	ldr	r3, [pc, #404]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b63      	ldr	r3, [pc, #396]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0b8      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fec:	4b59      	ldr	r3, [pc, #356]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003004:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a52      	ldr	r2, [pc, #328]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800300e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	494d      	ldr	r1, [pc, #308]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d044      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d119      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07f      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d003      	beq.n	8003056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003052:	2b03      	cmp	r3, #3
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06f      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e067      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4b37      	ldr	r3, [pc, #220]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4934      	ldr	r1, [pc, #208]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003088:	f7fe f9c0 	bl	800140c <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fe f9bc 	bl	800140c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04f      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b25      	ldr	r3, [pc, #148]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d20c      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b22      	ldr	r3, [pc, #136]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e032      	b.n	8003146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4916      	ldr	r1, [pc, #88]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800311e:	f000 f821 	bl	8003164 <HAL_RCC_GetSysClockFreq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	490a      	ldr	r1, [pc, #40]	; (8003158 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe f920 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023c00 	.word	0x40023c00
 8003154:	40023800 	.word	0x40023800
 8003158:	08005628 	.word	0x08005628
 800315c:	20000000 	.word	0x20000000
 8003160:	20000004 	.word	0x20000004

08003164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b094      	sub	sp, #80	; 0x50
 800316a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	647b      	str	r3, [r7, #68]	; 0x44
 8003170:	2300      	movs	r3, #0
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003174:	2300      	movs	r3, #0
 8003176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317c:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCC_GetSysClockFreq+0x200>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b08      	cmp	r3, #8
 8003186:	d00d      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003188:	2b08      	cmp	r3, #8
 800318a:	f200 80e1 	bhi.w	8003350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x34>
 8003192:	2b04      	cmp	r3, #4
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x3a>
 8003196:	e0db      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b73      	ldr	r3, [pc, #460]	; (8003368 <HAL_RCC_GetSysClockFreq+0x204>)
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800319c:	e0db      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800319e:	4b73      	ldr	r3, [pc, #460]	; (800336c <HAL_RCC_GetSysClockFreq+0x208>)
 80031a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031a2:	e0d8      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a4:	4b6f      	ldr	r3, [pc, #444]	; (8003364 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ae:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ba:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_GetSysClockFreq+0x200>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	099b      	lsrs	r3, r3, #6
 80031c0:	2200      	movs	r2, #0
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
 80031ce:	2300      	movs	r3, #0
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
 80031d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	f04f 0000 	mov.w	r0, #0
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	0159      	lsls	r1, r3, #5
 80031e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e8:	0150      	lsls	r0, r2, #5
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4621      	mov	r1, r4
 80031f0:	1a51      	subs	r1, r2, r1
 80031f2:	6139      	str	r1, [r7, #16]
 80031f4:	4629      	mov	r1, r5
 80031f6:	eb63 0301 	sbc.w	r3, r3, r1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003208:	4659      	mov	r1, fp
 800320a:	018b      	lsls	r3, r1, #6
 800320c:	4651      	mov	r1, sl
 800320e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003212:	4651      	mov	r1, sl
 8003214:	018a      	lsls	r2, r1, #6
 8003216:	4651      	mov	r1, sl
 8003218:	ebb2 0801 	subs.w	r8, r2, r1
 800321c:	4659      	mov	r1, fp
 800321e:	eb63 0901 	sbc.w	r9, r3, r1
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4623      	mov	r3, r4
 800323c:	eb18 0303 	adds.w	r3, r8, r3
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	462b      	mov	r3, r5
 8003244:	eb49 0303 	adc.w	r3, r9, r3
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003256:	4629      	mov	r1, r5
 8003258:	024b      	lsls	r3, r1, #9
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003260:	4621      	mov	r1, r4
 8003262:	024a      	lsls	r2, r1, #9
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326a:	2200      	movs	r2, #0
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
 800326e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003274:	f7fd f804 	bl	8000280 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003280:	e058      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_RCC_GetSysClockFreq+0x200>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	2200      	movs	r2, #0
 800328a:	4618      	mov	r0, r3
 800328c:	4611      	mov	r1, r2
 800328e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
 8003298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800329c:	4642      	mov	r2, r8
 800329e:	464b      	mov	r3, r9
 80032a0:	f04f 0000 	mov.w	r0, #0
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	0159      	lsls	r1, r3, #5
 80032aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ae:	0150      	lsls	r0, r2, #5
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4641      	mov	r1, r8
 80032b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ba:	4649      	mov	r1, r9
 80032bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032d4:	ebb2 040a 	subs.w	r4, r2, sl
 80032d8:	eb63 050b 	sbc.w	r5, r3, fp
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	00eb      	lsls	r3, r5, #3
 80032e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ea:	00e2      	lsls	r2, r4, #3
 80032ec:	4614      	mov	r4, r2
 80032ee:	461d      	mov	r5, r3
 80032f0:	4643      	mov	r3, r8
 80032f2:	18e3      	adds	r3, r4, r3
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	464b      	mov	r3, r9
 80032f8:	eb45 0303 	adc.w	r3, r5, r3
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800330a:	4629      	mov	r1, r5
 800330c:	028b      	lsls	r3, r1, #10
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003314:	4621      	mov	r1, r4
 8003316:	028a      	lsls	r2, r1, #10
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331e:	2200      	movs	r2, #0
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	61fa      	str	r2, [r7, #28]
 8003324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003328:	f7fc ffaa 	bl	8000280 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_GetSysClockFreq+0x200>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	3301      	adds	r3, #1
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetSysClockFreq+0x204>)
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003358:	4618      	mov	r0, r3
 800335a:	3750      	adds	r7, #80	; 0x50
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	00f42400 	.word	0x00f42400
 800336c:	007a1200 	.word	0x007a1200

08003370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCC_GetHCLKFreq+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000000 	.word	0x20000000

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800338c:	f7ff fff0 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	0a9b      	lsrs	r3, r3, #10
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08005638 	.word	0x08005638

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033b4:	f7ff ffdc 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	0b5b      	lsrs	r3, r3, #13
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4903      	ldr	r1, [pc, #12]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800
 80033d4:	08005638 	.word	0x08005638

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e041      	b.n	800346e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fdba 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 f9c0 	bl	800379c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e044      	b.n	800351a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_TIM_Base_Start_IT+0xb0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x6c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d013      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x6c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_TIM_Base_Start_IT+0xb4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x6c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_TIM_Base_Start_IT+0xb8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x6c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a17      	ldr	r2, [pc, #92]	; (8003534 <HAL_TIM_Base_Start_IT+0xbc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x6c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIM_Base_Start_IT+0xc0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d111      	bne.n	8003508 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b06      	cmp	r3, #6
 80034f4:	d010      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	e007      	b.n	8003518 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40014000 	.word	0x40014000

0800353c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0202 	mvn.w	r2, #2
 8003568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8ee 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8e0 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8f1 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0204 	mvn.w	r2, #4
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8c4 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8b6 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8c7 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b08      	cmp	r3, #8
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0208 	mvn.w	r2, #8
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f89a 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f88c 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f89d 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b10      	cmp	r3, #16
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b10      	cmp	r3, #16
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0210 	mvn.w	r2, #16
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2208      	movs	r2, #8
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f870 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f862 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f873 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10e      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0201 	mvn.w	r2, #1
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd f810 	bl	80006e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b80      	cmp	r3, #128	; 0x80
 80036da:	d107      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8e2 	bl	80038b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f838 	bl	8003788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	d10e      	bne.n	8003744 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b20      	cmp	r3, #32
 8003732:	d107      	bne.n	8003744 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0220 	mvn.w	r2, #32
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8ac 	bl	800389c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <TIM_Base_SetConfig+0xe4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00f      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d00b      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a31      	ldr	r2, [pc, #196]	; (8003884 <TIM_Base_SetConfig+0xe8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a30      	ldr	r2, [pc, #192]	; (8003888 <TIM_Base_SetConfig+0xec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a2f      	ldr	r2, [pc, #188]	; (800388c <TIM_Base_SetConfig+0xf0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d108      	bne.n	80037e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <TIM_Base_SetConfig+0xe4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01b      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d017      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a22      	ldr	r2, [pc, #136]	; (8003884 <TIM_Base_SetConfig+0xe8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <TIM_Base_SetConfig+0xec>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00f      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <TIM_Base_SetConfig+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <TIM_Base_SetConfig+0xf4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <TIM_Base_SetConfig+0xf8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <TIM_Base_SetConfig+0xfc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d108      	bne.n	8003838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <TIM_Base_SetConfig+0xe4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d103      	bne.n	800386c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	615a      	str	r2, [r3, #20]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e03f      	b.n	8003956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fb8a 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 ff4d 	bl	80047a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800391c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800392c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	d165      	bne.n	8003a46 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_UART_Transmit_DMA+0x26>
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e05e      	b.n	8003a48 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_UART_Transmit_DMA+0x38>
 8003994:	2302      	movs	r3, #2
 8003996:	e057      	b.n	8003a48 <HAL_UART_Transmit_DMA+0xe8>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2221      	movs	r2, #33	; 0x21
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_UART_Transmit_DMA+0xf0>)
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <HAL_UART_Transmit_DMA+0xf4>)
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	4a20      	ldr	r2, [pc, #128]	; (8003a58 <HAL_UART_Transmit_DMA+0xf8>)
 80039d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	2200      	movs	r2, #0
 80039de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80039e0:	f107 0308 	add.w	r3, r7, #8
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3304      	adds	r3, #4
 80039f4:	461a      	mov	r2, r3
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	f7fe fb4c 	bl	8002094 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a04:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8003a30:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6a39      	ldr	r1, [r7, #32]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3730      	adds	r7, #48	; 0x30
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	08004041 	.word	0x08004041
 8003a54:	080040db 	.word	0x080040db
 8003a58:	08004253 	.word	0x08004253

08003a5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d11d      	bne.n	8003ab2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_UART_Receive_DMA+0x26>
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e016      	b.n	8003ab4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Receive_DMA+0x38>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e00f      	b.n	8003ab4 <HAL_UART_Receive_DMA+0x58>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fc1d 	bl	80042e8 <UART_Start_Receive_DMA>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	e000      	b.n	8003ab4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b0ba      	sub	sp, #232	; 0xe8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_UART_IRQHandler+0x66>
 8003b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fd89 	bl	8004632 <UART_Receive_IT>
      return;
 8003b20:	e256      	b.n	8003fd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80de 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x22c>
 8003b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80d1 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xae>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_UART_IRQHandler+0xd2>
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_UART_IRQHandler+0xf6>
 8003b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_UART_IRQHandler+0x126>
 8003bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f043 0208 	orr.w	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 81ed 	beq.w	8003fc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_UART_IRQHandler+0x14e>
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fd14 	bl	8004632 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_UART_IRQHandler+0x17a>
 8003c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d04f      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fc1c 	bl	8004474 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d141      	bne.n	8003cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1d9      	bne.n	8003c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d013      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	; (8003e98 <HAL_UART_IRQHandler+0x3dc>)
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe faba 	bl	8002224 <HAL_DMA_Abort_IT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	e00e      	b.n	8003ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9a4 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	e00a      	b.n	8003ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f9a0 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd4:	e006      	b.n	8003ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f99c 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ce2:	e170      	b.n	8003fc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	bf00      	nop
    return;
 8003ce6:	e16e      	b.n	8003fc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	f040 814a 	bne.w	8003f86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8143 	beq.w	8003f86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 813c 	beq.w	8003f86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	f040 80b4 	bne.w	8003e9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8140 	beq.w	8003fca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d52:	429a      	cmp	r2, r3
 8003d54:	f080 8139 	bcs.w	8003fca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6a:	f000 8088 	beq.w	8003e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1d9      	bne.n	8003d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e1      	bne.n	8003dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e3      	bne.n	8003df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e60:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e3      	bne.n	8003e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe f963 	bl	8002144 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8ca 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e94:	e099      	b.n	8003fca <HAL_UART_IRQHandler+0x50e>
 8003e96:	bf00      	nop
 8003e98:	0800453b 	.word	0x0800453b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 808b 	beq.w	8003fce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8086 	beq.w	8003fce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ee6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e3      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	623b      	str	r3, [r7, #32]
   return(result);
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e3      	bne.n	8003efa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0310 	bic.w	r3, r3, #16
 8003f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f64:	61fa      	str	r2, [r7, #28]
 8003f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	617b      	str	r3, [r7, #20]
   return(result);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e3      	bne.n	8003f40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f852 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f84:	e023      	b.n	8003fce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x4ea>
 8003f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fadf 	bl	8004562 <UART_Transmit_IT>
    return;
 8003fa4:	e014      	b.n	8003fd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x514>
 8003fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb1f 	bl	8004602 <UART_EndTransmit_IT>
    return;
 8003fc4:	e004      	b.n	8003fd0 <HAL_UART_IRQHandler+0x514>
    return;
 8003fc6:	bf00      	nop
 8003fc8:	e002      	b.n	8003fd0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <HAL_UART_IRQHandler+0x514>
      return;
 8003fce:	bf00      	nop
  }
}
 8003fd0:	37e8      	adds	r7, #232	; 0xe8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop

08003fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b090      	sub	sp, #64	; 0x40
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d137      	bne.n	80040cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	2200      	movs	r2, #0
 8004060:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	623b      	str	r3, [r7, #32]
   return(result);
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
 800407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004082:	633a      	str	r2, [r7, #48]	; 0x30
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b6:	61fa      	str	r2, [r7, #28]
 80040b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	617b      	str	r3, [r7, #20]
   return(result);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040ca:	e002      	b.n	80040d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ce:	f7ff ff83 	bl	8003fd8 <HAL_UART_TxCpltCallback>
}
 80040d2:	bf00      	nop
 80040d4:	3740      	adds	r7, #64	; 0x40
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ff7f 	bl	8003fec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b09c      	sub	sp, #112	; 0x70
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d172      	bne.n	80041f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	2200      	movs	r2, #0
 8004116:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004138:	65ba      	str	r2, [r7, #88]	; 0x58
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800413e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	667b      	str	r3, [r7, #100]	; 0x64
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800416c:	647a      	str	r2, [r7, #68]	; 0x44
 800416e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	623b      	str	r3, [r7, #32]
   return(result);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004196:	663b      	str	r3, [r7, #96]	; 0x60
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a0:	633a      	str	r2, [r7, #48]	; 0x30
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d119      	bne.n	80041f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0310 	bic.w	r3, r3, #16
 80041da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	617b      	str	r3, [r7, #20]
   return(result);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e5      	bne.n	80041c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d106      	bne.n	800420e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004202:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004204:	4619      	mov	r1, r3
 8004206:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004208:	f7ff ff0e 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800420c:	e002      	b.n	8004214 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800420e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004210:	f7fc f9b8 	bl	8000584 <HAL_UART_RxCpltCallback>
}
 8004214:	bf00      	nop
 8004216:	3770      	adds	r7, #112	; 0x70
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	2b01      	cmp	r3, #1
 8004230:	d108      	bne.n	8004244 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	4619      	mov	r1, r3
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fef3 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004242:	e002      	b.n	800424a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff fedb 	bl	8004000 <HAL_UART_RxHalfCpltCallback>
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b80      	cmp	r3, #128	; 0x80
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b21      	cmp	r3, #33	; 0x21
 8004284:	d108      	bne.n	8004298 <UART_DMAError+0x46>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004292:	68b8      	ldr	r0, [r7, #8]
 8004294:	f000 f8c6 	bl	8004424 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b22      	cmp	r3, #34	; 0x22
 80042b8:	d108      	bne.n	80042cc <UART_DMAError+0x7a>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f000 f8d4 	bl	8004474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	f043 0210 	orr.w	r2, r3, #16
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7ff fe9b 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b098      	sub	sp, #96	; 0x60
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2222      	movs	r2, #34	; 0x22
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	4a40      	ldr	r2, [pc, #256]	; (8004418 <UART_Start_Receive_DMA+0x130>)
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	4a3f      	ldr	r2, [pc, #252]	; (800441c <UART_Start_Receive_DMA+0x134>)
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	4a3e      	ldr	r2, [pc, #248]	; (8004420 <UART_Start_Receive_DMA+0x138>)
 8004326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	2200      	movs	r2, #0
 800432e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	f7fd fea4 	bl	8002094 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d019      	beq.n	80043a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	65bb      	str	r3, [r7, #88]	; 0x58
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004392:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004394:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e5      	bne.n	8004372 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	657b      	str	r3, [r7, #84]	; 0x54
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e5      	bne.n	80043a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3314      	adds	r3, #20
 80043e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f0:	653b      	str	r3, [r7, #80]	; 0x50
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3314      	adds	r3, #20
 80043f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043fa:	627a      	str	r2, [r7, #36]	; 0x24
 80043fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6a39      	ldr	r1, [r7, #32]
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	61fb      	str	r3, [r7, #28]
   return(result);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3760      	adds	r7, #96	; 0x60
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	080040f7 	.word	0x080040f7
 800441c:	0800421d 	.word	0x0800421d
 8004420:	08004253 	.word	0x08004253

08004424 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	60bb      	str	r3, [r7, #8]
   return(result);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	61ba      	str	r2, [r7, #24]
 800444e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6979      	ldr	r1, [r7, #20]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004468:	bf00      	nop
 800446a:	3724      	adds	r7, #36	; 0x24
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b095      	sub	sp, #84	; 0x54
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800449c:	643a      	str	r2, [r7, #64]	; 0x40
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d119      	bne.n	8004520 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f023 0310 	bic.w	r3, r3, #16
 8004502:	647b      	str	r3, [r7, #68]	; 0x44
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800450c:	61ba      	str	r2, [r7, #24]
 800450e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	613b      	str	r3, [r7, #16]
   return(result);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800452e:	bf00      	nop
 8004530:	3754      	adds	r7, #84	; 0x54
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff fd5d 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b21      	cmp	r3, #33	; 0x21
 8004574:	d13e      	bne.n	80045f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	d114      	bne.n	80045aa <UART_Transmit_IT+0x48>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d110      	bne.n	80045aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	1c9a      	adds	r2, r3, #2
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]
 80045a8:	e008      	b.n	80045bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6211      	str	r1, [r2, #32]
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4619      	mov	r1, r3
 80045ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10f      	bne.n	80045f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004618:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fcd8 	bl	8003fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08c      	sub	sp, #48	; 0x30
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b22      	cmp	r3, #34	; 0x22
 8004644:	f040 80ab 	bne.w	800479e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d117      	bne.n	8004682 <UART_Receive_IT+0x50>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	b29a      	uxth	r2, r3
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	1c9a      	adds	r2, r3, #2
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
 8004680:	e026      	b.n	80046d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d007      	beq.n	80046a6 <UART_Receive_IT+0x74>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <UART_Receive_IT+0x82>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e008      	b.n	80046c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29b      	uxth	r3, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	4619      	mov	r1, r3
 80046de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d15a      	bne.n	800479a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0220 	bic.w	r2, r2, #32
 80046f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	2b01      	cmp	r3, #1
 8004722:	d135      	bne.n	8004790 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	613b      	str	r3, [r7, #16]
   return(result);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f023 0310 	bic.w	r3, r3, #16
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	623a      	str	r2, [r7, #32]
 800474c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	69f9      	ldr	r1, [r7, #28]
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	61bb      	str	r3, [r7, #24]
   return(result);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b10      	cmp	r3, #16
 800476a:	d10a      	bne.n	8004782 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fc4d 	bl	8004028 <HAL_UARTEx_RxEventCallback>
 800478e:	e002      	b.n	8004796 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fb fef7 	bl	8000584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e002      	b.n	80047a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3730      	adds	r7, #48	; 0x30
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b0c0      	sub	sp, #256	; 0x100
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	68d9      	ldr	r1, [r3, #12]
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	ea40 0301 	orr.w	r3, r0, r1
 80047d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	431a      	orrs	r2, r3
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004800:	f021 010c 	bic.w	r1, r1, #12
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800480e:	430b      	orrs	r3, r1
 8004810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	6999      	ldr	r1, [r3, #24]
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	ea40 0301 	orr.w	r3, r0, r1
 800482e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <UART_SetConfig+0x2cc>)
 8004838:	429a      	cmp	r2, r3
 800483a:	d005      	beq.n	8004848 <UART_SetConfig+0xa0>
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b8d      	ldr	r3, [pc, #564]	; (8004a78 <UART_SetConfig+0x2d0>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d104      	bne.n	8004852 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7fe fdb2 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 800484c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004850:	e003      	b.n	800485a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004852:	f7fe fd99 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8004856:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	f040 810c 	bne.w	8004a80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800486c:	2200      	movs	r2, #0
 800486e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800487a:	4622      	mov	r2, r4
 800487c:	462b      	mov	r3, r5
 800487e:	1891      	adds	r1, r2, r2
 8004880:	65b9      	str	r1, [r7, #88]	; 0x58
 8004882:	415b      	adcs	r3, r3
 8004884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800488a:	4621      	mov	r1, r4
 800488c:	eb12 0801 	adds.w	r8, r2, r1
 8004890:	4629      	mov	r1, r5
 8004892:	eb43 0901 	adc.w	r9, r3, r1
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048aa:	4690      	mov	r8, r2
 80048ac:	4699      	mov	r9, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	eb18 0303 	adds.w	r3, r8, r3
 80048b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b8:	462b      	mov	r3, r5
 80048ba:	eb49 0303 	adc.w	r3, r9, r3
 80048be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048d6:	460b      	mov	r3, r1
 80048d8:	18db      	adds	r3, r3, r3
 80048da:	653b      	str	r3, [r7, #80]	; 0x50
 80048dc:	4613      	mov	r3, r2
 80048de:	eb42 0303 	adc.w	r3, r2, r3
 80048e2:	657b      	str	r3, [r7, #84]	; 0x54
 80048e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048ec:	f7fb fcc8 	bl	8000280 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <UART_SetConfig+0x2d4>)
 80048f6:	fba3 2302 	umull	r2, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	011c      	lsls	r4, r3, #4
 80048fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004908:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800490c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	1891      	adds	r1, r2, r2
 8004916:	64b9      	str	r1, [r7, #72]	; 0x48
 8004918:	415b      	adcs	r3, r3
 800491a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800491c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004920:	4641      	mov	r1, r8
 8004922:	eb12 0a01 	adds.w	sl, r2, r1
 8004926:	4649      	mov	r1, r9
 8004928:	eb43 0b01 	adc.w	fp, r3, r1
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800493c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004940:	4692      	mov	sl, r2
 8004942:	469b      	mov	fp, r3
 8004944:	4643      	mov	r3, r8
 8004946:	eb1a 0303 	adds.w	r3, sl, r3
 800494a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800494e:	464b      	mov	r3, r9
 8004950:	eb4b 0303 	adc.w	r3, fp, r3
 8004954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004964:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004968:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800496c:	460b      	mov	r3, r1
 800496e:	18db      	adds	r3, r3, r3
 8004970:	643b      	str	r3, [r7, #64]	; 0x40
 8004972:	4613      	mov	r3, r2
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
 800497a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800497e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004982:	f7fb fc7d 	bl	8000280 <__aeabi_uldivmod>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4611      	mov	r1, r2
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <UART_SetConfig+0x2d4>)
 800498e:	fba3 2301 	umull	r2, r3, r3, r1
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2264      	movs	r2, #100	; 0x64
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	1acb      	subs	r3, r1, r3
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049a2:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <UART_SetConfig+0x2d4>)
 80049a4:	fba3 2302 	umull	r2, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b0:	441c      	add	r4, r3
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80049cc:	415b      	adcs	r3, r3
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049d4:	4641      	mov	r1, r8
 80049d6:	1851      	adds	r1, r2, r1
 80049d8:	6339      	str	r1, [r7, #48]	; 0x30
 80049da:	4649      	mov	r1, r9
 80049dc:	414b      	adcs	r3, r1
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049ec:	4659      	mov	r1, fp
 80049ee:	00cb      	lsls	r3, r1, #3
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f6:	4651      	mov	r1, sl
 80049f8:	00ca      	lsls	r2, r1, #3
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	4642      	mov	r2, r8
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a08:	464b      	mov	r3, r9
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a28:	460b      	mov	r3, r1
 8004a2a:	18db      	adds	r3, r3, r3
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	4613      	mov	r3, r2
 8004a30:	eb42 0303 	adc.w	r3, r2, r3
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a3e:	f7fb fc1f 	bl	8000280 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x2d4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <UART_SetConfig+0x2d4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 0207 	and.w	r2, r3, #7
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4422      	add	r2, r4
 8004a6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a70:	e105      	b.n	8004c7e <UART_SetConfig+0x4d6>
 8004a72:	bf00      	nop
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a92:	4642      	mov	r2, r8
 8004a94:	464b      	mov	r3, r9
 8004a96:	1891      	adds	r1, r2, r2
 8004a98:	6239      	str	r1, [r7, #32]
 8004a9a:	415b      	adcs	r3, r3
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	1854      	adds	r4, r2, r1
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	eb43 0501 	adc.w	r5, r3, r1
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	00eb      	lsls	r3, r5, #3
 8004ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aba:	00e2      	lsls	r2, r4, #3
 8004abc:	4614      	mov	r4, r2
 8004abe:	461d      	mov	r5, r3
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	18e3      	adds	r3, r4, r3
 8004ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ac8:	464b      	mov	r3, r9
 8004aca:	eb45 0303 	adc.w	r3, r5, r3
 8004ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aee:	4629      	mov	r1, r5
 8004af0:	008b      	lsls	r3, r1, #2
 8004af2:	4621      	mov	r1, r4
 8004af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af8:	4621      	mov	r1, r4
 8004afa:	008a      	lsls	r2, r1, #2
 8004afc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b00:	f7fb fbbe 	bl	8000280 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	011c      	lsls	r4, r3, #4
 8004b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b24:	4642      	mov	r2, r8
 8004b26:	464b      	mov	r3, r9
 8004b28:	1891      	adds	r1, r2, r2
 8004b2a:	61b9      	str	r1, [r7, #24]
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b34:	4641      	mov	r1, r8
 8004b36:	1851      	adds	r1, r2, r1
 8004b38:	6139      	str	r1, [r7, #16]
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	414b      	adcs	r3, r1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	00cb      	lsls	r3, r1, #3
 8004b50:	4651      	mov	r1, sl
 8004b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b56:	4651      	mov	r1, sl
 8004b58:	00ca      	lsls	r2, r1, #3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4642      	mov	r2, r8
 8004b62:	189b      	adds	r3, r3, r2
 8004b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b68:	464b      	mov	r3, r9
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	008b      	lsls	r3, r1, #2
 8004b90:	4641      	mov	r1, r8
 8004b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b96:	4641      	mov	r1, r8
 8004b98:	008a      	lsls	r2, r1, #2
 8004b9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b9e:	f7fb fb6f 	bl	8000280 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	2164      	movs	r1, #100	; 0x64
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	3332      	adds	r3, #50	; 0x32
 8004bba:	4a34      	ldr	r2, [pc, #208]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc6:	441c      	add	r4, r3
 8004bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bcc:	2200      	movs	r2, #0
 8004bce:	673b      	str	r3, [r7, #112]	; 0x70
 8004bd0:	677a      	str	r2, [r7, #116]	; 0x74
 8004bd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bd6:	4642      	mov	r2, r8
 8004bd8:	464b      	mov	r3, r9
 8004bda:	1891      	adds	r1, r2, r2
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	415b      	adcs	r3, r3
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be6:	4641      	mov	r1, r8
 8004be8:	1851      	adds	r1, r2, r1
 8004bea:	6039      	str	r1, [r7, #0]
 8004bec:	4649      	mov	r1, r9
 8004bee:	414b      	adcs	r3, r1
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bfe:	4659      	mov	r1, fp
 8004c00:	00cb      	lsls	r3, r1, #3
 8004c02:	4651      	mov	r1, sl
 8004c04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c08:	4651      	mov	r1, sl
 8004c0a:	00ca      	lsls	r2, r1, #3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4603      	mov	r3, r0
 8004c12:	4642      	mov	r2, r8
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c18:	464b      	mov	r3, r9
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	eb42 0303 	adc.w	r3, r2, r3
 8004c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c2c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	008b      	lsls	r3, r1, #2
 8004c3e:	4641      	mov	r1, r8
 8004c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c44:	4641      	mov	r1, r8
 8004c46:	008a      	lsls	r2, r1, #2
 8004c48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c4c:	f7fb fb18 	bl	8000280 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004c56:	fba3 1302 	umull	r1, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2164      	movs	r1, #100	; 0x64
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	3332      	adds	r3, #50	; 0x32
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4422      	add	r2, r4
 8004c7c:	609a      	str	r2, [r3, #8]
}
 8004c7e:	bf00      	nop
 8004c80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	51eb851f 	.word	0x51eb851f

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <__libc_init_array+0x40>)
 8004cae:	4c0c      	ldr	r4, [pc, #48]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb0:	f000 fca2 	bl	80055f8 <_init>
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	2600      	movs	r6, #0
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08005684 	.word	0x08005684
 8004cd8:	08005684 	.word	0x08005684
 8004cdc:	08005684 	.word	0x08005684
 8004ce0:	08005688 	.word	0x08005688

08004ce4 <memset>:
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <memset+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf2:	e7f9      	b.n	8004ce8 <memset+0x4>

08004cf4 <sniprintf>:
 8004cf4:	b40c      	push	{r2, r3}
 8004cf6:	b530      	push	{r4, r5, lr}
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <sniprintf+0x64>)
 8004cfa:	1e0c      	subs	r4, r1, #0
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	b09d      	sub	sp, #116	; 0x74
 8004d00:	da08      	bge.n	8004d14 <sniprintf+0x20>
 8004d02:	238b      	movs	r3, #139	; 0x8b
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d0a:	b01d      	add	sp, #116	; 0x74
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	b002      	add	sp, #8
 8004d12:	4770      	bx	lr
 8004d14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d1c:	bf14      	ite	ne
 8004d1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004d22:	4623      	moveq	r3, r4
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	9307      	str	r3, [sp, #28]
 8004d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d2c:	9002      	str	r0, [sp, #8]
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d36:	ab21      	add	r3, sp, #132	; 0x84
 8004d38:	a902      	add	r1, sp, #8
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f000 f869 	bl	8004e14 <_svfiprintf_r>
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	bfbc      	itt	lt
 8004d46:	238b      	movlt	r3, #139	; 0x8b
 8004d48:	602b      	strlt	r3, [r5, #0]
 8004d4a:	2c00      	cmp	r4, #0
 8004d4c:	d0dd      	beq.n	8004d0a <sniprintf+0x16>
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e7d9      	b.n	8004d0a <sniprintf+0x16>
 8004d56:	bf00      	nop
 8004d58:	2000000c 	.word	0x2000000c

08004d5c <__ssputs_r>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	688e      	ldr	r6, [r1, #8]
 8004d62:	429e      	cmp	r6, r3
 8004d64:	4682      	mov	sl, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	4690      	mov	r8, r2
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	d838      	bhi.n	8004de0 <__ssputs_r+0x84>
 8004d6e:	898a      	ldrh	r2, [r1, #12]
 8004d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d74:	d032      	beq.n	8004ddc <__ssputs_r+0x80>
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	6909      	ldr	r1, [r1, #16]
 8004d7a:	eba5 0901 	sub.w	r9, r5, r1
 8004d7e:	6965      	ldr	r5, [r4, #20]
 8004d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d88:	3301      	adds	r3, #1
 8004d8a:	444b      	add	r3, r9
 8004d8c:	106d      	asrs	r5, r5, #1
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	bf38      	it	cc
 8004d92:	461d      	movcc	r5, r3
 8004d94:	0553      	lsls	r3, r2, #21
 8004d96:	d531      	bpl.n	8004dfc <__ssputs_r+0xa0>
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f000 fb63 	bl	8005464 <_malloc_r>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	b950      	cbnz	r0, 8004db8 <__ssputs_r+0x5c>
 8004da2:	230c      	movs	r3, #12
 8004da4:	f8ca 3000 	str.w	r3, [sl]
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	6921      	ldr	r1, [r4, #16]
 8004dba:	464a      	mov	r2, r9
 8004dbc:	f000 fabe 	bl	800533c <memcpy>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	6126      	str	r6, [r4, #16]
 8004dce:	6165      	str	r5, [r4, #20]
 8004dd0:	444e      	add	r6, r9
 8004dd2:	eba5 0509 	sub.w	r5, r5, r9
 8004dd6:	6026      	str	r6, [r4, #0]
 8004dd8:	60a5      	str	r5, [r4, #8]
 8004dda:	463e      	mov	r6, r7
 8004ddc:	42be      	cmp	r6, r7
 8004dde:	d900      	bls.n	8004de2 <__ssputs_r+0x86>
 8004de0:	463e      	mov	r6, r7
 8004de2:	6820      	ldr	r0, [r4, #0]
 8004de4:	4632      	mov	r2, r6
 8004de6:	4641      	mov	r1, r8
 8004de8:	f000 fab6 	bl	8005358 <memmove>
 8004dec:	68a3      	ldr	r3, [r4, #8]
 8004dee:	1b9b      	subs	r3, r3, r6
 8004df0:	60a3      	str	r3, [r4, #8]
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	4433      	add	r3, r6
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e7db      	b.n	8004db4 <__ssputs_r+0x58>
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	f000 fba5 	bl	800554c <_realloc_r>
 8004e02:	4606      	mov	r6, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1e1      	bne.n	8004dcc <__ssputs_r+0x70>
 8004e08:	6921      	ldr	r1, [r4, #16]
 8004e0a:	4650      	mov	r0, sl
 8004e0c:	f000 fabe 	bl	800538c <_free_r>
 8004e10:	e7c7      	b.n	8004da2 <__ssputs_r+0x46>
	...

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	4698      	mov	r8, r3
 8004e1a:	898b      	ldrh	r3, [r1, #12]
 8004e1c:	061b      	lsls	r3, r3, #24
 8004e1e:	b09d      	sub	sp, #116	; 0x74
 8004e20:	4607      	mov	r7, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	4614      	mov	r4, r2
 8004e26:	d50e      	bpl.n	8004e46 <_svfiprintf_r+0x32>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b963      	cbnz	r3, 8004e46 <_svfiprintf_r+0x32>
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	f000 fb19 	bl	8005464 <_malloc_r>
 8004e32:	6028      	str	r0, [r5, #0]
 8004e34:	6128      	str	r0, [r5, #16]
 8004e36:	b920      	cbnz	r0, 8004e42 <_svfiprintf_r+0x2e>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e40:	e0d1      	b.n	8004fe6 <_svfiprintf_r+0x1d2>
 8004e42:	2340      	movs	r3, #64	; 0x40
 8004e44:	616b      	str	r3, [r5, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e54:	2330      	movs	r3, #48	; 0x30
 8004e56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005000 <_svfiprintf_r+0x1ec>
 8004e5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e5e:	f04f 0901 	mov.w	r9, #1
 8004e62:	4623      	mov	r3, r4
 8004e64:	469a      	mov	sl, r3
 8004e66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6a:	b10a      	cbz	r2, 8004e70 <_svfiprintf_r+0x5c>
 8004e6c:	2a25      	cmp	r2, #37	; 0x25
 8004e6e:	d1f9      	bne.n	8004e64 <_svfiprintf_r+0x50>
 8004e70:	ebba 0b04 	subs.w	fp, sl, r4
 8004e74:	d00b      	beq.n	8004e8e <_svfiprintf_r+0x7a>
 8004e76:	465b      	mov	r3, fp
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff ff6d 	bl	8004d5c <__ssputs_r>
 8004e82:	3001      	adds	r0, #1
 8004e84:	f000 80aa 	beq.w	8004fdc <_svfiprintf_r+0x1c8>
 8004e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e8a:	445a      	add	r2, fp
 8004e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80a2 	beq.w	8004fdc <_svfiprintf_r+0x1c8>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea2:	f10a 0a01 	add.w	sl, sl, #1
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	9307      	str	r3, [sp, #28]
 8004eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eae:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb0:	4654      	mov	r4, sl
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb8:	4851      	ldr	r0, [pc, #324]	; (8005000 <_svfiprintf_r+0x1ec>)
 8004eba:	f7fb f991 	bl	80001e0 <memchr>
 8004ebe:	9a04      	ldr	r2, [sp, #16]
 8004ec0:	b9d8      	cbnz	r0, 8004efa <_svfiprintf_r+0xe6>
 8004ec2:	06d0      	lsls	r0, r2, #27
 8004ec4:	bf44      	itt	mi
 8004ec6:	2320      	movmi	r3, #32
 8004ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ecc:	0711      	lsls	r1, r2, #28
 8004ece:	bf44      	itt	mi
 8004ed0:	232b      	movmi	r3, #43	; 0x2b
 8004ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eda:	2b2a      	cmp	r3, #42	; 0x2a
 8004edc:	d015      	beq.n	8004f0a <_svfiprintf_r+0xf6>
 8004ede:	9a07      	ldr	r2, [sp, #28]
 8004ee0:	4654      	mov	r4, sl
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f04f 0c0a 	mov.w	ip, #10
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eee:	3b30      	subs	r3, #48	; 0x30
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d94e      	bls.n	8004f92 <_svfiprintf_r+0x17e>
 8004ef4:	b1b0      	cbz	r0, 8004f24 <_svfiprintf_r+0x110>
 8004ef6:	9207      	str	r2, [sp, #28]
 8004ef8:	e014      	b.n	8004f24 <_svfiprintf_r+0x110>
 8004efa:	eba0 0308 	sub.w	r3, r0, r8
 8004efe:	fa09 f303 	lsl.w	r3, r9, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	9304      	str	r3, [sp, #16]
 8004f06:	46a2      	mov	sl, r4
 8004f08:	e7d2      	b.n	8004eb0 <_svfiprintf_r+0x9c>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	1d19      	adds	r1, r3, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	9103      	str	r1, [sp, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfbb      	ittet	lt
 8004f16:	425b      	neglt	r3, r3
 8004f18:	f042 0202 	orrlt.w	r2, r2, #2
 8004f1c:	9307      	strge	r3, [sp, #28]
 8004f1e:	9307      	strlt	r3, [sp, #28]
 8004f20:	bfb8      	it	lt
 8004f22:	9204      	strlt	r2, [sp, #16]
 8004f24:	7823      	ldrb	r3, [r4, #0]
 8004f26:	2b2e      	cmp	r3, #46	; 0x2e
 8004f28:	d10c      	bne.n	8004f44 <_svfiprintf_r+0x130>
 8004f2a:	7863      	ldrb	r3, [r4, #1]
 8004f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2e:	d135      	bne.n	8004f9c <_svfiprintf_r+0x188>
 8004f30:	9b03      	ldr	r3, [sp, #12]
 8004f32:	1d1a      	adds	r2, r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	9203      	str	r2, [sp, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfb8      	it	lt
 8004f3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f40:	3402      	adds	r4, #2
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005010 <_svfiprintf_r+0x1fc>
 8004f48:	7821      	ldrb	r1, [r4, #0]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	4650      	mov	r0, sl
 8004f4e:	f7fb f947 	bl	80001e0 <memchr>
 8004f52:	b140      	cbz	r0, 8004f66 <_svfiprintf_r+0x152>
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	4303      	orrs	r3, r0
 8004f62:	3401      	adds	r4, #1
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6a:	4826      	ldr	r0, [pc, #152]	; (8005004 <_svfiprintf_r+0x1f0>)
 8004f6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f70:	2206      	movs	r2, #6
 8004f72:	f7fb f935 	bl	80001e0 <memchr>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d038      	beq.n	8004fec <_svfiprintf_r+0x1d8>
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <_svfiprintf_r+0x1f4>)
 8004f7c:	bb1b      	cbnz	r3, 8004fc6 <_svfiprintf_r+0x1b2>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	3307      	adds	r3, #7
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	3308      	adds	r3, #8
 8004f88:	9303      	str	r3, [sp, #12]
 8004f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8c:	4433      	add	r3, r6
 8004f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f90:	e767      	b.n	8004e62 <_svfiprintf_r+0x4e>
 8004f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f96:	460c      	mov	r4, r1
 8004f98:	2001      	movs	r0, #1
 8004f9a:	e7a5      	b.n	8004ee8 <_svfiprintf_r+0xd4>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	3401      	adds	r4, #1
 8004fa0:	9305      	str	r3, [sp, #20]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f04f 0c0a 	mov.w	ip, #10
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fae:	3a30      	subs	r2, #48	; 0x30
 8004fb0:	2a09      	cmp	r2, #9
 8004fb2:	d903      	bls.n	8004fbc <_svfiprintf_r+0x1a8>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0c5      	beq.n	8004f44 <_svfiprintf_r+0x130>
 8004fb8:	9105      	str	r1, [sp, #20]
 8004fba:	e7c3      	b.n	8004f44 <_svfiprintf_r+0x130>
 8004fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7f0      	b.n	8004fa8 <_svfiprintf_r+0x194>
 8004fc6:	ab03      	add	r3, sp, #12
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462a      	mov	r2, r5
 8004fcc:	4b0f      	ldr	r3, [pc, #60]	; (800500c <_svfiprintf_r+0x1f8>)
 8004fce:	a904      	add	r1, sp, #16
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f3af 8000 	nop.w
 8004fd6:	1c42      	adds	r2, r0, #1
 8004fd8:	4606      	mov	r6, r0
 8004fda:	d1d6      	bne.n	8004f8a <_svfiprintf_r+0x176>
 8004fdc:	89ab      	ldrh	r3, [r5, #12]
 8004fde:	065b      	lsls	r3, r3, #25
 8004fe0:	f53f af2c 	bmi.w	8004e3c <_svfiprintf_r+0x28>
 8004fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe6:	b01d      	add	sp, #116	; 0x74
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <_svfiprintf_r+0x1f8>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	f000 f87a 	bl	80050f0 <_printf_i>
 8004ffc:	e7eb      	b.n	8004fd6 <_svfiprintf_r+0x1c2>
 8004ffe:	bf00      	nop
 8005000:	08005648 	.word	0x08005648
 8005004:	08005652 	.word	0x08005652
 8005008:	00000000 	.word	0x00000000
 800500c:	08004d5d 	.word	0x08004d5d
 8005010:	0800564e 	.word	0x0800564e

08005014 <_printf_common>:
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	4616      	mov	r6, r2
 800501a:	4699      	mov	r9, r3
 800501c:	688a      	ldr	r2, [r1, #8]
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005024:	4293      	cmp	r3, r2
 8005026:	bfb8      	it	lt
 8005028:	4613      	movlt	r3, r2
 800502a:	6033      	str	r3, [r6, #0]
 800502c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005030:	4607      	mov	r7, r0
 8005032:	460c      	mov	r4, r1
 8005034:	b10a      	cbz	r2, 800503a <_printf_common+0x26>
 8005036:	3301      	adds	r3, #1
 8005038:	6033      	str	r3, [r6, #0]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	0699      	lsls	r1, r3, #26
 800503e:	bf42      	ittt	mi
 8005040:	6833      	ldrmi	r3, [r6, #0]
 8005042:	3302      	addmi	r3, #2
 8005044:	6033      	strmi	r3, [r6, #0]
 8005046:	6825      	ldr	r5, [r4, #0]
 8005048:	f015 0506 	ands.w	r5, r5, #6
 800504c:	d106      	bne.n	800505c <_printf_common+0x48>
 800504e:	f104 0a19 	add.w	sl, r4, #25
 8005052:	68e3      	ldr	r3, [r4, #12]
 8005054:	6832      	ldr	r2, [r6, #0]
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	42ab      	cmp	r3, r5
 800505a:	dc26      	bgt.n	80050aa <_printf_common+0x96>
 800505c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005060:	1e13      	subs	r3, r2, #0
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	bf18      	it	ne
 8005066:	2301      	movne	r3, #1
 8005068:	0692      	lsls	r2, r2, #26
 800506a:	d42b      	bmi.n	80050c4 <_printf_common+0xb0>
 800506c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005070:	4649      	mov	r1, r9
 8005072:	4638      	mov	r0, r7
 8005074:	47c0      	blx	r8
 8005076:	3001      	adds	r0, #1
 8005078:	d01e      	beq.n	80050b8 <_printf_common+0xa4>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	68e5      	ldr	r5, [r4, #12]
 800507e:	6832      	ldr	r2, [r6, #0]
 8005080:	f003 0306 	and.w	r3, r3, #6
 8005084:	2b04      	cmp	r3, #4
 8005086:	bf08      	it	eq
 8005088:	1aad      	subeq	r5, r5, r2
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	bf0c      	ite	eq
 8005090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005094:	2500      	movne	r5, #0
 8005096:	4293      	cmp	r3, r2
 8005098:	bfc4      	itt	gt
 800509a:	1a9b      	subgt	r3, r3, r2
 800509c:	18ed      	addgt	r5, r5, r3
 800509e:	2600      	movs	r6, #0
 80050a0:	341a      	adds	r4, #26
 80050a2:	42b5      	cmp	r5, r6
 80050a4:	d11a      	bne.n	80050dc <_printf_common+0xc8>
 80050a6:	2000      	movs	r0, #0
 80050a8:	e008      	b.n	80050bc <_printf_common+0xa8>
 80050aa:	2301      	movs	r3, #1
 80050ac:	4652      	mov	r2, sl
 80050ae:	4649      	mov	r1, r9
 80050b0:	4638      	mov	r0, r7
 80050b2:	47c0      	blx	r8
 80050b4:	3001      	adds	r0, #1
 80050b6:	d103      	bne.n	80050c0 <_printf_common+0xac>
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c0:	3501      	adds	r5, #1
 80050c2:	e7c6      	b.n	8005052 <_printf_common+0x3e>
 80050c4:	18e1      	adds	r1, r4, r3
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	2030      	movs	r0, #48	; 0x30
 80050ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ce:	4422      	add	r2, r4
 80050d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d8:	3302      	adds	r3, #2
 80050da:	e7c7      	b.n	800506c <_printf_common+0x58>
 80050dc:	2301      	movs	r3, #1
 80050de:	4622      	mov	r2, r4
 80050e0:	4649      	mov	r1, r9
 80050e2:	4638      	mov	r0, r7
 80050e4:	47c0      	blx	r8
 80050e6:	3001      	adds	r0, #1
 80050e8:	d0e6      	beq.n	80050b8 <_printf_common+0xa4>
 80050ea:	3601      	adds	r6, #1
 80050ec:	e7d9      	b.n	80050a2 <_printf_common+0x8e>
	...

080050f0 <_printf_i>:
 80050f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	7e0f      	ldrb	r7, [r1, #24]
 80050f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050f8:	2f78      	cmp	r7, #120	; 0x78
 80050fa:	4691      	mov	r9, r2
 80050fc:	4680      	mov	r8, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	469a      	mov	sl, r3
 8005102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005106:	d807      	bhi.n	8005118 <_printf_i+0x28>
 8005108:	2f62      	cmp	r7, #98	; 0x62
 800510a:	d80a      	bhi.n	8005122 <_printf_i+0x32>
 800510c:	2f00      	cmp	r7, #0
 800510e:	f000 80d8 	beq.w	80052c2 <_printf_i+0x1d2>
 8005112:	2f58      	cmp	r7, #88	; 0x58
 8005114:	f000 80a3 	beq.w	800525e <_printf_i+0x16e>
 8005118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800511c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005120:	e03a      	b.n	8005198 <_printf_i+0xa8>
 8005122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005126:	2b15      	cmp	r3, #21
 8005128:	d8f6      	bhi.n	8005118 <_printf_i+0x28>
 800512a:	a101      	add	r1, pc, #4	; (adr r1, 8005130 <_printf_i+0x40>)
 800512c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005130:	08005189 	.word	0x08005189
 8005134:	0800519d 	.word	0x0800519d
 8005138:	08005119 	.word	0x08005119
 800513c:	08005119 	.word	0x08005119
 8005140:	08005119 	.word	0x08005119
 8005144:	08005119 	.word	0x08005119
 8005148:	0800519d 	.word	0x0800519d
 800514c:	08005119 	.word	0x08005119
 8005150:	08005119 	.word	0x08005119
 8005154:	08005119 	.word	0x08005119
 8005158:	08005119 	.word	0x08005119
 800515c:	080052a9 	.word	0x080052a9
 8005160:	080051cd 	.word	0x080051cd
 8005164:	0800528b 	.word	0x0800528b
 8005168:	08005119 	.word	0x08005119
 800516c:	08005119 	.word	0x08005119
 8005170:	080052cb 	.word	0x080052cb
 8005174:	08005119 	.word	0x08005119
 8005178:	080051cd 	.word	0x080051cd
 800517c:	08005119 	.word	0x08005119
 8005180:	08005119 	.word	0x08005119
 8005184:	08005293 	.word	0x08005293
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	602a      	str	r2, [r5, #0]
 8005190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005198:	2301      	movs	r3, #1
 800519a:	e0a3      	b.n	80052e4 <_printf_i+0x1f4>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	6829      	ldr	r1, [r5, #0]
 80051a0:	0606      	lsls	r6, r0, #24
 80051a2:	f101 0304 	add.w	r3, r1, #4
 80051a6:	d50a      	bpl.n	80051be <_printf_i+0xce>
 80051a8:	680e      	ldr	r6, [r1, #0]
 80051aa:	602b      	str	r3, [r5, #0]
 80051ac:	2e00      	cmp	r6, #0
 80051ae:	da03      	bge.n	80051b8 <_printf_i+0xc8>
 80051b0:	232d      	movs	r3, #45	; 0x2d
 80051b2:	4276      	negs	r6, r6
 80051b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b8:	485e      	ldr	r0, [pc, #376]	; (8005334 <_printf_i+0x244>)
 80051ba:	230a      	movs	r3, #10
 80051bc:	e019      	b.n	80051f2 <_printf_i+0x102>
 80051be:	680e      	ldr	r6, [r1, #0]
 80051c0:	602b      	str	r3, [r5, #0]
 80051c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051c6:	bf18      	it	ne
 80051c8:	b236      	sxthne	r6, r6
 80051ca:	e7ef      	b.n	80051ac <_printf_i+0xbc>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	1d19      	adds	r1, r3, #4
 80051d2:	6029      	str	r1, [r5, #0]
 80051d4:	0601      	lsls	r1, r0, #24
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0xec>
 80051d8:	681e      	ldr	r6, [r3, #0]
 80051da:	e002      	b.n	80051e2 <_printf_i+0xf2>
 80051dc:	0646      	lsls	r6, r0, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0xe8>
 80051e0:	881e      	ldrh	r6, [r3, #0]
 80051e2:	4854      	ldr	r0, [pc, #336]	; (8005334 <_printf_i+0x244>)
 80051e4:	2f6f      	cmp	r7, #111	; 0x6f
 80051e6:	bf0c      	ite	eq
 80051e8:	2308      	moveq	r3, #8
 80051ea:	230a      	movne	r3, #10
 80051ec:	2100      	movs	r1, #0
 80051ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051f2:	6865      	ldr	r5, [r4, #4]
 80051f4:	60a5      	str	r5, [r4, #8]
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	bfa2      	ittt	ge
 80051fa:	6821      	ldrge	r1, [r4, #0]
 80051fc:	f021 0104 	bicge.w	r1, r1, #4
 8005200:	6021      	strge	r1, [r4, #0]
 8005202:	b90e      	cbnz	r6, 8005208 <_printf_i+0x118>
 8005204:	2d00      	cmp	r5, #0
 8005206:	d04d      	beq.n	80052a4 <_printf_i+0x1b4>
 8005208:	4615      	mov	r5, r2
 800520a:	fbb6 f1f3 	udiv	r1, r6, r3
 800520e:	fb03 6711 	mls	r7, r3, r1, r6
 8005212:	5dc7      	ldrb	r7, [r0, r7]
 8005214:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005218:	4637      	mov	r7, r6
 800521a:	42bb      	cmp	r3, r7
 800521c:	460e      	mov	r6, r1
 800521e:	d9f4      	bls.n	800520a <_printf_i+0x11a>
 8005220:	2b08      	cmp	r3, #8
 8005222:	d10b      	bne.n	800523c <_printf_i+0x14c>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07de      	lsls	r6, r3, #31
 8005228:	d508      	bpl.n	800523c <_printf_i+0x14c>
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	6861      	ldr	r1, [r4, #4]
 800522e:	4299      	cmp	r1, r3
 8005230:	bfde      	ittt	le
 8005232:	2330      	movle	r3, #48	; 0x30
 8005234:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005238:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800523c:	1b52      	subs	r2, r2, r5
 800523e:	6122      	str	r2, [r4, #16]
 8005240:	f8cd a000 	str.w	sl, [sp]
 8005244:	464b      	mov	r3, r9
 8005246:	aa03      	add	r2, sp, #12
 8005248:	4621      	mov	r1, r4
 800524a:	4640      	mov	r0, r8
 800524c:	f7ff fee2 	bl	8005014 <_printf_common>
 8005250:	3001      	adds	r0, #1
 8005252:	d14c      	bne.n	80052ee <_printf_i+0x1fe>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005258:	b004      	add	sp, #16
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525e:	4835      	ldr	r0, [pc, #212]	; (8005334 <_printf_i+0x244>)
 8005260:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005264:	6829      	ldr	r1, [r5, #0]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	f851 6b04 	ldr.w	r6, [r1], #4
 800526c:	6029      	str	r1, [r5, #0]
 800526e:	061d      	lsls	r5, r3, #24
 8005270:	d514      	bpl.n	800529c <_printf_i+0x1ac>
 8005272:	07df      	lsls	r7, r3, #31
 8005274:	bf44      	itt	mi
 8005276:	f043 0320 	orrmi.w	r3, r3, #32
 800527a:	6023      	strmi	r3, [r4, #0]
 800527c:	b91e      	cbnz	r6, 8005286 <_printf_i+0x196>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f023 0320 	bic.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2310      	movs	r3, #16
 8005288:	e7b0      	b.n	80051ec <_printf_i+0xfc>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f043 0320 	orr.w	r3, r3, #32
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	2378      	movs	r3, #120	; 0x78
 8005294:	4828      	ldr	r0, [pc, #160]	; (8005338 <_printf_i+0x248>)
 8005296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800529a:	e7e3      	b.n	8005264 <_printf_i+0x174>
 800529c:	0659      	lsls	r1, r3, #25
 800529e:	bf48      	it	mi
 80052a0:	b2b6      	uxthmi	r6, r6
 80052a2:	e7e6      	b.n	8005272 <_printf_i+0x182>
 80052a4:	4615      	mov	r5, r2
 80052a6:	e7bb      	b.n	8005220 <_printf_i+0x130>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	6826      	ldr	r6, [r4, #0]
 80052ac:	6961      	ldr	r1, [r4, #20]
 80052ae:	1d18      	adds	r0, r3, #4
 80052b0:	6028      	str	r0, [r5, #0]
 80052b2:	0635      	lsls	r5, r6, #24
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0x1cc>
 80052b8:	6019      	str	r1, [r3, #0]
 80052ba:	e002      	b.n	80052c2 <_printf_i+0x1d2>
 80052bc:	0670      	lsls	r0, r6, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0x1c8>
 80052c0:	8019      	strh	r1, [r3, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	4615      	mov	r5, r2
 80052c8:	e7ba      	b.n	8005240 <_printf_i+0x150>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	1d1a      	adds	r2, r3, #4
 80052ce:	602a      	str	r2, [r5, #0]
 80052d0:	681d      	ldr	r5, [r3, #0]
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	2100      	movs	r1, #0
 80052d6:	4628      	mov	r0, r5
 80052d8:	f7fa ff82 	bl	80001e0 <memchr>
 80052dc:	b108      	cbz	r0, 80052e2 <_printf_i+0x1f2>
 80052de:	1b40      	subs	r0, r0, r5
 80052e0:	6060      	str	r0, [r4, #4]
 80052e2:	6863      	ldr	r3, [r4, #4]
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	2300      	movs	r3, #0
 80052e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ec:	e7a8      	b.n	8005240 <_printf_i+0x150>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	462a      	mov	r2, r5
 80052f2:	4649      	mov	r1, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	47d0      	blx	sl
 80052f8:	3001      	adds	r0, #1
 80052fa:	d0ab      	beq.n	8005254 <_printf_i+0x164>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	079b      	lsls	r3, r3, #30
 8005300:	d413      	bmi.n	800532a <_printf_i+0x23a>
 8005302:	68e0      	ldr	r0, [r4, #12]
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	4298      	cmp	r0, r3
 8005308:	bfb8      	it	lt
 800530a:	4618      	movlt	r0, r3
 800530c:	e7a4      	b.n	8005258 <_printf_i+0x168>
 800530e:	2301      	movs	r3, #1
 8005310:	4632      	mov	r2, r6
 8005312:	4649      	mov	r1, r9
 8005314:	4640      	mov	r0, r8
 8005316:	47d0      	blx	sl
 8005318:	3001      	adds	r0, #1
 800531a:	d09b      	beq.n	8005254 <_printf_i+0x164>
 800531c:	3501      	adds	r5, #1
 800531e:	68e3      	ldr	r3, [r4, #12]
 8005320:	9903      	ldr	r1, [sp, #12]
 8005322:	1a5b      	subs	r3, r3, r1
 8005324:	42ab      	cmp	r3, r5
 8005326:	dcf2      	bgt.n	800530e <_printf_i+0x21e>
 8005328:	e7eb      	b.n	8005302 <_printf_i+0x212>
 800532a:	2500      	movs	r5, #0
 800532c:	f104 0619 	add.w	r6, r4, #25
 8005330:	e7f5      	b.n	800531e <_printf_i+0x22e>
 8005332:	bf00      	nop
 8005334:	08005659 	.word	0x08005659
 8005338:	0800566a 	.word	0x0800566a

0800533c <memcpy>:
 800533c:	440a      	add	r2, r1
 800533e:	4291      	cmp	r1, r2
 8005340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005344:	d100      	bne.n	8005348 <memcpy+0xc>
 8005346:	4770      	bx	lr
 8005348:	b510      	push	{r4, lr}
 800534a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800534e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005352:	4291      	cmp	r1, r2
 8005354:	d1f9      	bne.n	800534a <memcpy+0xe>
 8005356:	bd10      	pop	{r4, pc}

08005358 <memmove>:
 8005358:	4288      	cmp	r0, r1
 800535a:	b510      	push	{r4, lr}
 800535c:	eb01 0402 	add.w	r4, r1, r2
 8005360:	d902      	bls.n	8005368 <memmove+0x10>
 8005362:	4284      	cmp	r4, r0
 8005364:	4623      	mov	r3, r4
 8005366:	d807      	bhi.n	8005378 <memmove+0x20>
 8005368:	1e43      	subs	r3, r0, #1
 800536a:	42a1      	cmp	r1, r4
 800536c:	d008      	beq.n	8005380 <memmove+0x28>
 800536e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005376:	e7f8      	b.n	800536a <memmove+0x12>
 8005378:	4402      	add	r2, r0
 800537a:	4601      	mov	r1, r0
 800537c:	428a      	cmp	r2, r1
 800537e:	d100      	bne.n	8005382 <memmove+0x2a>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800538a:	e7f7      	b.n	800537c <memmove+0x24>

0800538c <_free_r>:
 800538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800538e:	2900      	cmp	r1, #0
 8005390:	d044      	beq.n	800541c <_free_r+0x90>
 8005392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005396:	9001      	str	r0, [sp, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f1a1 0404 	sub.w	r4, r1, #4
 800539e:	bfb8      	it	lt
 80053a0:	18e4      	addlt	r4, r4, r3
 80053a2:	f000 f913 	bl	80055cc <__malloc_lock>
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <_free_r+0x94>)
 80053a8:	9801      	ldr	r0, [sp, #4]
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	b933      	cbnz	r3, 80053bc <_free_r+0x30>
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	6014      	str	r4, [r2, #0]
 80053b2:	b003      	add	sp, #12
 80053b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053b8:	f000 b90e 	b.w	80055d8 <__malloc_unlock>
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d908      	bls.n	80053d2 <_free_r+0x46>
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	1961      	adds	r1, r4, r5
 80053c4:	428b      	cmp	r3, r1
 80053c6:	bf01      	itttt	eq
 80053c8:	6819      	ldreq	r1, [r3, #0]
 80053ca:	685b      	ldreq	r3, [r3, #4]
 80053cc:	1949      	addeq	r1, r1, r5
 80053ce:	6021      	streq	r1, [r4, #0]
 80053d0:	e7ed      	b.n	80053ae <_free_r+0x22>
 80053d2:	461a      	mov	r2, r3
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	b10b      	cbz	r3, 80053dc <_free_r+0x50>
 80053d8:	42a3      	cmp	r3, r4
 80053da:	d9fa      	bls.n	80053d2 <_free_r+0x46>
 80053dc:	6811      	ldr	r1, [r2, #0]
 80053de:	1855      	adds	r5, r2, r1
 80053e0:	42a5      	cmp	r5, r4
 80053e2:	d10b      	bne.n	80053fc <_free_r+0x70>
 80053e4:	6824      	ldr	r4, [r4, #0]
 80053e6:	4421      	add	r1, r4
 80053e8:	1854      	adds	r4, r2, r1
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	d1e0      	bne.n	80053b2 <_free_r+0x26>
 80053f0:	681c      	ldr	r4, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	6053      	str	r3, [r2, #4]
 80053f6:	4421      	add	r1, r4
 80053f8:	6011      	str	r1, [r2, #0]
 80053fa:	e7da      	b.n	80053b2 <_free_r+0x26>
 80053fc:	d902      	bls.n	8005404 <_free_r+0x78>
 80053fe:	230c      	movs	r3, #12
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	e7d6      	b.n	80053b2 <_free_r+0x26>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1961      	adds	r1, r4, r5
 8005408:	428b      	cmp	r3, r1
 800540a:	bf04      	itt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	bf04      	itt	eq
 8005414:	1949      	addeq	r1, r1, r5
 8005416:	6021      	streq	r1, [r4, #0]
 8005418:	6054      	str	r4, [r2, #4]
 800541a:	e7ca      	b.n	80053b2 <_free_r+0x26>
 800541c:	b003      	add	sp, #12
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	20000308 	.word	0x20000308

08005424 <sbrk_aligned>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	4e0e      	ldr	r6, [pc, #56]	; (8005460 <sbrk_aligned+0x3c>)
 8005428:	460c      	mov	r4, r1
 800542a:	6831      	ldr	r1, [r6, #0]
 800542c:	4605      	mov	r5, r0
 800542e:	b911      	cbnz	r1, 8005436 <sbrk_aligned+0x12>
 8005430:	f000 f8bc 	bl	80055ac <_sbrk_r>
 8005434:	6030      	str	r0, [r6, #0]
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f8b7 	bl	80055ac <_sbrk_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d00a      	beq.n	8005458 <sbrk_aligned+0x34>
 8005442:	1cc4      	adds	r4, r0, #3
 8005444:	f024 0403 	bic.w	r4, r4, #3
 8005448:	42a0      	cmp	r0, r4
 800544a:	d007      	beq.n	800545c <sbrk_aligned+0x38>
 800544c:	1a21      	subs	r1, r4, r0
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f8ac 	bl	80055ac <_sbrk_r>
 8005454:	3001      	adds	r0, #1
 8005456:	d101      	bne.n	800545c <sbrk_aligned+0x38>
 8005458:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800545c:	4620      	mov	r0, r4
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	2000030c 	.word	0x2000030c

08005464 <_malloc_r>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	1ccd      	adds	r5, r1, #3
 800546a:	f025 0503 	bic.w	r5, r5, #3
 800546e:	3508      	adds	r5, #8
 8005470:	2d0c      	cmp	r5, #12
 8005472:	bf38      	it	cc
 8005474:	250c      	movcc	r5, #12
 8005476:	2d00      	cmp	r5, #0
 8005478:	4607      	mov	r7, r0
 800547a:	db01      	blt.n	8005480 <_malloc_r+0x1c>
 800547c:	42a9      	cmp	r1, r5
 800547e:	d905      	bls.n	800548c <_malloc_r+0x28>
 8005480:	230c      	movs	r3, #12
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	2600      	movs	r6, #0
 8005486:	4630      	mov	r0, r6
 8005488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548c:	4e2e      	ldr	r6, [pc, #184]	; (8005548 <_malloc_r+0xe4>)
 800548e:	f000 f89d 	bl	80055cc <__malloc_lock>
 8005492:	6833      	ldr	r3, [r6, #0]
 8005494:	461c      	mov	r4, r3
 8005496:	bb34      	cbnz	r4, 80054e6 <_malloc_r+0x82>
 8005498:	4629      	mov	r1, r5
 800549a:	4638      	mov	r0, r7
 800549c:	f7ff ffc2 	bl	8005424 <sbrk_aligned>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	4604      	mov	r4, r0
 80054a4:	d14d      	bne.n	8005542 <_malloc_r+0xde>
 80054a6:	6834      	ldr	r4, [r6, #0]
 80054a8:	4626      	mov	r6, r4
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d140      	bne.n	8005530 <_malloc_r+0xcc>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	4631      	mov	r1, r6
 80054b2:	4638      	mov	r0, r7
 80054b4:	eb04 0803 	add.w	r8, r4, r3
 80054b8:	f000 f878 	bl	80055ac <_sbrk_r>
 80054bc:	4580      	cmp	r8, r0
 80054be:	d13a      	bne.n	8005536 <_malloc_r+0xd2>
 80054c0:	6821      	ldr	r1, [r4, #0]
 80054c2:	3503      	adds	r5, #3
 80054c4:	1a6d      	subs	r5, r5, r1
 80054c6:	f025 0503 	bic.w	r5, r5, #3
 80054ca:	3508      	adds	r5, #8
 80054cc:	2d0c      	cmp	r5, #12
 80054ce:	bf38      	it	cc
 80054d0:	250c      	movcc	r5, #12
 80054d2:	4629      	mov	r1, r5
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff ffa5 	bl	8005424 <sbrk_aligned>
 80054da:	3001      	adds	r0, #1
 80054dc:	d02b      	beq.n	8005536 <_malloc_r+0xd2>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	442b      	add	r3, r5
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	e00e      	b.n	8005504 <_malloc_r+0xa0>
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	1b52      	subs	r2, r2, r5
 80054ea:	d41e      	bmi.n	800552a <_malloc_r+0xc6>
 80054ec:	2a0b      	cmp	r2, #11
 80054ee:	d916      	bls.n	800551e <_malloc_r+0xba>
 80054f0:	1961      	adds	r1, r4, r5
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	6025      	str	r5, [r4, #0]
 80054f6:	bf18      	it	ne
 80054f8:	6059      	strne	r1, [r3, #4]
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	bf08      	it	eq
 80054fe:	6031      	streq	r1, [r6, #0]
 8005500:	5162      	str	r2, [r4, r5]
 8005502:	604b      	str	r3, [r1, #4]
 8005504:	4638      	mov	r0, r7
 8005506:	f104 060b 	add.w	r6, r4, #11
 800550a:	f000 f865 	bl	80055d8 <__malloc_unlock>
 800550e:	f026 0607 	bic.w	r6, r6, #7
 8005512:	1d23      	adds	r3, r4, #4
 8005514:	1af2      	subs	r2, r6, r3
 8005516:	d0b6      	beq.n	8005486 <_malloc_r+0x22>
 8005518:	1b9b      	subs	r3, r3, r6
 800551a:	50a3      	str	r3, [r4, r2]
 800551c:	e7b3      	b.n	8005486 <_malloc_r+0x22>
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	42a3      	cmp	r3, r4
 8005522:	bf0c      	ite	eq
 8005524:	6032      	streq	r2, [r6, #0]
 8005526:	605a      	strne	r2, [r3, #4]
 8005528:	e7ec      	b.n	8005504 <_malloc_r+0xa0>
 800552a:	4623      	mov	r3, r4
 800552c:	6864      	ldr	r4, [r4, #4]
 800552e:	e7b2      	b.n	8005496 <_malloc_r+0x32>
 8005530:	4634      	mov	r4, r6
 8005532:	6876      	ldr	r6, [r6, #4]
 8005534:	e7b9      	b.n	80054aa <_malloc_r+0x46>
 8005536:	230c      	movs	r3, #12
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4638      	mov	r0, r7
 800553c:	f000 f84c 	bl	80055d8 <__malloc_unlock>
 8005540:	e7a1      	b.n	8005486 <_malloc_r+0x22>
 8005542:	6025      	str	r5, [r4, #0]
 8005544:	e7de      	b.n	8005504 <_malloc_r+0xa0>
 8005546:	bf00      	nop
 8005548:	20000308 	.word	0x20000308

0800554c <_realloc_r>:
 800554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	4680      	mov	r8, r0
 8005552:	4614      	mov	r4, r2
 8005554:	460e      	mov	r6, r1
 8005556:	b921      	cbnz	r1, 8005562 <_realloc_r+0x16>
 8005558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555c:	4611      	mov	r1, r2
 800555e:	f7ff bf81 	b.w	8005464 <_malloc_r>
 8005562:	b92a      	cbnz	r2, 8005570 <_realloc_r+0x24>
 8005564:	f7ff ff12 	bl	800538c <_free_r>
 8005568:	4625      	mov	r5, r4
 800556a:	4628      	mov	r0, r5
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	f000 f838 	bl	80055e4 <_malloc_usable_size_r>
 8005574:	4284      	cmp	r4, r0
 8005576:	4607      	mov	r7, r0
 8005578:	d802      	bhi.n	8005580 <_realloc_r+0x34>
 800557a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800557e:	d812      	bhi.n	80055a6 <_realloc_r+0x5a>
 8005580:	4621      	mov	r1, r4
 8005582:	4640      	mov	r0, r8
 8005584:	f7ff ff6e 	bl	8005464 <_malloc_r>
 8005588:	4605      	mov	r5, r0
 800558a:	2800      	cmp	r0, #0
 800558c:	d0ed      	beq.n	800556a <_realloc_r+0x1e>
 800558e:	42bc      	cmp	r4, r7
 8005590:	4622      	mov	r2, r4
 8005592:	4631      	mov	r1, r6
 8005594:	bf28      	it	cs
 8005596:	463a      	movcs	r2, r7
 8005598:	f7ff fed0 	bl	800533c <memcpy>
 800559c:	4631      	mov	r1, r6
 800559e:	4640      	mov	r0, r8
 80055a0:	f7ff fef4 	bl	800538c <_free_r>
 80055a4:	e7e1      	b.n	800556a <_realloc_r+0x1e>
 80055a6:	4635      	mov	r5, r6
 80055a8:	e7df      	b.n	800556a <_realloc_r+0x1e>
	...

080055ac <_sbrk_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d06      	ldr	r5, [pc, #24]	; (80055c8 <_sbrk_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fb fe50 	bl	800125c <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_sbrk_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_sbrk_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000310 	.word	0x20000310

080055cc <__malloc_lock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__malloc_lock+0x8>)
 80055ce:	f000 b811 	b.w	80055f4 <__retarget_lock_acquire_recursive>
 80055d2:	bf00      	nop
 80055d4:	20000314 	.word	0x20000314

080055d8 <__malloc_unlock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__malloc_unlock+0x8>)
 80055da:	f000 b80c 	b.w	80055f6 <__retarget_lock_release_recursive>
 80055de:	bf00      	nop
 80055e0:	20000314 	.word	0x20000314

080055e4 <_malloc_usable_size_r>:
 80055e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e8:	1f18      	subs	r0, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfbc      	itt	lt
 80055ee:	580b      	ldrlt	r3, [r1, r0]
 80055f0:	18c0      	addlt	r0, r0, r3
 80055f2:	4770      	bx	lr

080055f4 <__retarget_lock_acquire_recursive>:
 80055f4:	4770      	bx	lr

080055f6 <__retarget_lock_release_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <_init>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr

08005604 <_fini>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	bf00      	nop
 8005608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560a:	bc08      	pop	{r3}
 800560c:	469e      	mov	lr, r3
 800560e:	4770      	bx	lr
