
HTTP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f1b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005640  0801f368  0801f368  0002f368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080249a8  080249a8  000401f8  2**0
                  CONTENTS
  4 .ARM          00000008  080249a8  080249a8  000349a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080249b0  080249b0  000401f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080249b0  080249b0  000349b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080249b4  080249b4  000349b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080249b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401f8  2**0
                  CONTENTS
 10 .bss          00013498  200001f8  200001f8  000401f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013690  20013690  000401f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY
 14 .debug_info   000394e0  00000000  00000000  0004026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008eb1  00000000  00000000  0007974b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002960  00000000  00000000  00082600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000020cc  00000000  00000000  00084f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a1ab  00000000  00000000  0008702c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045564  00000000  00000000  000c11d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001107cd  00000000  00000000  0010673b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bcf4  00000000  00000000  00216f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00222bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f34c 	.word	0x0801f34c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0801f34c 	.word	0x0801f34c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Servo_Init>:


TIM_HandleTypeDef *ptr;
uint32_t channel;

void Servo_Init(TIM_HandleTypeDef *ptr_Servo,uint32_t channel_Servo){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	ptr = ptr_Servo;
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <Servo_Init+0x7c>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
	channel = channel_Servo;
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <Servo_Init+0x80>)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_COMPARE(ptr,channel,SERVO_MIN_POS);
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <Servo_Init+0x80>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <Servo_Init+0x2c>
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <Servo_Init+0x7c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
 8000fae:	e01b      	b.n	8000fe8 <Servo_Init+0x64>
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <Servo_Init+0x80>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d106      	bne.n	8000fc6 <Servo_Init+0x42>
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <Servo_Init+0x7c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fc2:	6393      	str	r3, [r2, #56]	; 0x38
 8000fc4:	e010      	b.n	8000fe8 <Servo_Init+0x64>
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <Servo_Init+0x80>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d106      	bne.n	8000fdc <Servo_Init+0x58>
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <Servo_Init+0x7c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fd8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fda:	e005      	b.n	8000fe8 <Servo_Init+0x64>
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <Servo_Init+0x7c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
	HAL_TIM_PWM_Start(ptr, channel);
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <Servo_Init+0x7c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <Servo_Init+0x80>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 f9fa 	bl	80093ec <HAL_TIM_PWM_Start>

}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000214 	.word	0x20000214
 8001004:	20000218 	.word	0x20000218

08001008 <Servo_set_angle>:

void Servo_set_angle(uint8_t angle){
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	if(angle > SERVO_MAX_ANGLE){
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b7d      	cmp	r3, #125	; 0x7d
 8001016:	d901      	bls.n	800101c <Servo_set_angle+0x14>
		angle = SERVO_MAX_ANGLE;
 8001018:	237d      	movs	r3, #125	; 0x7d
 800101a:	71fb      	strb	r3, [r7, #7]
	}else if(angle < SERVO_MIN_ANGLE){
		angle = SERVO_MIN_ANGLE;
	}
	Actual_angle_value = angle;
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <Servo_set_angle+0x88>)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	7013      	strb	r3, [r2, #0]
	uint32_t position = SERVO_MIN_POS + (angle * (SERVO_MAX_POS - SERVO_MIN_POS))/SERVO_MAX_ANGLE;
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <Servo_set_angle+0x8c>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	10d2      	asrs	r2, r2, #3
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800103c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(ptr,channel,position);
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <Servo_set_angle+0x90>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <Servo_set_angle+0x4a>
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <Servo_set_angle+0x94>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001050:	e018      	b.n	8001084 <Servo_set_angle+0x7c>
	__HAL_TIM_SET_COMPARE(ptr,channel,position);
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <Servo_set_angle+0x90>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d105      	bne.n	8001066 <Servo_set_angle+0x5e>
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <Servo_set_angle+0x94>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001064:	e00e      	b.n	8001084 <Servo_set_angle+0x7c>
	__HAL_TIM_SET_COMPARE(ptr,channel,position);
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <Servo_set_angle+0x90>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b08      	cmp	r3, #8
 800106c:	d105      	bne.n	800107a <Servo_set_angle+0x72>
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <Servo_set_angle+0x94>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001078:	e004      	b.n	8001084 <Servo_set_angle+0x7c>
	__HAL_TIM_SET_COMPARE(ptr,channel,position);
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <Servo_set_angle+0x94>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000cb1 	.word	0x20000cb1
 8001094:	10624dd3 	.word	0x10624dd3
 8001098:	20000218 	.word	0x20000218
 800109c:	20000214 	.word	0x20000214

080010a0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	2000021c 	.word	0x2000021c
 80010e8:	200002bc 	.word	0x200002bc

080010ec <http_server>:
const static char http_html_hdr_not_found[] = "HTTP/1.1 404 Not Found\r\nContent-type: text/html; charset=utf-8\r\n\r\n";



static void http_server(struct netconn *conn)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b096      	sub	sp, #88	; 0x58
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 80010f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f00e f8e2 	bl	800f2c4 <netconn_recv>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	if (recv_err == ERR_OK)
 8001106:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8151 	bne.w	80013b2 <http_server+0x2c6>
	{
		if (netconn_err(conn) == ERR_OK)
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f00e fa60 	bl	800f5d6 <netconn_err>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 814a 	bne.w	80013b2 <http_server+0x2c6>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001124:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f00f fe65 	bl	8010df8 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 800112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001130:	220f      	movs	r2, #15
 8001132:	49a5      	ldr	r1, [pc, #660]	; (80013c8 <http_server+0x2dc>)
 8001134:	4618      	mov	r0, r3
 8001136:	f01c f961 	bl	801d3fc <strncmp>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11c      	bne.n	800117a <http_server+0x8e>
			{
				fs_open(&file, "/index.html");
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	49a1      	ldr	r1, [pc, #644]	; (80013cc <http_server+0x2e0>)
 8001146:	4618      	mov	r0, r3
 8001148:	f010 f858 	bl	80111fc <fs_open>
				netconn_write(conn, http_html_hdr, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	223b      	movs	r2, #59	; 0x3b
 8001154:	499e      	ldr	r1, [pc, #632]	; (80013d0 <http_server+0x2e4>)
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f00e f92e 	bl	800f3b8 <netconn_write_partly>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800115c:	6939      	ldr	r1, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	461a      	mov	r2, r3
 8001162:	2300      	movs	r3, #0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2300      	movs	r3, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f00e f925 	bl	800f3b8 <netconn_write_partly>
				fs_close(&file);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4618      	mov	r0, r3
 8001174:	f010 f880 	bl	8011278 <fs_close>
 8001178:	e11b      	b.n	80013b2 <http_server+0x2c6>

			}
			// Wypisywanie temperatury procesora na server
			else if(strncmp((char const *)buf,"GET /Temperature_value_procesor",31)==0){
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	221f      	movs	r2, #31
 800117e:	4995      	ldr	r1, [pc, #596]	; (80013d4 <http_server+0x2e8>)
 8001180:	4618      	mov	r0, r3
 8001182:	f01c f93b 	bl	801d3fc <strncmp>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d11f      	bne.n	80011cc <http_server+0xe0>
				char *TempValue;
				TempValue = pvPortMalloc(30);
 800118c:	201e      	movs	r0, #30
 800118e:	f00d fb6b 	bl	800e868 <pvPortMalloc>
 8001192:	6378      	str	r0, [r7, #52]	; 0x34
				size_t n = sprintf(TempValue, "%s%.1f C",http_html_hdr_to_value,Processor_temperature);
 8001194:	4b90      	ldr	r3, [pc, #576]	; (80013d8 <http_server+0x2ec>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9f5 	bl	8000588 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9cd 2300 	strd	r2, r3, [sp]
 80011a6:	4a8d      	ldr	r2, [pc, #564]	; (80013dc <http_server+0x2f0>)
 80011a8:	498d      	ldr	r1, [pc, #564]	; (80013e0 <http_server+0x2f4>)
 80011aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011ac:	f01b fffc 	bl	801d1a8 <siprintf>
 80011b0:	4603      	mov	r3, r0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
				netconn_write(conn,TempValue, n,NETCONN_NOCOPY);
 80011b4:	2300      	movs	r3, #0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f00e f8fa 	bl	800f3b8 <netconn_write_partly>
				vPortFree(TempValue);
 80011c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011c6:	f00d fc1b 	bl	800ea00 <vPortFree>
 80011ca:	e0f2      	b.n	80013b2 <http_server+0x2c6>
			}
			// Wypisywanie temperatury procesora na server
			else if(strncmp((char const *)buf,"GET /Temperature_value_room",27)==0){
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	221b      	movs	r2, #27
 80011d0:	4984      	ldr	r1, [pc, #528]	; (80013e4 <http_server+0x2f8>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f01c f912 	bl	801d3fc <strncmp>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11f      	bne.n	800121e <http_server+0x132>
				char *TempValue;
				TempValue = pvPortMalloc(30);
 80011de:	201e      	movs	r0, #30
 80011e0:	f00d fb42 	bl	800e868 <pvPortMalloc>
 80011e4:	63f8      	str	r0, [r7, #60]	; 0x3c
				size_t n = sprintf(TempValue, "%s%.1f C",http_html_hdr_to_value,Room_temperature);
 80011e6:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <http_server+0x2fc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9cc 	bl	8000588 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	e9cd 2300 	strd	r2, r3, [sp]
 80011f8:	4a78      	ldr	r2, [pc, #480]	; (80013dc <http_server+0x2f0>)
 80011fa:	4979      	ldr	r1, [pc, #484]	; (80013e0 <http_server+0x2f4>)
 80011fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011fe:	f01b ffd3 	bl	801d1a8 <siprintf>
 8001202:	4603      	mov	r3, r0
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
				netconn_write(conn,TempValue, n,NETCONN_NOCOPY);
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800120e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f00e f8d1 	bl	800f3b8 <netconn_write_partly>
				vPortFree(TempValue);
 8001216:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001218:	f00d fbf2 	bl	800ea00 <vPortFree>
 800121c:	e0c9      	b.n	80013b2 <http_server+0x2c6>
			}
			// Wypisywanie Zadanego/akctulnego kąta servwomechanizmu na serwer
			else if(strncmp((char const *)buf,"GET /Angle_value",16)==0){
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	2210      	movs	r2, #16
 8001222:	4972      	ldr	r1, [pc, #456]	; (80013ec <http_server+0x300>)
 8001224:	4618      	mov	r0, r3
 8001226:	f01c f8e9 	bl	801d3fc <strncmp>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d119      	bne.n	8001264 <http_server+0x178>
				char *AngleValue;
				AngleValue = pvPortMalloc(30);
 8001230:	201e      	movs	r0, #30
 8001232:	f00d fb19 	bl	800e868 <pvPortMalloc>
 8001236:	6478      	str	r0, [r7, #68]	; 0x44
				size_t n = sprintf(AngleValue, "%s%d",http_html_hdr_to_value,Actual_angle_value);
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <http_server+0x304>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4a67      	ldr	r2, [pc, #412]	; (80013dc <http_server+0x2f0>)
 8001240:	496c      	ldr	r1, [pc, #432]	; (80013f4 <http_server+0x308>)
 8001242:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001244:	f01b ffb0 	bl	801d1a8 <siprintf>
 8001248:	4603      	mov	r3, r0
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
				netconn_write(conn,(const unsigned char*)AngleValue, n,NETCONN_NOCOPY);
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001254:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f00e f8ae 	bl	800f3b8 <netconn_write_partly>
				vPortFree(AngleValue);
 800125c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800125e:	f00d fbcf 	bl	800ea00 <vPortFree>
 8001262:	e0a6      	b.n	80013b2 <http_server+0x2c6>

			}
			//Ustawianie Ledów
			else if(strncmp((char const *)buf,"POST /buttoncolor=G_clicked",27)==0){
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	221b      	movs	r2, #27
 8001268:	4963      	ldr	r1, [pc, #396]	; (80013f8 <http_server+0x30c>)
 800126a:	4618      	mov	r0, r3
 800126c:	f01c f8c6 	bl	801d3fc <strncmp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <http_server+0x196>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2101      	movs	r1, #1
 800127a:	4860      	ldr	r0, [pc, #384]	; (80013fc <http_server+0x310>)
 800127c:	f004 fb96 	bl	80059ac <HAL_GPIO_WritePin>
 8001280:	e097      	b.n	80013b2 <http_server+0x2c6>
//				netconn_write(conn, http_html_hdr_to_value, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);

			}else if(strncmp((char const *)buf,"POST /buttoncolor=G_unclicked",29)==0){
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	221d      	movs	r2, #29
 8001286:	495e      	ldr	r1, [pc, #376]	; (8001400 <http_server+0x314>)
 8001288:	4618      	mov	r0, r3
 800128a:	f01c f8b7 	bl	801d3fc <strncmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <http_server+0x1b4>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2101      	movs	r1, #1
 8001298:	4858      	ldr	r0, [pc, #352]	; (80013fc <http_server+0x310>)
 800129a:	f004 fb87 	bl	80059ac <HAL_GPIO_WritePin>
 800129e:	e088      	b.n	80013b2 <http_server+0x2c6>
//				netconn_write(conn, http_html_hdr_to_value, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);

			}else if(strncmp((char const *)buf,"POST /buttoncolor=B_clicked",27)==0){
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	221b      	movs	r2, #27
 80012a4:	4957      	ldr	r1, [pc, #348]	; (8001404 <http_server+0x318>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f01c f8a8 	bl	801d3fc <strncmp>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <http_server+0x1d2>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	4851      	ldr	r0, [pc, #324]	; (80013fc <http_server+0x310>)
 80012b8:	f004 fb78 	bl	80059ac <HAL_GPIO_WritePin>
 80012bc:	e079      	b.n	80013b2 <http_server+0x2c6>
//				netconn_write(conn, http_html_hdr_to_value, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);

			}else if(strncmp((char const *)buf,"POST /buttoncolor=B_unclicked",29)==0){
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	221d      	movs	r2, #29
 80012c2:	4951      	ldr	r1, [pc, #324]	; (8001408 <http_server+0x31c>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f01c f899 	bl	801d3fc <strncmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <http_server+0x1f0>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	4849      	ldr	r0, [pc, #292]	; (80013fc <http_server+0x310>)
 80012d6:	f004 fb69 	bl	80059ac <HAL_GPIO_WritePin>
 80012da:	e06a      	b.n	80013b2 <http_server+0x2c6>
//				netconn_write(conn, http_html_hdr_to_value, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);

			}else if(strncmp((char const *)buf,"POST /buttoncolor=R_clicked",27)==0){
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	221b      	movs	r2, #27
 80012e0:	494a      	ldr	r1, [pc, #296]	; (800140c <http_server+0x320>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f01c f88a 	bl	801d3fc <strncmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <http_server+0x210>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f4:	4841      	ldr	r0, [pc, #260]	; (80013fc <http_server+0x310>)
 80012f6:	f004 fb59 	bl	80059ac <HAL_GPIO_WritePin>
 80012fa:	e05a      	b.n	80013b2 <http_server+0x2c6>
//				netconn_write(conn, http_html_hdr_to_value, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);

			}else if(strncmp((char const *)buf,"POST /buttoncolor=R_unclicked",29)==0){
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	221d      	movs	r2, #29
 8001300:	4943      	ldr	r1, [pc, #268]	; (8001410 <http_server+0x324>)
 8001302:	4618      	mov	r0, r3
 8001304:	f01c f87a 	bl	801d3fc <strncmp>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <http_server+0x230>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001314:	4839      	ldr	r0, [pc, #228]	; (80013fc <http_server+0x310>)
 8001316:	f004 fb49 	bl	80059ac <HAL_GPIO_WritePin>
 800131a:	e04a      	b.n	80013b2 <http_server+0x2c6>
//				netconn_write(conn, http_html_hdr_to_value, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
			}
			// Zadawanie konta serwomechanizm
			else if(strncmp((char const *)buf,"POST /Servo_angle",17)==0){
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	2211      	movs	r2, #17
 8001320:	493c      	ldr	r1, [pc, #240]	; (8001414 <http_server+0x328>)
 8001322:	4618      	mov	r0, r3
 8001324:	f01c f86a 	bl	801d3fc <strncmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d125      	bne.n	800137a <http_server+0x28e>
				char angle[3];
				for(size_t i = 0; i<3; i++){
 800132e:	2300      	movs	r3, #0
 8001330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001332:	e00d      	b.n	8001350 <http_server+0x264>
					angle[i] = buf[i+18];
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001338:	3312      	adds	r3, #18
 800133a:	4413      	add	r3, r2
 800133c:	7819      	ldrb	r1, [r3, #0]
 800133e:	f107 020c 	add.w	r2, r7, #12
 8001342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001344:	4413      	add	r3, r2
 8001346:	460a      	mov	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
				for(size_t i = 0; i<3; i++){
 800134a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134c:	3301      	adds	r3, #1
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001352:	2b02      	cmp	r3, #2
 8001354:	d9ee      	bls.n	8001334 <http_server+0x248>
				}
				Actual_angle_value = (uint8_t)strtoul( angle, NULL, 0 );
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f01b f970 	bl	801c644 <strtoul>
 8001364:	4603      	mov	r3, r0
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <http_server+0x304>)
 800136a:	701a      	strb	r2, [r3, #0]
				Servo_set_angle(Actual_angle_value);
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <http_server+0x304>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe48 	bl	8001008 <Servo_set_angle>
 8001378:	e01b      	b.n	80013b2 <http_server+0x2c6>
			}


			else{
				/* Load Error page */
				fs_open(&file, "/404.html");
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4926      	ldr	r1, [pc, #152]	; (8001418 <http_server+0x32c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f00f ff3b 	bl	80111fc <fs_open>
				netconn_write(conn, http_html_hdr_not_found, sizeof(http_html_hdr)-1, NETCONN_NOCOPY);
 8001386:	2300      	movs	r3, #0
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	223b      	movs	r2, #59	; 0x3b
 800138e:	4923      	ldr	r1, [pc, #140]	; (800141c <http_server+0x330>)
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f00e f811 	bl	800f3b8 <netconn_write_partly>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8001396:	6939      	ldr	r1, [r7, #16]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	461a      	mov	r2, r3
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f00e f808 	bl	800f3b8 <netconn_write_partly>
				fs_close(&file);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00f ff63 	bl	8011278 <fs_close>


		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f00e f902 	bl	800f5bc <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00f fcfc 	bl	8010db8 <netbuf_delete>
}
 80013c0:	bf00      	nop
 80013c2:	3750      	adds	r7, #80	; 0x50
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0801f368 	.word	0x0801f368
 80013cc:	0801f378 	.word	0x0801f378
 80013d0:	08022b4c 	.word	0x08022b4c
 80013d4:	0801f384 	.word	0x0801f384
 80013d8:	20000c9c 	.word	0x20000c9c
 80013dc:	08022b88 	.word	0x08022b88
 80013e0:	0801f3a4 	.word	0x0801f3a4
 80013e4:	0801f3b0 	.word	0x0801f3b0
 80013e8:	20000ca0 	.word	0x20000ca0
 80013ec:	0801f3cc 	.word	0x0801f3cc
 80013f0:	20000cb1 	.word	0x20000cb1
 80013f4:	0801f3e0 	.word	0x0801f3e0
 80013f8:	0801f3e8 	.word	0x0801f3e8
 80013fc:	40020400 	.word	0x40020400
 8001400:	0801f404 	.word	0x0801f404
 8001404:	0801f424 	.word	0x0801f424
 8001408:	0801f440 	.word	0x0801f440
 800140c:	0801f460 	.word	0x0801f460
 8001410:	0801f47c 	.word	0x0801f47c
 8001414:	0801f49c 	.word	0x0801f49c
 8001418:	0801f4b0 	.word	0x0801f4b0
 800141c:	08022b9c 	.word	0x08022b9c

08001420 <http_thread>:


static void http_thread(void *arg)
{ 
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2010      	movs	r0, #16
 800142e:	f00d fc23 	bl	800ec78 <netconn_new_with_proto_and_callback>
 8001432:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d023      	beq.n	8001482 <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800143a:	2250      	movs	r2, #80	; 0x50
 800143c:	4913      	ldr	r1, [pc, #76]	; (800148c <http_thread+0x6c>)
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f00d fcd4 	bl	800edec <netconn_bind>
 8001444:	4603      	mov	r3, r0
 8001446:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8001448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d118      	bne.n	8001482 <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8001450:	21ff      	movs	r1, #255	; 0xff
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f00d fd02 	bl	800ee5c <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f00d fd28 	bl	800eeb4 <netconn_accept>
 8001464:	4603      	mov	r3, r0
 8001466:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8001468:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f3      	bne.n	8001458 <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fe3a 	bl	80010ec <http_server>

          /* delete connection */
          netconn_delete(newconn);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4618      	mov	r0, r3
 800147c:	f00d fc9a 	bl	800edb4 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8001480:	e7ea      	b.n	8001458 <http_thread+0x38>
        }
      }
    }
  }
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	080245c0 	.word	0x080245c0

08001490 <http_server_init>:


void http_server_init()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, 2*DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800149e:	2200      	movs	r2, #0
 80014a0:	4903      	ldr	r1, [pc, #12]	; (80014b0 <http_server_init+0x20>)
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <http_server_init+0x24>)
 80014a4:	f01a fee2 	bl	801c26c <sys_thread_new>
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	08001421 	.word	0x08001421
 80014b4:	0801f4bc 	.word	0x0801f4bc

080014b8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <HAL_ADC_ConvCpltCallback+0xc8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d144      	bne.n	8001554 <HAL_ADC_ConvCpltCallback+0x9c>
		float Bitvalue =  HAL_ADC_GetValue(hadc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 fd72 	bl	8002fb4 <HAL_ADC_GetValue>
 80014d0:	ee07 0a90 	vmov	s15, r0
 80014d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d8:	edc7 7a03 	vstr	s15, [r7, #12]
		float Vsens = (Bitvalue*3.3)/4095.0;
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff f853 	bl	8000588 <__aeabi_f2d>
 80014e2:	a31f      	add	r3, pc, #124	; (adr r3, 8001560 <HAL_ADC_ConvCpltCallback+0xa8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f8a6 	bl	8000638 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	a31c      	add	r3, pc, #112	; (adr r3, 8001568 <HAL_ADC_ConvCpltCallback+0xb0>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f9c7 	bl	800088c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb6f 	bl	8000be8 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	60bb      	str	r3, [r7, #8]
		Processor_temperature = ((Vsens-0.76)/0.0025)+25;
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f7ff f83a 	bl	8000588 <__aeabi_f2d>
 8001514:	a316      	add	r3, pc, #88	; (adr r3, 8001570 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7fe fed5 	bl	80002c8 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	a314      	add	r3, pc, #80	; (adr r3, 8001578 <HAL_ADC_ConvCpltCallback+0xc0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f9ae 	bl	800088c <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_ADC_ConvCpltCallback+0xcc>)
 800153e:	f7fe fec5 	bl	80002cc <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb4d 	bl	8000be8 <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001552:	6013      	str	r3, [r2, #0]
	}
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	f3af 8000 	nop.w
 8001560:	66666666 	.word	0x66666666
 8001564:	400a6666 	.word	0x400a6666
 8001568:	00000000 	.word	0x00000000
 800156c:	40affe00 	.word	0x40affe00
 8001570:	851eb852 	.word	0x851eb852
 8001574:	3fe851eb 	.word	0x3fe851eb
 8001578:	47ae147b 	.word	0x47ae147b
 800157c:	3f647ae1 	.word	0x3f647ae1
 8001580:	40012000 	.word	0x40012000
 8001584:	40390000 	.word	0x40390000
 8001588:	20000c9c 	.word	0x20000c9c

0800158c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a3c      	ldr	r2, [pc, #240]	; (800168c <HAL_UART_RxCpltCallback+0x100>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d172      	bne.n	8001684 <HAL_UART_RxCpltCallback+0xf8>
		if(Received != (uint8_t)'\r'){
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <HAL_UART_RxCpltCallback+0x104>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b0d      	cmp	r3, #13
 80015a4:	d014      	beq.n	80015d0 <HAL_UART_RxCpltCallback+0x44>
			*(buffor+strlen(buffor)) = Received;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 80015a8:	681c      	ldr	r4, [r3, #0]
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe7e 	bl	80002b0 <strlen>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4423      	add	r3, r4
 80015b8:	4a35      	ldr	r2, [pc, #212]	; (8001690 <HAL_UART_RxCpltCallback+0x104>)
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	701a      	strb	r2, [r3, #0]
			buffor = Recalloc(buffor);
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f8ac 	bl	8001720 <Recalloc>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e054      	b.n	800167a <HAL_UART_RxCpltCallback+0xee>
		}else{

			if(test_servo == true){
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_UART_RxCpltCallback+0x10c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d026      	beq.n	8001628 <HAL_UART_RxCpltCallback+0x9c>
				Actual_angle_value = (uint8_t)strtoul( buffor, NULL, 0 );
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f01b f82e 	bl	801c644 <strtoul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_UART_RxCpltCallback+0x110>)
 80015ee:	701a      	strb	r2, [r3, #0]
				Servo_set_angle(Actual_angle_value);
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_UART_RxCpltCallback+0x110>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fd06 	bl	8001008 <Servo_set_angle>
				test_servo = false;
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_UART_RxCpltCallback+0x10c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
				strcat(buffor,"\r\n");
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 8001604:	681c      	ldr	r4, [r3, #0]
 8001606:	4620      	mov	r0, r4
 8001608:	f7fe fe52 	bl	80002b0 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	4423      	add	r3, r4
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <HAL_UART_RxCpltCallback+0x114>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	7892      	ldrb	r2, [r2, #2]
 8001616:	8019      	strh	r1, [r3, #0]
 8001618:	709a      	strb	r2, [r3, #2]
				printf("%s",buffor);
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <HAL_UART_RxCpltCallback+0x118>)
 8001622:	f01b fd53 	bl	801d0cc <iprintf>
 8001626:	e021      	b.n	800166c <HAL_UART_RxCpltCallback+0xe0>

			}else{
				if(strcmp(buffor,(char*)"servo") == 0){
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	491e      	ldr	r1, [pc, #120]	; (80016a8 <HAL_UART_RxCpltCallback+0x11c>)
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fdde 	bl	80001f0 <strcmp>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_UART_RxCpltCallback+0xbc>
					printf("Wpisz kat:\n");
 800163a:	481c      	ldr	r0, [pc, #112]	; (80016ac <HAL_UART_RxCpltCallback+0x120>)
 800163c:	f01b fdac 	bl	801d198 <puts>
					test_servo = true;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_UART_RxCpltCallback+0x10c>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e011      	b.n	800166c <HAL_UART_RxCpltCallback+0xe0>
				}else{
					strcat(buffor,"\r\n");
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	4620      	mov	r0, r4
 800164e:	f7fe fe2f 	bl	80002b0 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	4423      	add	r3, r4
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <HAL_UART_RxCpltCallback+0x114>)
 8001658:	8811      	ldrh	r1, [r2, #0]
 800165a:	7892      	ldrb	r2, [r2, #2]
 800165c:	8019      	strh	r1, [r3, #0]
 800165e:	709a      	strb	r2, [r3, #2]
					printf("%s",buffor);
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <HAL_UART_RxCpltCallback+0x118>)
 8001668:	f01b fd30 	bl	801d0cc <iprintf>
				}
			}
			free(buffor);
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_UART_RxCpltCallback+0x108>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f01a fe83 	bl	801c37c <free>
			BUFFOR_Init();
 8001676:	f000 f83b 	bl	80016f0 <BUFFOR_Init>
		}
		HAL_UART_Receive_IT(&huart3, &Received, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <HAL_UART_RxCpltCallback+0x104>)
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <HAL_UART_RxCpltCallback+0x124>)
 8001680:	f008 fd1e 	bl	800a0c0 <HAL_UART_Receive_IT>
	}

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	40004800 	.word	0x40004800
 8001690:	20000ca8 	.word	0x20000ca8
 8001694:	20000cac 	.word	0x20000cac
 8001698:	20000cb0 	.word	0x20000cb0
 800169c:	20000cb1 	.word	0x20000cb1
 80016a0:	0801f4c8 	.word	0x0801f4c8
 80016a4:	0801f4cc 	.word	0x0801f4cc
 80016a8:	0801f4d0 	.word	0x0801f4d0
 80016ac:	0801f4d8 	.word	0x0801f4d8
 80016b0:	20000c48 	.word	0x20000c48

080016b4 <__io_putchar>:
int __io_putchar(int ch)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

	if(ch == (int)'\n'){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b0a      	cmp	r3, #10
 80016c0:	d106      	bne.n	80016d0 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n" , 2, 200);
 80016c2:	23c8      	movs	r3, #200	; 0xc8
 80016c4:	2202      	movs	r2, #2
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__io_putchar+0x34>)
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <__io_putchar+0x38>)
 80016ca:	f008 fc6e 	bl	8009faa <HAL_UART_Transmit>
 80016ce:	e005      	b.n	80016dc <__io_putchar+0x28>
	}else{
		HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 200);
 80016d0:	1d39      	adds	r1, r7, #4
 80016d2:	23c8      	movs	r3, #200	; 0xc8
 80016d4:	2201      	movs	r2, #1
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <__io_putchar+0x38>)
 80016d8:	f008 fc67 	bl	8009faa <HAL_UART_Transmit>
	}

    return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0801f4c8 	.word	0x0801f4c8
 80016ec:	20000c48 	.word	0x20000c48

080016f0 <BUFFOR_Init>:

void BUFFOR_Init(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	buffor = calloc(2,sizeof(char));
 80016f4:	2101      	movs	r1, #1
 80016f6:	2002      	movs	r0, #2
 80016f8:	f01a fe1a 	bl	801c330 <calloc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <BUFFOR_Init+0x28>)
 8001702:	601a      	str	r2, [r3, #0]
	if(buffor == NULL){
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <BUFFOR_Init+0x28>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <BUFFOR_Init+0x22>
		printf("Error: Problem Z alokacja\n");
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <BUFFOR_Init+0x2c>)
 800170e:	f01b fd43 	bl	801d198 <puts>
	}

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000cac 	.word	0x20000cac
 800171c:	0801f4e4 	.word	0x0801f4e4

08001720 <Recalloc>:

char* Recalloc(char *text){
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	size_t size = strlen(text);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7fe fdc1 	bl	80002b0 <strlen>
 800172e:	6138      	str	r0, [r7, #16]
	char* New_Text = calloc(size + 2, sizeof(char));
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	3302      	adds	r3, #2
 8001734:	2101      	movs	r1, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f01a fdfa 	bl	801c330 <calloc>
 800173c:	4603      	mov	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]
	if(New_Text == NULL){
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <Recalloc+0x2c>
			printf("Error: Problem Z alokacja\n");
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <Recalloc+0x60>)
 8001748:	f01b fd26 	bl	801d198 <puts>
		}
	for(size_t i = 0; i <=size; i++){
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <Recalloc+0x48>
		New_Text[i] = text[i];
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	441a      	add	r2, r3
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	440b      	add	r3, r1
 800175e:	7812      	ldrb	r2, [r2, #0]
 8001760:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i <=size; i++){
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d9f0      	bls.n	8001752 <Recalloc+0x32>
	}
	free(text);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f01a fe03 	bl	801c37c <free>
	return New_Text;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0801f4e4 	.word	0x0801f4e4

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b090      	sub	sp, #64	; 0x40
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178a:	f001 f97b 	bl	8002a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178e:	f000 f85d 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f000 fa21 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001796:	f000 f9ff 	bl	8001b98 <MX_DMA_Init>
  MX_ADC1_Init();
 800179a:	f000 f8c7 	bl	800192c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800179e:	f000 f9d1 	bl	8001b44 <MX_USART3_UART_Init>
  MX_TIM13_Init();
 80017a2:	f000 f957 	bl	8001a54 <MX_TIM13_Init>
  MX_UART7_Init();
 80017a6:	f000 f9a3 	bl	8001af0 <MX_UART7_Init>
  MX_I2C1_Init();
 80017aa:	f000 f913 	bl	80019d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BUFFOR_Init();
 80017ae:	f7ff ff9f 	bl	80016f0 <BUFFOR_Init>
  Servo_Init(&htim13, TIM_CHANNEL_1);
 80017b2:	2100      	movs	r1, #0
 80017b4:	481d      	ldr	r0, [pc, #116]	; (800182c <main+0xa8>)
 80017b6:	f7ff fbe5 	bl	8000f84 <Servo_Init>

  HAL_UART_Receive_IT(&huart3, &Received, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	491c      	ldr	r1, [pc, #112]	; (8001830 <main+0xac>)
 80017be:	481d      	ldr	r0, [pc, #116]	; (8001834 <main+0xb0>)
 80017c0:	f008 fc7e 	bl	800a0c0 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DMA_Semafor */
  osSemaphoreDef(DMA_Semafor);
 80017c4:	2300      	movs	r3, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c8:	2300      	movs	r3, #0
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_SemaforHandle = osSemaphoreCreate(osSemaphore(DMA_Semafor), 1);
 80017cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f00a fb4c 	bl	800be70 <osSemaphoreCreate>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <main+0xb4>)
 80017dc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <main+0xb8>)
 80017e0:	f107 041c 	add.w	r4, r7, #28
 80017e4:	461d      	mov	r5, r3
 80017e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00a fa3d 	bl	800bc78 <osThreadCreate>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <main+0xbc>)
 8001802:	6013      	str	r3, [r2, #0]

  /* definition and creation of Temperature_TAS */
  osThreadDef(Temperature_TAS, StartTask02, osPriorityNormal, 0, 512);
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <main+0xc0>)
 8001806:	463c      	mov	r4, r7
 8001808:	461d      	mov	r5, r3
 800180a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800180c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Temperature_TASHandle = osThreadCreate(osThread(Temperature_TAS), NULL);
 8001816:	463b      	mov	r3, r7
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f00a fa2c 	bl	800bc78 <osThreadCreate>
 8001820:	4603      	mov	r3, r0
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <main+0xc4>)
 8001824:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001826:	f00a fa10 	bl	800bc4a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800182a:	e7fe      	b.n	800182a <main+0xa6>
 800182c:	20000bb8 	.word	0x20000bb8
 8001830:	20000ca8 	.word	0x20000ca8
 8001834:	20000c48 	.word	0x20000c48
 8001838:	20000c98 	.word	0x20000c98
 800183c:	0801f50c 	.word	0x0801f50c
 8001840:	20000c90 	.word	0x20000c90
 8001844:	0801f538 	.word	0x0801f538
 8001848:	20000c94 	.word	0x20000c94

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	; 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2230      	movs	r2, #48	; 0x30
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f01b fdc6 	bl	801d3ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <SystemClock_Config+0xd8>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <SystemClock_Config+0xd8>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <SystemClock_Config+0xd8>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <SystemClock_Config+0xdc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a24      	ldr	r2, [pc, #144]	; (8001928 <SystemClock_Config+0xdc>)
 8001896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <SystemClock_Config+0xdc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b0:	2310      	movs	r3, #16
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018c0:	23b4      	movs	r3, #180	; 0xb4
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018c8:	2307      	movs	r3, #7
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4618      	mov	r0, r3
 80018d2:	f006 ffa7 	bl	8008824 <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018dc:	f000 fa58 	bl	8001d90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018e0:	f006 ff50 	bl	8008784 <HAL_PWREx_EnableOverDrive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018ea:	f000 fa51 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ee:	230f      	movs	r3, #15
 80018f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f2:	2302      	movs	r3, #2
 80018f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2105      	movs	r1, #5
 800190c:	4618      	mov	r0, r3
 800190e:	f007 fa01 	bl	8008d14 <HAL_RCC_ClockConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001918:	f000 fa3a 	bl	8001d90 <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	3750      	adds	r7, #80	; 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <MX_ADC1_Init+0x9c>)
 8001942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800194a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <MX_ADC1_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_ADC1_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_ADC1_Init+0x98>)
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <MX_ADC1_Init+0xa0>)
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_ADC1_Init+0x98>)
 800197a:	2201      	movs	r2, #1
 800197c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_ADC1_Init+0x98>)
 8001988:	2201      	movs	r2, #1
 800198a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <MX_ADC1_Init+0x98>)
 800198e:	f001 f8df 	bl	8002b50 <HAL_ADC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001998:	f000 f9fa 	bl	8001d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_ADC1_Init+0xa4>)
 800199e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_ADC1_Init+0x98>)
 80019ae:	f001 fb23 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019b8:	f000 f9ea 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000abc 	.word	0x20000abc
 80019c8:	40012000 	.word	0x40012000
 80019cc:	0f000001 	.word	0x0f000001
 80019d0:	10000012 	.word	0x10000012

080019d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019da:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <MX_I2C1_Init+0x78>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <MX_I2C1_Init+0x7c>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_I2C1_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a12:	f003 ffe5 	bl	80059e0 <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 f9b8 	bl	8001d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a20:	2100      	movs	r1, #0
 8001a22:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a24:	f006 fe33 	bl	800868e <HAL_I2CEx_ConfigAnalogFilter>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a2e:	f000 f9af 	bl	8001d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_I2C1_Init+0x74>)
 8001a36:	f006 fe66 	bl	8008706 <HAL_I2CEx_ConfigDigitalFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001a40:	f000 f9a6 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000b04 	.word	0x20000b04
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	000186a0 	.word	0x000186a0

08001a54 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <MX_TIM13_Init+0x98>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 90-1;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a74:	2259      	movs	r2, #89	; 0x59
 8001a76:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 20000-1;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a80:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a84:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001a92:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001a94:	f007 fb90 	bl	80091b8 <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001a9e:	f000 f977 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001aa2:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001aa4:	f007 fc48 	bl	8009338 <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001aae:	f000 f96f 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab2:	2360      	movs	r3, #96	; 0x60
 8001ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001acc:	f007 fe46 	bl	800975c <HAL_TIM_PWM_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001ad6:	f000 f95b 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ada:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <MX_TIM13_Init+0x94>)
 8001adc:	f000 fbde 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001ae0:	bf00      	nop
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000bb8 	.word	0x20000bb8
 8001aec:	40001c00 	.word	0x40001c00

08001af0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_UART7_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b00:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart7) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_UART7_Init+0x4c>)
 8001b28:	f008 f9e7 	bl	8009efa <HAL_HalfDuplex_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f92d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000c00 	.word	0x20000c00
 8001b40:	40007800 	.word	0x40007800

08001b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART3_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	f008 f96d 	bl	8009e5a <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f903 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000c48 	.word	0x20000c48
 8001b94:	40004800 	.word	0x40004800

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	200b      	movs	r0, #11
 8001bc0:	f001 fd2e 	bl	8003620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bc4:	200b      	movs	r0, #11
 8001bc6:	f001 fd47 	bl	8003658 <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c14:	f043 0320 	orr.w	r3, r3, #32
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_GPIO_Init+0x10c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f244 0181 	movw	r1, #16513	; 0x4081
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_GPIO_Init+0x110>)
 8001cba:	f003 fe77 	bl	80059ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED1_Pin;
 8001cbe:	f244 0381 	movw	r3, #16513	; 0x4081
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_GPIO_Init+0x110>)
 8001cd8:	f003 fbb0 	bl	800543c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cdc:	bf00      	nop
 8001cde:	3730      	adds	r7, #48	; 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001cf4:	f009 f960 	bl	800afb8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	http_server_init();;
 8001cf8:	f7ff fbca 	bl	8001490 <http_server_init>

  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_IT(&hadc1);
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <StartDefaultTask+0x20>)
 8001cfe:	f000 ff6b 	bl	8002bd8 <HAL_ADC_Start_IT>
    osDelay(1000);
 8001d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d06:	f00a f803 	bl	800bd10 <osDelay>
	HAL_ADC_Start_IT(&hadc1);
 8001d0a:	e7f7      	b.n	8001cfc <StartDefaultTask+0x10>
 8001d0c:	20000abc 	.word	0x20000abc

08001d10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	sht3x_handle_t handle = {
 8001d18:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <StartTask02+0x4c>)
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d22:	e883 0003 	stmia.w	r3, {r0, r1}
		.i2c_handle = &hi2c1,
		.device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW

	};
	if (!sht3x_init(&handle)) {
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f8c4 	bl	8001eb8 <sht3x_init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <StartTask02+0x32>
	    printf("SHT3x access failed.\n\r");
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <StartTask02+0x50>)
 8001d3e:	f01b f9c5 	bl	801d0cc <iprintf>
	}

  for(;;)
  {
	sht3x_read_temperature_and_humidity(&handle, &Room_temperature, &humidity);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <StartTask02+0x54>)
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <StartTask02+0x58>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f90c 	bl	8001f68 <sht3x_read_temperature_and_humidity>

    osDelay(8000);
 8001d50:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001d54:	f009 ffdc 	bl	800bd10 <osDelay>
	sht3x_read_temperature_and_humidity(&handle, &Room_temperature, &humidity);
 8001d58:	e7f3      	b.n	8001d42 <StartTask02+0x32>
 8001d5a:	bf00      	nop
 8001d5c:	0801f56c 	.word	0x0801f56c
 8001d60:	0801f554 	.word	0x0801f554
 8001d64:	20000ca4 	.word	0x20000ca4
 8001d68:	20000ca0 	.word	0x20000ca0

08001d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d7e:	f000 fea3 	bl	8002ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40001000 	.word	0x40001000

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>

08001d9a <calculate_crc>:




static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001da4:	23ff      	movs	r3, #255	; 0xff
 8001da6:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e020      	b.n	8001df0 <calculate_crc+0x56>
		crc ^= data[i];
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	4053      	eors	r3, r2
 8001dba:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e010      	b.n	8001de4 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da06      	bge.n	8001dd8 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001dd4:	75fb      	strb	r3, [r7, #23]
 8001dd6:	e002      	b.n	8001dde <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3301      	adds	r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	d9eb      	bls.n	8001dc2 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	3301      	adds	r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3da      	bcc.n	8001dae <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <sthx_reset>:


bool sthx_reset(sht3x_handle_t *handle){
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_DeInit(handle->i2c_handle) != HAL_OK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 ff28 	bl	8005c68 <HAL_I2C_DeInit>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <sthx_reset+0x1c>
	  {
		Error_Handler();
 8001e1e:	f7ff ffb7 	bl	8001d90 <Error_Handler>
	  }

	if (HAL_I2C_Init(handle->i2c_handle) != HAL_OK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fdda 	bl	80059e0 <HAL_I2C_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <sthx_reset+0x30>
	  {
		Error_Handler();
 8001e32:	f7ff ffad 	bl	8001d90 <Error_Handler>
	  }

}
 8001e36:	bf00      	nop
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <sht3x_send_command>:


static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	733b      	strb	r3, [r7, #12]
 8001e56:	887b      	ldrh	r3, [r7, #2]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	737b      	strb	r3, [r7, #13]



	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	b299      	uxth	r1, r3
 8001e68:	f107 020c 	add.w	r2, r7, #12
 8001e6c:	231e      	movs	r3, #30
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2302      	movs	r3, #2
 8001e72:	f003 ff3d 	bl	8005cf0 <HAL_I2C_Master_Transmit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <sht3x_send_command+0x40>
		return false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <sht3x_send_command+0x42>
	}


	return true;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	460a      	mov	r2, r1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	4613      	mov	r3, r2
 8001e98:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b29b      	uxth	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <sht3x_init>:



bool sht3x_init(sht3x_handle_t *handle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af04      	add	r7, sp, #16
 8001ebe:	6078      	str	r0, [r7, #4]
	xSemaphoreTake( DMA_SemaforHandle, 1);
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <sht3x_init+0x80>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f00a fee2 	bl	800cc90 <xQueueSemaphoreTake>
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <sht3x_init+0x2a>
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <sht3x_init+0x84>)
 8001ed8:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <sht3x_init+0x88>)
 8001eda:	2152      	movs	r1, #82	; 0x52
 8001edc:	4819      	ldr	r0, [pc, #100]	; (8001f44 <sht3x_init+0x8c>)
 8001ede:	f01a fa09 	bl	801c2f4 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	b299      	uxth	r1, r3
 8001eee:	231e      	movs	r3, #30
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2302      	movs	r3, #2
 8001efe:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001f02:	f004 f91f 	bl	8006144 <HAL_I2C_Mem_Read>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <sht3x_init+0x58>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e00e      	b.n	8001f2e <sht3x_init+0x76>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	2102      	movs	r1, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff3f 	bl	8001d9a <calculate_crc>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <sht3x_init+0x74>
		return false;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <sht3x_init+0x76>
	}

	return true;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000c98 	.word	0x20000c98
 8001f3c:	0801f574 	.word	0x0801f574
 8001f40:	08022be0 	.word	0x08022be0
 8001f44:	0801f5b4 	.word	0x0801f5b4

08001f48 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(DMA_SemaforHandle);
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00a f80b 	bl	800bf70 <osSemaphoreRelease>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000c98 	.word	0x20000c98

08001f68 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	if(sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH) == false){
 8001f74:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff ff61 	bl	8001e40 <sht3x_send_command>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <sht3x_read_temperature_and_humidity+0x36>
		sthx_reset(handle);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff ff3b 	bl	8001e06 <sthx_reset>
		sht3x_send_command(handle, SHT3X_COMMAND_SOFT_RESET);
 8001f90:	f243 01a2 	movw	r1, #12450	; 0x30a2
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7ff ff53 	bl	8001e40 <sht3x_send_command>
		return false;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e04b      	b.n	8002036 <sht3x_read_temperature_and_humidity+0xce>
	}

	osDelay(2);
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f009 feb6 	bl	800bd10 <osDelay>

	uint8_t buffer[3];
	if (HAL_I2C_Master_Receive_DMA(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer)) != HAL_OK) {
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	889b      	ldrh	r3, [r3, #4]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	b299      	uxth	r1, r3
 8001fb0:	f107 0210 	add.w	r2, r7, #16
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	f003 ff99 	bl	8005eec <HAL_I2C_Master_Receive_DMA>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <sht3x_read_temperature_and_humidity+0x5c>
		return false;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e038      	b.n	8002036 <sht3x_read_temperature_and_humidity+0xce>
	}
	if(osSemaphoreWait(DMA_SemaforHandle,40) != osOK){
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <sht3x_read_temperature_and_humidity+0xd8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2128      	movs	r1, #40	; 0x28
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f009 ff82 	bl	800bed4 <osSemaphoreWait>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d004      	beq.n	8001fe0 <sht3x_read_temperature_and_humidity+0x78>
		printf("JEST PROBELM\n");
 8001fd6:	481b      	ldr	r0, [pc, #108]	; (8002044 <sht3x_read_temperature_and_humidity+0xdc>)
 8001fd8:	f01b f8de 	bl	801d198 <puts>
		return false;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e02a      	b.n	8002036 <sht3x_read_temperature_and_humidity+0xce>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fed7 	bl	8001d9a <calculate_crc>
 8001fec:	4603      	mov	r3, r0
 8001fee:	75fb      	strb	r3, [r7, #23]
//	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
//		return false;
//	}

	// only temperature
	if (temperature_crc != buffer[2]) {
 8001ff0:	7cbb      	ldrb	r3, [r7, #18]
 8001ff2:	7dfa      	ldrb	r2, [r7, #23]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <sht3x_read_temperature_and_humidity+0x94>
		return false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e01c      	b.n	8002036 <sht3x_read_temperature_and_humidity+0xce>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8001ffc:	7c3b      	ldrb	r3, [r7, #16]
 8001ffe:	7c7a      	ldrb	r2, [r7, #17]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff41 	bl	8001e8a <uint8_to_uint16>
 8002008:	4603      	mov	r3, r0
 800200a:	82bb      	strh	r3, [r7, #20]
//	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 800200c:	8abb      	ldrh	r3, [r7, #20]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002016:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002048 <sht3x_read_temperature_and_humidity+0xe0>
 800201a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800201e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800204c <sht3x_read_temperature_and_humidity+0xe4>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002050 <sht3x_read_temperature_and_humidity+0xe8>
 800202a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	edc3 7a00 	vstr	s15, [r3]
//	*humidity = 100.0f * (float)humidity_raw / 65535.0f;

	return true;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000c98 	.word	0x20000c98
 8002044:	0801f5c8 	.word	0x0801f5c8
 8002048:	432f0000 	.word	0x432f0000
 800204c:	477fff00 	.word	0x477fff00
 8002050:	42340000 	.word	0x42340000

08002054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_MspInit+0x54>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_MspInit+0x54>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_MspInit+0x54>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_MspInit+0x54>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_MspInit+0x54>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_MspInit+0x54>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	210f      	movs	r1, #15
 8002096:	f06f 0001 	mvn.w	r0, #1
 800209a:	f001 fac1 	bl	8003620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_ADC_MspInit+0x48>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d115      	bne.n	80020ea <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_ADC_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_ADC_MspInit+0x4c>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_ADC_MspInit+0x4c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	2012      	movs	r0, #18
 80020e0:	f001 fa9e 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020e4:	2012      	movs	r0, #18
 80020e6:	f001 fab7 	bl	8003658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40012000 	.word	0x40012000
 80020f8:	40023800 	.word	0x40023800

080020fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	; (80021ec <HAL_I2C_MspInit+0xf0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d162      	bne.n	80021e4 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_I2C_MspInit+0xf4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <HAL_I2C_MspInit+0xf4>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_I2C_MspInit+0xf4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800213a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002140:	2312      	movs	r3, #18
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002144:	2301      	movs	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800214c:	2304      	movs	r3, #4
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4827      	ldr	r0, [pc, #156]	; (80021f4 <HAL_I2C_MspInit+0xf8>)
 8002158:	f003 f970 	bl	800543c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_I2C_MspInit+0xf4>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_I2C_MspInit+0xf4>)
 8002166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_I2C_MspInit+0xf4>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_I2C_MspInit+0x100>)
 800217c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 8002180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002184:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 8002194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002198:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80021b8:	480f      	ldr	r0, [pc, #60]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021ba:	f001 fa69 	bl	8003690 <HAL_DMA_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80021c4:	f7ff fde4 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_I2C_MspInit+0xfc>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2105      	movs	r1, #5
 80021d8:	201f      	movs	r0, #31
 80021da:	f001 fa21 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021de:	201f      	movs	r0, #31
 80021e0:	f001 fa3a 	bl	8003658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40005400 	.word	0x40005400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020400 	.word	0x40020400
 80021f8:	20000b58 	.word	0x20000b58
 80021fc:	40026010 	.word	0x40026010

08002200 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_I2C_MspDeInit+0x4c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d117      	bne.n	8002242 <HAL_I2C_MspDeInit+0x42>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_I2C_MspDeInit+0x50>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_I2C_MspDeInit+0x50>)
 8002218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <HAL_I2C_MspDeInit+0x54>)
 8002224:	f003 fab6 	bl	8005794 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800222c:	4809      	ldr	r0, [pc, #36]	; (8002254 <HAL_I2C_MspDeInit+0x54>)
 800222e:	f003 fab1 	bl	8005794 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fad8 	bl	80037ec <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800223c:	201f      	movs	r0, #31
 800223e:	f001 fa19 	bl	8003674 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40005400 	.word	0x40005400
 8002250:	40023800 	.word	0x40023800
 8002254:	40020400 	.word	0x40020400

08002258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_TIM_Base_MspInit+0x3c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10d      	bne.n	8002286 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_TIM_Base_MspInit+0x40>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_TIM_Base_MspInit+0x40>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_TIM_Base_MspInit+0x40>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40001c00 	.word	0x40001c00
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_TIM_MspPostInit+0x68>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d11e      	bne.n	80022fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_TIM_MspPostInit+0x6c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_TIM_MspPostInit+0x6c>)
 80022c8:	f043 0320 	orr.w	r3, r3, #32
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_TIM_MspPostInit+0x6c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 80022da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80022ec:	2309      	movs	r3, #9
 80022ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_TIM_MspPostInit+0x70>)
 80022f8:	f003 f8a0 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40001c00 	.word	0x40001c00
 8002308:	40023800 	.word	0x40023800
 800230c:	40021400 	.word	0x40021400

08002310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a36      	ldr	r2, [pc, #216]	; (8002408 <HAL_UART_MspInit+0xf8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12c      	bne.n	800238c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_UART_MspInit+0xfc>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_UART_MspInit+0xfc>)
 800233c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_UART_MspInit+0xfc>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <HAL_UART_MspInit+0xfc>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_UART_MspInit+0xfc>)
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_UART_MspInit+0xfc>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = TEMPERATURE_ROOM_Pin;
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236e:	2312      	movs	r3, #18
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800237a:	2308      	movs	r3, #8
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMPERATURE_ROOM_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	4822      	ldr	r0, [pc, #136]	; (8002410 <HAL_UART_MspInit+0x100>)
 8002386:	f003 f859 	bl	800543c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238a:	e039      	b.n	8002400 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a20      	ldr	r2, [pc, #128]	; (8002414 <HAL_UART_MspInit+0x104>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d134      	bne.n	8002400 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_UART_MspInit+0xfc>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_UART_MspInit+0xfc>)
 80023a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_UART_MspInit+0xfc>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_UART_MspInit+0xfc>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_UART_MspInit+0xfc>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_UART_MspInit+0xfc>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023e0:	2307      	movs	r3, #7
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	4619      	mov	r1, r3
 80023ea:	480b      	ldr	r0, [pc, #44]	; (8002418 <HAL_UART_MspInit+0x108>)
 80023ec:	f003 f826 	bl	800543c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2105      	movs	r1, #5
 80023f4:	2027      	movs	r0, #39	; 0x27
 80023f6:	f001 f913 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023fa:	2027      	movs	r0, #39	; 0x27
 80023fc:	f001 f92c 	bl	8003658 <HAL_NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3730      	adds	r7, #48	; 0x30
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40007800 	.word	0x40007800
 800240c:	40023800 	.word	0x40023800
 8002410:	40021400 	.word	0x40021400
 8002414:	40004800 	.word	0x40004800
 8002418:	40020c00 	.word	0x40020c00

0800241c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08e      	sub	sp, #56	; 0x38
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_InitTick+0xe4>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_InitTick+0xe4>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_InitTick+0xe4>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002448:	f107 0210 	add.w	r2, r7, #16
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f006 fe7e 	bl	8009154 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002462:	f006 fe4f 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 8002466:	6378      	str	r0, [r7, #52]	; 0x34
 8002468:	e004      	b.n	8002474 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800246a:	f006 fe4b 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 800246e:	4603      	mov	r3, r0
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_InitTick+0xe8>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	3b01      	subs	r3, #1
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_InitTick+0xec>)
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_InitTick+0xf0>)
 8002486:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_InitTick+0xec>)
 800248a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800248e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_InitTick+0xec>)
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_InitTick+0xec>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_InitTick+0xec>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_InitTick+0xec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024a8:	4817      	ldr	r0, [pc, #92]	; (8002508 <HAL_InitTick+0xec>)
 80024aa:	f006 fe85 	bl	80091b8 <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d11b      	bne.n	80024f4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024bc:	4812      	ldr	r0, [pc, #72]	; (8002508 <HAL_InitTick+0xec>)
 80024be:	f006 fecb 	bl	8009258 <HAL_TIM_Base_Start_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024d0:	2036      	movs	r0, #54	; 0x36
 80024d2:	f001 f8c1 	bl	8003658 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d808      	bhi.n	80024ee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024dc:	2200      	movs	r2, #0
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	2036      	movs	r0, #54	; 0x36
 80024e2:	f001 f89d 	bl	8003620 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_InitTick+0xf4>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	e002      	b.n	80024f4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3738      	adds	r7, #56	; 0x38
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	431bde83 	.word	0x431bde83
 8002508:	20000cb4 	.word	0x20000cb4
 800250c:	40001000 	.word	0x40001000
 8002510:	20000004 	.word	0x20000004

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <DMA1_Stream0_IRQHandler+0x10>)
 8002546:	f001 fa99 	bl	8003a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000b58 	.word	0x20000b58

08002554 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <ADC_IRQHandler+0x10>)
 800255a:	f000 fc1b 	bl	8002d94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000abc 	.word	0x20000abc

08002568 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <I2C1_EV_IRQHandler+0x10>)
 800256e:	f004 f81b 	bl	80065a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000b04 	.word	0x20000b04

0800257c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <USART3_IRQHandler+0x10>)
 8002582:	f007 fdc3 	bl	800a10c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000c48 	.word	0x20000c48

08002590 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM6_DAC_IRQHandler+0x10>)
 8002596:	f006 fff1 	bl	800957c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000cb4 	.word	0x20000cb4

080025a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <ETH_IRQHandler+0x10>)
 80025aa:	f002 f871 	bl	8004690 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20005824 	.word	0x20005824

080025b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return 1;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_kill>:

int _kill(int pid, int sig)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <_kill+0x20>)
 80025d4:	2216      	movs	r2, #22
 80025d6:	601a      	str	r2, [r3, #0]
  return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	20013688 	.word	0x20013688

080025ec <_exit>:

void _exit (int status)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ffe5 	bl	80025c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025fe:	e7fe      	b.n	80025fe <_exit+0x12>

08002600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e00a      	b.n	8002628 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002612:	f3af 8000 	nop.w
 8002616:	4601      	mov	r1, r0
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	60ba      	str	r2, [r7, #8]
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf0      	blt.n	8002612 <_read+0x12>
  }

  return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e009      	b.n	8002660 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	60ba      	str	r2, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f82d 	bl	80016b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbf1      	blt.n	800264c <_write+0x12>
  }
  return len;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_close>:

int _close(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269a:	605a      	str	r2, [r3, #4]
  return 0;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_isatty>:

int _isatty(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <_sbrk+0x5c>)
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <_sbrk+0x60>)
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <_sbrk+0x64>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <_sbrk+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d205      	bcs.n	8002718 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <_sbrk+0x6c>)
 800270e:	220c      	movs	r2, #12
 8002710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	e009      	b.n	800272c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	4a06      	ldr	r2, [pc, #24]	; (8002740 <_sbrk+0x64>)
 8002728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272a:	68fb      	ldr	r3, [r7, #12]
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20030000 	.word	0x20030000
 800273c:	00000400 	.word	0x00000400
 8002740:	20000cfc 	.word	0x20000cfc
 8002744:	20013690 	.word	0x20013690
 8002748:	20013688 	.word	0x20013688

0800274c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <SystemInit+0x20>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <SystemInit+0x20>)
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002774:	f7ff ffea 	bl	800274c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002778:	480c      	ldr	r0, [pc, #48]	; (80027ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800277a:	490d      	ldr	r1, [pc, #52]	; (80027b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800279e:	f01a feef 	bl	801d580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a2:	f7fe ffef 	bl	8001784 <main>
  bx  lr    
 80027a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80027b4:	080249b8 	.word	0x080249b8
  ldr r2, =_sbss
 80027b8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80027bc:	20013690 	.word	0x20013690

080027c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <CAN1_RX0_IRQHandler>

080027c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <LAN8742_RegisterBusIO+0x28>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <LAN8742_RegisterBusIO+0x28>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <LAN8742_RegisterBusIO+0x28>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e014      	b.n	800281a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d17c      	bne.n	8002940 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e01c      	b.n	800289a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	2112      	movs	r1, #18
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	4798      	blx	r3
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	da03      	bge.n	800287c <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002874:	f06f 0304 	mvn.w	r3, #4
 8002878:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800287a:	e00b      	b.n	8002894 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	d105      	bne.n	8002894 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
         break;
 8002892:	e005      	b.n	80028a0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b1f      	cmp	r3, #31
 800289e:	d9df      	bls.n	8002860 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b1f      	cmp	r3, #31
 80028a6:	d902      	bls.n	80028ae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80028a8:	f06f 0302 	mvn.w	r3, #2
 80028ac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d145      	bne.n	8002940 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6810      	ldr	r0, [r2, #0]
 80028bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028c0:	2100      	movs	r1, #0
 80028c2:	4798      	blx	r3
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	db37      	blt.n	800293a <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6810      	ldr	r0, [r2, #0]
 80028d2:	f107 0208 	add.w	r2, r7, #8
 80028d6:	2100      	movs	r1, #0
 80028d8:	4798      	blx	r3
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db28      	blt.n	8002932 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4798      	blx	r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80028ea:	e01c      	b.n	8002926 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4798      	blx	r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028fe:	d80e      	bhi.n	800291e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6810      	ldr	r0, [r2, #0]
 8002908:	f107 0208 	add.w	r2, r7, #8
 800290c:	2100      	movs	r1, #0
 800290e:	4798      	blx	r3
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	da07      	bge.n	8002926 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8002916:	f06f 0304 	mvn.w	r3, #4
 800291a:	613b      	str	r3, [r7, #16]
                 break;
 800291c:	e010      	b.n	8002940 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800291e:	f06f 0301 	mvn.w	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
               break;
 8002924:	e00c      	b.n	8002940 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1dd      	bne.n	80028ec <LAN8742_Init+0xc6>
 8002930:	e006      	b.n	8002940 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002932:	f06f 0304 	mvn.w	r3, #4
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	e002      	b.n	8002940 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800293a:	f06f 0303 	mvn.w	r3, #3
 800293e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d112      	bne.n	800296c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4798      	blx	r3
 800294c:	4603      	mov	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002950:	bf00      	nop
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	4798      	blx	r3
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002964:	d9f5      	bls.n	8002952 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800296c:	693b      	ldr	r3, [r7, #16]
 }
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6810      	ldr	r0, [r2, #0]
 800298a:	f107 020c 	add.w	r2, r7, #12
 800298e:	2101      	movs	r1, #1
 8002990:	4798      	blx	r3
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	da02      	bge.n	800299e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002998:	f06f 0304 	mvn.w	r3, #4
 800299c:	e06e      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6810      	ldr	r0, [r2, #0]
 80029a6:	f107 020c 	add.w	r2, r7, #12
 80029aa:	2101      	movs	r1, #1
 80029ac:	4798      	blx	r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	da02      	bge.n	80029ba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80029b4:	f06f 0304 	mvn.w	r3, #4
 80029b8:	e060      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e059      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6810      	ldr	r0, [r2, #0]
 80029d0:	f107 020c 	add.w	r2, r7, #12
 80029d4:	2100      	movs	r1, #0
 80029d6:	4798      	blx	r3
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da02      	bge.n	80029e4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80029de:	f06f 0304 	mvn.w	r3, #4
 80029e2:	e04b      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11b      	bne.n	8002a26 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <LAN8742_GetLinkState+0x90>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002a02:	2302      	movs	r3, #2
 8002a04:	e03a      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e033      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e02c      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002a22:	2305      	movs	r3, #5
 8002a24:	e02a      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6810      	ldr	r0, [r2, #0]
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	211f      	movs	r1, #31
 8002a34:	4798      	blx	r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da02      	bge.n	8002a42 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002a3c:	f06f 0304 	mvn.w	r3, #4
 8002a40:	e01c      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002a4c:	2306      	movs	r3, #6
 8002a4e:	e015      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 031c 	and.w	r3, r3, #28
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	d101      	bne.n	8002a5e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e00e      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 031c 	and.w	r3, r3, #28
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d101      	bne.n	8002a6c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e007      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 031c 	and.w	r3, r3, #28
 8002a72:	2b14      	cmp	r3, #20
 8002a74:	d101      	bne.n	8002a7a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002a76:	2304      	movs	r3, #4
 8002a78:	e000      	b.n	8002a7c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002a7a:	2305      	movs	r3, #5
    }
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_Init+0x40>)
 8002a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <HAL_Init+0x40>)
 8002a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_Init+0x40>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_Init+0x40>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aac:	2003      	movs	r0, #3
 8002aae:	f000 fdac 	bl	800360a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab2:	200f      	movs	r0, #15
 8002ab4:	f7ff fcb2 	bl	800241c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab8:	f7ff facc 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x20>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x24>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_IncTick+0x24>)
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20000d00 	.word	0x20000d00

08002af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_GetTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000d00 	.word	0x20000d00

08002b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff ffee 	bl	8002af0 <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d005      	beq.n	8002b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_Delay+0x44>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b2e:	bf00      	nop
 8002b30:	f7ff ffde 	bl	8002af0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d8f7      	bhi.n	8002b30 <HAL_Delay+0x28>
  {
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000008 	.word	0x20000008

08002b50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e033      	b.n	8002bce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fa9c 	bl	80020ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d118      	bne.n	8002bc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b96:	f023 0302 	bic.w	r3, r3, #2
 8002b9a:	f043 0202 	orr.w	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fb5a 	bl	800325c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bbe:	e001      	b.n	8002bc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Start_IT+0x1a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0bd      	b.n	8002d6e <HAL_ADC_Start_IT+0x196>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d018      	beq.n	8002c3a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c18:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_ADC_Start_IT+0x1a4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_ADC_Start_IT+0x1a8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9a      	lsrs	r2, r3, #18
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	f040 8085 	bne.w	8002d54 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d106      	bne.n	8002c98 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f023 0206 	bic.w	r2, r3, #6
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
 8002c96:	e002      	b.n	8002c9e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_ADC_Start_IT+0x1ac>)
 8002ca8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cb2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12a      	bne.n	8002d2a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2b      	ldr	r2, [pc, #172]	; (8002d88 <HAL_ADC_Start_IT+0x1b0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d015      	beq.n	8002d0a <HAL_ADC_Start_IT+0x132>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <HAL_ADC_Start_IT+0x1b4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_Start_IT+0x11c>
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <HAL_ADC_Start_IT+0x1ac>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <HAL_ADC_Start_IT+0x1b8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d136      	bne.n	8002d6c <HAL_ADC_Start_IT+0x194>
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_ADC_Start_IT+0x1ac>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d130      	bne.n	8002d6c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d129      	bne.n	8002d6c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	e020      	b.n	8002d6c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_ADC_Start_IT+0x1b0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d11b      	bne.n	8002d6c <HAL_ADC_Start_IT+0x194>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d114      	bne.n	8002d6c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	e00b      	b.n	8002d6c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f043 0210 	orr.w	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	431bde83 	.word	0x431bde83
 8002d84:	40012300 	.word	0x40012300
 8002d88:	40012000 	.word	0x40012000
 8002d8c:	40012100 	.word	0x40012100
 8002d90:	40012200 	.word	0x40012200

08002d94 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d049      	beq.n	8002e5e <HAL_ADC_IRQHandler+0xca>
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d046      	beq.n	8002e5e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d12b      	bne.n	8002e4e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d127      	bne.n	8002e4e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d119      	bne.n	8002e4e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0220 	bic.w	r2, r2, #32
 8002e28:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fb32 	bl	80014b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0212 	mvn.w	r2, #18
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d057      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x190>
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d054      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d139      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d12b      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d124      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11d      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d119      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa9d 	bl	8003454 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 020c 	mvn.w	r2, #12
 8002f22:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d017      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x1d6>
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d014      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10d      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f837 	bl	8002fce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0201 	mvn.w	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f78:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_ADC_IRQHandler+0x218>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d012      	beq.n	8002fac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f043 0202 	orr.w	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0220 	mvn.w	r2, #32
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f820 	bl	8002fe2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0220 	mvn.w	r2, #32
 8002faa:	601a      	str	r2, [r3, #0]
  }
}
 8002fac:	bf00      	nop
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1c>
 8003010:	2302      	movs	r3, #2
 8003012:	e113      	b.n	800323c <HAL_ADC_ConfigChannel+0x244>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d925      	bls.n	8003070 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	3b1e      	subs	r3, #30
 800303a:	2207      	movs	r2, #7
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43da      	mvns	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	400a      	ands	r2, r1
 8003048:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68d9      	ldr	r1, [r3, #12]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	4603      	mov	r3, r0
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4403      	add	r3, r0
 8003062:	3b1e      	subs	r3, #30
 8003064:	409a      	lsls	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e022      	b.n	80030b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	2207      	movs	r2, #7
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	400a      	ands	r2, r1
 8003092:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4403      	add	r3, r0
 80030ac:	409a      	lsls	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d824      	bhi.n	8003108 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b05      	subs	r3, #5
 80030d0:	221f      	movs	r2, #31
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	400a      	ands	r2, r1
 80030de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4618      	mov	r0, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	3b05      	subs	r3, #5
 80030fa:	fa00 f203 	lsl.w	r2, r0, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
 8003106:	e04c      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d824      	bhi.n	800315a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	3b23      	subs	r3, #35	; 0x23
 8003122:	221f      	movs	r2, #31
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43da      	mvns	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	400a      	ands	r2, r1
 8003130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3b23      	subs	r3, #35	; 0x23
 800314c:	fa00 f203 	lsl.w	r2, r0, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
 8003158:	e023      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b41      	subs	r3, #65	; 0x41
 800316c:	221f      	movs	r2, #31
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4618      	mov	r0, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b41      	subs	r3, #65	; 0x41
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_ADC_ConfigChannel+0x250>)
 80031a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a28      	ldr	r2, [pc, #160]	; (800324c <HAL_ADC_ConfigChannel+0x254>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d10f      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d8>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b12      	cmp	r3, #18
 80031b6:	d10b      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_ADC_ConfigChannel+0x254>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12b      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x23a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_ADC_ConfigChannel+0x258>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x1f4>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b11      	cmp	r3, #17
 80031ea:	d122      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_ADC_ConfigChannel+0x258>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d111      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_ADC_ConfigChannel+0x25c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <HAL_ADC_ConfigChannel+0x260>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	0c9a      	lsrs	r2, r3, #18
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003224:	e002      	b.n	800322c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3b01      	subs	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40012300 	.word	0x40012300
 800324c:	40012000 	.word	0x40012000
 8003250:	10000012 	.word	0x10000012
 8003254:	20000000 	.word	0x20000000
 8003258:	431bde83 	.word	0x431bde83

0800325c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003264:	4b79      	ldr	r3, [pc, #484]	; (800344c <ADC_Init+0x1f0>)
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	021a      	lsls	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	4a58      	ldr	r2, [pc, #352]	; (8003450 <ADC_Init+0x1f4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d022      	beq.n	800333a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e00f      	b.n	800335a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003358:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0202 	bic.w	r2, r2, #2
 8003368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e1b      	ldrb	r3, [r3, #24]
 8003374:	005a      	lsls	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003396:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	3b01      	subs	r3, #1
 80033b4:	035a      	lsls	r2, r3, #13
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e007      	b.n	80033d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	051a      	lsls	r2, r3, #20
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003412:	025a      	lsls	r2, r3, #9
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	029a      	lsls	r2, r3, #10
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012300 	.word	0x40012300
 8003450:	0f000001 	.word	0x0f000001

08003454 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <__NVIC_SetPriorityGrouping+0x44>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003484:	4013      	ands	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349a:	4a04      	ldr	r2, [pc, #16]	; (80034ac <__NVIC_SetPriorityGrouping+0x44>)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	60d3      	str	r3, [r2, #12]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <__NVIC_GetPriorityGrouping+0x18>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 0307 	and.w	r3, r3, #7
}
 80034be:	4618      	mov	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	db0b      	blt.n	80034f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <__NVIC_EnableIRQ+0x38>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2001      	movs	r0, #1
 80034ee:	fa00 f202 	lsl.w	r2, r0, r2
 80034f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db12      	blt.n	8003540 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	490a      	ldr	r1, [pc, #40]	; (800354c <__NVIC_DisableIRQ+0x44>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2001      	movs	r0, #1
 800352a:	fa00 f202 	lsl.w	r2, r0, r2
 800352e:	3320      	adds	r3, #32
 8003530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003534:	f3bf 8f4f 	dsb	sy
}
 8003538:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800353a:	f3bf 8f6f 	isb	sy
}
 800353e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff28 	bl	8003468 <__NVIC_SetPriorityGrouping>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003632:	f7ff ff3d 	bl	80034b0 <__NVIC_GetPriorityGrouping>
 8003636:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	6978      	ldr	r0, [r7, #20]
 800363e:	f7ff ffb1 	bl	80035a4 <NVIC_EncodePriority>
 8003642:	4602      	mov	r2, r0
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff80 	bl	8003550 <__NVIC_SetPriority>
}
 8003650:	bf00      	nop
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff30 	bl	80034cc <__NVIC_EnableIRQ>
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff40 	bl	8003508 <__NVIC_DisableIRQ>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff fa28 	bl	8002af0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e099      	b.n	80037e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036cc:	e00f      	b.n	80036ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ce:	f7ff fa0f 	bl	8002af0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d908      	bls.n	80036ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e078      	b.n	80037e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e8      	bne.n	80036ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_DMA_Init+0x158>)
 8003708:	4013      	ands	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4313      	orrs	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b04      	cmp	r3, #4
 8003780:	d117      	bne.n	80037b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fb79 	bl	8003e8c <DMA_CheckFifoParam>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ae:	2301      	movs	r3, #1
 80037b0:	e016      	b.n	80037e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fb30 	bl	8003e20 <DMA_CalcBaseAndBitshift>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	223f      	movs	r2, #63	; 0x3f
 80037ca:	409a      	lsls	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	f010803f 	.word	0xf010803f

080037ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e050      	b.n	80038a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d101      	bne.n	800380e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	e048      	b.n	80038a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2221      	movs	r2, #33	; 0x21
 800384c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fae6 	bl	8003e20 <DMA_CalcBaseAndBitshift>
 8003854:	4603      	mov	r3, r0
 8003856:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_DMA_Start_IT+0x26>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e040      	b.n	8003950 <HAL_DMA_Start_IT+0xa8>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d12f      	bne.n	8003942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa64 	bl	8003dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	223f      	movs	r2, #63	; 0x3f
 8003902:	409a      	lsls	r2, r3
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0216 	orr.w	r2, r2, #22
 8003916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e005      	b.n	800394e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003966:	f7ff f8c3 	bl	8002af0 <HAL_GetTick>
 800396a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d008      	beq.n	800398a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e052      	b.n	8003a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0216 	bic.w	r2, r2, #22
 8003998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <HAL_DMA_Abort+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0208 	bic.w	r2, r2, #8
 80039c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039da:	e013      	b.n	8003a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039dc:	f7ff f888 	bl	8002af0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d90c      	bls.n	8003a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2203      	movs	r2, #3
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e015      	b.n	8003a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e4      	bne.n	80039dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	223f      	movs	r2, #63	; 0x3f
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d004      	beq.n	8003a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00c      	b.n	8003a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2205      	movs	r2, #5
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a88:	4b8e      	ldr	r3, [pc, #568]	; (8003cc4 <HAL_DMA_IRQHandler+0x248>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a8e      	ldr	r2, [pc, #568]	; (8003cc8 <HAL_DMA_IRQHandler+0x24c>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0a9b      	lsrs	r3, r3, #10
 8003a94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01a      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0204 	bic.w	r2, r2, #4
 8003ace:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f043 0201 	orr.w	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	2204      	movs	r2, #4
 8003b24:	409a      	lsls	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2204      	movs	r2, #4
 8003b42:	409a      	lsls	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0204 	orr.w	r2, r3, #4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2210      	movs	r2, #16
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d043      	beq.n	8003bec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03c      	beq.n	8003bec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	2210      	movs	r2, #16
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d018      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d108      	bne.n	8003bac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d024      	beq.n	8003bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
 8003baa:	e01f      	b.n	8003bec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01b      	beq.n	8003bec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
 8003bbc:	e016      	b.n	8003bec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0208 	bic.w	r2, r2, #8
 8003bda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 808f 	beq.w	8003d1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8087 	beq.w	8003d1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	2220      	movs	r2, #32
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d136      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0216 	bic.w	r2, r2, #22
 8003c34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_DMA_IRQHandler+0x1da>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0208 	bic.w	r2, r2, #8
 8003c64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	223f      	movs	r2, #63	; 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d07e      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
        }
        return;
 8003c92:	e079      	b.n	8003d88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d031      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
 8003cc0:	e02c      	b.n	8003d1c <HAL_DMA_IRQHandler+0x2a0>
 8003cc2:	bf00      	nop
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d023      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
 8003cdc:	e01e      	b.n	8003d1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10f      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0210 	bic.w	r2, r2, #16
 8003cfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d032      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2205      	movs	r2, #5
 8003d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d307      	bcc.n	8003d64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f2      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x2cc>
 8003d62:	e000      	b.n	8003d66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
 8003d86:	e000      	b.n	8003d8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d88:	bf00      	nop
    }
  }
}
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d9e:	b2db      	uxtb	r3, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d108      	bne.n	8003e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e02:	e007      	b.n	8003e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	60da      	str	r2, [r3, #12]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3b10      	subs	r3, #16
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <DMA_CalcBaseAndBitshift+0x64>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <DMA_CalcBaseAndBitshift+0x68>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d909      	bls.n	8003e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e60:	e007      	b.n	8003e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	aaaaaaab 	.word	0xaaaaaaab
 8003e88:	08022c04 	.word	0x08022c04

08003e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11f      	bne.n	8003ee6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d856      	bhi.n	8003f5a <DMA_CheckFifoParam+0xce>
 8003eac:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <DMA_CheckFifoParam+0x28>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ed7 	.word	0x08003ed7
 8003ebc:	08003ec5 	.word	0x08003ec5
 8003ec0:	08003f5b 	.word	0x08003f5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d046      	beq.n	8003f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed4:	e043      	b.n	8003f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ede:	d140      	bne.n	8003f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee4:	e03d      	b.n	8003f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	d121      	bne.n	8003f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d837      	bhi.n	8003f66 <DMA_CheckFifoParam+0xda>
 8003ef6:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <DMA_CheckFifoParam+0x70>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f0d 	.word	0x08003f0d
 8003f00:	08003f13 	.word	0x08003f13
 8003f04:	08003f0d 	.word	0x08003f0d
 8003f08:	08003f25 	.word	0x08003f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e030      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d025      	beq.n	8003f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f22:	e022      	b.n	8003f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f2c:	d11f      	bne.n	8003f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f32:	e01c      	b.n	8003f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d903      	bls.n	8003f42 <DMA_CheckFifoParam+0xb6>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d003      	beq.n	8003f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f40:	e018      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
      break;
 8003f46:	e015      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      break;
 8003f58:	e00b      	b.n	8003f72 <DMA_CheckFifoParam+0xe6>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e00a      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e008      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f62:	bf00      	nop
 8003f64:	e006      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f66:	bf00      	nop
 8003f68:	e004      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
    }
  } 
  
  return status; 
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06c      	b.n	8004070 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2223      	movs	r2, #35	; 0x23
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f007 fbff 	bl	800b7ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_ETH_Init+0xf4>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	4a30      	ldr	r2, [pc, #192]	; (8004078 <HAL_ETH_Init+0xf4>)
 8003fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_ETH_Init+0xf4>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_ETH_Init+0xf8>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4a2b      	ldr	r2, [pc, #172]	; (800407c <HAL_ETH_Init+0xf8>)
 8003fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fd6:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_ETH_Init+0xf8>)
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4927      	ldr	r1, [pc, #156]	; (800407c <HAL_ETH_Init+0xf8>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_ETH_Init+0xf8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004000:	f7fe fd76 	bl	8002af0 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004006:	e011      	b.n	800402c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004008:	f7fe fd72 	bl	8002af0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004016:	d909      	bls.n	800402c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2204      	movs	r2, #4
 800401c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	22e0      	movs	r2, #224	; 0xe0
 8004024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e021      	b.n	8004070 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e4      	bne.n	8004008 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 ff56 	bl	8004ef0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fffd 	bl	8005044 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 f853 	bl	80050f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	461a      	mov	r2, r3
 8004056:	2100      	movs	r1, #0
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 ffbb 	bl	8004fd4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2210      	movs	r2, #16
 800406a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	40013800 	.word	0x40013800

08004080 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408e:	2b10      	cmp	r3, #16
 8004090:	d17f      	bne.n	8004192 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2223      	movs	r2, #35	; 0x23
 8004096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80040ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040c4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80040d8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2204      	movs	r2, #4
 80040e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9f8 	bl	80044d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0208 	orr.w	r2, r2, #8
 80040f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fe fd01 	bl	8002b08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0204 	orr.w	r2, r2, #4
 800411c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004126:	2001      	movs	r0, #1
 8004128:	f7fe fcee 	bl	8002b08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fd7c 	bl	8004c32 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800414c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004150:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004168:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800417c:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004180:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004184:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2223      	movs	r2, #35	; 0x23
 800418a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041aa:	2b23      	cmp	r3, #35	; 0x23
 80041ac:	d170      	bne.n	8004290 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2223      	movs	r2, #35	; 0x23
 80041b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80041c8:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80041cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041d0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	f023 0302 	bic.w	r3, r3, #2
 80041fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004200:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800421a:	2001      	movs	r0, #1
 800421c:	f7fe fc74 	bl	8002b08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fd02 	bl	8004c32 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004246:	2001      	movs	r0, #1
 8004248:	f7fe fc5e 	bl	8002b08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e00e      	b.n	8004278 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	3212      	adds	r2, #18
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3301      	adds	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d9ed      	bls.n	800425a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2210      	movs	r2, #16
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e045      	b.n	800434a <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	2b23      	cmp	r3, #35	; 0x23
 80042c6:	d13f      	bne.n	8004348 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80042d0:	2201      	movs	r2, #1
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 ff7b 	bl	80051d0 <ETH_Prepare_Tx_Descriptors>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f043 0202 	orr.w	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e02a      	b.n	800434a <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80042f4:	f3bf 8f4f 	dsb	sy
}
 80042f8:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	2b03      	cmp	r3, #3
 800430a:	d904      	bls.n	8004316 <HAL_ETH_Transmit_IT+0x7c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	1f1a      	subs	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004330:	461a      	mov	r2, r3
 8004332:	2304      	movs	r3, #4
 8004334:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b088      	sub	sp, #32
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0a8      	b.n	80044d0 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	2b23      	cmp	r3, #35	; 0x23
 8004386:	d001      	beq.n	800438c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0a1      	b.n	80044d0 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	3212      	adds	r2, #18
 8004398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a2:	f1c3 0304 	rsb	r3, r3, #4
 80043a6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043a8:	e06a      	b.n	8004480 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_ETH_ReadData+0x88>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d040      	beq.n	800445c <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800440e:	3b04      	subs	r3, #4
 8004410:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004436:	461a      	mov	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f007 fb90 	bl	800bb60 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2200      	movs	r2, #0
 800445a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d902      	bls.n	800446e <HAL_ETH_ReadData+0x11c>
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3b04      	subs	r3, #4
 800446c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	3212      	adds	r2, #18
 8004474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004478:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3301      	adds	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004484:	2b00      	cmp	r3, #0
 8004486:	db06      	blt.n	8004496 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	429a      	cmp	r2, r3
 800448e:	d202      	bcs.n	8004496 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d089      	beq.n	80043aa <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f814 	bl	80044d8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	3212      	adds	r2, #18
 80044f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004500:	e03d      	b.n	800457e <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d112      	bne.n	8004530 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	4618      	mov	r0, r3
 8004510:	f007 faf6 	bl	800bb00 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	74fb      	strb	r3, [r7, #19]
 800451e:	e007      	b.n	8004530 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	461a      	mov	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	461a      	mov	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d023      	beq.n	800457e <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <ETH_UpdateDescriptor+0xfc>)
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	e003      	b.n	800454e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800454c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3301      	adds	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b03      	cmp	r3, #3
 8004564:	d902      	bls.n	800456c <ETH_UpdateDescriptor+0x94>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3b04      	subs	r3, #4
 800456a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	3212      	adds	r2, #18
 8004572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004576:	617b      	str	r3, [r7, #20]
      desccount--;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	3b01      	subs	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <ETH_UpdateDescriptor+0xb2>
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1bb      	bne.n	8004502 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d01a      	beq.n	80045ca <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800459e:	f3bf 8f5f 	dmb	sy
}
 80045a2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6919      	ldr	r1, [r3, #16]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	18ca      	adds	r2, r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045bc:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80045ca:	bf00      	nop
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	80004600 	.word	0x80004600

080045d8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3318      	adds	r3, #24
 80045e4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80045f6:	e03f      	b.n	8004678 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3b01      	subs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3304      	adds	r3, #4
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3301      	adds	r3, #1
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d028      	beq.n	8004678 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68d9      	ldr	r1, [r3, #12]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	db1b      	blt.n	8004674 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3304      	adds	r3, #4
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4618      	mov	r0, r3
 800464a:	f007 fac9 	bl	800bbe0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3304      	adds	r3, #4
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	2200      	movs	r2, #0
 800465a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3301      	adds	r3, #1
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	62da      	str	r2, [r3, #44]	; 0x2c
 8004672:	e001      	b.n	8004678 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_ETH_ReleaseTxPacket+0xac>
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1b9      	bne.n	80045f8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d112      	bne.n	80046d0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d109      	bne.n	80046d0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_ETH_IRQHandler+0x178>)
 80046c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f006 fdb6 	bl	800b23c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d113      	bne.n	800470a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10a      	bne.n	800470a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	461a      	mov	r2, r3
 80046fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004702:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f006 fda9 	bl	800b25c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d14c      	bne.n	80047b8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d142      	bne.n	80047b8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f043 0208 	orr.w	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d11a      	bne.n	800478c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_ETH_IRQHandler+0x17c>)
 8004762:	4013      	ands	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800477c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004780:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	22e0      	movs	r2, #224	; 0xe0
 8004786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800478a:	e012      	b.n	80047b2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	f248 6380 	movw	r3, #34432	; 0x8680
 800479a:	4013      	ands	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047aa:	461a      	mov	r2, r3
 80047ac:	f248 6380 	movw	r3, #34432	; 0x8680
 80047b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f006 fd62 	bl	800b27c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d10e      	bne.n	80047e4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f81c 	bl	8004814 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <HAL_ETH_IRQHandler+0x180>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <HAL_ETH_IRQHandler+0x180>)
 80047f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047f6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f815 	bl	8004828 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	00010040 	.word	0x00010040
 800480c:	007e2000 	.word	0x007e2000
 8004810:	40013c00 	.word	0x40013c00

08004814 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 031c 	and.w	r3, r3, #28
 8004858:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	02db      	lsls	r3, r3, #11
 800485e:	b29b      	uxth	r3, r3
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	019b      	lsls	r3, r3, #6
 800486a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0302 	bic.w	r3, r3, #2
 800487a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800488c:	f7fe f930 	bl	8002af0 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004892:	e00d      	b.n	80048b0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004894:	f7fe f92c 	bl	8002af0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d301      	bcc.n	80048a8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e010      	b.n	80048ca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ec      	bne.n	8004894 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f003 031c 	and.w	r3, r3, #28
 80048ee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	02db      	lsls	r3, r3, #11
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	019b      	lsls	r3, r3, #6
 8004900:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800492c:	f7fe f8e0 	bl	8002af0 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004932:	e00d      	b.n	8004950 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004934:	f7fe f8dc 	bl	8002af0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004942:	d301      	bcc.n	8004948 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e009      	b.n	800495c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1ec      	bne.n	8004934 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0d9      	b.n	8004b2c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf14      	ite	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	2300      	moveq	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	0c1b      	lsrs	r3, r3, #16
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e00b      	b.n	8004b64 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d105      	bne.n	8004b62 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004b56:	6839      	ldr	r1, [r7, #0]
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f88f 	bl	8004c7c <ETH_SetMACConfig>

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 031c 	bic.w	r3, r3, #28
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004b84:	f004 fab2 	bl	80090ec <HAL_RCC_GetHCLKFreq>
 8004b88:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d908      	bls.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x38>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d804      	bhi.n	8004ba4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f043 0308 	orr.w	r3, r3, #8
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e027      	b.n	8004bf4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d908      	bls.n	8004bbe <HAL_ETH_SetMDIOClockRange+0x52>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d204      	bcs.n	8004bbe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f043 030c 	orr.w	r3, r3, #12
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e01a      	b.n	8004bf4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d303      	bcc.n	8004bce <HAL_ETH_SetMDIOClockRange+0x62>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d911      	bls.n	8004bf2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d908      	bls.n	8004be8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d804      	bhi.n	8004be8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e005      	b.n	8004bf4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f043 0310 	orr.w	r3, r3, #16
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e000      	b.n	8004bf4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004bf2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	611a      	str	r2, [r3, #16]
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	01312cff 	.word	0x01312cff
 8004c08:	02160ebf 	.word	0x02160ebf
 8004c0c:	03938700 	.word	0x03938700
 8004c10:	05f5e0ff 	.word	0x05f5e0ff
 8004c14:	08f0d17f 	.word	0x08f0d17f

08004c18 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c54:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c62:	2001      	movs	r0, #1
 8004c64:	f7fd ff50 	bl	8002b08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c72:	6193      	str	r3, [r2, #24]
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <ETH_SetMACConfig+0x15c>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	7c1b      	ldrb	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <ETH_SetMACConfig+0x28>
 8004c9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ca2:	e000      	b.n	8004ca6 <ETH_SetMACConfig+0x2a>
 8004ca4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	7c5b      	ldrb	r3, [r3, #17]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <ETH_SetMACConfig+0x38>
 8004cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cb2:	e000      	b.n	8004cb6 <ETH_SetMACConfig+0x3a>
 8004cb4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004cb6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004cbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	7fdb      	ldrb	r3, [r3, #31]
 8004cc2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004cc4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004cca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	7f92      	ldrb	r2, [r2, #30]
 8004cd0:	2a00      	cmp	r2, #0
 8004cd2:	d102      	bne.n	8004cda <ETH_SetMACConfig+0x5e>
 8004cd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cd8:	e000      	b.n	8004cdc <ETH_SetMACConfig+0x60>
 8004cda:	2200      	movs	r2, #0
                        macconf->Speed |
 8004cdc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	7f1b      	ldrb	r3, [r3, #28]
 8004ce2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ce4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004cea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	791b      	ldrb	r3, [r3, #4]
 8004cf0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004cf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d102      	bne.n	8004d04 <ETH_SetMACConfig+0x88>
 8004cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d02:	e000      	b.n	8004d06 <ETH_SetMACConfig+0x8a>
 8004d04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004d06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	7bdb      	ldrb	r3, [r3, #15]
 8004d0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004d0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004d14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d36:	2001      	movs	r0, #1
 8004d38:	f7fd fee6 	bl	8002b08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004d52:	4013      	ands	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	d101      	bne.n	8004d6a <ETH_SetMACConfig+0xee>
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	e000      	b.n	8004d6c <ETH_SetMACConfig+0xf0>
 8004d6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004d6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004d72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004d7a:	2a01      	cmp	r2, #1
 8004d7c:	d101      	bne.n	8004d82 <ETH_SetMACConfig+0x106>
 8004d7e:	2208      	movs	r2, #8
 8004d80:	e000      	b.n	8004d84 <ETH_SetMACConfig+0x108>
 8004d82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004d84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004d8c:	2a01      	cmp	r2, #1
 8004d8e:	d101      	bne.n	8004d94 <ETH_SetMACConfig+0x118>
 8004d90:	2204      	movs	r2, #4
 8004d92:	e000      	b.n	8004d96 <ETH_SetMACConfig+0x11a>
 8004d94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004d96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004d9e:	2a01      	cmp	r2, #1
 8004da0:	d101      	bne.n	8004da6 <ETH_SetMACConfig+0x12a>
 8004da2:	2202      	movs	r2, #2
 8004da4:	e000      	b.n	8004da8 <ETH_SetMACConfig+0x12c>
 8004da6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004da8:	4313      	orrs	r3, r2
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f7fd fea1 	bl	8002b08 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	619a      	str	r2, [r3, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	ff20810f 	.word	0xff20810f

08004ddc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4b3d      	ldr	r3, [pc, #244]	; (8004eec <ETH_SetDMAConfig+0x110>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <ETH_SetDMAConfig+0x2c>
 8004e02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e06:	e000      	b.n	8004e0a <ETH_SetDMAConfig+0x2e>
 8004e08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	7b5b      	ldrb	r3, [r3, #13]
 8004e0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	7f52      	ldrb	r2, [r2, #29]
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	d102      	bne.n	8004e20 <ETH_SetDMAConfig+0x44>
 8004e1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e1e:	e000      	b.n	8004e22 <ETH_SetDMAConfig+0x46>
 8004e20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004e22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	7b9b      	ldrb	r3, [r3, #14]
 8004e28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004e2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004e30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	7f1b      	ldrb	r3, [r3, #28]
 8004e36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004e38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	7f9b      	ldrb	r3, [r3, #30]
 8004e3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004e40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004e46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004e50:	4313      	orrs	r3, r2
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e60:	461a      	mov	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e72:	2001      	movs	r0, #1
 8004e74:	f7fd fe48 	bl	8002b08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e80:	461a      	mov	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	791b      	ldrb	r3, [r3, #4]
 8004e8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004e90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004e96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004e9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ea4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004ea6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004eae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004eb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ec2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	f7fd fe19 	bl	8002b08 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6013      	str	r3, [r2, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	f8de3f23 	.word	0xf8de3f23

08004ef0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b0a6      	sub	sp, #152	; 0x98
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f56:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004f64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fe86 	bl	8004c7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004f92:	2300      	movs	r3, #0
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fa4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004faa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004fc0:	f107 0308 	add.w	r3, r7, #8
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ff08 	bl	8004ddc <ETH_SetDMAConfig>
}
 8004fcc:	bf00      	nop
 8004fce:	3798      	adds	r7, #152	; 0x98
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3305      	adds	r3, #5
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	3204      	adds	r2, #4
 8004fec:	7812      	ldrb	r2, [r2, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <ETH_MACAddressConfig+0x68>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3303      	adds	r3, #3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	061a      	lsls	r2, r3, #24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3302      	adds	r3, #2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3301      	adds	r3, #1
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4313      	orrs	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <ETH_MACAddressConfig+0x6c>)
 8005026:	4413      	add	r3, r2
 8005028:	461a      	mov	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6013      	str	r3, [r2, #0]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40028040 	.word	0x40028040
 8005040:	40028044 	.word	0x40028044

08005044 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e03e      	b.n	80050d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	440b      	add	r3, r1
 8005062:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	3206      	adds	r2, #6
 8005084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d80c      	bhi.n	80050b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68d9      	ldr	r1, [r3, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	440b      	add	r3, r1
 80050ac:	461a      	mov	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	e004      	b.n	80050be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d9bd      	bls.n	8005052 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e8:	611a      	str	r2, [r3, #16]
}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	e046      	b.n	8005192 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6919      	ldr	r1, [r3, #16]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2200      	movs	r2, #0
 8005120:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2200      	movs	r2, #0
 8005126:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005140:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005148:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	3212      	adds	r2, #18
 800515e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d80c      	bhi.n	8005182 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6919      	ldr	r1, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	440b      	add	r3, r1
 800517a:	461a      	mov	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	e004      	b.n	800518c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	461a      	mov	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3301      	adds	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d9b5      	bls.n	8005104 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c2:	60da      	str	r2, [r3, #12]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b08d      	sub	sp, #52	; 0x34
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3318      	adds	r3, #24
 80051e0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d007      	beq.n	8005224 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	3304      	adds	r3, #4
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	e103      	b.n	8005430 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	3301      	adds	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005240:	f023 031f 	bic.w	r3, r3, #31
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	6852      	ldr	r2, [r2, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	431a      	orrs	r2, r3
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	431a      	orrs	r2, r3
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80052ae:	f3bf 8f5f 	dmb	sy
}
 80052b2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80052c0:	e084      	b.n	80053cc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e005      	b.n	80052ee <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	3301      	adds	r3, #1
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d902      	bls.n	8005300 <ETH_Prepare_Tx_Descriptors+0x130>
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	3b04      	subs	r3, #4
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800531e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005322:	d007      	beq.n	8005334 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	3304      	adds	r3, #4
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d029      	beq.n	8005388 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800533c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005340:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005342:	2300      	movs	r3, #0
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	e019      	b.n	800537c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8005348:	f3bf 8f5f 	dmb	sy
}
 800534c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	3301      	adds	r3, #1
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b03      	cmp	r3, #3
 8005364:	d902      	bls.n	800536c <ETH_Prepare_Tx_Descriptors+0x19c>
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	3b04      	subs	r3, #4
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005374:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	3301      	adds	r3, #1
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
 800537c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	429a      	cmp	r2, r3
 8005382:	d3e1      	bcc.n	8005348 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005384:	2302      	movs	r3, #2
 8005386:	e053      	b.n	8005430 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	3301      	adds	r3, #1
 800538c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80053a6:	f023 031f 	bic.w	r3, r3, #31
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80053ba:	f3bf 8f5f 	dmb	sy
}
 80053be:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f47f af76 	bne.w	80052c2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e005      	b.n	80053f6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005406:	6979      	ldr	r1, [r7, #20]
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	3304      	adds	r3, #4
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005416:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005418:	b672      	cpsid	i
}
 800541a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	4413      	add	r3, r2
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800542a:	b662      	cpsie	i
}
 800542c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3734      	adds	r7, #52	; 0x34
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	e177      	b.n	8005748 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005458:	2201      	movs	r2, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	429a      	cmp	r2, r3
 8005472:	f040 8166 	bne.w	8005742 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d005      	beq.n	800548e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548a:	2b02      	cmp	r3, #2
 800548c:	d130      	bne.n	80054f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c4:	2201      	movs	r2, #1
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f003 0201 	and.w	r2, r3, #1
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d017      	beq.n	800552c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d123      	bne.n	8005580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	08da      	lsrs	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3208      	adds	r2, #8
 8005540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	220f      	movs	r2, #15
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	08da      	lsrs	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3208      	adds	r2, #8
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	2203      	movs	r2, #3
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4013      	ands	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0203 	and.w	r2, r3, #3
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80c0 	beq.w	8005742 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	4b66      	ldr	r3, [pc, #408]	; (8005760 <HAL_GPIO_Init+0x324>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	4a65      	ldr	r2, [pc, #404]	; (8005760 <HAL_GPIO_Init+0x324>)
 80055cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d0:	6453      	str	r3, [r2, #68]	; 0x44
 80055d2:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_GPIO_Init+0x324>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055de:	4a61      	ldr	r2, [pc, #388]	; (8005764 <HAL_GPIO_Init+0x328>)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	220f      	movs	r2, #15
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_GPIO_Init+0x32c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d037      	beq.n	800567a <HAL_GPIO_Init+0x23e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a57      	ldr	r2, [pc, #348]	; (800576c <HAL_GPIO_Init+0x330>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d031      	beq.n	8005676 <HAL_GPIO_Init+0x23a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a56      	ldr	r2, [pc, #344]	; (8005770 <HAL_GPIO_Init+0x334>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <HAL_GPIO_Init+0x236>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a55      	ldr	r2, [pc, #340]	; (8005774 <HAL_GPIO_Init+0x338>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d025      	beq.n	800566e <HAL_GPIO_Init+0x232>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a54      	ldr	r2, [pc, #336]	; (8005778 <HAL_GPIO_Init+0x33c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <HAL_GPIO_Init+0x22e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a53      	ldr	r2, [pc, #332]	; (800577c <HAL_GPIO_Init+0x340>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d019      	beq.n	8005666 <HAL_GPIO_Init+0x22a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a52      	ldr	r2, [pc, #328]	; (8005780 <HAL_GPIO_Init+0x344>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_GPIO_Init+0x226>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a51      	ldr	r2, [pc, #324]	; (8005784 <HAL_GPIO_Init+0x348>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00d      	beq.n	800565e <HAL_GPIO_Init+0x222>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a50      	ldr	r2, [pc, #320]	; (8005788 <HAL_GPIO_Init+0x34c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <HAL_GPIO_Init+0x21e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a4f      	ldr	r2, [pc, #316]	; (800578c <HAL_GPIO_Init+0x350>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_GPIO_Init+0x21a>
 8005652:	2309      	movs	r3, #9
 8005654:	e012      	b.n	800567c <HAL_GPIO_Init+0x240>
 8005656:	230a      	movs	r3, #10
 8005658:	e010      	b.n	800567c <HAL_GPIO_Init+0x240>
 800565a:	2308      	movs	r3, #8
 800565c:	e00e      	b.n	800567c <HAL_GPIO_Init+0x240>
 800565e:	2307      	movs	r3, #7
 8005660:	e00c      	b.n	800567c <HAL_GPIO_Init+0x240>
 8005662:	2306      	movs	r3, #6
 8005664:	e00a      	b.n	800567c <HAL_GPIO_Init+0x240>
 8005666:	2305      	movs	r3, #5
 8005668:	e008      	b.n	800567c <HAL_GPIO_Init+0x240>
 800566a:	2304      	movs	r3, #4
 800566c:	e006      	b.n	800567c <HAL_GPIO_Init+0x240>
 800566e:	2303      	movs	r3, #3
 8005670:	e004      	b.n	800567c <HAL_GPIO_Init+0x240>
 8005672:	2302      	movs	r3, #2
 8005674:	e002      	b.n	800567c <HAL_GPIO_Init+0x240>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_GPIO_Init+0x240>
 800567a:	2300      	movs	r3, #0
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	f002 0203 	and.w	r2, r2, #3
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	4093      	lsls	r3, r2
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4313      	orrs	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800568c:	4935      	ldr	r1, [pc, #212]	; (8005764 <HAL_GPIO_Init+0x328>)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	3302      	adds	r3, #2
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800569a:	4b3d      	ldr	r3, [pc, #244]	; (8005790 <HAL_GPIO_Init+0x354>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056be:	4a34      	ldr	r2, [pc, #208]	; (8005790 <HAL_GPIO_Init+0x354>)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056c4:	4b32      	ldr	r3, [pc, #200]	; (8005790 <HAL_GPIO_Init+0x354>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e8:	4a29      	ldr	r2, [pc, #164]	; (8005790 <HAL_GPIO_Init+0x354>)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056ee:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_GPIO_Init+0x354>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005712:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <HAL_GPIO_Init+0x354>)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_GPIO_Init+0x354>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <HAL_GPIO_Init+0x354>)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3301      	adds	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	f67f ae84 	bls.w	8005458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	40013800 	.word	0x40013800
 8005768:	40020000 	.word	0x40020000
 800576c:	40020400 	.word	0x40020400
 8005770:	40020800 	.word	0x40020800
 8005774:	40020c00 	.word	0x40020c00
 8005778:	40021000 	.word	0x40021000
 800577c:	40021400 	.word	0x40021400
 8005780:	40021800 	.word	0x40021800
 8005784:	40021c00 	.word	0x40021c00
 8005788:	40022000 	.word	0x40022000
 800578c:	40022400 	.word	0x40022400
 8005790:	40013c00 	.word	0x40013c00

08005794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e0d9      	b.n	8005964 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b0:	2201      	movs	r2, #1
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4013      	ands	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	f040 80c9 	bne.w	800595e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80057cc:	4a6b      	ldr	r2, [pc, #428]	; (800597c <HAL_GPIO_DeInit+0x1e8>)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	3302      	adds	r3, #2
 80057d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	220f      	movs	r2, #15
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a63      	ldr	r2, [pc, #396]	; (8005980 <HAL_GPIO_DeInit+0x1ec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d037      	beq.n	8005866 <HAL_GPIO_DeInit+0xd2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a62      	ldr	r2, [pc, #392]	; (8005984 <HAL_GPIO_DeInit+0x1f0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d031      	beq.n	8005862 <HAL_GPIO_DeInit+0xce>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a61      	ldr	r2, [pc, #388]	; (8005988 <HAL_GPIO_DeInit+0x1f4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02b      	beq.n	800585e <HAL_GPIO_DeInit+0xca>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a60      	ldr	r2, [pc, #384]	; (800598c <HAL_GPIO_DeInit+0x1f8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d025      	beq.n	800585a <HAL_GPIO_DeInit+0xc6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a5f      	ldr	r2, [pc, #380]	; (8005990 <HAL_GPIO_DeInit+0x1fc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01f      	beq.n	8005856 <HAL_GPIO_DeInit+0xc2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a5e      	ldr	r2, [pc, #376]	; (8005994 <HAL_GPIO_DeInit+0x200>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d019      	beq.n	8005852 <HAL_GPIO_DeInit+0xbe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a5d      	ldr	r2, [pc, #372]	; (8005998 <HAL_GPIO_DeInit+0x204>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_GPIO_DeInit+0xba>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a5c      	ldr	r2, [pc, #368]	; (800599c <HAL_GPIO_DeInit+0x208>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00d      	beq.n	800584a <HAL_GPIO_DeInit+0xb6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a5b      	ldr	r2, [pc, #364]	; (80059a0 <HAL_GPIO_DeInit+0x20c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_DeInit+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a5a      	ldr	r2, [pc, #360]	; (80059a4 <HAL_GPIO_DeInit+0x210>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_GPIO_DeInit+0xae>
 800583e:	2309      	movs	r3, #9
 8005840:	e012      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 8005842:	230a      	movs	r3, #10
 8005844:	e010      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 8005846:	2308      	movs	r3, #8
 8005848:	e00e      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 800584a:	2307      	movs	r3, #7
 800584c:	e00c      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 800584e:	2306      	movs	r3, #6
 8005850:	e00a      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 8005852:	2305      	movs	r3, #5
 8005854:	e008      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 8005856:	2304      	movs	r3, #4
 8005858:	e006      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 800585a:	2303      	movs	r3, #3
 800585c:	e004      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 800585e:	2302      	movs	r3, #2
 8005860:	e002      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <HAL_GPIO_DeInit+0xd4>
 8005866:	2300      	movs	r3, #0
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	f002 0203 	and.w	r2, r2, #3
 800586e:	0092      	lsls	r2, r2, #2
 8005870:	4093      	lsls	r3, r2
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d132      	bne.n	80058de <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005878:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	43db      	mvns	r3, r3
 8005880:	4949      	ldr	r1, [pc, #292]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 8005882:	4013      	ands	r3, r2
 8005884:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005886:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	43db      	mvns	r3, r3
 800588e:	4946      	ldr	r1, [pc, #280]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 8005890:	4013      	ands	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005894:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43db      	mvns	r3, r3
 800589c:	4942      	ldr	r1, [pc, #264]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 800589e:	4013      	ands	r3, r2
 80058a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	493f      	ldr	r1, [pc, #252]	; (80059a8 <HAL_GPIO_DeInit+0x214>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80058c0:	4a2e      	ldr	r2, [pc, #184]	; (800597c <HAL_GPIO_DeInit+0x1e8>)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	3302      	adds	r3, #2
 80058c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	482a      	ldr	r0, [pc, #168]	; (800597c <HAL_GPIO_DeInit+0x1e8>)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	089b      	lsrs	r3, r3, #2
 80058d6:	400a      	ands	r2, r1
 80058d8:	3302      	adds	r3, #2
 80058da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	2103      	movs	r1, #3
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	401a      	ands	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	08da      	lsrs	r2, r3, #3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3208      	adds	r2, #8
 80058fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	220f      	movs	r2, #15
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	08d2      	lsrs	r2, r2, #3
 8005914:	4019      	ands	r1, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3208      	adds	r2, #8
 800591a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2103      	movs	r1, #3
 8005928:	fa01 f303 	lsl.w	r3, r1, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	401a      	ands	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	2101      	movs	r1, #1
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	2103      	movs	r1, #3
 8005952:	fa01 f303 	lsl.w	r3, r1, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	401a      	ands	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	3301      	adds	r3, #1
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	f67f af22 	bls.w	80057b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40013800 	.word	0x40013800
 8005980:	40020000 	.word	0x40020000
 8005984:	40020400 	.word	0x40020400
 8005988:	40020800 	.word	0x40020800
 800598c:	40020c00 	.word	0x40020c00
 8005990:	40021000 	.word	0x40021000
 8005994:	40021400 	.word	0x40021400
 8005998:	40021800 	.word	0x40021800
 800599c:	40021c00 	.word	0x40021c00
 80059a0:	40022000 	.word	0x40022000
 80059a4:	40022400 	.word	0x40022400
 80059a8:	40013c00 	.word	0x40013c00

080059ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
 80059b8:	4613      	mov	r3, r2
 80059ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059bc:	787b      	ldrb	r3, [r7, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059c8:	e003      	b.n	80059d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ca:	887b      	ldrh	r3, [r7, #2]
 80059cc:	041a      	lsls	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e12b      	b.n	8005c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc fb78 	bl	80020fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a44:	f003 fb5e 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 8005a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4a81      	ldr	r2, [pc, #516]	; (8005c54 <HAL_I2C_Init+0x274>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d807      	bhi.n	8005a64 <HAL_I2C_Init+0x84>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a80      	ldr	r2, [pc, #512]	; (8005c58 <HAL_I2C_Init+0x278>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bf94      	ite	ls
 8005a5c:	2301      	movls	r3, #1
 8005a5e:	2300      	movhi	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e006      	b.n	8005a72 <HAL_I2C_Init+0x92>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a7d      	ldr	r2, [pc, #500]	; (8005c5c <HAL_I2C_Init+0x27c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	bf94      	ite	ls
 8005a6c:	2301      	movls	r3, #1
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0e7      	b.n	8005c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a78      	ldr	r2, [pc, #480]	; (8005c60 <HAL_I2C_Init+0x280>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0c9b      	lsrs	r3, r3, #18
 8005a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a6a      	ldr	r2, [pc, #424]	; (8005c54 <HAL_I2C_Init+0x274>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d802      	bhi.n	8005ab4 <HAL_I2C_Init+0xd4>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	e009      	b.n	8005ac8 <HAL_I2C_Init+0xe8>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	4a69      	ldr	r2, [pc, #420]	; (8005c64 <HAL_I2C_Init+0x284>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ada:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	495c      	ldr	r1, [pc, #368]	; (8005c54 <HAL_I2C_Init+0x274>)
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	d819      	bhi.n	8005b1c <HAL_I2C_Init+0x13c>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1e59      	subs	r1, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005afc:	400b      	ands	r3, r1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_I2C_Init+0x138>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1e59      	subs	r1, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b10:	3301      	adds	r3, #1
 8005b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b16:	e051      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	e04f      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d111      	bne.n	8005b48 <HAL_I2C_Init+0x168>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1e58      	subs	r0, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e012      	b.n	8005b6e <HAL_I2C_Init+0x18e>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1e58      	subs	r0, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	0099      	lsls	r1, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Init+0x196>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e022      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10e      	bne.n	8005b9c <HAL_I2C_Init+0x1bc>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1e58      	subs	r0, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	440b      	add	r3, r1
 8005b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b90:	3301      	adds	r3, #1
 8005b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	e00f      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1e58      	subs	r0, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	0099      	lsls	r1, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	6809      	ldr	r1, [r1, #0]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6911      	ldr	r1, [r2, #16]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68d2      	ldr	r2, [r2, #12]
 8005bf6:	4311      	orrs	r1, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	000186a0 	.word	0x000186a0
 8005c58:	001e847f 	.word	0x001e847f
 8005c5c:	003d08ff 	.word	0x003d08ff
 8005c60:	431bde83 	.word	0x431bde83
 8005c64:	10624dd3 	.word	0x10624dd3

08005c68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e021      	b.n	8005cbe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2224      	movs	r2, #36	; 0x24
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc fab4 	bl	8002200 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d103      	bne.n	8005ce4 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	611a      	str	r2, [r3, #16]
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	817b      	strh	r3, [r7, #10]
 8005d00:	4613      	mov	r3, r2
 8005d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7fc fef4 	bl	8002af0 <HAL_GetTick>
 8005d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	f040 80e0 	bne.w	8005ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2319      	movs	r3, #25
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4970      	ldr	r1, [pc, #448]	; (8005ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f002 fa30 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0d3      	b.n	8005eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_I2C_Master_Transmit+0x50>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0cc      	b.n	8005eda <HAL_I2C_Master_Transmit+0x1ea>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d007      	beq.n	8005d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2221      	movs	r2, #33	; 0x21
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2210      	movs	r2, #16
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	893a      	ldrh	r2, [r7, #8]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a50      	ldr	r2, [pc, #320]	; (8005ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005da8:	8979      	ldrh	r1, [r7, #10]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f001 febc 	bl	8007b2c <I2C_MasterRequestWrite>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e08d      	b.n	8005eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005dd4:	e066      	b.n	8005ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f002 faee 	bl	80083bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d107      	bne.n	8005dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e06b      	b.n	8005eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d11b      	bne.n	8005e78 <HAL_I2C_Master_Transmit+0x188>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	6a39      	ldr	r1, [r7, #32]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f002 fae5 	bl	800844c <I2C_WaitOnBTFFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d107      	bne.n	8005ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e01a      	b.n	8005eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d194      	bne.n	8005dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e000      	b.n	8005eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	00100002 	.word	0x00100002
 8005ee8:	ffff0000 	.word	0xffff0000

08005eec <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	460b      	mov	r3, r1
 8005efa:	817b      	strh	r3, [r7, #10]
 8005efc:	4613      	mov	r3, r2
 8005efe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	f040 8109 	bne.w	8006124 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f12:	4b87      	ldr	r3, [pc, #540]	; (8006130 <HAL_I2C_Master_Receive_DMA+0x244>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	08db      	lsrs	r3, r3, #3
 8005f18:	4a86      	ldr	r2, [pc, #536]	; (8006134 <HAL_I2C_Master_Receive_DMA+0x248>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0a1a      	lsrs	r2, r3, #8
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009a      	lsls	r2, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d112      	bne.n	8005f5e <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e0e3      	b.n	8006126 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d0df      	beq.n	8005f2c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_I2C_Master_Receive_DMA+0x8e>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e0d5      	b.n	8006126 <HAL_I2C_Master_Receive_DMA+0x23a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d007      	beq.n	8005fa0 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2222      	movs	r2, #34	; 0x22
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2210      	movs	r2, #16
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	893a      	ldrh	r2, [r7, #8]
 8005fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a56      	ldr	r2, [pc, #344]	; (8006138 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005fe2:	897a      	ldrh	r2, [r7, #10]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d07b      	beq.n	80060e8 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02a      	beq.n	800604e <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	4a4f      	ldr	r2, [pc, #316]	; (800613c <HAL_I2C_Master_Receive_DMA+0x250>)
 8005ffe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	4a4e      	ldr	r2, [pc, #312]	; (8006140 <HAL_I2C_Master_Receive_DMA+0x254>)
 8006006:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	2200      	movs	r2, #0
 800600e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	2200      	movs	r2, #0
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	2200      	movs	r2, #0
 800601e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	2200      	movs	r2, #0
 8006026:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3310      	adds	r3, #16
 8006032:	4619      	mov	r1, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	461a      	mov	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	f7fd fc33 	bl	80038a8 <HAL_DMA_Start_IT>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d139      	bne.n	80060c0 <HAL_I2C_Master_Receive_DMA+0x1d4>
 800604c:	e013      	b.n	8006076 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e057      	b.n	8006126 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006094:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80060ac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060bc:	605a      	str	r2, [r3, #4]
 80060be:	e02f      	b.n	8006120 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	f043 0210 	orr.w	r2, r3, #16
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e01e      	b.n	8006126 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80060fe:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800610e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000000 	.word	0x20000000
 8006134:	14f8b589 	.word	0x14f8b589
 8006138:	ffff0000 	.word	0xffff0000
 800613c:	08007e01 	.word	0x08007e01
 8006140:	08007fbf 	.word	0x08007fbf

08006144 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800615e:	f7fc fcc7 	bl	8002af0 <HAL_GetTick>
 8006162:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b20      	cmp	r3, #32
 800616e:	f040 8214 	bne.w	800659a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	2319      	movs	r3, #25
 8006178:	2201      	movs	r2, #1
 800617a:	497b      	ldr	r1, [pc, #492]	; (8006368 <HAL_I2C_Mem_Read+0x224>)
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f002 f803 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
 800618a:	e207      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_I2C_Mem_Read+0x56>
 8006196:	2302      	movs	r3, #2
 8006198:	e200      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d007      	beq.n	80061c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2222      	movs	r2, #34	; 0x22
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2240      	movs	r2, #64	; 0x40
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80061f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a5b      	ldr	r2, [pc, #364]	; (800636c <HAL_I2C_Mem_Read+0x228>)
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006202:	88f8      	ldrh	r0, [r7, #6]
 8006204:	893a      	ldrh	r2, [r7, #8]
 8006206:	8979      	ldrh	r1, [r7, #10]
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4603      	mov	r3, r0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f001 fd0c 	bl	8007c30 <I2C_RequestMemoryRead>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e1bc      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d113      	bne.n	8006252 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622a:	2300      	movs	r3, #0
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e190      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006256:	2b01      	cmp	r3, #1
 8006258:	d11b      	bne.n	8006292 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	e170      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	2b02      	cmp	r3, #2
 8006298:	d11b      	bne.n	80062d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	e150      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062e8:	e144      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	f200 80f1 	bhi.w	80064d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d123      	bne.n	8006344 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f002 f91d 	bl	8008540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e145      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006342:	e117      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	2b02      	cmp	r3, #2
 800634a:	d14e      	bne.n	80063ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	2200      	movs	r2, #0
 8006354:	4906      	ldr	r1, [pc, #24]	; (8006370 <HAL_I2C_Mem_Read+0x22c>)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 ff16 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e11a      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
 8006366:	bf00      	nop
 8006368:	00100002 	.word	0x00100002
 800636c:	ffff0000 	.word	0xffff0000
 8006370:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063e8:	e0c4      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2200      	movs	r2, #0
 80063f2:	496c      	ldr	r1, [pc, #432]	; (80065a4 <HAL_I2C_Mem_Read+0x460>)
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f001 fec7 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0cb      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	2200      	movs	r2, #0
 800644e:	4955      	ldr	r1, [pc, #340]	; (80065a4 <HAL_I2C_Mem_Read+0x460>)
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 fe99 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e09d      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d4:	e04e      	b.n	8006574 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f002 f830 	bl	8008540 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e058      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d124      	bne.n	8006574 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652e:	2b03      	cmp	r3, #3
 8006530:	d107      	bne.n	8006542 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006540:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	2b00      	cmp	r3, #0
 800657a:	f47f aeb6 	bne.w	80062ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e000      	b.n	800659c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	00010004 	.word	0x00010004

080065a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d003      	beq.n	80065e0 <HAL_I2C_EV_IRQHandler+0x38>
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	f040 80b1 	bne.w	8006742 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10d      	bne.n	8006616 <HAL_I2C_EV_IRQHandler+0x6e>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006600:	d003      	beq.n	800660a <HAL_I2C_EV_IRQHandler+0x62>
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006608:	d101      	bne.n	800660e <HAL_I2C_EV_IRQHandler+0x66>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_I2C_EV_IRQHandler+0x68>
 800660e:	2300      	movs	r3, #0
 8006610:	2b01      	cmp	r3, #1
 8006612:	f000 8114 	beq.w	800683e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_I2C_EV_IRQHandler+0x90>
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f002 f814 	bl	8008658 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fcd1 	bl	8006fd8 <I2C_Master_SB>
 8006636:	e083      	b.n	8006740 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <HAL_I2C_EV_IRQHandler+0xac>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fd49 	bl	80070e4 <I2C_Master_ADD10>
 8006652:	e075      	b.n	8006740 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <HAL_I2C_EV_IRQHandler+0xc8>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd65 	bl	8007138 <I2C_Master_ADDR>
 800666e:	e067      	b.n	8006740 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d036      	beq.n	80066e8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006688:	f000 80db 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <HAL_I2C_EV_IRQHandler+0x10a>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_I2C_EV_IRQHandler+0x10a>
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f92d 	bl	800690a <I2C_MasterTransmit_TXE>
 80066b0:	e046      	b.n	8006740 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80c2 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80bc 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b21      	cmp	r3, #33	; 0x21
 80066ce:	d103      	bne.n	80066d8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f9b6 	bl	8006a42 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d6:	e0b4      	b.n	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	f040 80b1 	bne.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fa24 	bl	8006b2e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066e6:	e0ac      	b.n	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f6:	f000 80a4 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <HAL_I2C_EV_IRQHandler+0x178>
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_I2C_EV_IRQHandler+0x178>
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d103      	bne.n	8006720 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 faa0 	bl	8006c5e <I2C_MasterReceive_RXNE>
 800671e:	e00f      	b.n	8006740 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 808b 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8085 	beq.w	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fb58 	bl	8006dee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800673e:	e080      	b.n	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
 8006740:	e07f      	b.n	8006842 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	e007      	b.n	8006764 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <HAL_I2C_EV_IRQHandler+0x1ea>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00c      	beq.n	8006792 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006788:	69b9      	ldr	r1, [r7, #24]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 ff23 	bl	80075d6 <I2C_Slave_ADDR>
 8006790:	e05a      	b.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_I2C_EV_IRQHandler+0x206>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 ff5e 	bl	8007668 <I2C_Slave_STOPF>
 80067ac:	e04c      	b.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b21      	cmp	r3, #33	; 0x21
 80067b2:	d002      	beq.n	80067ba <HAL_I2C_EV_IRQHandler+0x212>
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b29      	cmp	r3, #41	; 0x29
 80067b8:	d120      	bne.n	80067fc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <HAL_I2C_EV_IRQHandler+0x238>
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_I2C_EV_IRQHandler+0x238>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fe3e 	bl	800745a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067de:	e032      	b.n	8006846 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d02d      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x29e>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d028      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fe6d 	bl	80074d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067fa:	e024      	b.n	8006846 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <HAL_I2C_EV_IRQHandler+0x27a>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680c:	2b00      	cmp	r3, #0
 800680e:	d008      	beq.n	8006822 <HAL_I2C_EV_IRQHandler+0x27a>
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fe7b 	bl	8007516 <I2C_SlaveReceive_RXNE>
 8006820:	e012      	b.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00d      	beq.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 feab 	bl	8007592 <I2C_SlaveReceive_BTF>
 800683c:	e004      	b.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006846:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
 8006896:	4613      	mov	r3, r2
 8006898:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006920:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d150      	bne.n	80069d2 <I2C_MasterTransmit_TXE+0xc8>
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b21      	cmp	r3, #33	; 0x21
 8006934:	d14d      	bne.n	80069d2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d01d      	beq.n	8006978 <I2C_MasterTransmit_TXE+0x6e>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b20      	cmp	r3, #32
 8006940:	d01a      	beq.n	8006978 <I2C_MasterTransmit_TXE+0x6e>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006948:	d016      	beq.n	8006978 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006958:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2211      	movs	r2, #17
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff ff6c 	bl	800684e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006976:	e060      	b.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006986:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006996:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d107      	bne.n	80069c2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff ff7d 	bl	80068ba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069c0:	e03b      	b.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff ff3f 	bl	800684e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069d0:	e033      	b.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b21      	cmp	r3, #33	; 0x21
 80069d6:	d005      	beq.n	80069e4 <I2C_MasterTransmit_TXE+0xda>
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d12d      	bne.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b22      	cmp	r3, #34	; 0x22
 80069e2:	d12a      	bne.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80069fe:	e01c      	b.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d103      	bne.n	8006a14 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f88e 	bl	8006b2e <I2C_MemoryTransmit_TXE_BTF>
}
 8006a12:	e012      	b.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a38:	e7ff      	b.n	8006a3a <I2C_MasterTransmit_TXE+0x130>
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b21      	cmp	r3, #33	; 0x21
 8006a5a:	d164      	bne.n	8006b26 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d012      	beq.n	8006a8c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006a8a:	e04c      	b.n	8006b26 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d01d      	beq.n	8006ace <I2C_MasterTransmit_BTF+0x8c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d01a      	beq.n	8006ace <I2C_MasterTransmit_BTF+0x8c>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a9e:	d016      	beq.n	8006ace <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aae:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2211      	movs	r2, #17
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fec1 	bl	800684e <HAL_I2C_MasterTxCpltCallback>
}
 8006acc:	e02b      	b.n	8006b26 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006adc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aec:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d107      	bne.n	8006b18 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fed2 	bl	80068ba <HAL_I2C_MemTxCpltCallback>
}
 8006b16:	e006      	b.n	8006b26 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fe94 	bl	800684e <HAL_I2C_MasterTxCpltCallback>
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10b      	bne.n	8006b66 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	1c9a      	adds	r2, r3, #2
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006b64:	e077      	b.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	121b      	asrs	r3, r3, #8
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b80:	e069      	b.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d10b      	bne.n	8006ba2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ba0:	e059      	b.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d152      	bne.n	8006c50 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b22      	cmp	r3, #34	; 0x22
 8006bae:	d10d      	bne.n	8006bcc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bbe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006bca:	e044      	b.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d015      	beq.n	8006c02 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	2b21      	cmp	r3, #33	; 0x21
 8006bda:	d112      	bne.n	8006c02 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c00:	e029      	b.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d124      	bne.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b21      	cmp	r3, #33	; 0x21
 8006c10:	d121      	bne.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c20:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c30:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fe36 	bl	80068ba <HAL_I2C_MemTxCpltCallback>
}
 8006c4e:	e002      	b.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff f838 	bl	8005cc6 <I2C_Flush_DR>
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b22      	cmp	r3, #34	; 0x22
 8006c70:	f040 80b9 	bne.w	8006de6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d921      	bls.n	8006ccc <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	f040 8096 	bne.w	8006de6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006cca:	e08c      	b.n	8006de6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d07f      	beq.n	8006dd4 <I2C_MasterReceive_RXNE+0x176>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d002      	beq.n	8006ce0 <I2C_MasterReceive_RXNE+0x82>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d179      	bne.n	8006dd4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fbfb 	bl	80084dc <I2C_WaitOnSTOPRequestThroughIT>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d14c      	bne.n	8006d86 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cfa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d10a      	bne.n	8006d5c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff fdba 	bl	80068ce <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d5a:	e044      	b.n	8006de6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d002      	beq.n	8006d70 <I2C_MasterReceive_RXNE+0x112>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d103      	bne.n	8006d78 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
 8006d76:	e002      	b.n	8006d7e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2212      	movs	r2, #18
 8006d7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fb f8e2 	bl	8001f48 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d84:	e02f      	b.n	8006de6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff fd88 	bl	80068e2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006dd2:	e008      	b.n	8006de6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de2:	605a      	str	r2, [r3, #4]
}
 8006de4:	e7ff      	b.n	8006de6 <I2C_MasterReceive_RXNE+0x188>
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d11b      	bne.n	8006e3e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e14:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006e3c:	e0c8      	b.n	8006fd0 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d129      	bne.n	8006e9c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e56:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d00a      	beq.n	8006e74 <I2C_MasterReceive_BTF+0x86>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d007      	beq.n	8006e74 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e9a:	e099      	b.n	8006fd0 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	f040 8081 	bne.w	8006faa <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d002      	beq.n	8006eb4 <I2C_MasterReceive_BTF+0xc6>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d108      	bne.n	8006ec6 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e019      	b.n	8006efa <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d002      	beq.n	8006ed2 <I2C_MasterReceive_BTF+0xe4>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d108      	bne.n	8006ee4 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e00a      	b.n	8006efa <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d007      	beq.n	8006efa <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ef8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d10a      	bne.n	8006f80 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fca8 	bl	80068ce <HAL_I2C_MemRxCpltCallback>
}
 8006f7e:	e027      	b.n	8006fd0 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d002      	beq.n	8006f94 <I2C_MasterReceive_BTF+0x1a6>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d103      	bne.n	8006f9c <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
 8006f9a:	e002      	b.n	8006fa2 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2212      	movs	r2, #18
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fa ffd0 	bl	8001f48 <HAL_I2C_MasterRxCpltCallback>
}
 8006fa8:	e012      	b.n	8006fd0 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d117      	bne.n	800701c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007004:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007006:	e067      	b.n	80070d8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700c:	b2db      	uxtb	r3, r3
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	b2da      	uxtb	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	611a      	str	r2, [r3, #16]
}
 800701a:	e05d      	b.n	80070d8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007024:	d133      	bne.n	800708e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b21      	cmp	r3, #33	; 0x21
 8007030:	d109      	bne.n	8007046 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007042:	611a      	str	r2, [r3, #16]
 8007044:	e008      	b.n	8007058 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f043 0301 	orr.w	r3, r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <I2C_Master_SB+0x92>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d108      	bne.n	800707c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d032      	beq.n	80070d8 <I2C_Master_SB+0x100>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d02d      	beq.n	80070d8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708a:	605a      	str	r2, [r3, #4]
}
 800708c:	e024      	b.n	80070d8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10e      	bne.n	80070b4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	b29b      	uxth	r3, r3
 800709c:	11db      	asrs	r3, r3, #7
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 0306 	and.w	r3, r3, #6
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	f063 030f 	orn	r3, r3, #15
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	611a      	str	r2, [r3, #16]
}
 80070b2:	e011      	b.n	80070d8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10d      	bne.n	80070d8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	11db      	asrs	r3, r3, #7
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f063 030e 	orn	r3, r3, #14
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	611a      	str	r2, [r3, #16]
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <I2C_Master_ADD10+0x26>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00c      	beq.n	800712c <I2C_Master_ADD10+0x48>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800712a:	605a      	str	r2, [r3, #4]
  }
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007138:	b480      	push	{r7}
 800713a:	b091      	sub	sp, #68	; 0x44
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007146:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b22      	cmp	r3, #34	; 0x22
 8007160:	f040 8169 	bne.w	8007436 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10f      	bne.n	800718c <I2C_Master_ADDR+0x54>
 800716c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d10b      	bne.n	800718c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007174:	2300      	movs	r3, #0
 8007176:	633b      	str	r3, [r7, #48]	; 0x30
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	633b      	str	r3, [r7, #48]	; 0x30
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	e160      	b.n	800744e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007190:	2b00      	cmp	r3, #0
 8007192:	d11d      	bne.n	80071d0 <I2C_Master_ADDR+0x98>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800719c:	d118      	bne.n	80071d0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719e:	2300      	movs	r3, #0
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	651a      	str	r2, [r3, #80]	; 0x50
 80071ce:	e13e      	b.n	800744e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d113      	bne.n	8007202 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071da:	2300      	movs	r3, #0
 80071dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e115      	b.n	800742e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	f040 808a 	bne.w	8007322 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007214:	d137      	bne.n	8007286 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007224:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d113      	bne.n	800725e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007244:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	e0e7      	b.n	800742e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725e:	2300      	movs	r3, #0
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	623b      	str	r3, [r7, #32]
 8007272:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e0d3      	b.n	800742e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	2b08      	cmp	r3, #8
 800728a:	d02e      	beq.n	80072ea <I2C_Master_ADDR+0x1b2>
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	2b20      	cmp	r3, #32
 8007290:	d02b      	beq.n	80072ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	2b12      	cmp	r3, #18
 8007296:	d102      	bne.n	800729e <I2C_Master_ADDR+0x166>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	2b01      	cmp	r3, #1
 800729c:	d125      	bne.n	80072ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d00e      	beq.n	80072c2 <I2C_Master_ADDR+0x18a>
 80072a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d00b      	beq.n	80072c2 <I2C_Master_ADDR+0x18a>
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	d008      	beq.n	80072c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e007      	b.n	80072d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	e0a1      	b.n	800742e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e085      	b.n	800742e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d14d      	bne.n	80073c8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	2b04      	cmp	r3, #4
 8007330:	d016      	beq.n	8007360 <I2C_Master_ADDR+0x228>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b02      	cmp	r3, #2
 8007336:	d013      	beq.n	8007360 <I2C_Master_ADDR+0x228>
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	2b10      	cmp	r3, #16
 800733c:	d010      	beq.n	8007360 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e007      	b.n	8007370 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800736e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800737a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800737e:	d117      	bne.n	80073b0 <I2C_Master_ADDR+0x278>
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007386:	d00b      	beq.n	80073a0 <I2C_Master_ADDR+0x268>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	2b01      	cmp	r3, #1
 800738c:	d008      	beq.n	80073a0 <I2C_Master_ADDR+0x268>
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	2b08      	cmp	r3, #8
 8007392:	d005      	beq.n	80073a0 <I2C_Master_ADDR+0x268>
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	2b10      	cmp	r3, #16
 8007398:	d002      	beq.n	80073a0 <I2C_Master_ADDR+0x268>
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	2b20      	cmp	r3, #32
 800739e:	d107      	bne.n	80073b0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e032      	b.n	800742e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e6:	d117      	bne.n	8007418 <I2C_Master_ADDR+0x2e0>
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073ee:	d00b      	beq.n	8007408 <I2C_Master_ADDR+0x2d0>
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d008      	beq.n	8007408 <I2C_Master_ADDR+0x2d0>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	d005      	beq.n	8007408 <I2C_Master_ADDR+0x2d0>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d002      	beq.n	8007408 <I2C_Master_ADDR+0x2d0>
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	2b20      	cmp	r3, #32
 8007406:	d107      	bne.n	8007418 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007416:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007434:	e00b      	b.n	800744e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	e7ff      	b.n	800744e <I2C_Master_ADDR+0x316>
 800744e:	bf00      	nop
 8007450:	3744      	adds	r7, #68	; 0x44
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007468:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d02b      	beq.n	80074cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d114      	bne.n	80074cc <I2C_SlaveTransmit_TXE+0x72>
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b29      	cmp	r3, #41	; 0x29
 80074a6:	d111      	bne.n	80074cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2221      	movs	r2, #33	; 0x21
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2228      	movs	r2, #40	; 0x28
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff f9cb 	bl	8006862 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d011      	beq.n	800750a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007524:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02c      	beq.n	800758a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d114      	bne.n	800758a <I2C_SlaveReceive_RXNE+0x74>
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b2a      	cmp	r3, #42	; 0x2a
 8007564:	d111      	bne.n	800758a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007574:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2222      	movs	r2, #34	; 0x22
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2228      	movs	r2, #40	; 0x28
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff f976 	bl	8006876 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d012      	beq.n	80075ca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075f0:	2b28      	cmp	r3, #40	; 0x28
 80075f2:	d125      	bne.n	8007640 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007602:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800760e:	2301      	movs	r3, #1
 8007610:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	81bb      	strh	r3, [r7, #12]
 8007622:	e002      	b.n	800762a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007632:	89ba      	ldrh	r2, [r7, #12]
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff f926 	bl	800688a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800763e:	e00e      	b.n	800765e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007640:	2300      	movs	r3, #0
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	60bb      	str	r3, [r7, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	60bb      	str	r3, [r7, #8]
 8007654:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007676:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007686:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007688:	2300      	movs	r3, #0
 800768a:	60bb      	str	r3, [r7, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	60bb      	str	r3, [r7, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c4:	d172      	bne.n	80077ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b22      	cmp	r3, #34	; 0x22
 80076ca:	d002      	beq.n	80076d2 <I2C_Slave_STOPF+0x6a>
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	2b2a      	cmp	r3, #42	; 0x2a
 80076d0:	d135      	bne.n	800773e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0204 	orr.w	r2, r3, #4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007704:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	4618      	mov	r0, r3
 800770c:	f7fc fb40 	bl	8003d90 <HAL_DMA_GetState>
 8007710:	4603      	mov	r3, r0
 8007712:	2b01      	cmp	r3, #1
 8007714:	d049      	beq.n	80077aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	4a69      	ldr	r2, [pc, #420]	; (80078c0 <I2C_Slave_STOPF+0x258>)
 800771c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	4618      	mov	r0, r3
 8007724:	f7fc f988 	bl	8003a38 <HAL_DMA_Abort_IT>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d03d      	beq.n	80077aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800773c:	e035      	b.n	80077aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f043 0204 	orr.w	r2, r3, #4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007770:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	4618      	mov	r0, r3
 8007778:	f7fc fb0a 	bl	8003d90 <HAL_DMA_GetState>
 800777c:	4603      	mov	r3, r0
 800777e:	2b01      	cmp	r3, #1
 8007780:	d014      	beq.n	80077ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007786:	4a4e      	ldr	r2, [pc, #312]	; (80078c0 <I2C_Slave_STOPF+0x258>)
 8007788:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	4618      	mov	r0, r3
 8007790:	f7fc f952 	bl	8003a38 <HAL_DMA_Abort_IT>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	e000      	b.n	80077ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d03e      	beq.n	8007834 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d112      	bne.n	80077ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d112      	bne.n	800781e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	f043 0204 	orr.w	r2, r3, #4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f843 	bl	80078c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007842:	e039      	b.n	80078b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2b2a      	cmp	r3, #42	; 0x2a
 8007848:	d109      	bne.n	800785e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2228      	movs	r2, #40	; 0x28
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff f80c 	bl	8006876 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b28      	cmp	r3, #40	; 0x28
 8007868:	d111      	bne.n	800788e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <I2C_Slave_STOPF+0x25c>)
 800786e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff f80d 	bl	80068a6 <HAL_I2C_ListenCpltCallback>
}
 800788c:	e014      	b.n	80078b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	2b22      	cmp	r3, #34	; 0x22
 8007894:	d002      	beq.n	800789c <I2C_Slave_STOPF+0x234>
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b22      	cmp	r3, #34	; 0x22
 800789a:	d10d      	bne.n	80078b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fe ffdf 	bl	8006876 <HAL_I2C_SlaveRxCpltCallback>
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08008039 	.word	0x08008039
 80078c4:	ffff0000 	.word	0xffff0000

080078c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b10      	cmp	r3, #16
 80078e4:	d002      	beq.n	80078ec <I2C_ITError+0x24>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d10a      	bne.n	8007902 <I2C_ITError+0x3a>
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b22      	cmp	r3, #34	; 0x22
 80078f0:	d107      	bne.n	8007902 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007900:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007908:	2b28      	cmp	r3, #40	; 0x28
 800790a:	d107      	bne.n	800791c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2228      	movs	r2, #40	; 0x28
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800791a:	e015      	b.n	8007948 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792a:	d00a      	beq.n	8007942 <I2C_ITError+0x7a>
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b60      	cmp	r3, #96	; 0x60
 8007930:	d007      	beq.n	8007942 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007956:	d162      	bne.n	8007a1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007966:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b01      	cmp	r3, #1
 8007974:	d020      	beq.n	80079b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	4a6a      	ldr	r2, [pc, #424]	; (8007b24 <I2C_ITError+0x25c>)
 800797c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	4618      	mov	r0, r3
 8007984:	f7fc f858 	bl	8003a38 <HAL_DMA_Abort_IT>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8089 	beq.w	8007aa2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079b2:	4610      	mov	r0, r2
 80079b4:	4798      	blx	r3
 80079b6:	e074      	b.n	8007aa2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	4a59      	ldr	r2, [pc, #356]	; (8007b24 <I2C_ITError+0x25c>)
 80079be:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fc f837 	bl	8003a38 <HAL_DMA_Abort_IT>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d068      	beq.n	8007aa2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d10b      	bne.n	80079f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0201 	bic.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	e041      	b.n	8007aa2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b60      	cmp	r3, #96	; 0x60
 8007a28:	d125      	bne.n	8007a76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d10b      	bne.n	8007a5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fe ff41 	bl	80068f6 <HAL_I2C_AbortCpltCallback>
 8007a74:	e015      	b.n	8007aa2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d10b      	bne.n	8007a9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe ff20 	bl	80068e2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10e      	bne.n	8007ad0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ade:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d113      	bne.n	8007b1c <I2C_ITError+0x254>
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b28      	cmp	r3, #40	; 0x28
 8007af8:	d110      	bne.n	8007b1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <I2C_ITError+0x260>)
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fe fec5 	bl	80068a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	08008039 	.word	0x08008039
 8007b28:	ffff0000 	.word	0xffff0000

08007b2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d006      	beq.n	8007b56 <I2C_MasterRequestWrite+0x2a>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d003      	beq.n	8007b56 <I2C_MasterRequestWrite+0x2a>
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b54:	d108      	bne.n	8007b68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e00b      	b.n	8007b80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	2b12      	cmp	r3, #18
 8007b6e:	d107      	bne.n	8007b80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 fafb 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba6:	d103      	bne.n	8007bb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e035      	b.n	8007c20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bbc:	d108      	bne.n	8007bd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bbe:	897b      	ldrh	r3, [r7, #10]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bcc:	611a      	str	r2, [r3, #16]
 8007bce:	e01b      	b.n	8007c08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bd0:	897b      	ldrh	r3, [r7, #10]
 8007bd2:	11db      	asrs	r3, r3, #7
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 0306 	and.w	r3, r3, #6
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f063 030f 	orn	r3, r3, #15
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	490e      	ldr	r1, [pc, #56]	; (8007c28 <I2C_MasterRequestWrite+0xfc>)
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fb44 	bl	800827c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e010      	b.n	8007c20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bfe:	897b      	ldrh	r3, [r7, #10]
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4907      	ldr	r1, [pc, #28]	; (8007c2c <I2C_MasterRequestWrite+0x100>)
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fb34 	bl	800827c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e000      	b.n	8007c20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	00010008 	.word	0x00010008
 8007c2c:	00010002 	.word	0x00010002

08007c30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	817b      	strh	r3, [r7, #10]
 8007c42:	460b      	mov	r3, r1
 8007c44:	813b      	strh	r3, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 fa86 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00d      	beq.n	8007c9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c90:	d103      	bne.n	8007c9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e0aa      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c9e:	897b      	ldrh	r3, [r7, #10]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	6a3a      	ldr	r2, [r7, #32]
 8007cb2:	4952      	ldr	r1, [pc, #328]	; (8007dfc <I2C_RequestMemoryRead+0x1cc>)
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fae1 	bl	800827c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e097      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cdc:	6a39      	ldr	r1, [r7, #32]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fb6c 	bl	80083bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00d      	beq.n	8007d06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d107      	bne.n	8007d02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e076      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d105      	bne.n	8007d18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d0c:	893b      	ldrh	r3, [r7, #8]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	611a      	str	r2, [r3, #16]
 8007d16:	e021      	b.n	8007d5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d18:	893b      	ldrh	r3, [r7, #8]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	6a39      	ldr	r1, [r7, #32]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fb46 	bl	80083bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00d      	beq.n	8007d52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d107      	bne.n	8007d4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e050      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d52:	893b      	ldrh	r3, [r7, #8]
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5e:	6a39      	ldr	r1, [r7, #32]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fb2b 	bl	80083bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d107      	bne.n	8007d84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e035      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f9ef 	bl	8008188 <I2C_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00d      	beq.n	8007dcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d103      	bne.n	8007dc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e013      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007dcc:	897b      	ldrh	r3, [r7, #10]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	4906      	ldr	r1, [pc, #24]	; (8007dfc <I2C_RequestMemoryRead+0x1cc>)
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fa4a 	bl	800827c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	00010002 	.word	0x00010002

08007e00 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e14:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e1c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007e32:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	2200      	movs	r2, #0
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	2200      	movs	r2, #0
 8007e52:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007e54:	7cfb      	ldrb	r3, [r7, #19]
 8007e56:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007e5a:	2b21      	cmp	r3, #33	; 0x21
 8007e5c:	d007      	beq.n	8007e6e <I2C_DMAXferCplt+0x6e>
 8007e5e:	7cfb      	ldrb	r3, [r7, #19]
 8007e60:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8007e64:	2b22      	cmp	r3, #34	; 0x22
 8007e66:	d131      	bne.n	8007ecc <I2C_DMAXferCplt+0xcc>
 8007e68:	7cbb      	ldrb	r3, [r7, #18]
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d12e      	bne.n	8007ecc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e7c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007e84:	7cfb      	ldrb	r3, [r7, #19]
 8007e86:	2b29      	cmp	r3, #41	; 0x29
 8007e88:	d10a      	bne.n	8007ea0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2221      	movs	r2, #33	; 0x21
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2228      	movs	r2, #40	; 0x28
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e98:	6978      	ldr	r0, [r7, #20]
 8007e9a:	f7fe fce2 	bl	8006862 <HAL_I2C_SlaveTxCpltCallback>
 8007e9e:	e00c      	b.n	8007eba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ea0:	7cfb      	ldrb	r3, [r7, #19]
 8007ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea4:	d109      	bne.n	8007eba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2222      	movs	r2, #34	; 0x22
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2228      	movs	r2, #40	; 0x28
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007eb4:	6978      	ldr	r0, [r7, #20]
 8007eb6:	f7fe fcde 	bl	8006876 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007ec8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007eca:	e074      	b.n	8007fb6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d06e      	beq.n	8007fb6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d107      	bne.n	8007ef2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f08:	d009      	beq.n	8007f1e <I2C_DMAXferCplt+0x11e>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d006      	beq.n	8007f1e <I2C_DMAXferCplt+0x11e>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f16:	d002      	beq.n	8007f1e <I2C_DMAXferCplt+0x11e>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d107      	bne.n	8007f2e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f3c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f4c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2200      	movs	r2, #0
 8007f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007f5c:	6978      	ldr	r0, [r7, #20]
 8007f5e:	f7fe fcc0 	bl	80068e2 <HAL_I2C_ErrorCallback>
}
 8007f62:	e028      	b.n	8007fb6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b40      	cmp	r3, #64	; 0x40
 8007f76:	d10a      	bne.n	8007f8e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2200      	movs	r2, #0
 8007f84:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f7fe fca1 	bl	80068ce <HAL_I2C_MemRxCpltCallback>
}
 8007f8c:	e013      	b.n	8007fb6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d002      	beq.n	8007fa2 <I2C_DMAXferCplt+0x1a2>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d103      	bne.n	8007faa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fa8:	e002      	b.n	8007fb0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2212      	movs	r2, #18
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fb0:	6978      	ldr	r0, [r7, #20]
 8007fb2:	f7f9 ffc9 	bl	8001f48 <HAL_I2C_MasterRxCpltCallback>
}
 8007fb6:	bf00      	nop
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd8:	2200      	movs	r2, #0
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	2200      	movs	r2, #0
 8007fea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7fb fedd 	bl	8003dac <HAL_DMA_GetError>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d01b      	beq.n	8008030 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008006:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2220      	movs	r2, #32
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f043 0210 	orr.w	r2, r3, #16
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7fe fc59 	bl	80068e2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008050:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008052:	4b4b      	ldr	r3, [pc, #300]	; (8008180 <I2C_DMAAbort+0x148>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	08db      	lsrs	r3, r3, #3
 8008058:	4a4a      	ldr	r2, [pc, #296]	; (8008184 <I2C_DMAAbort+0x14c>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	0a1a      	lsrs	r2, r3, #8
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	00da      	lsls	r2, r3, #3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	f043 0220 	orr.w	r2, r3, #32
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800807e:	e00a      	b.n	8008096 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3b01      	subs	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008094:	d0ea      	beq.n	800806c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	2200      	movs	r2, #0
 80080a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	2200      	movs	r2, #0
 80080b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2200      	movs	r2, #0
 80080ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	2200      	movs	r2, #0
 80080ea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0201 	bic.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b60      	cmp	r3, #96	; 0x60
 8008106:	d10e      	bne.n	8008126 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2200      	movs	r2, #0
 800811c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800811e:	6978      	ldr	r0, [r7, #20]
 8008120:	f7fe fbe9 	bl	80068f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008124:	e027      	b.n	8008176 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008126:	7cfb      	ldrb	r3, [r7, #19]
 8008128:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800812c:	2b28      	cmp	r3, #40	; 0x28
 800812e:	d117      	bne.n	8008160 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f042 0201 	orr.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800814e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2228      	movs	r2, #40	; 0x28
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800815e:	e007      	b.n	8008170 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008170:	6978      	ldr	r0, [r7, #20]
 8008172:	f7fe fbb6 	bl	80068e2 <HAL_I2C_ErrorCallback>
}
 8008176:	bf00      	nop
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000000 	.word	0x20000000
 8008184:	14f8b589 	.word	0x14f8b589

08008188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	4613      	mov	r3, r2
 8008196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008198:	e048      	b.n	800822c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d044      	beq.n	800822c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a2:	f7fa fca5 	bl	8002af0 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d302      	bcc.n	80081b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d139      	bne.n	800822c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	0c1b      	lsrs	r3, r3, #16
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d10d      	bne.n	80081de <I2C_WaitOnFlagUntilTimeout+0x56>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	43da      	mvns	r2, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	4013      	ands	r3, r2
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bf0c      	ite	eq
 80081d4:	2301      	moveq	r3, #1
 80081d6:	2300      	movne	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	e00c      	b.n	80081f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	43da      	mvns	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4013      	ands	r3, r2
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d116      	bne.n	800822c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2220      	movs	r2, #32
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	f043 0220 	orr.w	r2, r3, #32
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e023      	b.n	8008274 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b01      	cmp	r3, #1
 8008234:	d10d      	bne.n	8008252 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	43da      	mvns	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4013      	ands	r3, r2
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	bf0c      	ite	eq
 8008248:	2301      	moveq	r3, #1
 800824a:	2300      	movne	r3, #0
 800824c:	b2db      	uxtb	r3, r3
 800824e:	461a      	mov	r2, r3
 8008250:	e00c      	b.n	800826c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	43da      	mvns	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	4013      	ands	r3, r2
 800825e:	b29b      	uxth	r3, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	429a      	cmp	r2, r3
 8008270:	d093      	beq.n	800819a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800828a:	e071      	b.n	8008370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829a:	d123      	bne.n	80082e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	f043 0204 	orr.w	r2, r3, #4
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e067      	b.n	80083b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d041      	beq.n	8008370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ec:	f7fa fc00 	bl	8002af0 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d302      	bcc.n	8008302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d136      	bne.n	8008370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b01      	cmp	r3, #1
 800830a:	d10c      	bne.n	8008326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	43da      	mvns	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4013      	ands	r3, r2
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	bf14      	ite	ne
 800831e:	2301      	movne	r3, #1
 8008320:	2300      	moveq	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e00b      	b.n	800833e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	43da      	mvns	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	4013      	ands	r3, r2
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf14      	ite	ne
 8008338:	2301      	movne	r3, #1
 800833a:	2300      	moveq	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d016      	beq.n	8008370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e021      	b.n	80083b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b01      	cmp	r3, #1
 8008378:	d10c      	bne.n	8008394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	43da      	mvns	r2, r3
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4013      	ands	r3, r2
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	bf14      	ite	ne
 800838c:	2301      	movne	r3, #1
 800838e:	2300      	moveq	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	e00b      	b.n	80083ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	43da      	mvns	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4013      	ands	r3, r2
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bf14      	ite	ne
 80083a6:	2301      	movne	r3, #1
 80083a8:	2300      	moveq	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f47f af6d 	bne.w	800828c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083c8:	e034      	b.n	8008434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 f915 	bl	80085fa <I2C_IsAcknowledgeFailed>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e034      	b.n	8008444 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d028      	beq.n	8008434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e2:	f7fa fb85 	bl	8002af0 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d302      	bcc.n	80083f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d11d      	bne.n	8008434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	2b80      	cmp	r3, #128	; 0x80
 8008404:	d016      	beq.n	8008434 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2220      	movs	r2, #32
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	f043 0220 	orr.w	r2, r3, #32
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e007      	b.n	8008444 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d1c3      	bne.n	80083ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008458:	e034      	b.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 f8cd 	bl	80085fa <I2C_IsAcknowledgeFailed>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e034      	b.n	80084d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d028      	beq.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008472:	f7fa fb3d 	bl	8002af0 <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	429a      	cmp	r2, r3
 8008480:	d302      	bcc.n	8008488 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11d      	bne.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b04      	cmp	r3, #4
 8008494:	d016      	beq.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	f043 0220 	orr.w	r2, r3, #32
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e007      	b.n	80084d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d1c3      	bne.n	800845a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80084e8:	4b13      	ldr	r3, [pc, #76]	; (8008538 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	4a13      	ldr	r2, [pc, #76]	; (800853c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80084f0:	fba2 2303 	umull	r2, r3, r2, r3
 80084f4:	0a1a      	lsrs	r2, r3, #8
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b01      	subs	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d107      	bne.n	800851a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	f043 0220 	orr.w	r2, r3, #32
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e008      	b.n	800852c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d0e9      	beq.n	80084fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	20000000 	.word	0x20000000
 800853c:	14f8b589 	.word	0x14f8b589

08008540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800854c:	e049      	b.n	80085e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	2b10      	cmp	r3, #16
 800855a:	d119      	bne.n	8008590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f06f 0210 	mvn.w	r2, #16
 8008564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e030      	b.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008590:	f7fa faae 	bl	8002af0 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	429a      	cmp	r2, r3
 800859e:	d302      	bcc.n	80085a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d11d      	bne.n	80085e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b40      	cmp	r3, #64	; 0x40
 80085b2:	d016      	beq.n	80085e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2220      	movs	r2, #32
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f043 0220 	orr.w	r2, r3, #32
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e007      	b.n	80085f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ec:	2b40      	cmp	r3, #64	; 0x40
 80085ee:	d1ae      	bne.n	800854e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008610:	d11b      	bne.n	800864a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800861a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	f043 0204 	orr.w	r2, r3, #4
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008668:	d103      	bne.n	8008672 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008670:	e007      	b.n	8008682 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800867a:	d102      	bne.n	8008682 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2208      	movs	r2, #8
 8008680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008682:	bf00      	nop
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d129      	bne.n	80086f8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2224      	movs	r2, #36	; 0x24
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0201 	bic.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0210 	bic.w	r2, r2, #16
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	e000      	b.n	80086fa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80086f8:	2302      	movs	r3, #2
  }
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b20      	cmp	r3, #32
 800871e:	d12a      	bne.n	8008776 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2224      	movs	r2, #36	; 0x24
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	f023 030f 	bic.w	r3, r3, #15
 8008746:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	b29a      	uxth	r2, r3
 800874c:	89fb      	ldrh	r3, [r7, #14]
 800874e:	4313      	orrs	r3, r2
 8008750:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	89fa      	ldrh	r2, [r7, #14]
 8008758:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0201 	orr.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	e000      	b.n	8008778 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008776:	2302      	movs	r3, #2
  }
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800878e:	2300      	movs	r3, #0
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	4b20      	ldr	r3, [pc, #128]	; (8008814 <HAL_PWREx_EnableOverDrive+0x90>)
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	4a1f      	ldr	r2, [pc, #124]	; (8008814 <HAL_PWREx_EnableOverDrive+0x90>)
 8008798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879c:	6413      	str	r3, [r2, #64]	; 0x40
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <HAL_PWREx_EnableOverDrive+0x90>)
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <HAL_PWREx_EnableOverDrive+0x94>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087b0:	f7fa f99e 	bl	8002af0 <HAL_GetTick>
 80087b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087b6:	e009      	b.n	80087cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087b8:	f7fa f99a 	bl	8002af0 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087c6:	d901      	bls.n	80087cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e01f      	b.n	800880c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80087cc:	4b13      	ldr	r3, [pc, #76]	; (800881c <HAL_PWREx_EnableOverDrive+0x98>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d1ee      	bne.n	80087b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80087dc:	2201      	movs	r2, #1
 80087de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80087e0:	f7fa f986 	bl	8002af0 <HAL_GetTick>
 80087e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80087e6:	e009      	b.n	80087fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80087e8:	f7fa f982 	bl	8002af0 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087f6:	d901      	bls.n	80087fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e007      	b.n	800880c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <HAL_PWREx_EnableOverDrive+0x98>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008808:	d1ee      	bne.n	80087e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	40023800 	.word	0x40023800
 8008818:	420e0040 	.word	0x420e0040
 800881c:	40007000 	.word	0x40007000
 8008820:	420e0044 	.word	0x420e0044

08008824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e267      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d075      	beq.n	800892e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008842:	4b88      	ldr	r3, [pc, #544]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 030c 	and.w	r3, r3, #12
 800884a:	2b04      	cmp	r3, #4
 800884c:	d00c      	beq.n	8008868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800884e:	4b85      	ldr	r3, [pc, #532]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008856:	2b08      	cmp	r3, #8
 8008858:	d112      	bne.n	8008880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800885a:	4b82      	ldr	r3, [pc, #520]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008866:	d10b      	bne.n	8008880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008868:	4b7e      	ldr	r3, [pc, #504]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d05b      	beq.n	800892c <HAL_RCC_OscConfig+0x108>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d157      	bne.n	800892c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e242      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008888:	d106      	bne.n	8008898 <HAL_RCC_OscConfig+0x74>
 800888a:	4b76      	ldr	r3, [pc, #472]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a75      	ldr	r2, [pc, #468]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	e01d      	b.n	80088d4 <HAL_RCC_OscConfig+0xb0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088a0:	d10c      	bne.n	80088bc <HAL_RCC_OscConfig+0x98>
 80088a2:	4b70      	ldr	r3, [pc, #448]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a6f      	ldr	r2, [pc, #444]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	4b6d      	ldr	r3, [pc, #436]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a6c      	ldr	r2, [pc, #432]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e00b      	b.n	80088d4 <HAL_RCC_OscConfig+0xb0>
 80088bc:	4b69      	ldr	r3, [pc, #420]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a68      	ldr	r2, [pc, #416]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4b66      	ldr	r3, [pc, #408]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a65      	ldr	r2, [pc, #404]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d013      	beq.n	8008904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088dc:	f7fa f908 	bl	8002af0 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088e4:	f7fa f904 	bl	8002af0 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b64      	cmp	r3, #100	; 0x64
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e207      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f6:	4b5b      	ldr	r3, [pc, #364]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0xc0>
 8008902:	e014      	b.n	800892e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7fa f8f4 	bl	8002af0 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800890c:	f7fa f8f0 	bl	8002af0 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b64      	cmp	r3, #100	; 0x64
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e1f3      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800891e:	4b51      	ldr	r3, [pc, #324]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0xe8>
 800892a:	e000      	b.n	800892e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800892c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d063      	beq.n	8008a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800893a:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 030c 	and.w	r3, r3, #12
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008946:	4b47      	ldr	r3, [pc, #284]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800894e:	2b08      	cmp	r3, #8
 8008950:	d11c      	bne.n	800898c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008952:	4b44      	ldr	r3, [pc, #272]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d116      	bne.n	800898c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_RCC_OscConfig+0x152>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d001      	beq.n	8008976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e1c7      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008976:	4b3b      	ldr	r3, [pc, #236]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4937      	ldr	r1, [pc, #220]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008986:	4313      	orrs	r3, r2
 8008988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800898a:	e03a      	b.n	8008a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d020      	beq.n	80089d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008994:	4b34      	ldr	r3, [pc, #208]	; (8008a68 <HAL_RCC_OscConfig+0x244>)
 8008996:	2201      	movs	r2, #1
 8008998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899a:	f7fa f8a9 	bl	8002af0 <HAL_GetTick>
 800899e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089a0:	e008      	b.n	80089b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089a2:	f7fa f8a5 	bl	8002af0 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d901      	bls.n	80089b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e1a8      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0f0      	beq.n	80089a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c0:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	4925      	ldr	r1, [pc, #148]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	600b      	str	r3, [r1, #0]
 80089d4:	e015      	b.n	8008a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089d6:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <HAL_RCC_OscConfig+0x244>)
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089dc:	f7fa f888 	bl	8002af0 <HAL_GetTick>
 80089e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089e4:	f7fa f884 	bl	8002af0 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e187      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089f6:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f0      	bne.n	80089e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d036      	beq.n	8008a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d016      	beq.n	8008a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a16:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <HAL_RCC_OscConfig+0x248>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1c:	f7fa f868 	bl	8002af0 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a24:	f7fa f864 	bl	8002af0 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e167      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0x200>
 8008a42:	e01b      	b.n	8008a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <HAL_RCC_OscConfig+0x248>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a4a:	f7fa f851 	bl	8002af0 <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a50:	e00e      	b.n	8008a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a52:	f7fa f84d 	bl	8002af0 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d907      	bls.n	8008a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e150      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
 8008a64:	40023800 	.word	0x40023800
 8008a68:	42470000 	.word	0x42470000
 8008a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a70:	4b88      	ldr	r3, [pc, #544]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1ea      	bne.n	8008a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8097 	beq.w	8008bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a8e:	4b81      	ldr	r3, [pc, #516]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10f      	bne.n	8008aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	4b7d      	ldr	r3, [pc, #500]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	4a7c      	ldr	r2, [pc, #496]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8008aaa:	4b7a      	ldr	r3, [pc, #488]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	60bb      	str	r3, [r7, #8]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aba:	4b77      	ldr	r3, [pc, #476]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d118      	bne.n	8008af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ac6:	4b74      	ldr	r3, [pc, #464]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a73      	ldr	r2, [pc, #460]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ad2:	f7fa f80d 	bl	8002af0 <HAL_GetTick>
 8008ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ada:	f7fa f809 	bl	8002af0 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e10c      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aec:	4b6a      	ldr	r3, [pc, #424]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d106      	bne.n	8008b0e <HAL_RCC_OscConfig+0x2ea>
 8008b00:	4b64      	ldr	r3, [pc, #400]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	4a63      	ldr	r2, [pc, #396]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b0c:	e01c      	b.n	8008b48 <HAL_RCC_OscConfig+0x324>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	d10c      	bne.n	8008b30 <HAL_RCC_OscConfig+0x30c>
 8008b16:	4b5f      	ldr	r3, [pc, #380]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	4a5e      	ldr	r2, [pc, #376]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b1c:	f043 0304 	orr.w	r3, r3, #4
 8008b20:	6713      	str	r3, [r2, #112]	; 0x70
 8008b22:	4b5c      	ldr	r3, [pc, #368]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b26:	4a5b      	ldr	r2, [pc, #364]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b2e:	e00b      	b.n	8008b48 <HAL_RCC_OscConfig+0x324>
 8008b30:	4b58      	ldr	r3, [pc, #352]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b34:	4a57      	ldr	r2, [pc, #348]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3c:	4b55      	ldr	r3, [pc, #340]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	4a54      	ldr	r2, [pc, #336]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b42:	f023 0304 	bic.w	r3, r3, #4
 8008b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d015      	beq.n	8008b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b50:	f7f9 ffce 	bl	8002af0 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b56:	e00a      	b.n	8008b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b58:	f7f9 ffca 	bl	8002af0 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e0cb      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6e:	4b49      	ldr	r3, [pc, #292]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0ee      	beq.n	8008b58 <HAL_RCC_OscConfig+0x334>
 8008b7a:	e014      	b.n	8008ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b7c:	f7f9 ffb8 	bl	8002af0 <HAL_GetTick>
 8008b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b82:	e00a      	b.n	8008b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b84:	f7f9 ffb4 	bl	8002af0 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e0b5      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b9a:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1ee      	bne.n	8008b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d105      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bac:	4b39      	ldr	r3, [pc, #228]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	4a38      	ldr	r2, [pc, #224]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a1 	beq.w	8008d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bc2:	4b34      	ldr	r3, [pc, #208]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 030c 	and.w	r3, r3, #12
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d05c      	beq.n	8008c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d141      	bne.n	8008c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd6:	4b31      	ldr	r3, [pc, #196]	; (8008c9c <HAL_RCC_OscConfig+0x478>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bdc:	f7f9 ff88 	bl	8002af0 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be4:	f7f9 ff84 	bl	8002af0 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e087      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf6:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69da      	ldr	r2, [r3, #28]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	019b      	lsls	r3, r3, #6
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	041b      	lsls	r3, r3, #16
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	061b      	lsls	r3, r3, #24
 8008c26:	491b      	ldr	r1, [pc, #108]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <HAL_RCC_OscConfig+0x478>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c32:	f7f9 ff5d 	bl	8002af0 <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c38:	e008      	b.n	8008c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c3a:	f7f9 ff59 	bl	8002af0 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e05c      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c4c:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0f0      	beq.n	8008c3a <HAL_RCC_OscConfig+0x416>
 8008c58:	e054      	b.n	8008d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <HAL_RCC_OscConfig+0x478>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c60:	f7f9 ff46 	bl	8002af0 <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c68:	f7f9 ff42 	bl	8002af0 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e045      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7a:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f0      	bne.n	8008c68 <HAL_RCC_OscConfig+0x444>
 8008c86:	e03d      	b.n	8008d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d107      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e038      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
 8008c94:	40023800 	.word	0x40023800
 8008c98:	40007000 	.word	0x40007000
 8008c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <HAL_RCC_OscConfig+0x4ec>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d028      	beq.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d121      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d11a      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d111      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d107      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d001      	beq.n	8008d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800

08008d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0cc      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d28:	4b68      	ldr	r3, [pc, #416]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 030f 	and.w	r3, r3, #15
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d90c      	bls.n	8008d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d36:	4b65      	ldr	r3, [pc, #404]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d3e:	4b63      	ldr	r3, [pc, #396]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d001      	beq.n	8008d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0b8      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d020      	beq.n	8008d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d68:	4b59      	ldr	r3, [pc, #356]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	4a58      	ldr	r2, [pc, #352]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d80:	4b53      	ldr	r3, [pc, #332]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4a52      	ldr	r2, [pc, #328]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d8c:	4b50      	ldr	r3, [pc, #320]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	494d      	ldr	r1, [pc, #308]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d044      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d107      	bne.n	8008dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008db2:	4b47      	ldr	r3, [pc, #284]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d119      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e07f      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d003      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d107      	bne.n	8008de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dd2:	4b3f      	ldr	r3, [pc, #252]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e06f      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008de2:	4b3b      	ldr	r3, [pc, #236]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e067      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008df2:	4b37      	ldr	r3, [pc, #220]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f023 0203 	bic.w	r2, r3, #3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	4934      	ldr	r1, [pc, #208]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e04:	f7f9 fe74 	bl	8002af0 <HAL_GetTick>
 8008e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0c:	f7f9 fe70 	bl	8002af0 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e04f      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e22:	4b2b      	ldr	r3, [pc, #172]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 020c 	and.w	r2, r3, #12
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d1eb      	bne.n	8008e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e34:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 030f 	and.w	r3, r3, #15
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d20c      	bcs.n	8008e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e42:	4b22      	ldr	r3, [pc, #136]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e4a:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d001      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e032      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d008      	beq.n	8008e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e68:	4b19      	ldr	r3, [pc, #100]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	4916      	ldr	r1, [pc, #88]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	490e      	ldr	r1, [pc, #56]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e9a:	f000 f821 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	091b      	lsrs	r3, r3, #4
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	490a      	ldr	r1, [pc, #40]	; (8008ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8008eac:	5ccb      	ldrb	r3, [r1, r3]
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8008eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <HAL_RCC_ClockConfig+0x1c8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f9 faae 	bl	800241c <HAL_InitTick>

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40023c00 	.word	0x40023c00
 8008ed0:	40023800 	.word	0x40023800
 8008ed4:	08022bec 	.word	0x08022bec
 8008ed8:	20000000 	.word	0x20000000
 8008edc:	20000004 	.word	0x20000004

08008ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee4:	b094      	sub	sp, #80	; 0x50
 8008ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	647b      	str	r3, [r7, #68]	; 0x44
 8008eec:	2300      	movs	r3, #0
 8008eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ef8:	4b79      	ldr	r3, [pc, #484]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 030c 	and.w	r3, r3, #12
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d00d      	beq.n	8008f20 <HAL_RCC_GetSysClockFreq+0x40>
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	f200 80e1 	bhi.w	80090cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x34>
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d003      	beq.n	8008f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8008f12:	e0db      	b.n	80090cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f14:	4b73      	ldr	r3, [pc, #460]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008f18:	e0db      	b.n	80090d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f1a:	4b73      	ldr	r3, [pc, #460]	; (80090e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f1e:	e0d8      	b.n	80090d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f20:	4b6f      	ldr	r3, [pc, #444]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f2a:	4b6d      	ldr	r3, [pc, #436]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d063      	beq.n	8008ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f36:	4b6a      	ldr	r3, [pc, #424]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	099b      	lsrs	r3, r3, #6
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f48:	633b      	str	r3, [r7, #48]	; 0x30
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008f52:	4622      	mov	r2, r4
 8008f54:	462b      	mov	r3, r5
 8008f56:	f04f 0000 	mov.w	r0, #0
 8008f5a:	f04f 0100 	mov.w	r1, #0
 8008f5e:	0159      	lsls	r1, r3, #5
 8008f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f64:	0150      	lsls	r0, r2, #5
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	1a51      	subs	r1, r2, r1
 8008f6e:	6139      	str	r1, [r7, #16]
 8008f70:	4629      	mov	r1, r5
 8008f72:	eb63 0301 	sbc.w	r3, r3, r1
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f84:	4659      	mov	r1, fp
 8008f86:	018b      	lsls	r3, r1, #6
 8008f88:	4651      	mov	r1, sl
 8008f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f8e:	4651      	mov	r1, sl
 8008f90:	018a      	lsls	r2, r1, #6
 8008f92:	4651      	mov	r1, sl
 8008f94:	ebb2 0801 	subs.w	r8, r2, r1
 8008f98:	4659      	mov	r1, fp
 8008f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fb2:	4690      	mov	r8, r2
 8008fb4:	4699      	mov	r9, r3
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	eb18 0303 	adds.w	r3, r8, r3
 8008fbc:	60bb      	str	r3, [r7, #8]
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	eb49 0303 	adc.w	r3, r9, r3
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	f04f 0300 	mov.w	r3, #0
 8008fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	024b      	lsls	r3, r1, #9
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008fdc:	4621      	mov	r1, r4
 8008fde:	024a      	lsls	r2, r1, #9
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ff0:	f7f7 fe4a 	bl	8000c88 <__aeabi_uldivmod>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ffc:	e058      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ffe:	4b38      	ldr	r3, [pc, #224]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	099b      	lsrs	r3, r3, #6
 8009004:	2200      	movs	r2, #0
 8009006:	4618      	mov	r0, r3
 8009008:	4611      	mov	r1, r2
 800900a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800900e:	623b      	str	r3, [r7, #32]
 8009010:	2300      	movs	r3, #0
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
 8009014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	f04f 0000 	mov.w	r0, #0
 8009020:	f04f 0100 	mov.w	r1, #0
 8009024:	0159      	lsls	r1, r3, #5
 8009026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800902a:	0150      	lsls	r0, r2, #5
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4641      	mov	r1, r8
 8009032:	ebb2 0a01 	subs.w	sl, r2, r1
 8009036:	4649      	mov	r1, r9
 8009038:	eb63 0b01 	sbc.w	fp, r3, r1
 800903c:	f04f 0200 	mov.w	r2, #0
 8009040:	f04f 0300 	mov.w	r3, #0
 8009044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800904c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009050:	ebb2 040a 	subs.w	r4, r2, sl
 8009054:	eb63 050b 	sbc.w	r5, r3, fp
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	00eb      	lsls	r3, r5, #3
 8009062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009066:	00e2      	lsls	r2, r4, #3
 8009068:	4614      	mov	r4, r2
 800906a:	461d      	mov	r5, r3
 800906c:	4643      	mov	r3, r8
 800906e:	18e3      	adds	r3, r4, r3
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	464b      	mov	r3, r9
 8009074:	eb45 0303 	adc.w	r3, r5, r3
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009086:	4629      	mov	r1, r5
 8009088:	028b      	lsls	r3, r1, #10
 800908a:	4621      	mov	r1, r4
 800908c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009090:	4621      	mov	r1, r4
 8009092:	028a      	lsls	r2, r1, #10
 8009094:	4610      	mov	r0, r2
 8009096:	4619      	mov	r1, r3
 8009098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909a:	2200      	movs	r2, #0
 800909c:	61bb      	str	r3, [r7, #24]
 800909e:	61fa      	str	r2, [r7, #28]
 80090a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090a4:	f7f7 fdf0 	bl	8000c88 <__aeabi_uldivmod>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4613      	mov	r3, r2
 80090ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80090b0:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	3301      	adds	r3, #1
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80090c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090ca:	e002      	b.n	80090d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80090ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3750      	adds	r7, #80	; 0x50
 80090d8:	46bd      	mov	sp, r7
 80090da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090de:	bf00      	nop
 80090e0:	40023800 	.word	0x40023800
 80090e4:	00f42400 	.word	0x00f42400
 80090e8:	007a1200 	.word	0x007a1200

080090ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090f0:	4b03      	ldr	r3, [pc, #12]	; (8009100 <HAL_RCC_GetHCLKFreq+0x14>)
 80090f2:	681b      	ldr	r3, [r3, #0]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000000 	.word	0x20000000

08009104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009108:	f7ff fff0 	bl	80090ec <HAL_RCC_GetHCLKFreq>
 800910c:	4602      	mov	r2, r0
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	0a9b      	lsrs	r3, r3, #10
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	4903      	ldr	r1, [pc, #12]	; (8009128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800911a:	5ccb      	ldrb	r3, [r1, r3]
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40023800 	.word	0x40023800
 8009128:	08022bfc 	.word	0x08022bfc

0800912c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009130:	f7ff ffdc 	bl	80090ec <HAL_RCC_GetHCLKFreq>
 8009134:	4602      	mov	r2, r0
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	0b5b      	lsrs	r3, r3, #13
 800913c:	f003 0307 	and.w	r3, r3, #7
 8009140:	4903      	ldr	r1, [pc, #12]	; (8009150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009142:	5ccb      	ldrb	r3, [r1, r3]
 8009144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40023800 	.word	0x40023800
 8009150:	08022bfc 	.word	0x08022bfc

08009154 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	220f      	movs	r2, #15
 8009162:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009164:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f003 0203 	and.w	r2, r3, #3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800917c:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009188:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	08db      	lsrs	r3, r3, #3
 800918e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009196:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <HAL_RCC_GetClockConfig+0x60>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 020f 	and.w	r2, r3, #15
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	601a      	str	r2, [r3, #0]
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800
 80091b4:	40023c00 	.word	0x40023c00

080091b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e041      	b.n	800924e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7f9 f83a 	bl	8002258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f000 fb9a 	bl	8009930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	d001      	beq.n	8009270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e04e      	b.n	800930e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a23      	ldr	r2, [pc, #140]	; (800931c <HAL_TIM_Base_Start_IT+0xc4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d022      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929a:	d01d      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <HAL_TIM_Base_Start_IT+0xc8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d018      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1e      	ldr	r2, [pc, #120]	; (8009324 <HAL_TIM_Base_Start_IT+0xcc>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d013      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1c      	ldr	r2, [pc, #112]	; (8009328 <HAL_TIM_Base_Start_IT+0xd0>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00e      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1b      	ldr	r2, [pc, #108]	; (800932c <HAL_TIM_Base_Start_IT+0xd4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d009      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a19      	ldr	r2, [pc, #100]	; (8009330 <HAL_TIM_Base_Start_IT+0xd8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d004      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0x80>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a18      	ldr	r2, [pc, #96]	; (8009334 <HAL_TIM_Base_Start_IT+0xdc>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d111      	bne.n	80092fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b06      	cmp	r3, #6
 80092e8:	d010      	beq.n	800930c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092fa:	e007      	b.n	800930c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	40010000 	.word	0x40010000
 8009320:	40000400 	.word	0x40000400
 8009324:	40000800 	.word	0x40000800
 8009328:	40000c00 	.word	0x40000c00
 800932c:	40010400 	.word	0x40010400
 8009330:	40014000 	.word	0x40014000
 8009334:	40001800 	.word	0x40001800

08009338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e041      	b.n	80093ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f839 	bl	80093d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f000 fada 	bl	8009930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
	...

080093ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <HAL_TIM_PWM_Start+0x24>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	e022      	b.n	8009456 <HAL_TIM_PWM_Start+0x6a>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b04      	cmp	r3, #4
 8009414:	d109      	bne.n	800942a <HAL_TIM_PWM_Start+0x3e>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b01      	cmp	r3, #1
 8009420:	bf14      	ite	ne
 8009422:	2301      	movne	r3, #1
 8009424:	2300      	moveq	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	e015      	b.n	8009456 <HAL_TIM_PWM_Start+0x6a>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b08      	cmp	r3, #8
 800942e:	d109      	bne.n	8009444 <HAL_TIM_PWM_Start+0x58>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	bf14      	ite	ne
 800943c:	2301      	movne	r3, #1
 800943e:	2300      	moveq	r3, #0
 8009440:	b2db      	uxtb	r3, r3
 8009442:	e008      	b.n	8009456 <HAL_TIM_PWM_Start+0x6a>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b01      	cmp	r3, #1
 800944e:	bf14      	ite	ne
 8009450:	2301      	movne	r3, #1
 8009452:	2300      	moveq	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e07c      	b.n	8009558 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d104      	bne.n	800946e <HAL_TIM_PWM_Start+0x82>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2202      	movs	r2, #2
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800946c:	e013      	b.n	8009496 <HAL_TIM_PWM_Start+0xaa>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b04      	cmp	r3, #4
 8009472:	d104      	bne.n	800947e <HAL_TIM_PWM_Start+0x92>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800947c:	e00b      	b.n	8009496 <HAL_TIM_PWM_Start+0xaa>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b08      	cmp	r3, #8
 8009482:	d104      	bne.n	800948e <HAL_TIM_PWM_Start+0xa2>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800948c:	e003      	b.n	8009496 <HAL_TIM_PWM_Start+0xaa>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2202      	movs	r2, #2
 8009492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2201      	movs	r2, #1
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fca2 	bl	8009de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a2d      	ldr	r2, [pc, #180]	; (8009560 <HAL_TIM_PWM_Start+0x174>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d004      	beq.n	80094b8 <HAL_TIM_PWM_Start+0xcc>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a2c      	ldr	r2, [pc, #176]	; (8009564 <HAL_TIM_PWM_Start+0x178>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d101      	bne.n	80094bc <HAL_TIM_PWM_Start+0xd0>
 80094b8:	2301      	movs	r3, #1
 80094ba:	e000      	b.n	80094be <HAL_TIM_PWM_Start+0xd2>
 80094bc:	2300      	movs	r3, #0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a22      	ldr	r2, [pc, #136]	; (8009560 <HAL_TIM_PWM_Start+0x174>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d022      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e4:	d01d      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1f      	ldr	r2, [pc, #124]	; (8009568 <HAL_TIM_PWM_Start+0x17c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d018      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1d      	ldr	r2, [pc, #116]	; (800956c <HAL_TIM_PWM_Start+0x180>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d013      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1c      	ldr	r2, [pc, #112]	; (8009570 <HAL_TIM_PWM_Start+0x184>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d00e      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a16      	ldr	r2, [pc, #88]	; (8009564 <HAL_TIM_PWM_Start+0x178>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d009      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a18      	ldr	r2, [pc, #96]	; (8009574 <HAL_TIM_PWM_Start+0x188>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d004      	beq.n	8009522 <HAL_TIM_PWM_Start+0x136>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a16      	ldr	r2, [pc, #88]	; (8009578 <HAL_TIM_PWM_Start+0x18c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d111      	bne.n	8009546 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f003 0307 	and.w	r3, r3, #7
 800952c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b06      	cmp	r3, #6
 8009532:	d010      	beq.n	8009556 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009544:	e007      	b.n	8009556 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f042 0201 	orr.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40010000 	.word	0x40010000
 8009564:	40010400 	.word	0x40010400
 8009568:	40000400 	.word	0x40000400
 800956c:	40000800 	.word	0x40000800
 8009570:	40000c00 	.word	0x40000c00
 8009574:	40014000 	.word	0x40014000
 8009578:	40001800 	.word	0x40001800

0800957c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d020      	beq.n	80095e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01b      	beq.n	80095e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f06f 0202 	mvn.w	r2, #2
 80095b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f994 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 80095cc:	e005      	b.n	80095da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f986 	bl	80098e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f997 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d020      	beq.n	800962c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01b      	beq.n	800962c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0204 	mvn.w	r2, #4
 80095fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2202      	movs	r2, #2
 8009602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f96e 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 8009618:	e005      	b.n	8009626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f960 	bl	80098e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f971 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d020      	beq.n	8009678 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f003 0308 	and.w	r3, r3, #8
 800963c:	2b00      	cmp	r3, #0
 800963e:	d01b      	beq.n	8009678 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f06f 0208 	mvn.w	r2, #8
 8009648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2204      	movs	r2, #4
 800964e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f948 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 8009664:	e005      	b.n	8009672 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f93a 	bl	80098e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f94b 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f003 0310 	and.w	r3, r3, #16
 800967e:	2b00      	cmp	r3, #0
 8009680:	d020      	beq.n	80096c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f003 0310 	and.w	r3, r3, #16
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01b      	beq.n	80096c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0210 	mvn.w	r2, #16
 8009694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2208      	movs	r2, #8
 800969a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f922 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 80096b0:	e005      	b.n	80096be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f914 	bl	80098e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f925 	bl	8009908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00c      	beq.n	80096e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f06f 0201 	mvn.w	r2, #1
 80096e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7f8 fb42 	bl	8001d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00c      	beq.n	800970c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fb9d 	bl	8009e46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8f6 	bl	800991c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00c      	beq.n	8009754 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d007      	beq.n	8009754 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f06f 0220 	mvn.w	r2, #32
 800974c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fb6f 	bl	8009e32 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009754:	bf00      	nop
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009776:	2302      	movs	r3, #2
 8009778:	e0ae      	b.n	80098d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b0c      	cmp	r3, #12
 8009786:	f200 809f 	bhi.w	80098c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097c5 	.word	0x080097c5
 8009794:	080098c9 	.word	0x080098c9
 8009798:	080098c9 	.word	0x080098c9
 800979c:	080098c9 	.word	0x080098c9
 80097a0:	08009805 	.word	0x08009805
 80097a4:	080098c9 	.word	0x080098c9
 80097a8:	080098c9 	.word	0x080098c9
 80097ac:	080098c9 	.word	0x080098c9
 80097b0:	08009847 	.word	0x08009847
 80097b4:	080098c9 	.word	0x080098c9
 80097b8:	080098c9 	.word	0x080098c9
 80097bc:	080098c9 	.word	0x080098c9
 80097c0:	08009887 	.word	0x08009887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f95c 	bl	8009a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0208 	orr.w	r2, r2, #8
 80097de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0204 	bic.w	r2, r2, #4
 80097ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6999      	ldr	r1, [r3, #24]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	691a      	ldr	r2, [r3, #16]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	619a      	str	r2, [r3, #24]
      break;
 8009802:	e064      	b.n	80098ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f9ac 	bl	8009b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800981e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	699a      	ldr	r2, [r3, #24]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800982e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6999      	ldr	r1, [r3, #24]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	021a      	lsls	r2, r3, #8
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	619a      	str	r2, [r3, #24]
      break;
 8009844:	e043      	b.n	80098ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fa01 	bl	8009c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69da      	ldr	r2, [r3, #28]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0208 	orr.w	r2, r2, #8
 8009860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 0204 	bic.w	r2, r2, #4
 8009870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69d9      	ldr	r1, [r3, #28]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	430a      	orrs	r2, r1
 8009882:	61da      	str	r2, [r3, #28]
      break;
 8009884:	e023      	b.n	80098ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68b9      	ldr	r1, [r7, #8]
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fa55 	bl	8009d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	69da      	ldr	r2, [r3, #28]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69da      	ldr	r2, [r3, #28]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69d9      	ldr	r1, [r3, #28]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	021a      	lsls	r2, r3, #8
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	61da      	str	r2, [r3, #28]
      break;
 80098c6:	e002      	b.n	80098ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75fb      	strb	r3, [r7, #23]
      break;
 80098cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a46      	ldr	r2, [pc, #280]	; (8009a5c <TIM_Base_SetConfig+0x12c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d013      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994e:	d00f      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a43      	ldr	r2, [pc, #268]	; (8009a60 <TIM_Base_SetConfig+0x130>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00b      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a42      	ldr	r2, [pc, #264]	; (8009a64 <TIM_Base_SetConfig+0x134>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d007      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a41      	ldr	r2, [pc, #260]	; (8009a68 <TIM_Base_SetConfig+0x138>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_Base_SetConfig+0x40>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a40      	ldr	r2, [pc, #256]	; (8009a6c <TIM_Base_SetConfig+0x13c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d108      	bne.n	8009982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a35      	ldr	r2, [pc, #212]	; (8009a5c <TIM_Base_SetConfig+0x12c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d02b      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009990:	d027      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a32      	ldr	r2, [pc, #200]	; (8009a60 <TIM_Base_SetConfig+0x130>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d023      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a31      	ldr	r2, [pc, #196]	; (8009a64 <TIM_Base_SetConfig+0x134>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d01f      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a30      	ldr	r2, [pc, #192]	; (8009a68 <TIM_Base_SetConfig+0x138>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d01b      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a2f      	ldr	r2, [pc, #188]	; (8009a6c <TIM_Base_SetConfig+0x13c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d017      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a2e      	ldr	r2, [pc, #184]	; (8009a70 <TIM_Base_SetConfig+0x140>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d013      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a2d      	ldr	r2, [pc, #180]	; (8009a74 <TIM_Base_SetConfig+0x144>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00f      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a2c      	ldr	r2, [pc, #176]	; (8009a78 <TIM_Base_SetConfig+0x148>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00b      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a2b      	ldr	r2, [pc, #172]	; (8009a7c <TIM_Base_SetConfig+0x14c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d007      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a2a      	ldr	r2, [pc, #168]	; (8009a80 <TIM_Base_SetConfig+0x150>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d003      	beq.n	80099e2 <TIM_Base_SetConfig+0xb2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a29      	ldr	r2, [pc, #164]	; (8009a84 <TIM_Base_SetConfig+0x154>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d108      	bne.n	80099f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a10      	ldr	r2, [pc, #64]	; (8009a5c <TIM_Base_SetConfig+0x12c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d003      	beq.n	8009a28 <TIM_Base_SetConfig+0xf8>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a12      	ldr	r2, [pc, #72]	; (8009a6c <TIM_Base_SetConfig+0x13c>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d103      	bne.n	8009a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d105      	bne.n	8009a4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	f023 0201 	bic.w	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	611a      	str	r2, [r3, #16]
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	40010000 	.word	0x40010000
 8009a60:	40000400 	.word	0x40000400
 8009a64:	40000800 	.word	0x40000800
 8009a68:	40000c00 	.word	0x40000c00
 8009a6c:	40010400 	.word	0x40010400
 8009a70:	40014000 	.word	0x40014000
 8009a74:	40014400 	.word	0x40014400
 8009a78:	40014800 	.word	0x40014800
 8009a7c:	40001800 	.word	0x40001800
 8009a80:	40001c00 	.word	0x40001c00
 8009a84:	40002000 	.word	0x40002000

08009a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	f023 0201 	bic.w	r2, r3, #1
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f023 0302 	bic.w	r3, r3, #2
 8009ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a20      	ldr	r2, [pc, #128]	; (8009b60 <TIM_OC1_SetConfig+0xd8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_OC1_SetConfig+0x64>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <TIM_OC1_SetConfig+0xdc>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d10c      	bne.n	8009b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0308 	bic.w	r3, r3, #8
 8009af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 0304 	bic.w	r3, r3, #4
 8009b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a15      	ldr	r2, [pc, #84]	; (8009b60 <TIM_OC1_SetConfig+0xd8>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d003      	beq.n	8009b16 <TIM_OC1_SetConfig+0x8e>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a14      	ldr	r2, [pc, #80]	; (8009b64 <TIM_OC1_SetConfig+0xdc>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d111      	bne.n	8009b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	621a      	str	r2, [r3, #32]
}
 8009b54:	bf00      	nop
 8009b56:	371c      	adds	r7, #28
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40010400 	.word	0x40010400

08009b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	f023 0210 	bic.w	r2, r3, #16
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	021b      	lsls	r3, r3, #8
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0320 	bic.w	r3, r3, #32
 8009bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a22      	ldr	r2, [pc, #136]	; (8009c4c <TIM_OC2_SetConfig+0xe4>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d003      	beq.n	8009bd0 <TIM_OC2_SetConfig+0x68>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a21      	ldr	r2, [pc, #132]	; (8009c50 <TIM_OC2_SetConfig+0xe8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d10d      	bne.n	8009bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <TIM_OC2_SetConfig+0xe4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d003      	beq.n	8009bfc <TIM_OC2_SetConfig+0x94>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a16      	ldr	r2, [pc, #88]	; (8009c50 <TIM_OC2_SetConfig+0xe8>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d113      	bne.n	8009c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	621a      	str	r2, [r3, #32]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010400 	.word	0x40010400

08009c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0303 	bic.w	r3, r3, #3
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a21      	ldr	r2, [pc, #132]	; (8009d34 <TIM_OC3_SetConfig+0xe0>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d003      	beq.n	8009cba <TIM_OC3_SetConfig+0x66>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a20      	ldr	r2, [pc, #128]	; (8009d38 <TIM_OC3_SetConfig+0xe4>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10d      	bne.n	8009cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a16      	ldr	r2, [pc, #88]	; (8009d34 <TIM_OC3_SetConfig+0xe0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d003      	beq.n	8009ce6 <TIM_OC3_SetConfig+0x92>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <TIM_OC3_SetConfig+0xe4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d113      	bne.n	8009d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	011b      	lsls	r3, r3, #4
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	621a      	str	r2, [r3, #32]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	40010000 	.word	0x40010000
 8009d38:	40010400 	.word	0x40010400

08009d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	031b      	lsls	r3, r3, #12
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a12      	ldr	r2, [pc, #72]	; (8009de0 <TIM_OC4_SetConfig+0xa4>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d003      	beq.n	8009da4 <TIM_OC4_SetConfig+0x68>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a11      	ldr	r2, [pc, #68]	; (8009de4 <TIM_OC4_SetConfig+0xa8>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d109      	bne.n	8009db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	019b      	lsls	r3, r3, #6
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40010400 	.word	0x40010400

08009de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	f003 031f 	and.w	r3, r3, #31
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a1a      	ldr	r2, [r3, #32]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	401a      	ands	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a1a      	ldr	r2, [r3, #32]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 031f 	and.w	r3, r3, #31
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e20:	431a      	orrs	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	621a      	str	r2, [r3, #32]
}
 8009e26:	bf00      	nop
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e042      	b.n	8009ef2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d106      	bne.n	8009e86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7f8 fa45 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2224      	movs	r2, #36	; 0x24
 8009e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fe16 	bl	800aad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695a      	ldr	r2, [r3, #20]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ec2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ed2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e04a      	b.n	8009fa2 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7f8 f9f5 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2224      	movs	r2, #36	; 0x24
 8009f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fdc6 	bl	800aad0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	695a      	ldr	r2, [r3, #20]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8009f62:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695a      	ldr	r2, [r3, #20]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 0208 	orr.w	r2, r2, #8
 8009f72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b08a      	sub	sp, #40	; 0x28
 8009fae:	af02      	add	r7, sp, #8
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	603b      	str	r3, [r7, #0]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d175      	bne.n	800a0b6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <HAL_UART_Transmit+0x2c>
 8009fd0:	88fb      	ldrh	r3, [r7, #6]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e06e      	b.n	800a0b8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2221      	movs	r2, #33	; 0x21
 8009fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fe8:	f7f8 fd82 	bl	8002af0 <HAL_GetTick>
 8009fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	88fa      	ldrh	r2, [r7, #6]
 8009ff2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a002:	d108      	bne.n	800a016 <HAL_UART_Transmit+0x6c>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a00c:	2300      	movs	r3, #0
 800a00e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	e003      	b.n	800a01e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a01e:	e02e      	b.n	800a07e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2200      	movs	r2, #0
 800a028:	2180      	movs	r1, #128	; 0x80
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fb20 	bl	800a670 <UART_WaitOnFlagUntilTimeout>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2220      	movs	r2, #32
 800a03a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e03a      	b.n	800a0b8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10b      	bne.n	800a060 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	461a      	mov	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a056:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	3302      	adds	r3, #2
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	e007      	b.n	800a070 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	3301      	adds	r3, #1
 800a06e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a074:	b29b      	uxth	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a082:	b29b      	uxth	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1cb      	bne.n	800a020 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2200      	movs	r2, #0
 800a090:	2140      	movs	r1, #64	; 0x40
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 faec 	bl	800a670 <UART_WaitOnFlagUntilTimeout>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d005      	beq.n	800a0aa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e006      	b.n	800a0b8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e000      	b.n	800a0b8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a0b6:	2302      	movs	r3, #2
  }
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	d112      	bne.n	800a100 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <HAL_UART_Receive_IT+0x26>
 800a0e0:	88fb      	ldrh	r3, [r7, #6]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e00b      	b.n	800a102 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	68b9      	ldr	r1, [r7, #8]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 fb13 	bl	800a722 <UART_Start_Receive_IT>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	e000      	b.n	800a102 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a100:	2302      	movs	r3, #2
  }
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b0ba      	sub	sp, #232	; 0xe8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a132:	2300      	movs	r3, #0
 800a134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a138:	2300      	movs	r3, #0
 800a13a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a14a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10f      	bne.n	800a172 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <HAL_UART_IRQHandler+0x66>
 800a15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fbf2 	bl	800a954 <UART_Receive_IT>
      return;
 800a170:	e25b      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80de 	beq.w	800a338 <HAL_UART_IRQHandler+0x22c>
 800a17c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d106      	bne.n	800a196 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80d1 	beq.w	800a338 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <HAL_UART_IRQHandler+0xae>
 800a1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f043 0201 	orr.w	r2, r3, #1
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1be:	f003 0304 	and.w	r3, r3, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <HAL_UART_IRQHandler+0xd2>
 800a1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	f043 0202 	orr.w	r2, r3, #2
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <HAL_UART_IRQHandler+0xf6>
 800a1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fa:	f043 0204 	orr.w	r2, r3, #4
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <HAL_UART_IRQHandler+0x126>
 800a20e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d105      	bne.n	800a226 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a21a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22a:	f043 0208 	orr.w	r2, r3, #8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 81f2 	beq.w	800a620 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	2b00      	cmp	r3, #0
 800a246:	d008      	beq.n	800a25a <HAL_UART_IRQHandler+0x14e>
 800a248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fb7d 	bl	800a954 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a264:	2b40      	cmp	r3, #64	; 0x40
 800a266:	bf0c      	ite	eq
 800a268:	2301      	moveq	r3, #1
 800a26a:	2300      	movne	r3, #0
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <HAL_UART_IRQHandler+0x17a>
 800a27e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a282:	2b00      	cmp	r3, #0
 800a284:	d04f      	beq.n	800a326 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa85 	bl	800a796 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d141      	bne.n	800a31e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3314      	adds	r3, #20
 800a2a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3314      	adds	r3, #20
 800a2c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1d9      	bne.n	800a29a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d013      	beq.n	800a316 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f2:	4a7e      	ldr	r2, [pc, #504]	; (800a4ec <HAL_UART_IRQHandler+0x3e0>)
 800a2f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f9 fb9c 	bl	8003a38 <HAL_DMA_Abort_IT>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d016      	beq.n	800a334 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a310:	4610      	mov	r0, r2
 800a312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a314:	e00e      	b.n	800a334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f994 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31c:	e00a      	b.n	800a334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f990 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a324:	e006      	b.n	800a334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f98c 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a332:	e175      	b.n	800a620 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a334:	bf00      	nop
    return;
 800a336:	e173      	b.n	800a620 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f040 814f 	bne.w	800a5e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a346:	f003 0310 	and.w	r3, r3, #16
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8148 	beq.w	800a5e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a354:	f003 0310 	and.w	r3, r3, #16
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 8141 	beq.w	800a5e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60bb      	str	r3, [r7, #8]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37e:	2b40      	cmp	r3, #64	; 0x40
 800a380:	f040 80b6 	bne.w	800a4f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 8145 	beq.w	800a624 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a39e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	f080 813e 	bcs.w	800a624 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ba:	f000 8088 	beq.w	800a4ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	330c      	adds	r3, #12
 800a3c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a3d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a3ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a3f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a3fa:	e841 2300 	strex	r3, r2, [r1]
 800a3fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1d9      	bne.n	800a3be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3314      	adds	r3, #20
 800a410:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a41a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a41c:	f023 0301 	bic.w	r3, r3, #1
 800a420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3314      	adds	r3, #20
 800a42a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a42e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a432:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e1      	bne.n	800a40a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3314      	adds	r3, #20
 800a44c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a45c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3314      	adds	r3, #20
 800a466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a46a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a46c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e3      	bne.n	800a446 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	330c      	adds	r3, #12
 800a492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49e:	f023 0310 	bic.w	r3, r3, #16
 800a4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e3      	bne.n	800a48c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f9 fa45 	bl	8003958 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f8b7 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4ea:	e09b      	b.n	800a624 <HAL_UART_IRQHandler+0x518>
 800a4ec:	0800a85d 	.word	0x0800a85d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a504:	b29b      	uxth	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 808e 	beq.w	800a628 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a50c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8089 	beq.w	800a628 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a52c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	330c      	adds	r3, #12
 800a536:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a53a:	647a      	str	r2, [r7, #68]	; 0x44
 800a53c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a542:	e841 2300 	strex	r3, r2, [r1]
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e3      	bne.n	800a516 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3314      	adds	r3, #20
 800a554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	623b      	str	r3, [r7, #32]
   return(result);
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a572:	633a      	str	r2, [r7, #48]	; 0x30
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e3      	bne.n	800a54e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2220      	movs	r2, #32
 800a58a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	330c      	adds	r3, #12
 800a59a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0310 	bic.w	r3, r3, #16
 800a5aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	330c      	adds	r3, #12
 800a5b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a5b8:	61fa      	str	r2, [r7, #28]
 800a5ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	69b9      	ldr	r1, [r7, #24]
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e3      	bne.n	800a594 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f83d 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5de:	e023      	b.n	800a628 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d009      	beq.n	800a600 <HAL_UART_IRQHandler+0x4f4>
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f943 	bl	800a884 <UART_Transmit_IT>
    return;
 800a5fe:	e014      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00e      	beq.n	800a62a <HAL_UART_IRQHandler+0x51e>
 800a60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d008      	beq.n	800a62a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f983 	bl	800a924 <UART_EndTransmit_IT>
    return;
 800a61e:	e004      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
    return;
 800a620:	bf00      	nop
 800a622:	e002      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
      return;
 800a624:	bf00      	nop
 800a626:	e000      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
      return;
 800a628:	bf00      	nop
  }
}
 800a62a:	37e8      	adds	r7, #232	; 0xe8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	4613      	mov	r3, r2
 800a67e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a680:	e03b      	b.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a688:	d037      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68a:	f7f8 fa31 	bl	8002af0 <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	6a3a      	ldr	r2, [r7, #32]
 800a696:	429a      	cmp	r2, r3
 800a698:	d302      	bcc.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e03a      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d023      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b80      	cmp	r3, #128	; 0x80
 800a6b6:	d020      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b40      	cmp	r3, #64	; 0x40
 800a6bc:	d01d      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0308 	and.w	r3, r3, #8
 800a6c8:	2b08      	cmp	r3, #8
 800a6ca:	d116      	bne.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f857 	bl	800a796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e00f      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4013      	ands	r3, r2
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	429a      	cmp	r2, r3
 800a708:	bf0c      	ite	eq
 800a70a:	2301      	moveq	r3, #1
 800a70c:	2300      	movne	r3, #0
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	461a      	mov	r2, r3
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	429a      	cmp	r2, r3
 800a716:	d0b4      	beq.n	800a682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	4613      	mov	r3, r2
 800a72e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2222      	movs	r2, #34	; 0x22
 800a74c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a766:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	695a      	ldr	r2, [r3, #20]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0220 	orr.w	r2, r2, #32
 800a786:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a796:	b480      	push	{r7}
 800a798:	b095      	sub	sp, #84	; 0x54
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7be:	643a      	str	r2, [r7, #64]	; 0x40
 800a7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e5      	bne.n	800a79e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3314      	adds	r3, #20
 800a7d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	f023 0301 	bic.w	r3, r3, #1
 800a7e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3314      	adds	r3, #20
 800a7f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d119      	bne.n	800a842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f023 0310 	bic.w	r3, r3, #16
 800a824:	647b      	str	r3, [r7, #68]	; 0x44
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a82e:	61ba      	str	r2, [r7, #24]
 800a830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6979      	ldr	r1, [r7, #20]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	613b      	str	r3, [r7, #16]
   return(result);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e5      	bne.n	800a80e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a850:	bf00      	nop
 800a852:	3754      	adds	r7, #84	; 0x54
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fee4 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a87c:	bf00      	nop
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b21      	cmp	r3, #33	; 0x21
 800a896:	d13e      	bne.n	800a916 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8a0:	d114      	bne.n	800a8cc <UART_Transmit_IT+0x48>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d110      	bne.n	800a8cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	1c9a      	adds	r2, r3, #2
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	621a      	str	r2, [r3, #32]
 800a8ca:	e008      	b.n	800a8de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	1c59      	adds	r1, r3, #1
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6211      	str	r1, [r2, #32]
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10f      	bne.n	800a912 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a900:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a910:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e000      	b.n	800a918 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a916:	2302      	movs	r3, #2
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a93a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff fe73 	bl	800a630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08c      	sub	sp, #48	; 0x30
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b22      	cmp	r3, #34	; 0x22
 800a966:	f040 80ae 	bne.w	800aac6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a972:	d117      	bne.n	800a9a4 <UART_Receive_IT+0x50>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d113      	bne.n	800a9a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a984:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a992:	b29a      	uxth	r2, r3
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99c:	1c9a      	adds	r2, r3, #2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	629a      	str	r2, [r3, #40]	; 0x28
 800a9a2:	e026      	b.n	800a9f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b6:	d007      	beq.n	800a9c8 <UART_Receive_IT+0x74>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <UART_Receive_IT+0x82>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	e008      	b.n	800a9e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d15d      	bne.n	800aac2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0220 	bic.w	r2, r2, #32
 800aa14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	695a      	ldr	r2, [r3, #20]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0201 	bic.w	r2, r2, #1
 800aa34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d135      	bne.n	800aab8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	613b      	str	r3, [r7, #16]
   return(result);
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f023 0310 	bic.w	r3, r3, #16
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	330c      	adds	r3, #12
 800aa70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa72:	623a      	str	r2, [r7, #32]
 800aa74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	69f9      	ldr	r1, [r7, #28]
 800aa78:	6a3a      	ldr	r2, [r7, #32]
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e5      	bne.n	800aa52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0310 	and.w	r3, r3, #16
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d10a      	bne.n	800aaaa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa94:	2300      	movs	r3, #0
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fdd1 	bl	800a658 <HAL_UARTEx_RxEventCallback>
 800aab6:	e002      	b.n	800aabe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7f6 fd67 	bl	800158c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e002      	b.n	800aac8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e000      	b.n	800aac8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aac6:	2302      	movs	r3, #2
  }
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3730      	adds	r7, #48	; 0x30
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aad4:	b0c0      	sub	sp, #256	; 0x100
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaec:	68d9      	ldr	r1, [r3, #12]
 800aaee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	ea40 0301 	orr.w	r3, r0, r1
 800aaf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	431a      	orrs	r2, r3
 800ab08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab28:	f021 010c 	bic.w	r1, r1, #12
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab36:	430b      	orrs	r3, r1
 800ab38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4a:	6999      	ldr	r1, [r3, #24]
 800ab4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	ea40 0301 	orr.w	r3, r0, r1
 800ab56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	4b8f      	ldr	r3, [pc, #572]	; (800ad9c <UART_SetConfig+0x2cc>)
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d005      	beq.n	800ab70 <UART_SetConfig+0xa0>
 800ab64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4b8d      	ldr	r3, [pc, #564]	; (800ada0 <UART_SetConfig+0x2d0>)
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d104      	bne.n	800ab7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab70:	f7fe fadc 	bl	800912c <HAL_RCC_GetPCLK2Freq>
 800ab74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab78:	e003      	b.n	800ab82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab7a:	f7fe fac3 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 800ab7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab8c:	f040 810c 	bne.w	800ada8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	1891      	adds	r1, r2, r2
 800aba8:	65b9      	str	r1, [r7, #88]	; 0x58
 800abaa:	415b      	adcs	r3, r3
 800abac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800abb2:	4621      	mov	r1, r4
 800abb4:	eb12 0801 	adds.w	r8, r2, r1
 800abb8:	4629      	mov	r1, r5
 800abba:	eb43 0901 	adc.w	r9, r3, r1
 800abbe:	f04f 0200 	mov.w	r2, #0
 800abc2:	f04f 0300 	mov.w	r3, #0
 800abc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abd2:	4690      	mov	r8, r2
 800abd4:	4699      	mov	r9, r3
 800abd6:	4623      	mov	r3, r4
 800abd8:	eb18 0303 	adds.w	r3, r8, r3
 800abdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abe0:	462b      	mov	r3, r5
 800abe2:	eb49 0303 	adc.w	r3, r9, r3
 800abe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800abfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abfe:	460b      	mov	r3, r1
 800ac00:	18db      	adds	r3, r3, r3
 800ac02:	653b      	str	r3, [r7, #80]	; 0x50
 800ac04:	4613      	mov	r3, r2
 800ac06:	eb42 0303 	adc.w	r3, r2, r3
 800ac0a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ac10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac14:	f7f6 f838 	bl	8000c88 <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4b61      	ldr	r3, [pc, #388]	; (800ada4 <UART_SetConfig+0x2d4>)
 800ac1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac22:	095b      	lsrs	r3, r3, #5
 800ac24:	011c      	lsls	r4, r3, #4
 800ac26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac38:	4642      	mov	r2, r8
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	1891      	adds	r1, r2, r2
 800ac3e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac40:	415b      	adcs	r3, r3
 800ac42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac48:	4641      	mov	r1, r8
 800ac4a:	eb12 0a01 	adds.w	sl, r2, r1
 800ac4e:	4649      	mov	r1, r9
 800ac50:	eb43 0b01 	adc.w	fp, r3, r1
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac68:	4692      	mov	sl, r2
 800ac6a:	469b      	mov	fp, r3
 800ac6c:	4643      	mov	r3, r8
 800ac6e:	eb1a 0303 	adds.w	r3, sl, r3
 800ac72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac76:	464b      	mov	r3, r9
 800ac78:	eb4b 0303 	adc.w	r3, fp, r3
 800ac7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac94:	460b      	mov	r3, r1
 800ac96:	18db      	adds	r3, r3, r3
 800ac98:	643b      	str	r3, [r7, #64]	; 0x40
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	eb42 0303 	adc.w	r3, r2, r3
 800aca0:	647b      	str	r3, [r7, #68]	; 0x44
 800aca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800acaa:	f7f5 ffed 	bl	8000c88 <__aeabi_uldivmod>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4611      	mov	r1, r2
 800acb4:	4b3b      	ldr	r3, [pc, #236]	; (800ada4 <UART_SetConfig+0x2d4>)
 800acb6:	fba3 2301 	umull	r2, r3, r3, r1
 800acba:	095b      	lsrs	r3, r3, #5
 800acbc:	2264      	movs	r2, #100	; 0x64
 800acbe:	fb02 f303 	mul.w	r3, r2, r3
 800acc2:	1acb      	subs	r3, r1, r3
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800acca:	4b36      	ldr	r3, [pc, #216]	; (800ada4 <UART_SetConfig+0x2d4>)
 800accc:	fba3 2302 	umull	r2, r3, r3, r2
 800acd0:	095b      	lsrs	r3, r3, #5
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800acd8:	441c      	add	r4, r3
 800acda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ace4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ace8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	1891      	adds	r1, r2, r2
 800acf2:	63b9      	str	r1, [r7, #56]	; 0x38
 800acf4:	415b      	adcs	r3, r3
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800acfc:	4641      	mov	r1, r8
 800acfe:	1851      	adds	r1, r2, r1
 800ad00:	6339      	str	r1, [r7, #48]	; 0x30
 800ad02:	4649      	mov	r1, r9
 800ad04:	414b      	adcs	r3, r1
 800ad06:	637b      	str	r3, [r7, #52]	; 0x34
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	f04f 0300 	mov.w	r3, #0
 800ad10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ad14:	4659      	mov	r1, fp
 800ad16:	00cb      	lsls	r3, r1, #3
 800ad18:	4651      	mov	r1, sl
 800ad1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad1e:	4651      	mov	r1, sl
 800ad20:	00ca      	lsls	r2, r1, #3
 800ad22:	4610      	mov	r0, r2
 800ad24:	4619      	mov	r1, r3
 800ad26:	4603      	mov	r3, r0
 800ad28:	4642      	mov	r2, r8
 800ad2a:	189b      	adds	r3, r3, r2
 800ad2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad30:	464b      	mov	r3, r9
 800ad32:	460a      	mov	r2, r1
 800ad34:	eb42 0303 	adc.w	r3, r2, r3
 800ad38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad50:	460b      	mov	r3, r1
 800ad52:	18db      	adds	r3, r3, r3
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad56:	4613      	mov	r3, r2
 800ad58:	eb42 0303 	adc.w	r3, r2, r3
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad66:	f7f5 ff8f 	bl	8000c88 <__aeabi_uldivmod>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <UART_SetConfig+0x2d4>)
 800ad70:	fba3 1302 	umull	r1, r3, r3, r2
 800ad74:	095b      	lsrs	r3, r3, #5
 800ad76:	2164      	movs	r1, #100	; 0x64
 800ad78:	fb01 f303 	mul.w	r3, r1, r3
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	3332      	adds	r3, #50	; 0x32
 800ad82:	4a08      	ldr	r2, [pc, #32]	; (800ada4 <UART_SetConfig+0x2d4>)
 800ad84:	fba2 2303 	umull	r2, r3, r2, r3
 800ad88:	095b      	lsrs	r3, r3, #5
 800ad8a:	f003 0207 	and.w	r2, r3, #7
 800ad8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4422      	add	r2, r4
 800ad96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad98:	e106      	b.n	800afa8 <UART_SetConfig+0x4d8>
 800ad9a:	bf00      	nop
 800ad9c:	40011000 	.word	0x40011000
 800ada0:	40011400 	.word	0x40011400
 800ada4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ada8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adac:	2200      	movs	r2, #0
 800adae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800adb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800adba:	4642      	mov	r2, r8
 800adbc:	464b      	mov	r3, r9
 800adbe:	1891      	adds	r1, r2, r2
 800adc0:	6239      	str	r1, [r7, #32]
 800adc2:	415b      	adcs	r3, r3
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
 800adc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800adca:	4641      	mov	r1, r8
 800adcc:	1854      	adds	r4, r2, r1
 800adce:	4649      	mov	r1, r9
 800add0:	eb43 0501 	adc.w	r5, r3, r1
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	00eb      	lsls	r3, r5, #3
 800adde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ade2:	00e2      	lsls	r2, r4, #3
 800ade4:	4614      	mov	r4, r2
 800ade6:	461d      	mov	r5, r3
 800ade8:	4643      	mov	r3, r8
 800adea:	18e3      	adds	r3, r4, r3
 800adec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800adf0:	464b      	mov	r3, r9
 800adf2:	eb45 0303 	adc.w	r3, r5, r3
 800adf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae0a:	f04f 0200 	mov.w	r2, #0
 800ae0e:	f04f 0300 	mov.w	r3, #0
 800ae12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ae16:	4629      	mov	r1, r5
 800ae18:	008b      	lsls	r3, r1, #2
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae20:	4621      	mov	r1, r4
 800ae22:	008a      	lsls	r2, r1, #2
 800ae24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae28:	f7f5 ff2e 	bl	8000c88 <__aeabi_uldivmod>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4b60      	ldr	r3, [pc, #384]	; (800afb4 <UART_SetConfig+0x4e4>)
 800ae32:	fba3 2302 	umull	r2, r3, r3, r2
 800ae36:	095b      	lsrs	r3, r3, #5
 800ae38:	011c      	lsls	r4, r3, #4
 800ae3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	1891      	adds	r1, r2, r2
 800ae52:	61b9      	str	r1, [r7, #24]
 800ae54:	415b      	adcs	r3, r3
 800ae56:	61fb      	str	r3, [r7, #28]
 800ae58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae5c:	4641      	mov	r1, r8
 800ae5e:	1851      	adds	r1, r2, r1
 800ae60:	6139      	str	r1, [r7, #16]
 800ae62:	4649      	mov	r1, r9
 800ae64:	414b      	adcs	r3, r1
 800ae66:	617b      	str	r3, [r7, #20]
 800ae68:	f04f 0200 	mov.w	r2, #0
 800ae6c:	f04f 0300 	mov.w	r3, #0
 800ae70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae74:	4659      	mov	r1, fp
 800ae76:	00cb      	lsls	r3, r1, #3
 800ae78:	4651      	mov	r1, sl
 800ae7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae7e:	4651      	mov	r1, sl
 800ae80:	00ca      	lsls	r2, r1, #3
 800ae82:	4610      	mov	r0, r2
 800ae84:	4619      	mov	r1, r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	4642      	mov	r2, r8
 800ae8a:	189b      	adds	r3, r3, r2
 800ae8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae90:	464b      	mov	r3, r9
 800ae92:	460a      	mov	r2, r1
 800ae94:	eb42 0303 	adc.w	r3, r2, r3
 800ae98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	67bb      	str	r3, [r7, #120]	; 0x78
 800aea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aea8:	f04f 0200 	mov.w	r2, #0
 800aeac:	f04f 0300 	mov.w	r3, #0
 800aeb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	008b      	lsls	r3, r1, #2
 800aeb8:	4641      	mov	r1, r8
 800aeba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aebe:	4641      	mov	r1, r8
 800aec0:	008a      	lsls	r2, r1, #2
 800aec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aec6:	f7f5 fedf 	bl	8000c88 <__aeabi_uldivmod>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	4b38      	ldr	r3, [pc, #224]	; (800afb4 <UART_SetConfig+0x4e4>)
 800aed2:	fba3 2301 	umull	r2, r3, r3, r1
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	2264      	movs	r2, #100	; 0x64
 800aeda:	fb02 f303 	mul.w	r3, r2, r3
 800aede:	1acb      	subs	r3, r1, r3
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	3332      	adds	r3, #50	; 0x32
 800aee4:	4a33      	ldr	r2, [pc, #204]	; (800afb4 <UART_SetConfig+0x4e4>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	095b      	lsrs	r3, r3, #5
 800aeec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aef0:	441c      	add	r4, r3
 800aef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aef6:	2200      	movs	r2, #0
 800aef8:	673b      	str	r3, [r7, #112]	; 0x70
 800aefa:	677a      	str	r2, [r7, #116]	; 0x74
 800aefc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800af00:	4642      	mov	r2, r8
 800af02:	464b      	mov	r3, r9
 800af04:	1891      	adds	r1, r2, r2
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	415b      	adcs	r3, r3
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af10:	4641      	mov	r1, r8
 800af12:	1851      	adds	r1, r2, r1
 800af14:	6039      	str	r1, [r7, #0]
 800af16:	4649      	mov	r1, r9
 800af18:	414b      	adcs	r3, r1
 800af1a:	607b      	str	r3, [r7, #4]
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	f04f 0300 	mov.w	r3, #0
 800af24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af28:	4659      	mov	r1, fp
 800af2a:	00cb      	lsls	r3, r1, #3
 800af2c:	4651      	mov	r1, sl
 800af2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af32:	4651      	mov	r1, sl
 800af34:	00ca      	lsls	r2, r1, #3
 800af36:	4610      	mov	r0, r2
 800af38:	4619      	mov	r1, r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	4642      	mov	r2, r8
 800af3e:	189b      	adds	r3, r3, r2
 800af40:	66bb      	str	r3, [r7, #104]	; 0x68
 800af42:	464b      	mov	r3, r9
 800af44:	460a      	mov	r2, r1
 800af46:	eb42 0303 	adc.w	r3, r2, r3
 800af4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	663b      	str	r3, [r7, #96]	; 0x60
 800af56:	667a      	str	r2, [r7, #100]	; 0x64
 800af58:	f04f 0200 	mov.w	r2, #0
 800af5c:	f04f 0300 	mov.w	r3, #0
 800af60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af64:	4649      	mov	r1, r9
 800af66:	008b      	lsls	r3, r1, #2
 800af68:	4641      	mov	r1, r8
 800af6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af6e:	4641      	mov	r1, r8
 800af70:	008a      	lsls	r2, r1, #2
 800af72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af76:	f7f5 fe87 	bl	8000c88 <__aeabi_uldivmod>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4b0d      	ldr	r3, [pc, #52]	; (800afb4 <UART_SetConfig+0x4e4>)
 800af80:	fba3 1302 	umull	r1, r3, r3, r2
 800af84:	095b      	lsrs	r3, r3, #5
 800af86:	2164      	movs	r1, #100	; 0x64
 800af88:	fb01 f303 	mul.w	r3, r1, r3
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	3332      	adds	r3, #50	; 0x32
 800af92:	4a08      	ldr	r2, [pc, #32]	; (800afb4 <UART_SetConfig+0x4e4>)
 800af94:	fba2 2303 	umull	r2, r3, r2, r3
 800af98:	095b      	lsrs	r3, r3, #5
 800af9a:	f003 020f 	and.w	r2, r3, #15
 800af9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4422      	add	r2, r4
 800afa6:	609a      	str	r2, [r3, #8]
}
 800afa8:	bf00      	nop
 800afaa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800afae:	46bd      	mov	sp, r7
 800afb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afb4:	51eb851f 	.word	0x51eb851f

0800afb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800afb8:	b5b0      	push	{r4, r5, r7, lr}
 800afba:	b08c      	sub	sp, #48	; 0x30
 800afbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800afbe:	4b8f      	ldr	r3, [pc, #572]	; (800b1fc <MX_LWIP_Init+0x244>)
 800afc0:	22c0      	movs	r2, #192	; 0xc0
 800afc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800afc4:	4b8d      	ldr	r3, [pc, #564]	; (800b1fc <MX_LWIP_Init+0x244>)
 800afc6:	22a8      	movs	r2, #168	; 0xa8
 800afc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800afca:	4b8c      	ldr	r3, [pc, #560]	; (800b1fc <MX_LWIP_Init+0x244>)
 800afcc:	2201      	movs	r2, #1
 800afce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 48;
 800afd0:	4b8a      	ldr	r3, [pc, #552]	; (800b1fc <MX_LWIP_Init+0x244>)
 800afd2:	2230      	movs	r2, #48	; 0x30
 800afd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800afd6:	4b8a      	ldr	r3, [pc, #552]	; (800b200 <MX_LWIP_Init+0x248>)
 800afd8:	22ff      	movs	r2, #255	; 0xff
 800afda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800afdc:	4b88      	ldr	r3, [pc, #544]	; (800b200 <MX_LWIP_Init+0x248>)
 800afde:	22ff      	movs	r2, #255	; 0xff
 800afe0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800afe2:	4b87      	ldr	r3, [pc, #540]	; (800b200 <MX_LWIP_Init+0x248>)
 800afe4:	22ff      	movs	r2, #255	; 0xff
 800afe6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800afe8:	4b85      	ldr	r3, [pc, #532]	; (800b200 <MX_LWIP_Init+0x248>)
 800afea:	2200      	movs	r2, #0
 800afec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800afee:	4b85      	ldr	r3, [pc, #532]	; (800b204 <MX_LWIP_Init+0x24c>)
 800aff0:	22c0      	movs	r2, #192	; 0xc0
 800aff2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800aff4:	4b83      	ldr	r3, [pc, #524]	; (800b204 <MX_LWIP_Init+0x24c>)
 800aff6:	22a8      	movs	r2, #168	; 0xa8
 800aff8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800affa:	4b82      	ldr	r3, [pc, #520]	; (800b204 <MX_LWIP_Init+0x24c>)
 800affc:	2201      	movs	r2, #1
 800affe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b000:	4b80      	ldr	r3, [pc, #512]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b002:	2201      	movs	r2, #1
 800b004:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b006:	2100      	movs	r1, #0
 800b008:	2000      	movs	r0, #0
 800b00a:	f006 f8ad 	bl	8011168 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b00e:	4b7b      	ldr	r3, [pc, #492]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	061a      	lsls	r2, r3, #24
 800b014:	4b79      	ldr	r3, [pc, #484]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b016:	785b      	ldrb	r3, [r3, #1]
 800b018:	041b      	lsls	r3, r3, #16
 800b01a:	431a      	orrs	r2, r3
 800b01c:	4b77      	ldr	r3, [pc, #476]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b01e:	789b      	ldrb	r3, [r3, #2]
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	4313      	orrs	r3, r2
 800b024:	4a75      	ldr	r2, [pc, #468]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b026:	78d2      	ldrb	r2, [r2, #3]
 800b028:	4313      	orrs	r3, r2
 800b02a:	061a      	lsls	r2, r3, #24
 800b02c:	4b73      	ldr	r3, [pc, #460]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	0619      	lsls	r1, r3, #24
 800b032:	4b72      	ldr	r3, [pc, #456]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	041b      	lsls	r3, r3, #16
 800b038:	4319      	orrs	r1, r3
 800b03a:	4b70      	ldr	r3, [pc, #448]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b03c:	789b      	ldrb	r3, [r3, #2]
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	430b      	orrs	r3, r1
 800b042:	496e      	ldr	r1, [pc, #440]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b044:	78c9      	ldrb	r1, [r1, #3]
 800b046:	430b      	orrs	r3, r1
 800b048:	021b      	lsls	r3, r3, #8
 800b04a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b04e:	431a      	orrs	r2, r3
 800b050:	4b6a      	ldr	r3, [pc, #424]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	0619      	lsls	r1, r3, #24
 800b056:	4b69      	ldr	r3, [pc, #420]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b058:	785b      	ldrb	r3, [r3, #1]
 800b05a:	041b      	lsls	r3, r3, #16
 800b05c:	4319      	orrs	r1, r3
 800b05e:	4b67      	ldr	r3, [pc, #412]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b060:	789b      	ldrb	r3, [r3, #2]
 800b062:	021b      	lsls	r3, r3, #8
 800b064:	430b      	orrs	r3, r1
 800b066:	4965      	ldr	r1, [pc, #404]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b068:	78c9      	ldrb	r1, [r1, #3]
 800b06a:	430b      	orrs	r3, r1
 800b06c:	0a1b      	lsrs	r3, r3, #8
 800b06e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b072:	431a      	orrs	r2, r3
 800b074:	4b61      	ldr	r3, [pc, #388]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	0619      	lsls	r1, r3, #24
 800b07a:	4b60      	ldr	r3, [pc, #384]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b07c:	785b      	ldrb	r3, [r3, #1]
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	4319      	orrs	r1, r3
 800b082:	4b5e      	ldr	r3, [pc, #376]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b084:	789b      	ldrb	r3, [r3, #2]
 800b086:	021b      	lsls	r3, r3, #8
 800b088:	430b      	orrs	r3, r1
 800b08a:	495c      	ldr	r1, [pc, #368]	; (800b1fc <MX_LWIP_Init+0x244>)
 800b08c:	78c9      	ldrb	r1, [r1, #3]
 800b08e:	430b      	orrs	r3, r1
 800b090:	0e1b      	lsrs	r3, r3, #24
 800b092:	4313      	orrs	r3, r2
 800b094:	4a5c      	ldr	r2, [pc, #368]	; (800b208 <MX_LWIP_Init+0x250>)
 800b096:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b098:	4b59      	ldr	r3, [pc, #356]	; (800b200 <MX_LWIP_Init+0x248>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	061a      	lsls	r2, r3, #24
 800b09e:	4b58      	ldr	r3, [pc, #352]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	041b      	lsls	r3, r3, #16
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	4b56      	ldr	r3, [pc, #344]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0a8:	789b      	ldrb	r3, [r3, #2]
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	4a54      	ldr	r2, [pc, #336]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0b0:	78d2      	ldrb	r2, [r2, #3]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	061a      	lsls	r2, r3, #24
 800b0b6:	4b52      	ldr	r3, [pc, #328]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	0619      	lsls	r1, r3, #24
 800b0bc:	4b50      	ldr	r3, [pc, #320]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	041b      	lsls	r3, r3, #16
 800b0c2:	4319      	orrs	r1, r3
 800b0c4:	4b4e      	ldr	r3, [pc, #312]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0c6:	789b      	ldrb	r3, [r3, #2]
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	494c      	ldr	r1, [pc, #304]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0ce:	78c9      	ldrb	r1, [r1, #3]
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	021b      	lsls	r3, r3, #8
 800b0d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	4b49      	ldr	r3, [pc, #292]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	0619      	lsls	r1, r3, #24
 800b0e0:	4b47      	ldr	r3, [pc, #284]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0e2:	785b      	ldrb	r3, [r3, #1]
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	4319      	orrs	r1, r3
 800b0e8:	4b45      	ldr	r3, [pc, #276]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0ea:	789b      	ldrb	r3, [r3, #2]
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	430b      	orrs	r3, r1
 800b0f0:	4943      	ldr	r1, [pc, #268]	; (800b200 <MX_LWIP_Init+0x248>)
 800b0f2:	78c9      	ldrb	r1, [r1, #3]
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	0a1b      	lsrs	r3, r3, #8
 800b0f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	4b40      	ldr	r3, [pc, #256]	; (800b200 <MX_LWIP_Init+0x248>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	0619      	lsls	r1, r3, #24
 800b104:	4b3e      	ldr	r3, [pc, #248]	; (800b200 <MX_LWIP_Init+0x248>)
 800b106:	785b      	ldrb	r3, [r3, #1]
 800b108:	041b      	lsls	r3, r3, #16
 800b10a:	4319      	orrs	r1, r3
 800b10c:	4b3c      	ldr	r3, [pc, #240]	; (800b200 <MX_LWIP_Init+0x248>)
 800b10e:	789b      	ldrb	r3, [r3, #2]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	430b      	orrs	r3, r1
 800b114:	493a      	ldr	r1, [pc, #232]	; (800b200 <MX_LWIP_Init+0x248>)
 800b116:	78c9      	ldrb	r1, [r1, #3]
 800b118:	430b      	orrs	r3, r1
 800b11a:	0e1b      	lsrs	r3, r3, #24
 800b11c:	4313      	orrs	r3, r2
 800b11e:	4a3b      	ldr	r2, [pc, #236]	; (800b20c <MX_LWIP_Init+0x254>)
 800b120:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b122:	4b38      	ldr	r3, [pc, #224]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	061a      	lsls	r2, r3, #24
 800b128:	4b36      	ldr	r3, [pc, #216]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b12a:	785b      	ldrb	r3, [r3, #1]
 800b12c:	041b      	lsls	r3, r3, #16
 800b12e:	431a      	orrs	r2, r3
 800b130:	4b34      	ldr	r3, [pc, #208]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b132:	789b      	ldrb	r3, [r3, #2]
 800b134:	021b      	lsls	r3, r3, #8
 800b136:	4313      	orrs	r3, r2
 800b138:	4a32      	ldr	r2, [pc, #200]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b13a:	78d2      	ldrb	r2, [r2, #3]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	061a      	lsls	r2, r3, #24
 800b140:	4b30      	ldr	r3, [pc, #192]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	0619      	lsls	r1, r3, #24
 800b146:	4b2f      	ldr	r3, [pc, #188]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b148:	785b      	ldrb	r3, [r3, #1]
 800b14a:	041b      	lsls	r3, r3, #16
 800b14c:	4319      	orrs	r1, r3
 800b14e:	4b2d      	ldr	r3, [pc, #180]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b150:	789b      	ldrb	r3, [r3, #2]
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	430b      	orrs	r3, r1
 800b156:	492b      	ldr	r1, [pc, #172]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b158:	78c9      	ldrb	r1, [r1, #3]
 800b15a:	430b      	orrs	r3, r1
 800b15c:	021b      	lsls	r3, r3, #8
 800b15e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b162:	431a      	orrs	r2, r3
 800b164:	4b27      	ldr	r3, [pc, #156]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	0619      	lsls	r1, r3, #24
 800b16a:	4b26      	ldr	r3, [pc, #152]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	041b      	lsls	r3, r3, #16
 800b170:	4319      	orrs	r1, r3
 800b172:	4b24      	ldr	r3, [pc, #144]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b174:	789b      	ldrb	r3, [r3, #2]
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	430b      	orrs	r3, r1
 800b17a:	4922      	ldr	r1, [pc, #136]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b17c:	78c9      	ldrb	r1, [r1, #3]
 800b17e:	430b      	orrs	r3, r1
 800b180:	0a1b      	lsrs	r3, r3, #8
 800b182:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b186:	431a      	orrs	r2, r3
 800b188:	4b1e      	ldr	r3, [pc, #120]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	0619      	lsls	r1, r3, #24
 800b18e:	4b1d      	ldr	r3, [pc, #116]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b190:	785b      	ldrb	r3, [r3, #1]
 800b192:	041b      	lsls	r3, r3, #16
 800b194:	4319      	orrs	r1, r3
 800b196:	4b1b      	ldr	r3, [pc, #108]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b198:	789b      	ldrb	r3, [r3, #2]
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	430b      	orrs	r3, r1
 800b19e:	4919      	ldr	r1, [pc, #100]	; (800b204 <MX_LWIP_Init+0x24c>)
 800b1a0:	78c9      	ldrb	r1, [r1, #3]
 800b1a2:	430b      	orrs	r3, r1
 800b1a4:	0e1b      	lsrs	r3, r3, #24
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	4a19      	ldr	r2, [pc, #100]	; (800b210 <MX_LWIP_Init+0x258>)
 800b1aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b1ac:	4b19      	ldr	r3, [pc, #100]	; (800b214 <MX_LWIP_Init+0x25c>)
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	4b19      	ldr	r3, [pc, #100]	; (800b218 <MX_LWIP_Init+0x260>)
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <MX_LWIP_Init+0x258>)
 800b1ba:	4a14      	ldr	r2, [pc, #80]	; (800b20c <MX_LWIP_Init+0x254>)
 800b1bc:	4912      	ldr	r1, [pc, #72]	; (800b208 <MX_LWIP_Init+0x250>)
 800b1be:	4817      	ldr	r0, [pc, #92]	; (800b21c <MX_LWIP_Init+0x264>)
 800b1c0:	f006 fde4 	bl	8011d8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b1c4:	4815      	ldr	r0, [pc, #84]	; (800b21c <MX_LWIP_Init+0x264>)
 800b1c6:	f006 ff93 	bl	80120f0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b1ca:	4814      	ldr	r0, [pc, #80]	; (800b21c <MX_LWIP_Init+0x264>)
 800b1cc:	f006 ffa0 	bl	8012110 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b1d0:	4913      	ldr	r1, [pc, #76]	; (800b220 <MX_LWIP_Init+0x268>)
 800b1d2:	4812      	ldr	r0, [pc, #72]	; (800b21c <MX_LWIP_Init+0x264>)
 800b1d4:	f007 f89e 	bl	8012314 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800b1d8:	4b12      	ldr	r3, [pc, #72]	; (800b224 <MX_LWIP_Init+0x26c>)
 800b1da:	1d3c      	adds	r4, r7, #4
 800b1dc:	461d      	mov	r5, r3
 800b1de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b1e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800b1ea:	1d3b      	adds	r3, r7, #4
 800b1ec:	490b      	ldr	r1, [pc, #44]	; (800b21c <MX_LWIP_Init+0x264>)
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fd42 	bl	800bc78 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b1f4:	bf00      	nop
 800b1f6:	3720      	adds	r7, #32
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b1fc:	20000d44 	.word	0x20000d44
 800b200:	20000d48 	.word	0x20000d48
 800b204:	20000d4c 	.word	0x20000d4c
 800b208:	20000d38 	.word	0x20000d38
 800b20c:	20000d3c 	.word	0x20000d3c
 800b210:	20000d40 	.word	0x20000d40
 800b214:	08011079 	.word	0x08011079
 800b218:	0800b701 	.word	0x0800b701
 800b21c:	20000d04 	.word	0x20000d04
 800b220:	0800b229 	.word	0x0800b229
 800b224:	0801f5e0 	.word	0x0801f5e0

0800b228 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <HAL_ETH_RxCpltCallback+0x1c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fe91 	bl	800bf70 <osSemaphoreRelease>
}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	2000581c 	.word	0x2000581c

0800b25c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b264:	4b04      	ldr	r3, [pc, #16]	; (800b278 <HAL_ETH_TxCpltCallback+0x1c>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 fe81 	bl	800bf70 <osSemaphoreRelease>
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20005820 	.word	0x20005820

0800b27c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7f9 fcc7 	bl	8004c18 <HAL_ETH_GetDMAError>
 800b28a:	4603      	mov	r3, r0
 800b28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b290:	2b80      	cmp	r3, #128	; 0x80
 800b292:	d104      	bne.n	800b29e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b294:	4b04      	ldr	r3, [pc, #16]	; (800b2a8 <HAL_ETH_ErrorCallback+0x2c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fe69 	bl	800bf70 <osSemaphoreRelease>
  }
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	2000581c 	.word	0x2000581c

0800b2ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b2ac:	b5b0      	push	{r4, r5, r7, lr}
 800b2ae:	b0ac      	sub	sp, #176	; 0xb0
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 800b2c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b2ca:	2264      	movs	r2, #100	; 0x64
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f012 f88c 	bl	801d3ec <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b2d4:	4b90      	ldr	r3, [pc, #576]	; (800b518 <low_level_init+0x26c>)
 800b2d6:	4a91      	ldr	r2, [pc, #580]	; (800b51c <low_level_init+0x270>)
 800b2d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x80;
 800b2e0:	2380      	movs	r3, #128	; 0x80
 800b2e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0xE1;
 800b2e6:	23e1      	movs	r3, #225	; 0xe1
 800b2e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x00;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0x00;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0x00;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800b2fe:	4a86      	ldr	r2, [pc, #536]	; (800b518 <low_level_init+0x26c>)
 800b300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b304:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b306:	4b84      	ldr	r3, [pc, #528]	; (800b518 <low_level_init+0x26c>)
 800b308:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b30c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b30e:	4b82      	ldr	r3, [pc, #520]	; (800b518 <low_level_init+0x26c>)
 800b310:	4a83      	ldr	r2, [pc, #524]	; (800b520 <low_level_init+0x274>)
 800b312:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b314:	4b80      	ldr	r3, [pc, #512]	; (800b518 <low_level_init+0x26c>)
 800b316:	4a83      	ldr	r2, [pc, #524]	; (800b524 <low_level_init+0x278>)
 800b318:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b31a:	4b7f      	ldr	r3, [pc, #508]	; (800b518 <low_level_init+0x26c>)
 800b31c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b320:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b322:	487d      	ldr	r0, [pc, #500]	; (800b518 <low_level_init+0x26c>)
 800b324:	f7f8 fe2e 	bl	8003f84 <HAL_ETH_Init>
 800b328:	4603      	mov	r3, r0
 800b32a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b32e:	2238      	movs	r2, #56	; 0x38
 800b330:	2100      	movs	r1, #0
 800b332:	487d      	ldr	r0, [pc, #500]	; (800b528 <low_level_init+0x27c>)
 800b334:	f012 f85a 	bl	801d3ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b338:	4b7b      	ldr	r3, [pc, #492]	; (800b528 <low_level_init+0x27c>)
 800b33a:	2221      	movs	r2, #33	; 0x21
 800b33c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b33e:	4b7a      	ldr	r3, [pc, #488]	; (800b528 <low_level_init+0x27c>)
 800b340:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b344:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b346:	4b78      	ldr	r3, [pc, #480]	; (800b528 <low_level_init+0x27c>)
 800b348:	2200      	movs	r2, #0
 800b34a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b34c:	4877      	ldr	r0, [pc, #476]	; (800b52c <low_level_init+0x280>)
 800b34e:	f006 fbd7 	bl	8011b00 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2206      	movs	r2, #6
 800b356:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b35a:	4b6f      	ldr	r3, [pc, #444]	; (800b518 <low_level_init+0x26c>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	781a      	ldrb	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b366:	4b6c      	ldr	r3, [pc, #432]	; (800b518 <low_level_init+0x26c>)
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	785a      	ldrb	r2, [r3, #1]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b372:	4b69      	ldr	r3, [pc, #420]	; (800b518 <low_level_init+0x26c>)
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	789a      	ldrb	r2, [r3, #2]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b37e:	4b66      	ldr	r3, [pc, #408]	; (800b518 <low_level_init+0x26c>)
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	78da      	ldrb	r2, [r3, #3]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b38a:	4b63      	ldr	r3, [pc, #396]	; (800b518 <low_level_init+0x26c>)
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	791a      	ldrb	r2, [r3, #4]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b396:	4b60      	ldr	r3, [pc, #384]	; (800b518 <low_level_init+0x26c>)
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	795a      	ldrb	r2, [r3, #5]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b3a8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3b0:	f043 030a 	orr.w	r3, r3, #10
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800b3bc:	2300      	movs	r3, #0
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800b3c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 fd50 	bl	800be70 <osSemaphoreCreate>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	4a57      	ldr	r2, [pc, #348]	; (800b530 <low_level_init+0x284>)
 800b3d4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3da:	2300      	movs	r3, #0
 800b3dc:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800b3de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 fd43 	bl	800be70 <osSemaphoreCreate>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	4a51      	ldr	r2, [pc, #324]	; (800b534 <low_level_init+0x288>)
 800b3ee:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800b3f0:	4b4f      	ldr	r3, [pc, #316]	; (800b530 <low_level_init+0x284>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fd6c 	bl	800bed4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800b3fc:	4b4d      	ldr	r3, [pc, #308]	; (800b534 <low_level_init+0x288>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2100      	movs	r1, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f000 fd66 	bl	800bed4 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b408:	4b4b      	ldr	r3, [pc, #300]	; (800b538 <low_level_init+0x28c>)
 800b40a:	f107 0408 	add.w	r4, r7, #8
 800b40e:	461d      	mov	r5, r3
 800b410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b41c:	f107 0308 	add.w	r3, r7, #8
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fc28 	bl	800bc78 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b428:	4944      	ldr	r1, [pc, #272]	; (800b53c <low_level_init+0x290>)
 800b42a:	4845      	ldr	r0, [pc, #276]	; (800b540 <low_level_init+0x294>)
 800b42c:	f7f7 f9c9 	bl	80027c2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b430:	4843      	ldr	r0, [pc, #268]	; (800b540 <low_level_init+0x294>)
 800b432:	f7f7 f9f8 	bl	8002826 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b436:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d165      	bne.n	800b50a <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b43e:	4840      	ldr	r0, [pc, #256]	; (800b540 <low_level_init+0x294>)
 800b440:	f7f7 fa99 	bl	8002976 <LAN8742_GetLinkState>
 800b444:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	dc06      	bgt.n	800b45e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f006 ff2f 	bl	80122b4 <netif_set_link_down>
      netif_set_down(netif);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f006 fec6 	bl	80121e8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b45c:	e057      	b.n	800b50e <low_level_init+0x262>
      switch (PHYLinkState)
 800b45e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b462:	3b02      	subs	r3, #2
 800b464:	2b03      	cmp	r3, #3
 800b466:	d82b      	bhi.n	800b4c0 <low_level_init+0x214>
 800b468:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <low_level_init+0x1c4>)
 800b46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46e:	bf00      	nop
 800b470:	0800b481 	.word	0x0800b481
 800b474:	0800b493 	.word	0x0800b493
 800b478:	0800b4a3 	.word	0x0800b4a3
 800b47c:	0800b4b3 	.word	0x0800b4b3
        duplex = ETH_FULLDUPLEX_MODE;
 800b480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 800b488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b48c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800b490:	e01f      	b.n	800b4d2 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800b492:	2300      	movs	r3, #0
 800b494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 800b498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b49c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800b4a0:	e017      	b.n	800b4d2 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800b4a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800b4b0:	e00f      	b.n	800b4d2 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800b4be:	e008      	b.n	800b4d2 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800b4c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 800b4c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800b4d0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b4d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	480f      	ldr	r0, [pc, #60]	; (800b518 <low_level_init+0x26c>)
 800b4da:	f7f9 fa43 	bl	8004964 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4e2:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 800b4e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4e8:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b4ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4809      	ldr	r0, [pc, #36]	; (800b518 <low_level_init+0x26c>)
 800b4f2:	f7f9 fb21 	bl	8004b38 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b4f6:	4808      	ldr	r0, [pc, #32]	; (800b518 <low_level_init+0x26c>)
 800b4f8:	f7f8 fdc2 	bl	8004080 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f006 fe07 	bl	8012110 <netif_set_up>
    netif_set_link_up(netif);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f006 fea2 	bl	801224c <netif_set_link_up>
}
 800b508:	e001      	b.n	800b50e <low_level_init+0x262>
    Error_Handler();
 800b50a:	f7f6 fc41 	bl	8001d90 <Error_Handler>
}
 800b50e:	bf00      	nop
 800b510:	37b0      	adds	r7, #176	; 0xb0
 800b512:	46bd      	mov	sp, r7
 800b514:	bdb0      	pop	{r4, r5, r7, pc}
 800b516:	bf00      	nop
 800b518:	20005824 	.word	0x20005824
 800b51c:	40028000 	.word	0x40028000
 800b520:	2000577c 	.word	0x2000577c
 800b524:	200056dc 	.word	0x200056dc
 800b528:	200058d4 	.word	0x200058d4
 800b52c:	08022c0c 	.word	0x08022c0c
 800b530:	2000581c 	.word	0x2000581c
 800b534:	20005820 	.word	0x20005820
 800b538:	0801f604 	.word	0x0801f604
 800b53c:	2000000c 	.word	0x2000000c
 800b540:	2000590c 	.word	0x2000590c

0800b544 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b092      	sub	sp, #72	; 0x48
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	2230      	movs	r2, #48	; 0x30
 800b562:	2100      	movs	r1, #0
 800b564:	4618      	mov	r0, r3
 800b566:	f011 ff41 	bl	801d3ec <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b56a:	f107 030c 	add.w	r3, r7, #12
 800b56e:	2230      	movs	r2, #48	; 0x30
 800b570:	2100      	movs	r1, #0
 800b572:	4618      	mov	r0, r3
 800b574:	f011 ff3a 	bl	801d3ec <memset>

  for(q = p; q != NULL; q = q->next)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	643b      	str	r3, [r7, #64]	; 0x40
 800b57c:	e045      	b.n	800b60a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b580:	2b03      	cmp	r3, #3
 800b582:	d902      	bls.n	800b58a <low_level_output+0x46>
      return ERR_IF;
 800b584:	f06f 030b 	mvn.w	r3, #11
 800b588:	e06c      	b.n	800b664 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800b58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58c:	6859      	ldr	r1, [r3, #4]
 800b58e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b590:	4613      	mov	r3, r2
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	3348      	adds	r3, #72	; 0x48
 800b59a:	443b      	add	r3, r7
 800b59c:	3b3c      	subs	r3, #60	; 0x3c
 800b59e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b5a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5a2:	895b      	ldrh	r3, [r3, #10]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	3348      	adds	r3, #72	; 0x48
 800b5b2:	443b      	add	r3, r7
 800b5b4:	3b38      	subs	r3, #56	; 0x38
 800b5b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d011      	beq.n	800b5e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b5be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5c0:	1e5a      	subs	r2, r3, #1
 800b5c2:	f107 000c 	add.w	r0, r7, #12
 800b5c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	440b      	add	r3, r1
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	18c1      	adds	r1, r0, r3
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	3348      	adds	r3, #72	; 0x48
 800b5dc:	443b      	add	r3, r7
 800b5de:	3b34      	subs	r3, #52	; 0x34
 800b5e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d109      	bne.n	800b5fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b5ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	3348      	adds	r3, #72	; 0x48
 800b5f6:	443b      	add	r3, r7
 800b5f8:	3b34      	subs	r3, #52	; 0x34
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b5fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b600:	3301      	adds	r3, #1
 800b602:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	643b      	str	r3, [r7, #64]	; 0x40
 800b60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1b6      	bne.n	800b57e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	891b      	ldrh	r3, [r3, #8]
 800b614:	461a      	mov	r2, r3
 800b616:	4b15      	ldr	r3, [pc, #84]	; (800b66c <low_level_output+0x128>)
 800b618:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b61a:	4a14      	ldr	r2, [pc, #80]	; (800b66c <low_level_output+0x128>)
 800b61c:	f107 030c 	add.w	r3, r7, #12
 800b620:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b622:	4a12      	ldr	r2, [pc, #72]	; (800b66c <low_level_output+0x128>)
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800b628:	6838      	ldr	r0, [r7, #0]
 800b62a:	f007 fac7 	bl	8012bbc <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800b62e:	490f      	ldr	r1, [pc, #60]	; (800b66c <low_level_output+0x128>)
 800b630:	480f      	ldr	r0, [pc, #60]	; (800b670 <low_level_output+0x12c>)
 800b632:	f7f8 fe32 	bl	800429a <HAL_ETH_Transmit_IT>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10e      	bne.n	800b65a <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800b63c:	bf00      	nop
 800b63e:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <low_level_output+0x130>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f04f 31ff 	mov.w	r1, #4294967295
 800b646:	4618      	mov	r0, r3
 800b648:	f000 fc44 	bl	800bed4 <osSemaphoreWait>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1f5      	bne.n	800b63e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800b652:	4807      	ldr	r0, [pc, #28]	; (800b670 <low_level_output+0x12c>)
 800b654:	f7f8 ffc0 	bl	80045d8 <HAL_ETH_ReleaseTxPacket>
 800b658:	e002      	b.n	800b660 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800b65a:	6838      	ldr	r0, [r7, #0]
 800b65c:	f007 fa08 	bl	8012a70 <pbuf_free>
  }

  return errval;
 800b660:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b664:	4618      	mov	r0, r3
 800b666:	3748      	adds	r7, #72	; 0x48
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	200058d4 	.word	0x200058d4
 800b670:	20005824 	.word	0x20005824
 800b674:	20005820 	.word	0x20005820

0800b678 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b684:	4b07      	ldr	r3, [pc, #28]	; (800b6a4 <low_level_input+0x2c>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d105      	bne.n	800b698 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b68c:	f107 030c 	add.w	r3, r7, #12
 800b690:	4619      	mov	r1, r3
 800b692:	4805      	ldr	r0, [pc, #20]	; (800b6a8 <low_level_input+0x30>)
 800b694:	f7f8 fe5d 	bl	8004352 <HAL_ETH_ReadData>
  }

  return p;
 800b698:	68fb      	ldr	r3, [r7, #12]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	200056d8 	.word	0x200056d8
 800b6a8:	20005824 	.word	0x20005824

0800b6ac <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b6bc:	4b0f      	ldr	r3, [pc, #60]	; (800b6fc <ethernetif_input+0x50>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f04f 31ff 	mov.w	r1, #4294967295
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f000 fc05 	bl	800bed4 <osSemaphoreWait>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1f5      	bne.n	800b6bc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b6d0:	68b8      	ldr	r0, [r7, #8]
 800b6d2:	f7ff ffd1 	bl	800b678 <low_level_input>
 800b6d6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	4798      	blx	r3
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f007 f9be 	bl	8012a70 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1ea      	bne.n	800b6d0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b6fa:	e7df      	b.n	800b6bc <ethernetif_input+0x10>
 800b6fc:	2000581c 	.word	0x2000581c

0800b700 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d106      	bne.n	800b71c <ethernetif_init+0x1c>
 800b70e:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <ethernetif_init+0x48>)
 800b710:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b714:	490d      	ldr	r1, [pc, #52]	; (800b74c <ethernetif_init+0x4c>)
 800b716:	480e      	ldr	r0, [pc, #56]	; (800b750 <ethernetif_init+0x50>)
 800b718:	f011 fcd8 	bl	801d0cc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2273      	movs	r2, #115	; 0x73
 800b720:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2274      	movs	r2, #116	; 0x74
 800b728:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a09      	ldr	r2, [pc, #36]	; (800b754 <ethernetif_init+0x54>)
 800b730:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a08      	ldr	r2, [pc, #32]	; (800b758 <ethernetif_init+0x58>)
 800b736:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff fdb7 	bl	800b2ac <low_level_init>

  return ERR_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	0801f620 	.word	0x0801f620
 800b74c:	0801f63c 	.word	0x0801f63c
 800b750:	0801f64c 	.word	0x0801f64c
 800b754:	0801a23d 	.word	0x0801a23d
 800b758:	0800b545 	.word	0x0800b545

0800b75c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b768:	68f9      	ldr	r1, [r7, #12]
 800b76a:	4809      	ldr	r0, [pc, #36]	; (800b790 <pbuf_free_custom+0x34>)
 800b76c:	f006 fab8 	bl	8011ce0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b770:	4b08      	ldr	r3, [pc, #32]	; (800b794 <pbuf_free_custom+0x38>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d107      	bne.n	800b788 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b778:	4b06      	ldr	r3, [pc, #24]	; (800b794 <pbuf_free_custom+0x38>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b77e:	4b06      	ldr	r3, [pc, #24]	; (800b798 <pbuf_free_custom+0x3c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fbf4 	bl	800bf70 <osSemaphoreRelease>
  }
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	08022c0c 	.word	0x08022c0c
 800b794:	200056d8 	.word	0x200056d8
 800b798:	2000581c 	.word	0x2000581c

0800b79c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b7a0:	f7f7 f9a6 	bl	8002af0 <HAL_GetTick>
 800b7a4:	4603      	mov	r3, r0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08e      	sub	sp, #56	; 0x38
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	605a      	str	r2, [r3, #4]
 800b7be:	609a      	str	r2, [r3, #8]
 800b7c0:	60da      	str	r2, [r3, #12]
 800b7c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a59      	ldr	r2, [pc, #356]	; (800b930 <HAL_ETH_MspInit+0x184>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	f040 80ac 	bne.w	800b928 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	623b      	str	r3, [r7, #32]
 800b7d4:	4b57      	ldr	r3, [pc, #348]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d8:	4a56      	ldr	r2, [pc, #344]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b7da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b7de:	6313      	str	r3, [r2, #48]	; 0x30
 800b7e0:	4b54      	ldr	r3, [pc, #336]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e8:	623b      	str	r3, [r7, #32]
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	61fb      	str	r3, [r7, #28]
 800b7f0:	4b50      	ldr	r3, [pc, #320]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f4:	4a4f      	ldr	r2, [pc, #316]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b7f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7fa:	6313      	str	r3, [r2, #48]	; 0x30
 800b7fc:	4b4d      	ldr	r3, [pc, #308]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b804:	61fb      	str	r3, [r7, #28]
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	2300      	movs	r3, #0
 800b80a:	61bb      	str	r3, [r7, #24]
 800b80c:	4b49      	ldr	r3, [pc, #292]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b810:	4a48      	ldr	r2, [pc, #288]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b816:	6313      	str	r3, [r2, #48]	; 0x30
 800b818:	4b46      	ldr	r3, [pc, #280]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b820:	61bb      	str	r3, [r7, #24]
 800b822:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	4b42      	ldr	r3, [pc, #264]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82c:	4a41      	ldr	r2, [pc, #260]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b82e:	f043 0304 	orr.w	r3, r3, #4
 800b832:	6313      	str	r3, [r2, #48]	; 0x30
 800b834:	4b3f      	ldr	r3, [pc, #252]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b840:	2300      	movs	r3, #0
 800b842:	613b      	str	r3, [r7, #16]
 800b844:	4b3b      	ldr	r3, [pc, #236]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b848:	4a3a      	ldr	r2, [pc, #232]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b84a:	f043 0301 	orr.w	r3, r3, #1
 800b84e:	6313      	str	r3, [r2, #48]	; 0x30
 800b850:	4b38      	ldr	r3, [pc, #224]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	613b      	str	r3, [r7, #16]
 800b85a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b85c:	2300      	movs	r3, #0
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	4b34      	ldr	r3, [pc, #208]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b864:	4a33      	ldr	r2, [pc, #204]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b866:	f043 0302 	orr.w	r3, r3, #2
 800b86a:	6313      	str	r3, [r2, #48]	; 0x30
 800b86c:	4b31      	ldr	r3, [pc, #196]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	60fb      	str	r3, [r7, #12]
 800b876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b878:	2300      	movs	r3, #0
 800b87a:	60bb      	str	r3, [r7, #8]
 800b87c:	4b2d      	ldr	r3, [pc, #180]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b880:	4a2c      	ldr	r2, [pc, #176]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b886:	6313      	str	r3, [r2, #48]	; 0x30
 800b888:	4b2a      	ldr	r3, [pc, #168]	; (800b934 <HAL_ETH_MspInit+0x188>)
 800b88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b890:	60bb      	str	r3, [r7, #8]
 800b892:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b894:	2332      	movs	r3, #50	; 0x32
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b898:	2302      	movs	r3, #2
 800b89a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b89c:	2300      	movs	r3, #0
 800b89e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8a4:	230b      	movs	r3, #11
 800b8a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4822      	ldr	r0, [pc, #136]	; (800b938 <HAL_ETH_MspInit+0x18c>)
 800b8b0:	f7f9 fdc4 	bl	800543c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b8b4:	2386      	movs	r3, #134	; 0x86
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8c0:	2303      	movs	r3, #3
 800b8c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8c4:	230b      	movs	r3, #11
 800b8c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	481b      	ldr	r0, [pc, #108]	; (800b93c <HAL_ETH_MspInit+0x190>)
 800b8d0:	f7f9 fdb4 	bl	800543c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b8d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b8e6:	230b      	movs	r3, #11
 800b8e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4813      	ldr	r0, [pc, #76]	; (800b940 <HAL_ETH_MspInit+0x194>)
 800b8f2:	f7f9 fda3 	bl	800543c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b8f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b900:	2300      	movs	r3, #0
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b904:	2303      	movs	r3, #3
 800b906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b908:	230b      	movs	r3, #11
 800b90a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b90c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b910:	4619      	mov	r1, r3
 800b912:	480c      	ldr	r0, [pc, #48]	; (800b944 <HAL_ETH_MspInit+0x198>)
 800b914:	f7f9 fd92 	bl	800543c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b918:	2200      	movs	r2, #0
 800b91a:	2105      	movs	r1, #5
 800b91c:	203d      	movs	r0, #61	; 0x3d
 800b91e:	f7f7 fe7f 	bl	8003620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b922:	203d      	movs	r0, #61	; 0x3d
 800b924:	f7f7 fe98 	bl	8003658 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b928:	bf00      	nop
 800b92a:	3738      	adds	r7, #56	; 0x38
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	40028000 	.word	0x40028000
 800b934:	40023800 	.word	0x40023800
 800b938:	40020800 	.word	0x40020800
 800b93c:	40020000 	.word	0x40020000
 800b940:	40020400 	.word	0x40020400
 800b944:	40021800 	.word	0x40021800

0800b948 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b94c:	4802      	ldr	r0, [pc, #8]	; (800b958 <ETH_PHY_IO_Init+0x10>)
 800b94e:	f7f9 f90d 	bl	8004b6c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20005824 	.word	0x20005824

0800b95c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
  return 0;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	68f9      	ldr	r1, [r7, #12]
 800b97e:	4807      	ldr	r0, [pc, #28]	; (800b99c <ETH_PHY_IO_ReadReg+0x30>)
 800b980:	f7f8 ff5c 	bl	800483c <HAL_ETH_ReadPHYRegister>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d002      	beq.n	800b990 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b98a:	f04f 33ff 	mov.w	r3, #4294967295
 800b98e:	e000      	b.n	800b992 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20005824 	.word	0x20005824

0800b9a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	68f9      	ldr	r1, [r7, #12]
 800b9b2:	4807      	ldr	r0, [pc, #28]	; (800b9d0 <ETH_PHY_IO_WriteReg+0x30>)
 800b9b4:	f7f8 ff8d 	bl	80048d2 <HAL_ETH_WritePHYRegister>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b9be:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c2:	e000      	b.n	800b9c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20005824 	.word	0x20005824

0800b9d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b9d8:	f7f7 f88a 	bl	8002af0 <HAL_GetTick>
 800b9dc:	4603      	mov	r3, r0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b0a0      	sub	sp, #128	; 0x80
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b9ec:	f107 0308 	add.w	r3, r7, #8
 800b9f0:	2264      	movs	r2, #100	; 0x64
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f011 fcf9 	bl	801d3ec <memset>
  int32_t PHYLinkState = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba02:	2300      	movs	r3, #0
 800ba04:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba06:	2300      	movs	r3, #0
 800ba08:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ba0e:	483a      	ldr	r0, [pc, #232]	; (800baf8 <ethernet_link_thread+0x114>)
 800ba10:	f7f6 ffb1 	bl	8002976 <LAN8742_GetLinkState>
 800ba14:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ba16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba1c:	089b      	lsrs	r3, r3, #2
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00c      	beq.n	800ba42 <ethernet_link_thread+0x5e>
 800ba28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	dc09      	bgt.n	800ba42 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ba2e:	4833      	ldr	r0, [pc, #204]	; (800bafc <ethernet_link_thread+0x118>)
 800ba30:	f7f8 fbb4 	bl	800419c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ba34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba36:	f006 fbd7 	bl	80121e8 <netif_set_down>
    netif_set_link_down(netif);
 800ba3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba3c:	f006 fc3a 	bl	80122b4 <netif_set_link_down>
 800ba40:	e055      	b.n	800baee <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ba42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d14e      	bne.n	800baee <ethernet_link_thread+0x10a>
 800ba50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	dd4b      	ble.n	800baee <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ba56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba58:	3b02      	subs	r3, #2
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d82a      	bhi.n	800bab4 <ethernet_link_thread+0xd0>
 800ba5e:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <ethernet_link_thread+0x80>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800ba75 	.word	0x0800ba75
 800ba68:	0800ba87 	.word	0x0800ba87
 800ba6c:	0800ba97 	.word	0x0800ba97
 800ba70:	0800baa7 	.word	0x0800baa7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ba74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ba7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ba80:	2301      	movs	r3, #1
 800ba82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ba84:	e017      	b.n	800bab6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ba8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ba90:	2301      	movs	r3, #1
 800ba92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ba94:	e00f      	b.n	800bab6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ba96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba9a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800baa0:	2301      	movs	r3, #1
 800baa2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800baa4:	e007      	b.n	800bab6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800baaa:	2300      	movs	r3, #0
 800baac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800baae:	2301      	movs	r3, #1
 800bab0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bab2:	e000      	b.n	800bab6 <ethernet_link_thread+0xd2>
    default:
      break;
 800bab4:	bf00      	nop
    }

    if(linkchanged)
 800bab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d018      	beq.n	800baee <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	4619      	mov	r1, r3
 800bac2:	480e      	ldr	r0, [pc, #56]	; (800bafc <ethernet_link_thread+0x118>)
 800bac4:	f7f8 ff4e 	bl	8004964 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800bacc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bace:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bad0:	f107 0308 	add.w	r3, r7, #8
 800bad4:	4619      	mov	r1, r3
 800bad6:	4809      	ldr	r0, [pc, #36]	; (800bafc <ethernet_link_thread+0x118>)
 800bad8:	f7f9 f82e 	bl	8004b38 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800badc:	4807      	ldr	r0, [pc, #28]	; (800bafc <ethernet_link_thread+0x118>)
 800bade:	f7f8 facf 	bl	8004080 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800bae2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bae4:	f006 fb14 	bl	8012110 <netif_set_up>
      netif_set_link_up(netif);
 800bae8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800baea:	f006 fbaf 	bl	801224c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800baee:	2064      	movs	r0, #100	; 0x64
 800baf0:	f000 f90e 	bl	800bd10 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800baf4:	e78b      	b.n	800ba0e <ethernet_link_thread+0x2a>
 800baf6:	bf00      	nop
 800baf8:	2000590c 	.word	0x2000590c
 800bafc:	20005824 	.word	0x20005824

0800bb00 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af02      	add	r7, sp, #8
 800bb06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bb08:	4812      	ldr	r0, [pc, #72]	; (800bb54 <HAL_ETH_RxAllocateCallback+0x54>)
 800bb0a:	f006 f875 	bl	8011bf8 <memp_malloc_pool>
 800bb0e:	60f8      	str	r0, [r7, #12]
  if (p)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d014      	beq.n	800bb40 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f103 0220 	add.w	r2, r3, #32
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a0d      	ldr	r2, [pc, #52]	; (800bb58 <HAL_ETH_RxAllocateCallback+0x58>)
 800bb24:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bb2e:	9201      	str	r2, [sp, #4]
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2241      	movs	r2, #65	; 0x41
 800bb36:	2100      	movs	r1, #0
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f006 fddf 	bl	80126fc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bb3e:	e005      	b.n	800bb4c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bb40:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <HAL_ETH_RxAllocateCallback+0x5c>)
 800bb42:	2201      	movs	r2, #1
 800bb44:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]
}
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	08022c0c 	.word	0x08022c0c
 800bb58:	0800b75d 	.word	0x0800b75d
 800bb5c:	200056d8 	.word	0x200056d8

0800bb60 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b089      	sub	sp, #36	; 0x24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3b20      	subs	r3, #32
 800bb7e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	887a      	ldrh	r2, [r7, #2]
 800bb90:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d103      	bne.n	800bba2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	69fa      	ldr	r2, [r7, #28]
 800bb9e:	601a      	str	r2, [r3, #0]
 800bba0:	e003      	b.n	800bbaa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	69fa      	ldr	r2, [r7, #28]
 800bba8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	69fa      	ldr	r2, [r7, #28]
 800bbae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	61fb      	str	r3, [r7, #28]
 800bbb6:	e009      	b.n	800bbcc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	891a      	ldrh	r2, [r3, #8]
 800bbbc:	887b      	ldrh	r3, [r7, #2]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	61fb      	str	r3, [r7, #28]
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f2      	bne.n	800bbb8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bbd2:	bf00      	nop
 800bbd4:	bf00      	nop
 800bbd6:	3724      	adds	r7, #36	; 0x24
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f006 ff41 	bl	8012a70 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bc04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bc08:	2b84      	cmp	r3, #132	; 0x84
 800bc0a:	d005      	beq.n	800bc18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bc0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	3303      	adds	r3, #3
 800bc16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bc18:	68fb      	ldr	r3, [r7, #12]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc2c:	f3ef 8305 	mrs	r3, IPSR
 800bc30:	607b      	str	r3, [r7, #4]
  return(result);
 800bc32:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	bf14      	ite	ne
 800bc38:	2301      	movne	r3, #1
 800bc3a:	2300      	moveq	r3, #0
 800bc3c:	b2db      	uxtb	r3, r3
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc4e:	f001 fd43 	bl	800d6d8 <vTaskStartScheduler>
  
  return osOK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc5c:	f7ff ffe3 	bl	800bc26 <inHandlerMode>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc66:	f001 fe5b 	bl	800d920 <xTaskGetTickCountFromISR>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	e002      	b.n	800bc74 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc6e:	f001 fe47 	bl	800d900 <xTaskGetTickCount>
 800bc72:	4603      	mov	r3, r0
  }
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7a:	b089      	sub	sp, #36	; 0x24
 800bc7c:	af04      	add	r7, sp, #16
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d020      	beq.n	800bccc <osThreadCreate+0x54>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01c      	beq.n	800bccc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	685c      	ldr	r4, [r3, #4]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691e      	ldr	r6, [r3, #16]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff ffa6 	bl	800bbf6 <makeFreeRtosPriority>
 800bcaa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcb4:	9202      	str	r2, [sp, #8]
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	9100      	str	r1, [sp, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f001 fb23 	bl	800d30c <xTaskCreateStatic>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	e01c      	b.n	800bd06 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685c      	ldr	r4, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcd8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff ff88 	bl	800bbf6 <makeFreeRtosPriority>
 800bce6:	4602      	mov	r2, r0
 800bce8:	f107 030c 	add.w	r3, r7, #12
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	9200      	str	r2, [sp, #0]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f001 fb65 	bl	800d3c6 <xTaskCreate>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d001      	beq.n	800bd06 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	e000      	b.n	800bd08 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bd06:	68fb      	ldr	r3, [r7, #12]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd10 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <osDelay+0x16>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	e000      	b.n	800bd28 <osDelay+0x18>
 800bd26:	2301      	movs	r3, #1
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 fca1 	bl	800d670 <vTaskDelay>
  
  return osOK;
 800bd2e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d007      	beq.n	800bd58 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	2001      	movs	r0, #1
 800bd50:	f000 fc7d 	bl	800c64e <xQueueCreateMutexStatic>
 800bd54:	4603      	mov	r3, r0
 800bd56:	e003      	b.n	800bd60 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bd58:	2001      	movs	r0, #1
 800bd5a:	f000 fc60 	bl	800c61e <xQueueCreateMutex>
 800bd5e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd72:	2300      	movs	r3, #0
 800bd74:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <osMutexWait+0x18>
    return osErrorParameter;
 800bd7c:	2380      	movs	r3, #128	; 0x80
 800bd7e:	e03a      	b.n	800bdf6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d103      	bne.n	800bd94 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd90:	60fb      	str	r3, [r7, #12]
 800bd92:	e009      	b.n	800bda8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d006      	beq.n	800bda8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <osMutexWait+0x40>
      ticks = 1;
 800bda4:	2301      	movs	r3, #1
 800bda6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bda8:	f7ff ff3d 	bl	800bc26 <inHandlerMode>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d017      	beq.n	800bde2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bdb2:	f107 0308 	add.w	r3, r7, #8
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	2100      	movs	r1, #0
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 f874 	bl	800cea8 <xQueueReceiveFromISR>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d001      	beq.n	800bdca <osMutexWait+0x62>
      return osErrorOS;
 800bdc6:	23ff      	movs	r3, #255	; 0xff
 800bdc8:	e015      	b.n	800bdf6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d011      	beq.n	800bdf4 <osMutexWait+0x8c>
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <osMutexWait+0x98>)
 800bdd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	e008      	b.n	800bdf4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bde2:	68f9      	ldr	r1, [r7, #12]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 ff53 	bl	800cc90 <xQueueSemaphoreTake>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d001      	beq.n	800bdf4 <osMutexWait+0x8c>
    return osErrorOS;
 800bdf0:	23ff      	movs	r3, #255	; 0xff
 800bdf2:	e000      	b.n	800bdf6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	e000ed04 	.word	0xe000ed04

0800be04 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800be14:	f7ff ff07 	bl	800bc26 <inHandlerMode>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d016      	beq.n	800be4c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fdc6 	bl	800c9b6 <xQueueGiveFromISR>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d001      	beq.n	800be34 <osMutexRelease+0x30>
      return osErrorOS;
 800be30:	23ff      	movs	r3, #255	; 0xff
 800be32:	e017      	b.n	800be64 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d013      	beq.n	800be62 <osMutexRelease+0x5e>
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <osMutexRelease+0x68>)
 800be3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	e00a      	b.n	800be62 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800be4c:	2300      	movs	r3, #0
 800be4e:	2200      	movs	r2, #0
 800be50:	2100      	movs	r1, #0
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fc16 	bl	800c684 <xQueueGenericSend>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d001      	beq.n	800be62 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800be5e:	23ff      	movs	r3, #255	; 0xff
 800be60:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800be62:	68fb      	ldr	r3, [r7, #12]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af02      	add	r7, sp, #8
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00f      	beq.n	800bea2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d10a      	bne.n	800be9e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	2203      	movs	r2, #3
 800be8e:	9200      	str	r2, [sp, #0]
 800be90:	2200      	movs	r2, #0
 800be92:	2100      	movs	r1, #0
 800be94:	2001      	movs	r0, #1
 800be96:	f000 fad7 	bl	800c448 <xQueueGenericCreateStatic>
 800be9a:	4603      	mov	r3, r0
 800be9c:	e016      	b.n	800becc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	e014      	b.n	800becc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d110      	bne.n	800beca <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bea8:	2203      	movs	r2, #3
 800beaa:	2100      	movs	r1, #0
 800beac:	2001      	movs	r0, #1
 800beae:	f000 fb43 	bl	800c538 <xQueueGenericCreate>
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <osSemaphoreCreate+0x56>
 800beba:	2300      	movs	r3, #0
 800bebc:	2200      	movs	r2, #0
 800bebe:	2100      	movs	r1, #0
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 fbdf 	bl	800c684 <xQueueGenericSend>
      return sema;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	e000      	b.n	800becc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800beca:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bede:	2300      	movs	r3, #0
 800bee0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bee8:	2380      	movs	r3, #128	; 0x80
 800beea:	e03a      	b.n	800bf62 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef6:	d103      	bne.n	800bf00 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bef8:	f04f 33ff 	mov.w	r3, #4294967295
 800befc:	60fb      	str	r3, [r7, #12]
 800befe:	e009      	b.n	800bf14 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d006      	beq.n	800bf14 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <osSemaphoreWait+0x40>
      ticks = 1;
 800bf10:	2301      	movs	r3, #1
 800bf12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bf14:	f7ff fe87 	bl	800bc26 <inHandlerMode>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d017      	beq.n	800bf4e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	461a      	mov	r2, r3
 800bf24:	2100      	movs	r1, #0
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 ffbe 	bl	800cea8 <xQueueReceiveFromISR>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d001      	beq.n	800bf36 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bf32:	23ff      	movs	r3, #255	; 0xff
 800bf34:	e015      	b.n	800bf62 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d011      	beq.n	800bf60 <osSemaphoreWait+0x8c>
 800bf3c:	4b0b      	ldr	r3, [pc, #44]	; (800bf6c <osSemaphoreWait+0x98>)
 800bf3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	e008      	b.n	800bf60 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf4e:	68f9      	ldr	r1, [r7, #12]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fe9d 	bl	800cc90 <xQueueSemaphoreTake>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d001      	beq.n	800bf60 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf5c:	23ff      	movs	r3, #255	; 0xff
 800bf5e:	e000      	b.n	800bf62 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	e000ed04 	.word	0xe000ed04

0800bf70 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bf80:	f7ff fe51 	bl	800bc26 <inHandlerMode>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d016      	beq.n	800bfb8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf8a:	f107 0308 	add.w	r3, r7, #8
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fd10 	bl	800c9b6 <xQueueGiveFromISR>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d001      	beq.n	800bfa0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bf9c:	23ff      	movs	r3, #255	; 0xff
 800bf9e:	e017      	b.n	800bfd0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d013      	beq.n	800bfce <osSemaphoreRelease+0x5e>
 800bfa6:	4b0c      	ldr	r3, [pc, #48]	; (800bfd8 <osSemaphoreRelease+0x68>)
 800bfa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	e00a      	b.n	800bfce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bfb8:	2300      	movs	r3, #0
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fb60 	bl	800c684 <xQueueGenericSend>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d001      	beq.n	800bfce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bfca:	23ff      	movs	r3, #255	; 0xff
 800bfcc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bfce:	68fb      	ldr	r3, [r7, #12]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bfe4:	f7ff fe1f 	bl	800bc26 <inHandlerMode>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bfee:	2382      	movs	r3, #130	; 0x82
 800bff0:	e003      	b.n	800bffa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 f814 	bl	800d020 <vQueueDelete>

  return osOK; 
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c002:	b590      	push	{r4, r7, lr}
 800c004:	b085      	sub	sp, #20
 800c006:	af02      	add	r7, sp, #8
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d011      	beq.n	800c038 <osMessageCreate+0x36>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00d      	beq.n	800c038 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6859      	ldr	r1, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689a      	ldr	r2, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	2400      	movs	r4, #0
 800c02e:	9400      	str	r4, [sp, #0]
 800c030:	f000 fa0a 	bl	800c448 <xQueueGenericCreateStatic>
 800c034:	4603      	mov	r3, r0
 800c036:	e008      	b.n	800c04a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6818      	ldr	r0, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	4619      	mov	r1, r3
 800c044:	f000 fa78 	bl	800c538 <xQueueGenericCreate>
 800c048:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd90      	pop	{r4, r7, pc}
	...

0800c054 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c060:	2300      	movs	r3, #0
 800c062:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <osMessagePut+0x1e>
    ticks = 1;
 800c06e:	2301      	movs	r3, #1
 800c070:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c072:	f7ff fdd8 	bl	800bc26 <inHandlerMode>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d018      	beq.n	800c0ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c07c:	f107 0210 	add.w	r2, r7, #16
 800c080:	f107 0108 	add.w	r1, r7, #8
 800c084:	2300      	movs	r3, #0
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 fbfa 	bl	800c880 <xQueueGenericSendFromISR>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d001      	beq.n	800c096 <osMessagePut+0x42>
      return osErrorOS;
 800c092:	23ff      	movs	r3, #255	; 0xff
 800c094:	e018      	b.n	800c0c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d014      	beq.n	800c0c6 <osMessagePut+0x72>
 800c09c:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <osMessagePut+0x7c>)
 800c09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	e00b      	b.n	800c0c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c0ae:	f107 0108 	add.w	r1, r7, #8
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	697a      	ldr	r2, [r7, #20]
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f000 fae4 	bl	800c684 <xQueueGenericSend>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d001      	beq.n	800c0c6 <osMessagePut+0x72>
      return osErrorOS;
 800c0c2:	23ff      	movs	r3, #255	; 0xff
 800c0c4:	e000      	b.n	800c0c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	e000ed04 	.word	0xe000ed04

0800c0d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c0d4:	b590      	push	{r4, r7, lr}
 800c0d6:	b08b      	sub	sp, #44	; 0x2c
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c0ee:	2380      	movs	r3, #128	; 0x80
 800c0f0:	617b      	str	r3, [r7, #20]
    return event;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	461c      	mov	r4, r3
 800c0f6:	f107 0314 	add.w	r3, r7, #20
 800c0fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c102:	e054      	b.n	800c1ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c104:	2300      	movs	r3, #0
 800c106:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d103      	bne.n	800c11c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c114:	f04f 33ff 	mov.w	r3, #4294967295
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
 800c11a:	e009      	b.n	800c130 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d006      	beq.n	800c130 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <osMessageGet+0x5c>
      ticks = 1;
 800c12c:	2301      	movs	r3, #1
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c130:	f7ff fd79 	bl	800bc26 <inHandlerMode>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d01c      	beq.n	800c174 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c13a:	f107 0220 	add.w	r2, r7, #32
 800c13e:	f107 0314 	add.w	r3, r7, #20
 800c142:	3304      	adds	r3, #4
 800c144:	4619      	mov	r1, r3
 800c146:	68b8      	ldr	r0, [r7, #8]
 800c148:	f000 feae 	bl	800cea8 <xQueueReceiveFromISR>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d102      	bne.n	800c158 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c152:	2310      	movs	r3, #16
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	e001      	b.n	800c15c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c158:	2300      	movs	r3, #0
 800c15a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d01d      	beq.n	800c19e <osMessageGet+0xca>
 800c162:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <osMessageGet+0xe4>)
 800c164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c168:	601a      	str	r2, [r3, #0]
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	e014      	b.n	800c19e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c174:	f107 0314 	add.w	r3, r7, #20
 800c178:	3304      	adds	r3, #4
 800c17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c17c:	4619      	mov	r1, r3
 800c17e:	68b8      	ldr	r0, [r7, #8]
 800c180:	f000 fca6 	bl	800cad0 <xQueueReceive>
 800c184:	4603      	mov	r3, r0
 800c186:	2b01      	cmp	r3, #1
 800c188:	d102      	bne.n	800c190 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c18a:	2310      	movs	r3, #16
 800c18c:	617b      	str	r3, [r7, #20]
 800c18e:	e006      	b.n	800c19e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <osMessageGet+0xc6>
 800c196:	2300      	movs	r3, #0
 800c198:	e000      	b.n	800c19c <osMessageGet+0xc8>
 800c19a:	2340      	movs	r3, #64	; 0x40
 800c19c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	461c      	mov	r4, r3
 800c1a2:	f107 0314 	add.w	r3, r7, #20
 800c1a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	372c      	adds	r7, #44	; 0x2c
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd90      	pop	{r4, r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c1c4:	f7ff fd2f 	bl	800bc26 <inHandlerMode>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d004      	beq.n	800c1d8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 ff08 	bl	800cfe4 <uxQueueMessagesWaitingFromISR>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	e003      	b.n	800c1e0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fee5 	bl	800cfa8 <uxQueueMessagesWaiting>
 800c1de:	4603      	mov	r3, r0
  }
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c1f0:	f7ff fd19 	bl	800bc26 <inHandlerMode>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <osMessageDelete+0x16>
    return osErrorISR;
 800c1fa:	2382      	movs	r3, #130	; 0x82
 800c1fc:	e003      	b.n	800c206 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 ff0e 	bl	800d020 <vQueueDelete>

  return osOK; 
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f103 0208 	add.w	r2, r3, #8
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f04f 32ff 	mov.w	r2, #4294967295
 800c226:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f103 0208 	add.w	r2, r3, #8
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f103 0208 	add.w	r2, r3, #8
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	689a      	ldr	r2, [r3, #8]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	1c5a      	adds	r2, r3, #1
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c6:	d103      	bne.n	800c2d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e00c      	b.n	800c2ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3308      	adds	r3, #8
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e002      	b.n	800c2de <vListInsert+0x2e>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d2f6      	bcs.n	800c2d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	601a      	str	r2, [r3, #0]
}
 800c316:	bf00      	nop
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c322:	b480      	push	{r7}
 800c324:	b085      	sub	sp, #20
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6892      	ldr	r2, [r2, #8]
 800c338:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	6852      	ldr	r2, [r2, #4]
 800c342:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d103      	bne.n	800c356 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	689a      	ldr	r2, [r3, #8]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	1e5a      	subs	r2, r3, #1
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
	...

0800c378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10a      	bne.n	800c3a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c39e:	bf00      	nop
 800c3a0:	e7fe      	b.n	800c3a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3a2:	f002 f93f 	bl	800e624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ae:	68f9      	ldr	r1, [r7, #12]
 800c3b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3b2:	fb01 f303 	mul.w	r3, r1, r3
 800c3b6:	441a      	add	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	68f9      	ldr	r1, [r7, #12]
 800c3d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3d8:	fb01 f303 	mul.w	r3, r1, r3
 800c3dc:	441a      	add	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	22ff      	movs	r2, #255	; 0xff
 800c3e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	22ff      	movs	r2, #255	; 0xff
 800c3ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d114      	bne.n	800c422 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01a      	beq.n	800c436 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3310      	adds	r3, #16
 800c404:	4618      	mov	r0, r3
 800c406:	f001 fc01 	bl	800dc0c <xTaskRemoveFromEventList>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d012      	beq.n	800c436 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c410:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <xQueueGenericReset+0xcc>)
 800c412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	e009      	b.n	800c436 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3310      	adds	r3, #16
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff fef1 	bl	800c20e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3324      	adds	r3, #36	; 0x24
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff feec 	bl	800c20e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c436:	f002 f925 	bl	800e684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c43a:	2301      	movs	r3, #1
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	e000ed04 	.word	0xe000ed04

0800c448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08e      	sub	sp, #56	; 0x38
 800c44c:	af02      	add	r7, sp, #8
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <xQueueGenericCreateStatic+0x52>
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <xQueueGenericCreateStatic+0x56>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <xQueueGenericCreateStatic+0x58>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	623b      	str	r3, [r7, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <xQueueGenericCreateStatic+0x7e>
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <xQueueGenericCreateStatic+0x82>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <xQueueGenericCreateStatic+0x84>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	61fb      	str	r3, [r7, #28]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4e6:	2348      	movs	r3, #72	; 0x48
 800c4e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b48      	cmp	r3, #72	; 0x48
 800c4ee:	d00a      	beq.n	800c506 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	61bb      	str	r3, [r7, #24]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c506:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00d      	beq.n	800c52e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c51a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	4613      	mov	r3, r2
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f83f 	bl	800c5ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c530:	4618      	mov	r0, r3
 800c532:	3730      	adds	r7, #48	; 0x30
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08a      	sub	sp, #40	; 0x28
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	4613      	mov	r3, r2
 800c544:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10a      	bne.n	800c562 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	613b      	str	r3, [r7, #16]
}
 800c55e:	bf00      	nop
 800c560:	e7fe      	b.n	800c560 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	fb02 f303 	mul.w	r3, r2, r3
 800c56a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	3348      	adds	r3, #72	; 0x48
 800c570:	4618      	mov	r0, r3
 800c572:	f002 f979 	bl	800e868 <pvPortMalloc>
 800c576:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d011      	beq.n	800c5a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	3348      	adds	r3, #72	; 0x48
 800c586:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c590:	79fa      	ldrb	r2, [r7, #7]
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	4613      	mov	r3, r2
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 f805 	bl	800c5ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5a2:	69bb      	ldr	r3, [r7, #24]
	}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3720      	adds	r7, #32
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	e002      	b.n	800c5ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c5da:	2101      	movs	r1, #1
 800c5dc:	69b8      	ldr	r0, [r7, #24]
 800c5de:	f7ff fecb 	bl	800c378 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c60a:	2300      	movs	r3, #0
 800c60c:	2200      	movs	r2, #0
 800c60e:	2100      	movs	r1, #0
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f837 	bl	800c684 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c616:	bf00      	nop
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b086      	sub	sp, #24
 800c622:	af00      	add	r7, sp, #0
 800c624:	4603      	mov	r3, r0
 800c626:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c628:	2301      	movs	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	2300      	movs	r3, #0
 800c62e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	461a      	mov	r2, r3
 800c634:	6939      	ldr	r1, [r7, #16]
 800c636:	6978      	ldr	r0, [r7, #20]
 800c638:	f7ff ff7e 	bl	800c538 <xQueueGenericCreate>
 800c63c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f7ff ffd3 	bl	800c5ea <prvInitialiseMutex>

		return xNewQueue;
 800c644:	68fb      	ldr	r3, [r7, #12]
	}
 800c646:	4618      	mov	r0, r3
 800c648:	3718      	adds	r7, #24
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b088      	sub	sp, #32
 800c652:	af02      	add	r7, sp, #8
 800c654:	4603      	mov	r3, r0
 800c656:	6039      	str	r1, [r7, #0]
 800c658:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c65a:	2301      	movs	r3, #1
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	2300      	movs	r3, #0
 800c660:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2200      	movs	r2, #0
 800c66a:	6939      	ldr	r1, [r7, #16]
 800c66c:	6978      	ldr	r0, [r7, #20]
 800c66e:	f7ff feeb 	bl	800c448 <xQueueGenericCreateStatic>
 800c672:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7ff ffb8 	bl	800c5ea <prvInitialiseMutex>

		return xNewQueue;
 800c67a:	68fb      	ldr	r3, [r7, #12]
	}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08e      	sub	sp, #56	; 0x38
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c692:	2300      	movs	r3, #0
 800c694:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10a      	bne.n	800c6b6 <xQueueGenericSend+0x32>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d103      	bne.n	800c6c4 <xQueueGenericSend+0x40>
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <xQueueGenericSend+0x44>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e000      	b.n	800c6ca <xQueueGenericSend+0x46>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <xQueueGenericSend+0x60>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d103      	bne.n	800c6f2 <xQueueGenericSend+0x6e>
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d101      	bne.n	800c6f6 <xQueueGenericSend+0x72>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e000      	b.n	800c6f8 <xQueueGenericSend+0x74>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10a      	bne.n	800c712 <xQueueGenericSend+0x8e>
	__asm volatile
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	623b      	str	r3, [r7, #32]
}
 800c70e:	bf00      	nop
 800c710:	e7fe      	b.n	800c710 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c712:	f001 fc3b 	bl	800df8c <xTaskGetSchedulerState>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <xQueueGenericSend+0x9e>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <xQueueGenericSend+0xa2>
 800c722:	2301      	movs	r3, #1
 800c724:	e000      	b.n	800c728 <xQueueGenericSend+0xa4>
 800c726:	2300      	movs	r3, #0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10a      	bne.n	800c742 <xQueueGenericSend+0xbe>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	61fb      	str	r3, [r7, #28]
}
 800c73e:	bf00      	nop
 800c740:	e7fe      	b.n	800c740 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c742:	f001 ff6f 	bl	800e624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74e:	429a      	cmp	r2, r3
 800c750:	d302      	bcc.n	800c758 <xQueueGenericSend+0xd4>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d129      	bne.n	800c7ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	68b9      	ldr	r1, [r7, #8]
 800c75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c75e:	f000 fc9a 	bl	800d096 <prvCopyDataToQueue>
 800c762:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d010      	beq.n	800c78e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	3324      	adds	r3, #36	; 0x24
 800c770:	4618      	mov	r0, r3
 800c772:	f001 fa4b 	bl	800dc0c <xTaskRemoveFromEventList>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d013      	beq.n	800c7a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c77c:	4b3f      	ldr	r3, [pc, #252]	; (800c87c <xQueueGenericSend+0x1f8>)
 800c77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	e00a      	b.n	800c7a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d007      	beq.n	800c7a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c794:	4b39      	ldr	r3, [pc, #228]	; (800c87c <xQueueGenericSend+0x1f8>)
 800c796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c7a4:	f001 ff6e 	bl	800e684 <vPortExitCritical>
				return pdPASS;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e063      	b.n	800c874 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d103      	bne.n	800c7ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7b2:	f001 ff67 	bl	800e684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e05c      	b.n	800c874 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d106      	bne.n	800c7ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7c0:	f107 0314 	add.w	r3, r7, #20
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f001 fa83 	bl	800dcd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7ce:	f001 ff59 	bl	800e684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7d2:	f000 ffeb 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7d6:	f001 ff25 	bl	800e624 <vPortEnterCritical>
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7e0:	b25b      	sxtb	r3, r3
 800c7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e6:	d103      	bne.n	800c7f0 <xQueueGenericSend+0x16c>
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7f6:	b25b      	sxtb	r3, r3
 800c7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fc:	d103      	bne.n	800c806 <xQueueGenericSend+0x182>
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c806:	f001 ff3d 	bl	800e684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c80a:	1d3a      	adds	r2, r7, #4
 800c80c:	f107 0314 	add.w	r3, r7, #20
 800c810:	4611      	mov	r1, r2
 800c812:	4618      	mov	r0, r3
 800c814:	f001 fa72 	bl	800dcfc <xTaskCheckForTimeOut>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d124      	bne.n	800c868 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c81e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c820:	f000 fd31 	bl	800d286 <prvIsQueueFull>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d018      	beq.n	800c85c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	3310      	adds	r3, #16
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4611      	mov	r1, r2
 800c832:	4618      	mov	r0, r3
 800c834:	f001 f9c6 	bl	800dbc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c83a:	f000 fcbc 	bl	800d1b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c83e:	f000 ffc3 	bl	800d7c8 <xTaskResumeAll>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	f47f af7c 	bne.w	800c742 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c84a:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <xQueueGenericSend+0x1f8>)
 800c84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	e772      	b.n	800c742 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c85e:	f000 fcaa 	bl	800d1b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c862:	f000 ffb1 	bl	800d7c8 <xTaskResumeAll>
 800c866:	e76c      	b.n	800c742 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c86a:	f000 fca4 	bl	800d1b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c86e:	f000 ffab 	bl	800d7c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c872:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c874:	4618      	mov	r0, r3
 800c876:	3738      	adds	r7, #56	; 0x38
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	e000ed04 	.word	0xe000ed04

0800c880 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b090      	sub	sp, #64	; 0x40
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d103      	bne.n	800c8bc <xQueueGenericSendFromISR+0x3c>
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <xQueueGenericSendFromISR+0x40>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e000      	b.n	800c8c2 <xQueueGenericSendFromISR+0x42>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10a      	bne.n	800c8dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8d8:	bf00      	nop
 800c8da:	e7fe      	b.n	800c8da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d103      	bne.n	800c8ea <xQueueGenericSendFromISR+0x6a>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <xQueueGenericSendFromISR+0x6e>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <xQueueGenericSendFromISR+0x70>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	623b      	str	r3, [r7, #32]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c90a:	f001 ff6d 	bl	800e7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c90e:	f3ef 8211 	mrs	r2, BASEPRI
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	61fa      	str	r2, [r7, #28]
 800c924:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c926:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c928:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c932:	429a      	cmp	r2, r3
 800c934:	d302      	bcc.n	800c93c <xQueueGenericSendFromISR+0xbc>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d12f      	bne.n	800c99c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c94c:	683a      	ldr	r2, [r7, #0]
 800c94e:	68b9      	ldr	r1, [r7, #8]
 800c950:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c952:	f000 fba0 	bl	800d096 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c956:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95e:	d112      	bne.n	800c986 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	2b00      	cmp	r3, #0
 800c966:	d016      	beq.n	800c996 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96a:	3324      	adds	r3, #36	; 0x24
 800c96c:	4618      	mov	r0, r3
 800c96e:	f001 f94d 	bl	800dc0c <xTaskRemoveFromEventList>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00e      	beq.n	800c996 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	e007      	b.n	800c996 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c98a:	3301      	adds	r3, #1
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	b25a      	sxtb	r2, r3
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c996:	2301      	movs	r3, #1
 800c998:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c99a:	e001      	b.n	800c9a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3740      	adds	r7, #64	; 0x40
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b08e      	sub	sp, #56	; 0x38
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10a      	bne.n	800c9e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	623b      	str	r3, [r7, #32]
}
 800c9dc:	bf00      	nop
 800c9de:	e7fe      	b.n	800c9de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00a      	beq.n	800c9fe <xQueueGiveFromISR+0x48>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	61fb      	str	r3, [r7, #28]
}
 800c9fa:	bf00      	nop
 800c9fc:	e7fe      	b.n	800c9fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d103      	bne.n	800ca0e <xQueueGiveFromISR+0x58>
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <xQueueGiveFromISR+0x5c>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e000      	b.n	800ca14 <xQueueGiveFromISR+0x5e>
 800ca12:	2300      	movs	r3, #0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10a      	bne.n	800ca2e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	61bb      	str	r3, [r7, #24]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca2e:	f001 fedb 	bl	800e7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca32:	f3ef 8211 	mrs	r2, BASEPRI
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	617a      	str	r2, [r7, #20]
 800ca48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d22b      	bcs.n	800cab6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca78:	d112      	bne.n	800caa0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d016      	beq.n	800cab0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	3324      	adds	r3, #36	; 0x24
 800ca86:	4618      	mov	r0, r3
 800ca88:	f001 f8c0 	bl	800dc0c <xTaskRemoveFromEventList>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00e      	beq.n	800cab0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00b      	beq.n	800cab0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e007      	b.n	800cab0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800caa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa4:	3301      	adds	r3, #1
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	b25a      	sxtb	r2, r3
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cab0:	2301      	movs	r3, #1
 800cab2:	637b      	str	r3, [r7, #52]	; 0x34
 800cab4:	e001      	b.n	800caba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	637b      	str	r3, [r7, #52]	; 0x34
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f383 8811 	msr	BASEPRI, r3
}
 800cac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3738      	adds	r7, #56	; 0x38
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08c      	sub	sp, #48	; 0x30
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cadc:	2300      	movs	r3, #0
 800cade:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10a      	bne.n	800cb00 <xQueueReceive+0x30>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	623b      	str	r3, [r7, #32]
}
 800cafc:	bf00      	nop
 800cafe:	e7fe      	b.n	800cafe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <xQueueReceive+0x3e>
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d101      	bne.n	800cb12 <xQueueReceive+0x42>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e000      	b.n	800cb14 <xQueueReceive+0x44>
 800cb12:	2300      	movs	r3, #0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10a      	bne.n	800cb2e <xQueueReceive+0x5e>
	__asm volatile
 800cb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	61fb      	str	r3, [r7, #28]
}
 800cb2a:	bf00      	nop
 800cb2c:	e7fe      	b.n	800cb2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb2e:	f001 fa2d 	bl	800df8c <xTaskGetSchedulerState>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <xQueueReceive+0x6e>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d101      	bne.n	800cb42 <xQueueReceive+0x72>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e000      	b.n	800cb44 <xQueueReceive+0x74>
 800cb42:	2300      	movs	r3, #0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10a      	bne.n	800cb5e <xQueueReceive+0x8e>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	61bb      	str	r3, [r7, #24]
}
 800cb5a:	bf00      	nop
 800cb5c:	e7fe      	b.n	800cb5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb5e:	f001 fd61 	bl	800e624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d01f      	beq.n	800cbae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb72:	f000 fafa 	bl	800d16a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	1e5a      	subs	r2, r3, #1
 800cb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00f      	beq.n	800cba6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	3310      	adds	r3, #16
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 f83e 	bl	800dc0c <xTaskRemoveFromEventList>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d007      	beq.n	800cba6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb96:	4b3d      	ldr	r3, [pc, #244]	; (800cc8c <xQueueReceive+0x1bc>)
 800cb98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cba6:	f001 fd6d 	bl	800e684 <vPortExitCritical>
				return pdPASS;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e069      	b.n	800cc82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d103      	bne.n	800cbbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cbb4:	f001 fd66 	bl	800e684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	e062      	b.n	800cc82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d106      	bne.n	800cbd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbc2:	f107 0310 	add.w	r3, r7, #16
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f001 f882 	bl	800dcd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbd0:	f001 fd58 	bl	800e684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbd4:	f000 fdea 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbd8:	f001 fd24 	bl	800e624 <vPortEnterCritical>
 800cbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbe2:	b25b      	sxtb	r3, r3
 800cbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe8:	d103      	bne.n	800cbf2 <xQueueReceive+0x122>
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbf8:	b25b      	sxtb	r3, r3
 800cbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbfe:	d103      	bne.n	800cc08 <xQueueReceive+0x138>
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc08:	f001 fd3c 	bl	800e684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc0c:	1d3a      	adds	r2, r7, #4
 800cc0e:	f107 0310 	add.w	r3, r7, #16
 800cc12:	4611      	mov	r1, r2
 800cc14:	4618      	mov	r0, r3
 800cc16:	f001 f871 	bl	800dcfc <xTaskCheckForTimeOut>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d123      	bne.n	800cc68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc22:	f000 fb1a 	bl	800d25a <prvIsQueueEmpty>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d017      	beq.n	800cc5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	3324      	adds	r3, #36	; 0x24
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	4611      	mov	r1, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 ffc5 	bl	800dbc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc3c:	f000 fabb 	bl	800d1b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc40:	f000 fdc2 	bl	800d7c8 <xTaskResumeAll>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d189      	bne.n	800cb5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cc4a:	4b10      	ldr	r3, [pc, #64]	; (800cc8c <xQueueReceive+0x1bc>)
 800cc4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	e780      	b.n	800cb5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc5e:	f000 faaa 	bl	800d1b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc62:	f000 fdb1 	bl	800d7c8 <xTaskResumeAll>
 800cc66:	e77a      	b.n	800cb5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc6a:	f000 faa4 	bl	800d1b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc6e:	f000 fdab 	bl	800d7c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc74:	f000 faf1 	bl	800d25a <prvIsQueueEmpty>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f43f af6f 	beq.w	800cb5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3730      	adds	r7, #48	; 0x30
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	e000ed04 	.word	0xe000ed04

0800cc90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08e      	sub	sp, #56	; 0x38
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cca2:	2300      	movs	r3, #0
 800cca4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10a      	bne.n	800ccc2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	623b      	str	r3, [r7, #32]
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00a      	beq.n	800cce0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	61fb      	str	r3, [r7, #28]
}
 800ccdc:	bf00      	nop
 800ccde:	e7fe      	b.n	800ccde <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cce0:	f001 f954 	bl	800df8c <xTaskGetSchedulerState>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <xQueueSemaphoreTake+0x60>
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d101      	bne.n	800ccf4 <xQueueSemaphoreTake+0x64>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e000      	b.n	800ccf6 <xQueueSemaphoreTake+0x66>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	61bb      	str	r3, [r7, #24]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd10:	f001 fc88 	bl	800e624 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d024      	beq.n	800cd6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	1e5a      	subs	r2, r3, #1
 800cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d104      	bne.n	800cd3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cd30:	f001 fad4 	bl	800e2dc <pvTaskIncrementMutexHeldCount>
 800cd34:	4602      	mov	r2, r0
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00f      	beq.n	800cd62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	3310      	adds	r3, #16
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 ff60 	bl	800dc0c <xTaskRemoveFromEventList>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d007      	beq.n	800cd62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd52:	4b54      	ldr	r3, [pc, #336]	; (800cea4 <xQueueSemaphoreTake+0x214>)
 800cd54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd58:	601a      	str	r2, [r3, #0]
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd62:	f001 fc8f 	bl	800e684 <vPortExitCritical>
				return pdPASS;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e097      	b.n	800ce9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d111      	bne.n	800cd94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00a      	beq.n	800cd8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	617b      	str	r3, [r7, #20]
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cd8c:	f001 fc7a 	bl	800e684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd90:	2300      	movs	r3, #0
 800cd92:	e082      	b.n	800ce9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d106      	bne.n	800cda8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd9a:	f107 030c 	add.w	r3, r7, #12
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 ff96 	bl	800dcd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cda4:	2301      	movs	r3, #1
 800cda6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cda8:	f001 fc6c 	bl	800e684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdac:	f000 fcfe 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdb0:	f001 fc38 	bl	800e624 <vPortEnterCritical>
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdba:	b25b      	sxtb	r3, r3
 800cdbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc0:	d103      	bne.n	800cdca <xQueueSemaphoreTake+0x13a>
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdd0:	b25b      	sxtb	r3, r3
 800cdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd6:	d103      	bne.n	800cde0 <xQueueSemaphoreTake+0x150>
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cde0:	f001 fc50 	bl	800e684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cde4:	463a      	mov	r2, r7
 800cde6:	f107 030c 	add.w	r3, r7, #12
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 ff85 	bl	800dcfc <xTaskCheckForTimeOut>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d132      	bne.n	800ce5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdfa:	f000 fa2e 	bl	800d25a <prvIsQueueEmpty>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d026      	beq.n	800ce52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d109      	bne.n	800ce20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ce0c:	f001 fc0a 	bl	800e624 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f001 f8d7 	bl	800dfc8 <xTaskPriorityInherit>
 800ce1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ce1c:	f001 fc32 	bl	800e684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce22:	3324      	adds	r3, #36	; 0x24
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	4611      	mov	r1, r2
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fecb 	bl	800dbc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce30:	f000 f9c1 	bl	800d1b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce34:	f000 fcc8 	bl	800d7c8 <xTaskResumeAll>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f47f af68 	bne.w	800cd10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ce40:	4b18      	ldr	r3, [pc, #96]	; (800cea4 <xQueueSemaphoreTake+0x214>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	e75e      	b.n	800cd10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ce52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce54:	f000 f9af 	bl	800d1b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce58:	f000 fcb6 	bl	800d7c8 <xTaskResumeAll>
 800ce5c:	e758      	b.n	800cd10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ce5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce60:	f000 f9a9 	bl	800d1b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce64:	f000 fcb0 	bl	800d7c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce6a:	f000 f9f6 	bl	800d25a <prvIsQueueEmpty>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f43f af4d 	beq.w	800cd10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00d      	beq.n	800ce98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ce7c:	f001 fbd2 	bl	800e624 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ce80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce82:	f000 f8f0 	bl	800d066 <prvGetDisinheritPriorityAfterTimeout>
 800ce86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f001 f996 	bl	800e1c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ce94:	f001 fbf6 	bl	800e684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3738      	adds	r7, #56	; 0x38
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	e000ed04 	.word	0xe000ed04

0800cea8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b08e      	sub	sp, #56	; 0x38
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	623b      	str	r3, [r7, #32]
}
 800ced0:	bf00      	nop
 800ced2:	e7fe      	b.n	800ced2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d103      	bne.n	800cee2 <xQueueReceiveFromISR+0x3a>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <xQueueReceiveFromISR+0x3e>
 800cee2:	2301      	movs	r3, #1
 800cee4:	e000      	b.n	800cee8 <xQueueReceiveFromISR+0x40>
 800cee6:	2300      	movs	r3, #0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10a      	bne.n	800cf02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	61fb      	str	r3, [r7, #28]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf02:	f001 fc71 	bl	800e7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800cf06:	f3ef 8211 	mrs	r2, BASEPRI
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	61ba      	str	r2, [r7, #24]
 800cf1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d02f      	beq.n	800cf8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf3c:	f000 f915 	bl	800d16a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	1e5a      	subs	r2, r3, #1
 800cf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cf48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf50:	d112      	bne.n	800cf78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d016      	beq.n	800cf88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	3310      	adds	r3, #16
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fe54 	bl	800dc0c <xTaskRemoveFromEventList>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00e      	beq.n	800cf88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	e007      	b.n	800cf88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cf78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	b25a      	sxtb	r2, r3
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf8c:	e001      	b.n	800cf92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	637b      	str	r3, [r7, #52]	; 0x34
 800cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf94:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	f383 8811 	msr	BASEPRI, r3
}
 800cf9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3738      	adds	r7, #56	; 0x38
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10a      	bne.n	800cfcc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	60bb      	str	r3, [r7, #8]
}
 800cfc8:	bf00      	nop
 800cfca:	e7fe      	b.n	800cfca <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800cfcc:	f001 fb2a 	bl	800e624 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800cfd6:	f001 fb55 	bl	800e684 <vPortExitCritical>

	return uxReturn;
 800cfda:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10a      	bne.n	800d00c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	60fb      	str	r3, [r7, #12]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d010:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d012:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d014:	4618      	mov	r0, r3
 800d016:	371c      	adds	r7, #28
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <vQueueDelete+0x28>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	60bb      	str	r3, [r7, #8]
}
 800d044:	bf00      	nop
 800d046:	e7fe      	b.n	800d046 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 f935 	bl	800d2b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d054:	2b00      	cmp	r3, #0
 800d056:	d102      	bne.n	800d05e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f001 fcd1 	bl	800ea00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d05e:	bf00      	nop
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d072:	2b00      	cmp	r3, #0
 800d074:	d006      	beq.n	800d084 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f1c3 0307 	rsb	r3, r3, #7
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	e001      	b.n	800d088 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d084:	2300      	movs	r3, #0
 800d086:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d088:	68fb      	ldr	r3, [r7, #12]
	}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10d      	bne.n	800d0d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d14d      	bne.n	800d158 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 fff7 	bl	800e0b4 <xTaskPriorityDisinherit>
 800d0c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	609a      	str	r2, [r3, #8]
 800d0ce:	e043      	b.n	800d158 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d119      	bne.n	800d10a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6858      	ldr	r0, [r3, #4]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0de:	461a      	mov	r2, r3
 800d0e0:	68b9      	ldr	r1, [r7, #8]
 800d0e2:	f010 fa74 	bl	801d5ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ee:	441a      	add	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d32b      	bcc.n	800d158 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	605a      	str	r2, [r3, #4]
 800d108:	e026      	b.n	800d158 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	68d8      	ldr	r0, [r3, #12]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	461a      	mov	r2, r3
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	f010 fa5a 	bl	801d5ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	68da      	ldr	r2, [r3, #12]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d122:	425b      	negs	r3, r3
 800d124:	441a      	add	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	68da      	ldr	r2, [r3, #12]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	429a      	cmp	r2, r3
 800d134:	d207      	bcs.n	800d146 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	689a      	ldr	r2, [r3, #8]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13e:	425b      	negs	r3, r3
 800d140:	441a      	add	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d105      	bne.n	800d158 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	3b01      	subs	r3, #1
 800d156:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d160:	697b      	ldr	r3, [r7, #20]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b082      	sub	sp, #8
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d018      	beq.n	800d1ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68da      	ldr	r2, [r3, #12]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d184:	441a      	add	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68da      	ldr	r2, [r3, #12]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	429a      	cmp	r2, r3
 800d194:	d303      	bcc.n	800d19e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	68d9      	ldr	r1, [r3, #12]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6838      	ldr	r0, [r7, #0]
 800d1aa:	f010 fa10 	bl	801d5ce <memcpy>
	}
}
 800d1ae:	bf00      	nop
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1be:	f001 fa31 	bl	800e624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1ca:	e011      	b.n	800d1f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d012      	beq.n	800d1fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3324      	adds	r3, #36	; 0x24
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 fd17 	bl	800dc0c <xTaskRemoveFromEventList>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d1e4:	f000 fdec 	bl	800ddc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dce9      	bgt.n	800d1cc <prvUnlockQueue+0x16>
 800d1f8:	e000      	b.n	800d1fc <prvUnlockQueue+0x46>
					break;
 800d1fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	22ff      	movs	r2, #255	; 0xff
 800d200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d204:	f001 fa3e 	bl	800e684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d208:	f001 fa0c 	bl	800e624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d212:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d214:	e011      	b.n	800d23a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d012      	beq.n	800d244 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	3310      	adds	r3, #16
 800d222:	4618      	mov	r0, r3
 800d224:	f000 fcf2 	bl	800dc0c <xTaskRemoveFromEventList>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d22e:	f000 fdc7 	bl	800ddc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d232:	7bbb      	ldrb	r3, [r7, #14]
 800d234:	3b01      	subs	r3, #1
 800d236:	b2db      	uxtb	r3, r3
 800d238:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dce9      	bgt.n	800d216 <prvUnlockQueue+0x60>
 800d242:	e000      	b.n	800d246 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d244:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	22ff      	movs	r2, #255	; 0xff
 800d24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d24e:	f001 fa19 	bl	800e684 <vPortExitCritical>
}
 800d252:	bf00      	nop
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b084      	sub	sp, #16
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d262:	f001 f9df 	bl	800e624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d26e:	2301      	movs	r3, #1
 800d270:	60fb      	str	r3, [r7, #12]
 800d272:	e001      	b.n	800d278 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d274:	2300      	movs	r3, #0
 800d276:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d278:	f001 fa04 	bl	800e684 <vPortExitCritical>

	return xReturn;
 800d27c:	68fb      	ldr	r3, [r7, #12]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b084      	sub	sp, #16
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d28e:	f001 f9c9 	bl	800e624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d102      	bne.n	800d2a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	e001      	b.n	800d2a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2a8:	f001 f9ec 	bl	800e684 <vPortExitCritical>

	return xReturn;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
	...

0800d2b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	60fb      	str	r3, [r7, #12]
 800d2c4:	e016      	b.n	800d2f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d2c6:	4a10      	ldr	r2, [pc, #64]	; (800d308 <vQueueUnregisterQueue+0x50>)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	4413      	add	r3, r2
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d10b      	bne.n	800d2ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d2d6:	4a0c      	ldr	r2, [pc, #48]	; (800d308 <vQueueUnregisterQueue+0x50>)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2100      	movs	r1, #0
 800d2dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d2e0:	4a09      	ldr	r2, [pc, #36]	; (800d308 <vQueueUnregisterQueue+0x50>)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	00db      	lsls	r3, r3, #3
 800d2e6:	4413      	add	r3, r2
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	605a      	str	r2, [r3, #4]
				break;
 800d2ec:	e006      	b.n	800d2fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b07      	cmp	r3, #7
 800d2f8:	d9e5      	bls.n	800d2c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	2000592c 	.word	0x2000592c

0800d30c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b08e      	sub	sp, #56	; 0x38
 800d310:	af04      	add	r7, sp, #16
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10a      	bne.n	800d336 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	623b      	str	r3, [r7, #32]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10a      	bne.n	800d352 <xTaskCreateStatic+0x46>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	61fb      	str	r3, [r7, #28]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d352:	23a0      	movs	r3, #160	; 0xa0
 800d354:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2ba0      	cmp	r3, #160	; 0xa0
 800d35a:	d00a      	beq.n	800d372 <xTaskCreateStatic+0x66>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	61bb      	str	r3, [r7, #24]
}
 800d36e:	bf00      	nop
 800d370:	e7fe      	b.n	800d370 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d372:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	2b00      	cmp	r3, #0
 800d378:	d01e      	beq.n	800d3b8 <xTaskCreateStatic+0xac>
 800d37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01b      	beq.n	800d3b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d388:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	2202      	movs	r2, #2
 800d38e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d392:	2300      	movs	r3, #0
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	9302      	str	r3, [sp, #8]
 800d39a:	f107 0314 	add.w	r3, r7, #20
 800d39e:	9301      	str	r3, [sp, #4]
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 f850 	bl	800d450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3b2:	f000 f8f3 	bl	800d59c <prvAddNewTaskToReadyList>
 800d3b6:	e001      	b.n	800d3bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3bc:	697b      	ldr	r3, [r7, #20]
	}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3728      	adds	r7, #40	; 0x28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b08c      	sub	sp, #48	; 0x30
 800d3ca:	af04      	add	r7, sp, #16
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	603b      	str	r3, [r7, #0]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f001 fa44 	bl	800e868 <pvPortMalloc>
 800d3e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00e      	beq.n	800d406 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3e8:	20a0      	movs	r0, #160	; 0xa0
 800d3ea:	f001 fa3d 	bl	800e868 <pvPortMalloc>
 800d3ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	697a      	ldr	r2, [r7, #20]
 800d3fa:	631a      	str	r2, [r3, #48]	; 0x30
 800d3fc:	e005      	b.n	800d40a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3fe:	6978      	ldr	r0, [r7, #20]
 800d400:	f001 fafe 	bl	800ea00 <vPortFree>
 800d404:	e001      	b.n	800d40a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d406:	2300      	movs	r3, #0
 800d408:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d017      	beq.n	800d440 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d418:	88fa      	ldrh	r2, [r7, #6]
 800d41a:	2300      	movs	r3, #0
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	9302      	str	r3, [sp, #8]
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68b9      	ldr	r1, [r7, #8]
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f000 f80e 	bl	800d450 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d434:	69f8      	ldr	r0, [r7, #28]
 800d436:	f000 f8b1 	bl	800d59c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d43a:	2301      	movs	r3, #1
 800d43c:	61bb      	str	r3, [r7, #24]
 800d43e:	e002      	b.n	800d446 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d440:	f04f 33ff 	mov.w	r3, #4294967295
 800d444:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d446:	69bb      	ldr	r3, [r7, #24]
	}
 800d448:	4618      	mov	r0, r3
 800d44a:	3720      	adds	r7, #32
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
 800d45c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	461a      	mov	r2, r3
 800d468:	21a5      	movs	r1, #165	; 0xa5
 800d46a:	f00f ffbf 	bl	801d3ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d478:	3b01      	subs	r3, #1
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4413      	add	r3, r2
 800d47e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	f023 0307 	bic.w	r3, r3, #7
 800d486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	f003 0307 	and.w	r3, r3, #7
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	f383 8811 	msr	BASEPRI, r3
 800d49a:	f3bf 8f6f 	isb	sy
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	617b      	str	r3, [r7, #20]
}
 800d4a4:	bf00      	nop
 800d4a6:	e7fe      	b.n	800d4a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d01f      	beq.n	800d4ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	61fb      	str	r3, [r7, #28]
 800d4b2:	e012      	b.n	800d4da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	7819      	ldrb	r1, [r3, #0]
 800d4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	3334      	adds	r3, #52	; 0x34
 800d4c4:	460a      	mov	r2, r1
 800d4c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	61fb      	str	r3, [r7, #28]
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	2b0f      	cmp	r3, #15
 800d4de:	d9e9      	bls.n	800d4b4 <prvInitialiseNewTask+0x64>
 800d4e0:	e000      	b.n	800d4e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d4e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4ec:	e003      	b.n	800d4f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	2b06      	cmp	r3, #6
 800d4fa:	d901      	bls.n	800d500 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4fc:	2306      	movs	r3, #6
 800d4fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d504:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d50a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	2200      	movs	r2, #0
 800d510:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	3304      	adds	r3, #4
 800d516:	4618      	mov	r0, r3
 800d518:	f7fe fe99 	bl	800c24e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	3318      	adds	r3, #24
 800d520:	4618      	mov	r0, r3
 800d522:	f7fe fe94 	bl	800c24e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d52a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	f1c3 0207 	rsb	r2, r3, #7
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d53a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53e:	2200      	movs	r2, #0
 800d540:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	2200      	movs	r2, #0
 800d548:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54e:	334c      	adds	r3, #76	; 0x4c
 800d550:	224c      	movs	r2, #76	; 0x4c
 800d552:	2100      	movs	r1, #0
 800d554:	4618      	mov	r0, r3
 800d556:	f00f ff49 	bl	801d3ec <memset>
 800d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55c:	4a0c      	ldr	r2, [pc, #48]	; (800d590 <prvInitialiseNewTask+0x140>)
 800d55e:	651a      	str	r2, [r3, #80]	; 0x50
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	4a0c      	ldr	r2, [pc, #48]	; (800d594 <prvInitialiseNewTask+0x144>)
 800d564:	655a      	str	r2, [r3, #84]	; 0x54
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	4a0b      	ldr	r2, [pc, #44]	; (800d598 <prvInitialiseNewTask+0x148>)
 800d56a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	68f9      	ldr	r1, [r7, #12]
 800d570:	69b8      	ldr	r0, [r7, #24]
 800d572:	f000 ff2d 	bl	800e3d0 <pxPortInitialiseStack>
 800d576:	4602      	mov	r2, r0
 800d578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d586:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d588:	bf00      	nop
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	2001354c 	.word	0x2001354c
 800d594:	200135b4 	.word	0x200135b4
 800d598:	2001361c 	.word	0x2001361c

0800d59c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d5a4:	f001 f83e 	bl	800e624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d5a8:	4b2a      	ldr	r3, [pc, #168]	; (800d654 <prvAddNewTaskToReadyList+0xb8>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	4a29      	ldr	r2, [pc, #164]	; (800d654 <prvAddNewTaskToReadyList+0xb8>)
 800d5b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5b2:	4b29      	ldr	r3, [pc, #164]	; (800d658 <prvAddNewTaskToReadyList+0xbc>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d5ba:	4a27      	ldr	r2, [pc, #156]	; (800d658 <prvAddNewTaskToReadyList+0xbc>)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5c0:	4b24      	ldr	r3, [pc, #144]	; (800d654 <prvAddNewTaskToReadyList+0xb8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d110      	bne.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5c8:	f000 fc1e 	bl	800de08 <prvInitialiseTaskLists>
 800d5cc:	e00d      	b.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5ce:	4b23      	ldr	r3, [pc, #140]	; (800d65c <prvAddNewTaskToReadyList+0xc0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d109      	bne.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5d6:	4b20      	ldr	r3, [pc, #128]	; (800d658 <prvAddNewTaskToReadyList+0xbc>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d802      	bhi.n	800d5ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5e4:	4a1c      	ldr	r2, [pc, #112]	; (800d658 <prvAddNewTaskToReadyList+0xbc>)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5ea:	4b1d      	ldr	r3, [pc, #116]	; (800d660 <prvAddNewTaskToReadyList+0xc4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	4a1b      	ldr	r2, [pc, #108]	; (800d660 <prvAddNewTaskToReadyList+0xc4>)
 800d5f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	409a      	lsls	r2, r3
 800d5fc:	4b19      	ldr	r3, [pc, #100]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4313      	orrs	r3, r2
 800d602:	4a18      	ldr	r2, [pc, #96]	; (800d664 <prvAddNewTaskToReadyList+0xc8>)
 800d604:	6013      	str	r3, [r2, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4a15      	ldr	r2, [pc, #84]	; (800d668 <prvAddNewTaskToReadyList+0xcc>)
 800d614:	441a      	add	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	3304      	adds	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f7fe fe23 	bl	800c268 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d622:	f001 f82f 	bl	800e684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d626:	4b0d      	ldr	r3, [pc, #52]	; (800d65c <prvAddNewTaskToReadyList+0xc0>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00e      	beq.n	800d64c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d62e:	4b0a      	ldr	r3, [pc, #40]	; (800d658 <prvAddNewTaskToReadyList+0xbc>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	429a      	cmp	r2, r3
 800d63a:	d207      	bcs.n	800d64c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d63c:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <prvAddNewTaskToReadyList+0xd0>)
 800d63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d64c:	bf00      	nop
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20005a6c 	.word	0x20005a6c
 800d658:	2000596c 	.word	0x2000596c
 800d65c:	20005a78 	.word	0x20005a78
 800d660:	20005a88 	.word	0x20005a88
 800d664:	20005a74 	.word	0x20005a74
 800d668:	20005970 	.word	0x20005970
 800d66c:	e000ed04 	.word	0xe000ed04

0800d670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d017      	beq.n	800d6b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d682:	4b13      	ldr	r3, [pc, #76]	; (800d6d0 <vTaskDelay+0x60>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00a      	beq.n	800d6a0 <vTaskDelay+0x30>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	60bb      	str	r3, [r7, #8]
}
 800d69c:	bf00      	nop
 800d69e:	e7fe      	b.n	800d69e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d6a0:	f000 f884 	bl	800d7ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fe2c 	bl	800e304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6ac:	f000 f88c 	bl	800d7c8 <xTaskResumeAll>
 800d6b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d107      	bne.n	800d6c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d6b8:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <vTaskDelay+0x64>)
 800d6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6be:	601a      	str	r2, [r3, #0]
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6c8:	bf00      	nop
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20005a94 	.word	0x20005a94
 800d6d4:	e000ed04 	.word	0xe000ed04

0800d6d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	; 0x28
 800d6dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6e6:	463a      	mov	r2, r7
 800d6e8:	1d39      	adds	r1, r7, #4
 800d6ea:	f107 0308 	add.w	r3, r7, #8
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7f3 fce2 	bl	80010b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6f4:	6839      	ldr	r1, [r7, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	9202      	str	r2, [sp, #8]
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	2300      	movs	r3, #0
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	2300      	movs	r3, #0
 800d704:	460a      	mov	r2, r1
 800d706:	4921      	ldr	r1, [pc, #132]	; (800d78c <vTaskStartScheduler+0xb4>)
 800d708:	4821      	ldr	r0, [pc, #132]	; (800d790 <vTaskStartScheduler+0xb8>)
 800d70a:	f7ff fdff 	bl	800d30c <xTaskCreateStatic>
 800d70e:	4603      	mov	r3, r0
 800d710:	4a20      	ldr	r2, [pc, #128]	; (800d794 <vTaskStartScheduler+0xbc>)
 800d712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d714:	4b1f      	ldr	r3, [pc, #124]	; (800d794 <vTaskStartScheduler+0xbc>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d71c:	2301      	movs	r3, #1
 800d71e:	617b      	str	r3, [r7, #20]
 800d720:	e001      	b.n	800d726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d722:	2300      	movs	r3, #0
 800d724:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d11b      	bne.n	800d764 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	613b      	str	r3, [r7, #16]
}
 800d73e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d740:	4b15      	ldr	r3, [pc, #84]	; (800d798 <vTaskStartScheduler+0xc0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	334c      	adds	r3, #76	; 0x4c
 800d746:	4a15      	ldr	r2, [pc, #84]	; (800d79c <vTaskStartScheduler+0xc4>)
 800d748:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d74a:	4b15      	ldr	r3, [pc, #84]	; (800d7a0 <vTaskStartScheduler+0xc8>)
 800d74c:	f04f 32ff 	mov.w	r2, #4294967295
 800d750:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d752:	4b14      	ldr	r3, [pc, #80]	; (800d7a4 <vTaskStartScheduler+0xcc>)
 800d754:	2201      	movs	r2, #1
 800d756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d758:	4b13      	ldr	r3, [pc, #76]	; (800d7a8 <vTaskStartScheduler+0xd0>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d75e:	f000 febf 	bl	800e4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d762:	e00e      	b.n	800d782 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d10a      	bne.n	800d782 <vTaskStartScheduler+0xaa>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	60fb      	str	r3, [r7, #12]
}
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <vTaskStartScheduler+0xa8>
}
 800d782:	bf00      	nop
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	0801f674 	.word	0x0801f674
 800d790:	0800ddd9 	.word	0x0800ddd9
 800d794:	20005a90 	.word	0x20005a90
 800d798:	2000596c 	.word	0x2000596c
 800d79c:	20000088 	.word	0x20000088
 800d7a0:	20005a8c 	.word	0x20005a8c
 800d7a4:	20005a78 	.word	0x20005a78
 800d7a8:	20005a70 	.word	0x20005a70

0800d7ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7b0:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <vTaskSuspendAll+0x18>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	4a03      	ldr	r2, [pc, #12]	; (800d7c4 <vTaskSuspendAll+0x18>)
 800d7b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7ba:	bf00      	nop
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	20005a94 	.word	0x20005a94

0800d7c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7d6:	4b41      	ldr	r3, [pc, #260]	; (800d8dc <xTaskResumeAll+0x114>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	603b      	str	r3, [r7, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7f4:	f000 ff16 	bl	800e624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7f8:	4b38      	ldr	r3, [pc, #224]	; (800d8dc <xTaskResumeAll+0x114>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	4a37      	ldr	r2, [pc, #220]	; (800d8dc <xTaskResumeAll+0x114>)
 800d800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d802:	4b36      	ldr	r3, [pc, #216]	; (800d8dc <xTaskResumeAll+0x114>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d161      	bne.n	800d8ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d80a:	4b35      	ldr	r3, [pc, #212]	; (800d8e0 <xTaskResumeAll+0x118>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d05d      	beq.n	800d8ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d812:	e02e      	b.n	800d872 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d814:	4b33      	ldr	r3, [pc, #204]	; (800d8e4 <xTaskResumeAll+0x11c>)
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3318      	adds	r3, #24
 800d820:	4618      	mov	r0, r3
 800d822:	f7fe fd7e 	bl	800c322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	3304      	adds	r3, #4
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe fd79 	bl	800c322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	2201      	movs	r2, #1
 800d836:	409a      	lsls	r2, r3
 800d838:	4b2b      	ldr	r3, [pc, #172]	; (800d8e8 <xTaskResumeAll+0x120>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	4a2a      	ldr	r2, [pc, #168]	; (800d8e8 <xTaskResumeAll+0x120>)
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d846:	4613      	mov	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4a27      	ldr	r2, [pc, #156]	; (800d8ec <xTaskResumeAll+0x124>)
 800d850:	441a      	add	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3304      	adds	r3, #4
 800d856:	4619      	mov	r1, r3
 800d858:	4610      	mov	r0, r2
 800d85a:	f7fe fd05 	bl	800c268 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d862:	4b23      	ldr	r3, [pc, #140]	; (800d8f0 <xTaskResumeAll+0x128>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	429a      	cmp	r2, r3
 800d86a:	d302      	bcc.n	800d872 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d86c:	4b21      	ldr	r3, [pc, #132]	; (800d8f4 <xTaskResumeAll+0x12c>)
 800d86e:	2201      	movs	r2, #1
 800d870:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d872:	4b1c      	ldr	r3, [pc, #112]	; (800d8e4 <xTaskResumeAll+0x11c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1cc      	bne.n	800d814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d880:	f000 fb64 	bl	800df4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d884:	4b1c      	ldr	r3, [pc, #112]	; (800d8f8 <xTaskResumeAll+0x130>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d010      	beq.n	800d8b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d890:	f000 f858 	bl	800d944 <xTaskIncrementTick>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d89a:	4b16      	ldr	r3, [pc, #88]	; (800d8f4 <xTaskResumeAll+0x12c>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1f1      	bne.n	800d890 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d8ac:	4b12      	ldr	r3, [pc, #72]	; (800d8f8 <xTaskResumeAll+0x130>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8b2:	4b10      	ldr	r3, [pc, #64]	; (800d8f4 <xTaskResumeAll+0x12c>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d009      	beq.n	800d8ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8be:	4b0f      	ldr	r3, [pc, #60]	; (800d8fc <xTaskResumeAll+0x134>)
 800d8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8ce:	f000 fed9 	bl	800e684 <vPortExitCritical>

	return xAlreadyYielded;
 800d8d2:	68bb      	ldr	r3, [r7, #8]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	20005a94 	.word	0x20005a94
 800d8e0:	20005a6c 	.word	0x20005a6c
 800d8e4:	20005a2c 	.word	0x20005a2c
 800d8e8:	20005a74 	.word	0x20005a74
 800d8ec:	20005970 	.word	0x20005970
 800d8f0:	2000596c 	.word	0x2000596c
 800d8f4:	20005a80 	.word	0x20005a80
 800d8f8:	20005a7c 	.word	0x20005a7c
 800d8fc:	e000ed04 	.word	0xe000ed04

0800d900 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d906:	4b05      	ldr	r3, [pc, #20]	; (800d91c <xTaskGetTickCount+0x1c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d90c:	687b      	ldr	r3, [r7, #4]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	20005a70 	.word	0x20005a70

0800d920 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d926:	f000 ff5f 	bl	800e7e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d92a:	2300      	movs	r3, #0
 800d92c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d92e:	4b04      	ldr	r3, [pc, #16]	; (800d940 <xTaskGetTickCountFromISR+0x20>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d934:	683b      	ldr	r3, [r7, #0]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20005a70 	.word	0x20005a70

0800d944 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d94a:	2300      	movs	r3, #0
 800d94c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d94e:	4b4e      	ldr	r3, [pc, #312]	; (800da88 <xTaskIncrementTick+0x144>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	f040 808e 	bne.w	800da74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d958:	4b4c      	ldr	r3, [pc, #304]	; (800da8c <xTaskIncrementTick+0x148>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3301      	adds	r3, #1
 800d95e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d960:	4a4a      	ldr	r2, [pc, #296]	; (800da8c <xTaskIncrementTick+0x148>)
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d120      	bne.n	800d9ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d96c:	4b48      	ldr	r3, [pc, #288]	; (800da90 <xTaskIncrementTick+0x14c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00a      	beq.n	800d98c <xTaskIncrementTick+0x48>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	603b      	str	r3, [r7, #0]
}
 800d988:	bf00      	nop
 800d98a:	e7fe      	b.n	800d98a <xTaskIncrementTick+0x46>
 800d98c:	4b40      	ldr	r3, [pc, #256]	; (800da90 <xTaskIncrementTick+0x14c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	60fb      	str	r3, [r7, #12]
 800d992:	4b40      	ldr	r3, [pc, #256]	; (800da94 <xTaskIncrementTick+0x150>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a3e      	ldr	r2, [pc, #248]	; (800da90 <xTaskIncrementTick+0x14c>)
 800d998:	6013      	str	r3, [r2, #0]
 800d99a:	4a3e      	ldr	r2, [pc, #248]	; (800da94 <xTaskIncrementTick+0x150>)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	4b3d      	ldr	r3, [pc, #244]	; (800da98 <xTaskIncrementTick+0x154>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	4a3c      	ldr	r2, [pc, #240]	; (800da98 <xTaskIncrementTick+0x154>)
 800d9a8:	6013      	str	r3, [r2, #0]
 800d9aa:	f000 facf 	bl	800df4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9ae:	4b3b      	ldr	r3, [pc, #236]	; (800da9c <xTaskIncrementTick+0x158>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	693a      	ldr	r2, [r7, #16]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d348      	bcc.n	800da4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9b8:	4b35      	ldr	r3, [pc, #212]	; (800da90 <xTaskIncrementTick+0x14c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d104      	bne.n	800d9cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9c2:	4b36      	ldr	r3, [pc, #216]	; (800da9c <xTaskIncrementTick+0x158>)
 800d9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c8:	601a      	str	r2, [r3, #0]
					break;
 800d9ca:	e03e      	b.n	800da4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9cc:	4b30      	ldr	r3, [pc, #192]	; (800da90 <xTaskIncrementTick+0x14c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d203      	bcs.n	800d9ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9e4:	4a2d      	ldr	r2, [pc, #180]	; (800da9c <xTaskIncrementTick+0x158>)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9ea:	e02e      	b.n	800da4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fe fc96 	bl	800c322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d004      	beq.n	800da08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	3318      	adds	r3, #24
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe fc8d 	bl	800c322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0c:	2201      	movs	r2, #1
 800da0e:	409a      	lsls	r2, r3
 800da10:	4b23      	ldr	r3, [pc, #140]	; (800daa0 <xTaskIncrementTick+0x15c>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4313      	orrs	r3, r2
 800da16:	4a22      	ldr	r2, [pc, #136]	; (800daa0 <xTaskIncrementTick+0x15c>)
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <xTaskIncrementTick+0x160>)
 800da28:	441a      	add	r2, r3
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	3304      	adds	r3, #4
 800da2e:	4619      	mov	r1, r3
 800da30:	4610      	mov	r0, r2
 800da32:	f7fe fc19 	bl	800c268 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da3a:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <xTaskIncrementTick+0x164>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	429a      	cmp	r2, r3
 800da42:	d3b9      	bcc.n	800d9b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da44:	2301      	movs	r3, #1
 800da46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da48:	e7b6      	b.n	800d9b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da4a:	4b17      	ldr	r3, [pc, #92]	; (800daa8 <xTaskIncrementTick+0x164>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da50:	4914      	ldr	r1, [pc, #80]	; (800daa4 <xTaskIncrementTick+0x160>)
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	440b      	add	r3, r1
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d901      	bls.n	800da66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800da62:	2301      	movs	r3, #1
 800da64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <xTaskIncrementTick+0x168>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d007      	beq.n	800da7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800da6e:	2301      	movs	r3, #1
 800da70:	617b      	str	r3, [r7, #20]
 800da72:	e004      	b.n	800da7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da74:	4b0e      	ldr	r3, [pc, #56]	; (800dab0 <xTaskIncrementTick+0x16c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	4a0d      	ldr	r2, [pc, #52]	; (800dab0 <xTaskIncrementTick+0x16c>)
 800da7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da7e:	697b      	ldr	r3, [r7, #20]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20005a94 	.word	0x20005a94
 800da8c:	20005a70 	.word	0x20005a70
 800da90:	20005a24 	.word	0x20005a24
 800da94:	20005a28 	.word	0x20005a28
 800da98:	20005a84 	.word	0x20005a84
 800da9c:	20005a8c 	.word	0x20005a8c
 800daa0:	20005a74 	.word	0x20005a74
 800daa4:	20005970 	.word	0x20005970
 800daa8:	2000596c 	.word	0x2000596c
 800daac:	20005a80 	.word	0x20005a80
 800dab0:	20005a7c 	.word	0x20005a7c

0800dab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b088      	sub	sp, #32
 800dab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800daba:	4b3c      	ldr	r3, [pc, #240]	; (800dbac <vTaskSwitchContext+0xf8>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dac2:	4b3b      	ldr	r3, [pc, #236]	; (800dbb0 <vTaskSwitchContext+0xfc>)
 800dac4:	2201      	movs	r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dac8:	e06b      	b.n	800dba2 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800daca:	4b39      	ldr	r3, [pc, #228]	; (800dbb0 <vTaskSwitchContext+0xfc>)
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dad0:	4b38      	ldr	r3, [pc, #224]	; (800dbb4 <vTaskSwitchContext+0x100>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad6:	61fb      	str	r3, [r7, #28]
 800dad8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dadc:	61bb      	str	r3, [r7, #24]
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69ba      	ldr	r2, [r7, #24]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d111      	bne.n	800db0c <vTaskSwitchContext+0x58>
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	3304      	adds	r3, #4
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	69ba      	ldr	r2, [r7, #24]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d10b      	bne.n	800db0c <vTaskSwitchContext+0x58>
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	3308      	adds	r3, #8
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d105      	bne.n	800db0c <vTaskSwitchContext+0x58>
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	330c      	adds	r3, #12
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	69ba      	ldr	r2, [r7, #24]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d008      	beq.n	800db1e <vTaskSwitchContext+0x6a>
 800db0c:	4b29      	ldr	r3, [pc, #164]	; (800dbb4 <vTaskSwitchContext+0x100>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	4b28      	ldr	r3, [pc, #160]	; (800dbb4 <vTaskSwitchContext+0x100>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3334      	adds	r3, #52	; 0x34
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7f3 fac1 	bl	80010a0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db1e:	4b26      	ldr	r3, [pc, #152]	; (800dbb8 <vTaskSwitchContext+0x104>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	fab3 f383 	clz	r3, r3
 800db2a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800db2c:	7afb      	ldrb	r3, [r7, #11]
 800db2e:	f1c3 031f 	rsb	r3, r3, #31
 800db32:	617b      	str	r3, [r7, #20]
 800db34:	4921      	ldr	r1, [pc, #132]	; (800dbbc <vTaskSwitchContext+0x108>)
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4613      	mov	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4413      	add	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	440b      	add	r3, r1
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10a      	bne.n	800db5e <vTaskSwitchContext+0xaa>
	__asm volatile
 800db48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	607b      	str	r3, [r7, #4]
}
 800db5a:	bf00      	nop
 800db5c:	e7fe      	b.n	800db5c <vTaskSwitchContext+0xa8>
 800db5e:	697a      	ldr	r2, [r7, #20]
 800db60:	4613      	mov	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4a14      	ldr	r2, [pc, #80]	; (800dbbc <vTaskSwitchContext+0x108>)
 800db6a:	4413      	add	r3, r2
 800db6c:	613b      	str	r3, [r7, #16]
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	685a      	ldr	r2, [r3, #4]
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	605a      	str	r2, [r3, #4]
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	3308      	adds	r3, #8
 800db80:	429a      	cmp	r2, r3
 800db82:	d104      	bne.n	800db8e <vTaskSwitchContext+0xda>
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	605a      	str	r2, [r3, #4]
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	4a07      	ldr	r2, [pc, #28]	; (800dbb4 <vTaskSwitchContext+0x100>)
 800db96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db98:	4b06      	ldr	r3, [pc, #24]	; (800dbb4 <vTaskSwitchContext+0x100>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	334c      	adds	r3, #76	; 0x4c
 800db9e:	4a08      	ldr	r2, [pc, #32]	; (800dbc0 <vTaskSwitchContext+0x10c>)
 800dba0:	6013      	str	r3, [r2, #0]
}
 800dba2:	bf00      	nop
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	20005a94 	.word	0x20005a94
 800dbb0:	20005a80 	.word	0x20005a80
 800dbb4:	2000596c 	.word	0x2000596c
 800dbb8:	20005a74 	.word	0x20005a74
 800dbbc:	20005970 	.word	0x20005970
 800dbc0:	20000088 	.word	0x20000088

0800dbc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10a      	bne.n	800dbea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	60fb      	str	r3, [r7, #12]
}
 800dbe6:	bf00      	nop
 800dbe8:	e7fe      	b.n	800dbe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbea:	4b07      	ldr	r3, [pc, #28]	; (800dc08 <vTaskPlaceOnEventList+0x44>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3318      	adds	r3, #24
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7fe fb5c 	bl	800c2b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbf8:	2101      	movs	r1, #1
 800dbfa:	6838      	ldr	r0, [r7, #0]
 800dbfc:	f000 fb82 	bl	800e304 <prvAddCurrentTaskToDelayedList>
}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	2000596c 	.word	0x2000596c

0800dc0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10a      	bne.n	800dc38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	60fb      	str	r3, [r7, #12]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	3318      	adds	r3, #24
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fe fb70 	bl	800c322 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc42:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <xTaskRemoveFromEventList+0xac>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d11c      	bne.n	800dc84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe fb67 	bl	800c322 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	2201      	movs	r2, #1
 800dc5a:	409a      	lsls	r2, r3
 800dc5c:	4b17      	ldr	r3, [pc, #92]	; (800dcbc <xTaskRemoveFromEventList+0xb0>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	4a16      	ldr	r2, [pc, #88]	; (800dcbc <xTaskRemoveFromEventList+0xb0>)
 800dc64:	6013      	str	r3, [r2, #0]
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	4a13      	ldr	r2, [pc, #76]	; (800dcc0 <xTaskRemoveFromEventList+0xb4>)
 800dc74:	441a      	add	r2, r3
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	3304      	adds	r3, #4
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	f7fe faf3 	bl	800c268 <vListInsertEnd>
 800dc82:	e005      	b.n	800dc90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	3318      	adds	r3, #24
 800dc88:	4619      	mov	r1, r3
 800dc8a:	480e      	ldr	r0, [pc, #56]	; (800dcc4 <xTaskRemoveFromEventList+0xb8>)
 800dc8c:	f7fe faec 	bl	800c268 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc94:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <xTaskRemoveFromEventList+0xbc>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d905      	bls.n	800dcaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dca2:	4b0a      	ldr	r3, [pc, #40]	; (800dccc <xTaskRemoveFromEventList+0xc0>)
 800dca4:	2201      	movs	r2, #1
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	e001      	b.n	800dcae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dcae:	697b      	ldr	r3, [r7, #20]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20005a94 	.word	0x20005a94
 800dcbc:	20005a74 	.word	0x20005a74
 800dcc0:	20005970 	.word	0x20005970
 800dcc4:	20005a2c 	.word	0x20005a2c
 800dcc8:	2000596c 	.word	0x2000596c
 800dccc:	20005a80 	.word	0x20005a80

0800dcd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcd8:	4b06      	ldr	r3, [pc, #24]	; (800dcf4 <vTaskInternalSetTimeOutState+0x24>)
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dce0:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <vTaskInternalSetTimeOutState+0x28>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	605a      	str	r2, [r3, #4]
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	20005a84 	.word	0x20005a84
 800dcf8:	20005a70 	.word	0x20005a70

0800dcfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b088      	sub	sp, #32
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	613b      	str	r3, [r7, #16]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10a      	bne.n	800dd3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	60fb      	str	r3, [r7, #12]
}
 800dd3a:	bf00      	nop
 800dd3c:	e7fe      	b.n	800dd3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd3e:	f000 fc71 	bl	800e624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd42:	4b1d      	ldr	r3, [pc, #116]	; (800ddb8 <xTaskCheckForTimeOut+0xbc>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	69ba      	ldr	r2, [r7, #24]
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5a:	d102      	bne.n	800dd62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	61fb      	str	r3, [r7, #28]
 800dd60:	e023      	b.n	800ddaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	4b15      	ldr	r3, [pc, #84]	; (800ddbc <xTaskCheckForTimeOut+0xc0>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d007      	beq.n	800dd7e <xTaskCheckForTimeOut+0x82>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	69ba      	ldr	r2, [r7, #24]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d302      	bcc.n	800dd7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	61fb      	str	r3, [r7, #28]
 800dd7c:	e015      	b.n	800ddaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d20b      	bcs.n	800dda0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	1ad2      	subs	r2, r2, r3
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ff9b 	bl	800dcd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	61fb      	str	r3, [r7, #28]
 800dd9e:	e004      	b.n	800ddaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2200      	movs	r2, #0
 800dda4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dda6:	2301      	movs	r3, #1
 800dda8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ddaa:	f000 fc6b 	bl	800e684 <vPortExitCritical>

	return xReturn;
 800ddae:	69fb      	ldr	r3, [r7, #28]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3720      	adds	r7, #32
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20005a70 	.word	0x20005a70
 800ddbc:	20005a84 	.word	0x20005a84

0800ddc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddc4:	4b03      	ldr	r3, [pc, #12]	; (800ddd4 <vTaskMissedYield+0x14>)
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]
}
 800ddca:	bf00      	nop
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	20005a80 	.word	0x20005a80

0800ddd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dde0:	f000 f852 	bl	800de88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dde4:	4b06      	ldr	r3, [pc, #24]	; (800de00 <prvIdleTask+0x28>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d9f9      	bls.n	800dde0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ddec:	4b05      	ldr	r3, [pc, #20]	; (800de04 <prvIdleTask+0x2c>)
 800ddee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ddfc:	e7f0      	b.n	800dde0 <prvIdleTask+0x8>
 800ddfe:	bf00      	nop
 800de00:	20005970 	.word	0x20005970
 800de04:	e000ed04 	.word	0xe000ed04

0800de08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de0e:	2300      	movs	r3, #0
 800de10:	607b      	str	r3, [r7, #4]
 800de12:	e00c      	b.n	800de2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	4613      	mov	r3, r2
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4413      	add	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4a12      	ldr	r2, [pc, #72]	; (800de68 <prvInitialiseTaskLists+0x60>)
 800de20:	4413      	add	r3, r2
 800de22:	4618      	mov	r0, r3
 800de24:	f7fe f9f3 	bl	800c20e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3301      	adds	r3, #1
 800de2c:	607b      	str	r3, [r7, #4]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b06      	cmp	r3, #6
 800de32:	d9ef      	bls.n	800de14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de34:	480d      	ldr	r0, [pc, #52]	; (800de6c <prvInitialiseTaskLists+0x64>)
 800de36:	f7fe f9ea 	bl	800c20e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de3a:	480d      	ldr	r0, [pc, #52]	; (800de70 <prvInitialiseTaskLists+0x68>)
 800de3c:	f7fe f9e7 	bl	800c20e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de40:	480c      	ldr	r0, [pc, #48]	; (800de74 <prvInitialiseTaskLists+0x6c>)
 800de42:	f7fe f9e4 	bl	800c20e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de46:	480c      	ldr	r0, [pc, #48]	; (800de78 <prvInitialiseTaskLists+0x70>)
 800de48:	f7fe f9e1 	bl	800c20e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de4c:	480b      	ldr	r0, [pc, #44]	; (800de7c <prvInitialiseTaskLists+0x74>)
 800de4e:	f7fe f9de 	bl	800c20e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de52:	4b0b      	ldr	r3, [pc, #44]	; (800de80 <prvInitialiseTaskLists+0x78>)
 800de54:	4a05      	ldr	r2, [pc, #20]	; (800de6c <prvInitialiseTaskLists+0x64>)
 800de56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de58:	4b0a      	ldr	r3, [pc, #40]	; (800de84 <prvInitialiseTaskLists+0x7c>)
 800de5a:	4a05      	ldr	r2, [pc, #20]	; (800de70 <prvInitialiseTaskLists+0x68>)
 800de5c:	601a      	str	r2, [r3, #0]
}
 800de5e:	bf00      	nop
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20005970 	.word	0x20005970
 800de6c:	200059fc 	.word	0x200059fc
 800de70:	20005a10 	.word	0x20005a10
 800de74:	20005a2c 	.word	0x20005a2c
 800de78:	20005a40 	.word	0x20005a40
 800de7c:	20005a58 	.word	0x20005a58
 800de80:	20005a24 	.word	0x20005a24
 800de84:	20005a28 	.word	0x20005a28

0800de88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de8e:	e019      	b.n	800dec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de90:	f000 fbc8 	bl	800e624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de94:	4b10      	ldr	r3, [pc, #64]	; (800ded8 <prvCheckTasksWaitingTermination+0x50>)
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	3304      	adds	r3, #4
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fe fa3e 	bl	800c322 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dea6:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <prvCheckTasksWaitingTermination+0x54>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3b01      	subs	r3, #1
 800deac:	4a0b      	ldr	r2, [pc, #44]	; (800dedc <prvCheckTasksWaitingTermination+0x54>)
 800deae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800deb0:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <prvCheckTasksWaitingTermination+0x58>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	4a0a      	ldr	r2, [pc, #40]	; (800dee0 <prvCheckTasksWaitingTermination+0x58>)
 800deb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800deba:	f000 fbe3 	bl	800e684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 f810 	bl	800dee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dec4:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <prvCheckTasksWaitingTermination+0x58>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e1      	bne.n	800de90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800decc:	bf00      	nop
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20005a40 	.word	0x20005a40
 800dedc:	20005a6c 	.word	0x20005a6c
 800dee0:	20005a54 	.word	0x20005a54

0800dee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	334c      	adds	r3, #76	; 0x4c
 800def0:	4618      	mov	r0, r3
 800def2:	f00f faa9 	bl	801d448 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800defc:	2b00      	cmp	r3, #0
 800defe:	d108      	bne.n	800df12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df04:	4618      	mov	r0, r3
 800df06:	f000 fd7b 	bl	800ea00 <vPortFree>
				vPortFree( pxTCB );
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 fd78 	bl	800ea00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df10:	e018      	b.n	800df44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d103      	bne.n	800df24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fd6f 	bl	800ea00 <vPortFree>
	}
 800df22:	e00f      	b.n	800df44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d00a      	beq.n	800df44 <prvDeleteTCB+0x60>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	60fb      	str	r3, [r7, #12]
}
 800df40:	bf00      	nop
 800df42:	e7fe      	b.n	800df42 <prvDeleteTCB+0x5e>
	}
 800df44:	bf00      	nop
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df52:	4b0c      	ldr	r3, [pc, #48]	; (800df84 <prvResetNextTaskUnblockTime+0x38>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d104      	bne.n	800df66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <prvResetNextTaskUnblockTime+0x3c>)
 800df5e:	f04f 32ff 	mov.w	r2, #4294967295
 800df62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df64:	e008      	b.n	800df78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df66:	4b07      	ldr	r3, [pc, #28]	; (800df84 <prvResetNextTaskUnblockTime+0x38>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	4a04      	ldr	r2, [pc, #16]	; (800df88 <prvResetNextTaskUnblockTime+0x3c>)
 800df76:	6013      	str	r3, [r2, #0]
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr
 800df84:	20005a24 	.word	0x20005a24
 800df88:	20005a8c 	.word	0x20005a8c

0800df8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df92:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <xTaskGetSchedulerState+0x34>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d102      	bne.n	800dfa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df9a:	2301      	movs	r3, #1
 800df9c:	607b      	str	r3, [r7, #4]
 800df9e:	e008      	b.n	800dfb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfa0:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <xTaskGetSchedulerState+0x38>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	607b      	str	r3, [r7, #4]
 800dfac:	e001      	b.n	800dfb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfb2:	687b      	ldr	r3, [r7, #4]
	}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20005a78 	.word	0x20005a78
 800dfc4:	20005a94 	.word	0x20005a94

0800dfc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d05e      	beq.n	800e09c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe2:	4b31      	ldr	r3, [pc, #196]	; (800e0a8 <xTaskPriorityInherit+0xe0>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d24e      	bcs.n	800e08a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	db06      	blt.n	800e002 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dff4:	4b2c      	ldr	r3, [pc, #176]	; (800e0a8 <xTaskPriorityInherit+0xe0>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffa:	f1c3 0207 	rsb	r2, r3, #7
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	6959      	ldr	r1, [r3, #20]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00a:	4613      	mov	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4a26      	ldr	r2, [pc, #152]	; (800e0ac <xTaskPriorityInherit+0xe4>)
 800e014:	4413      	add	r3, r2
 800e016:	4299      	cmp	r1, r3
 800e018:	d12f      	bne.n	800e07a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe f97f 	bl	800c322 <uxListRemove>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d10a      	bne.n	800e040 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02e:	2201      	movs	r2, #1
 800e030:	fa02 f303 	lsl.w	r3, r2, r3
 800e034:	43da      	mvns	r2, r3
 800e036:	4b1e      	ldr	r3, [pc, #120]	; (800e0b0 <xTaskPriorityInherit+0xe8>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4013      	ands	r3, r2
 800e03c:	4a1c      	ldr	r2, [pc, #112]	; (800e0b0 <xTaskPriorityInherit+0xe8>)
 800e03e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e040:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <xTaskPriorityInherit+0xe0>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04e:	2201      	movs	r2, #1
 800e050:	409a      	lsls	r2, r3
 800e052:	4b17      	ldr	r3, [pc, #92]	; (800e0b0 <xTaskPriorityInherit+0xe8>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4313      	orrs	r3, r2
 800e058:	4a15      	ldr	r2, [pc, #84]	; (800e0b0 <xTaskPriorityInherit+0xe8>)
 800e05a:	6013      	str	r3, [r2, #0]
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e060:	4613      	mov	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4a10      	ldr	r2, [pc, #64]	; (800e0ac <xTaskPriorityInherit+0xe4>)
 800e06a:	441a      	add	r2, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	3304      	adds	r3, #4
 800e070:	4619      	mov	r1, r3
 800e072:	4610      	mov	r0, r2
 800e074:	f7fe f8f8 	bl	800c268 <vListInsertEnd>
 800e078:	e004      	b.n	800e084 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e07a:	4b0b      	ldr	r3, [pc, #44]	; (800e0a8 <xTaskPriorityInherit+0xe0>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e084:	2301      	movs	r3, #1
 800e086:	60fb      	str	r3, [r7, #12]
 800e088:	e008      	b.n	800e09c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e08e:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <xTaskPriorityInherit+0xe0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	429a      	cmp	r2, r3
 800e096:	d201      	bcs.n	800e09c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e098:	2301      	movs	r3, #1
 800e09a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e09c:	68fb      	ldr	r3, [r7, #12]
	}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	2000596c 	.word	0x2000596c
 800e0ac:	20005970 	.word	0x20005970
 800e0b0:	20005a74 	.word	0x20005a74

0800e0b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d06e      	beq.n	800e1a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0ca:	4b3a      	ldr	r3, [pc, #232]	; (800e1b4 <xTaskPriorityDisinherit+0x100>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	693a      	ldr	r2, [r7, #16]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d00a      	beq.n	800e0ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	60fb      	str	r3, [r7, #12]
}
 800e0e6:	bf00      	nop
 800e0e8:	e7fe      	b.n	800e0e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10a      	bne.n	800e108 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	60bb      	str	r3, [r7, #8]
}
 800e104:	bf00      	nop
 800e106:	e7fe      	b.n	800e106 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e10c:	1e5a      	subs	r2, r3, #1
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d044      	beq.n	800e1a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e122:	2b00      	cmp	r3, #0
 800e124:	d140      	bne.n	800e1a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	3304      	adds	r3, #4
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fe f8f9 	bl	800c322 <uxListRemove>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d115      	bne.n	800e162 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13a:	491f      	ldr	r1, [pc, #124]	; (800e1b8 <xTaskPriorityDisinherit+0x104>)
 800e13c:	4613      	mov	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	440b      	add	r3, r1
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10a      	bne.n	800e162 <xTaskPriorityDisinherit+0xae>
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e150:	2201      	movs	r2, #1
 800e152:	fa02 f303 	lsl.w	r3, r2, r3
 800e156:	43da      	mvns	r2, r3
 800e158:	4b18      	ldr	r3, [pc, #96]	; (800e1bc <xTaskPriorityDisinherit+0x108>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4013      	ands	r3, r2
 800e15e:	4a17      	ldr	r2, [pc, #92]	; (800e1bc <xTaskPriorityDisinherit+0x108>)
 800e160:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	f1c3 0207 	rsb	r2, r3, #7
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17a:	2201      	movs	r2, #1
 800e17c:	409a      	lsls	r2, r3
 800e17e:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <xTaskPriorityDisinherit+0x108>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4313      	orrs	r3, r2
 800e184:	4a0d      	ldr	r2, [pc, #52]	; (800e1bc <xTaskPriorityDisinherit+0x108>)
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e18c:	4613      	mov	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4a08      	ldr	r2, [pc, #32]	; (800e1b8 <xTaskPriorityDisinherit+0x104>)
 800e196:	441a      	add	r2, r3
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	3304      	adds	r3, #4
 800e19c:	4619      	mov	r1, r3
 800e19e:	4610      	mov	r0, r2
 800e1a0:	f7fe f862 	bl	800c268 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1a8:	697b      	ldr	r3, [r7, #20]
	}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	2000596c 	.word	0x2000596c
 800e1b8:	20005970 	.word	0x20005970
 800e1bc:	20005a74 	.word	0x20005a74

0800e1c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b088      	sub	sp, #32
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d077      	beq.n	800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10a      	bne.n	800e1f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e4:	f383 8811 	msr	BASEPRI, r3
 800e1e8:	f3bf 8f6f 	isb	sy
 800e1ec:	f3bf 8f4f 	dsb	sy
 800e1f0:	60fb      	str	r3, [r7, #12]
}
 800e1f2:	bf00      	nop
 800e1f4:	e7fe      	b.n	800e1f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d902      	bls.n	800e206 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	61fb      	str	r3, [r7, #28]
 800e204:	e002      	b.n	800e20c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e20a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e210:	69fa      	ldr	r2, [r7, #28]
 800e212:	429a      	cmp	r2, r3
 800e214:	d058      	beq.n	800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d153      	bne.n	800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e220:	4b2b      	ldr	r3, [pc, #172]	; (800e2d0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	69ba      	ldr	r2, [r7, #24]
 800e226:	429a      	cmp	r2, r3
 800e228:	d10a      	bne.n	800e240 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	60bb      	str	r3, [r7, #8]
}
 800e23c:	bf00      	nop
 800e23e:	e7fe      	b.n	800e23e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	2b00      	cmp	r3, #0
 800e252:	db04      	blt.n	800e25e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	f1c3 0207 	rsb	r2, r3, #7
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	6959      	ldr	r1, [r3, #20]
 800e262:	693a      	ldr	r2, [r7, #16]
 800e264:	4613      	mov	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4a19      	ldr	r2, [pc, #100]	; (800e2d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e26e:	4413      	add	r3, r2
 800e270:	4299      	cmp	r1, r3
 800e272:	d129      	bne.n	800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	3304      	adds	r3, #4
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fe f852 	bl	800c322 <uxListRemove>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d10a      	bne.n	800e29a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e288:	2201      	movs	r2, #1
 800e28a:	fa02 f303 	lsl.w	r3, r2, r3
 800e28e:	43da      	mvns	r2, r3
 800e290:	4b11      	ldr	r3, [pc, #68]	; (800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4013      	ands	r3, r2
 800e296:	4a10      	ldr	r2, [pc, #64]	; (800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e298:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29e:	2201      	movs	r2, #1
 800e2a0:	409a      	lsls	r2, r3
 800e2a2:	4b0d      	ldr	r3, [pc, #52]	; (800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	4a0b      	ldr	r2, [pc, #44]	; (800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b0:	4613      	mov	r3, r2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4413      	add	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4a06      	ldr	r2, [pc, #24]	; (800e2d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e2ba:	441a      	add	r2, r3
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	f7fd ffd0 	bl	800c268 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2c8:	bf00      	nop
 800e2ca:	3720      	adds	r7, #32
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	2000596c 	.word	0x2000596c
 800e2d4:	20005970 	.word	0x20005970
 800e2d8:	20005a74 	.word	0x20005a74

0800e2dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e2dc:	b480      	push	{r7}
 800e2de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d004      	beq.n	800e2f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2ee:	3201      	adds	r2, #1
 800e2f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e2f2:	4b03      	ldr	r3, [pc, #12]	; (800e300 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
	}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	2000596c 	.word	0x2000596c

0800e304 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e30e:	4b29      	ldr	r3, [pc, #164]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e314:	4b28      	ldr	r3, [pc, #160]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3304      	adds	r3, #4
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fe f801 	bl	800c322 <uxListRemove>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10b      	bne.n	800e33e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e326:	4b24      	ldr	r3, [pc, #144]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32c:	2201      	movs	r2, #1
 800e32e:	fa02 f303 	lsl.w	r3, r2, r3
 800e332:	43da      	mvns	r2, r3
 800e334:	4b21      	ldr	r3, [pc, #132]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4013      	ands	r3, r2
 800e33a:	4a20      	ldr	r2, [pc, #128]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e33c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e344:	d10a      	bne.n	800e35c <prvAddCurrentTaskToDelayedList+0x58>
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e34c:	4b1a      	ldr	r3, [pc, #104]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	3304      	adds	r3, #4
 800e352:	4619      	mov	r1, r3
 800e354:	481a      	ldr	r0, [pc, #104]	; (800e3c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e356:	f7fd ff87 	bl	800c268 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e35a:	e026      	b.n	800e3aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4413      	add	r3, r2
 800e362:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e364:	4b14      	ldr	r3, [pc, #80]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	429a      	cmp	r2, r3
 800e372:	d209      	bcs.n	800e388 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e374:	4b13      	ldr	r3, [pc, #76]	; (800e3c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	3304      	adds	r3, #4
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f7fd ff95 	bl	800c2b0 <vListInsert>
}
 800e386:	e010      	b.n	800e3aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e388:	4b0f      	ldr	r3, [pc, #60]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	4b0a      	ldr	r3, [pc, #40]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3304      	adds	r3, #4
 800e392:	4619      	mov	r1, r3
 800e394:	4610      	mov	r0, r2
 800e396:	f7fd ff8b 	bl	800c2b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e39a:	4b0c      	ldr	r3, [pc, #48]	; (800e3cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d202      	bcs.n	800e3aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e3a4:	4a09      	ldr	r2, [pc, #36]	; (800e3cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	6013      	str	r3, [r2, #0]
}
 800e3aa:	bf00      	nop
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20005a70 	.word	0x20005a70
 800e3b8:	2000596c 	.word	0x2000596c
 800e3bc:	20005a74 	.word	0x20005a74
 800e3c0:	20005a58 	.word	0x20005a58
 800e3c4:	20005a28 	.word	0x20005a28
 800e3c8:	20005a24 	.word	0x20005a24
 800e3cc:	20005a8c 	.word	0x20005a8c

0800e3d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3b04      	subs	r3, #4
 800e3e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3b04      	subs	r3, #4
 800e3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f023 0201 	bic.w	r2, r3, #1
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	3b04      	subs	r3, #4
 800e3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e400:	4a0c      	ldr	r2, [pc, #48]	; (800e434 <pxPortInitialiseStack+0x64>)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3b14      	subs	r3, #20
 800e40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3b04      	subs	r3, #4
 800e416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f06f 0202 	mvn.w	r2, #2
 800e41e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	3b20      	subs	r3, #32
 800e424:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e426:	68fb      	ldr	r3, [r7, #12]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	0800e439 	.word	0x0800e439

0800e438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e442:	4b12      	ldr	r3, [pc, #72]	; (800e48c <prvTaskExitError+0x54>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44a:	d00a      	beq.n	800e462 <prvTaskExitError+0x2a>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	60fb      	str	r3, [r7, #12]
}
 800e45e:	bf00      	nop
 800e460:	e7fe      	b.n	800e460 <prvTaskExitError+0x28>
	__asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	60bb      	str	r3, [r7, #8]
}
 800e474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e476:	bf00      	nop
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d0fc      	beq.n	800e478 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e47e:	bf00      	nop
 800e480:	bf00      	nop
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	20000020 	.word	0x20000020

0800e490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <pxCurrentTCBConst2>)
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6808      	ldr	r0, [r1, #0]
 800e496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f380 8809 	msr	PSP, r0
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f04f 0000 	mov.w	r0, #0
 800e4a6:	f380 8811 	msr	BASEPRI, r0
 800e4aa:	4770      	bx	lr
 800e4ac:	f3af 8000 	nop.w

0800e4b0 <pxCurrentTCBConst2>:
 800e4b0:	2000596c 	.word	0x2000596c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4b8:	4808      	ldr	r0, [pc, #32]	; (800e4dc <prvPortStartFirstTask+0x24>)
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	6800      	ldr	r0, [r0, #0]
 800e4be:	f380 8808 	msr	MSP, r0
 800e4c2:	f04f 0000 	mov.w	r0, #0
 800e4c6:	f380 8814 	msr	CONTROL, r0
 800e4ca:	b662      	cpsie	i
 800e4cc:	b661      	cpsie	f
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	df00      	svc	0
 800e4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4da:	bf00      	nop
 800e4dc:	e000ed08 	.word	0xe000ed08

0800e4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4e6:	4b46      	ldr	r3, [pc, #280]	; (800e600 <xPortStartScheduler+0x120>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a46      	ldr	r2, [pc, #280]	; (800e604 <xPortStartScheduler+0x124>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d10a      	bne.n	800e506 <xPortStartScheduler+0x26>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	613b      	str	r3, [r7, #16]
}
 800e502:	bf00      	nop
 800e504:	e7fe      	b.n	800e504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e506:	4b3e      	ldr	r3, [pc, #248]	; (800e600 <xPortStartScheduler+0x120>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a3f      	ldr	r2, [pc, #252]	; (800e608 <xPortStartScheduler+0x128>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d10a      	bne.n	800e526 <xPortStartScheduler+0x46>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	60fb      	str	r3, [r7, #12]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e526:	4b39      	ldr	r3, [pc, #228]	; (800e60c <xPortStartScheduler+0x12c>)
 800e528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	22ff      	movs	r2, #255	; 0xff
 800e536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	4b31      	ldr	r3, [pc, #196]	; (800e610 <xPortStartScheduler+0x130>)
 800e54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e54e:	4b31      	ldr	r3, [pc, #196]	; (800e614 <xPortStartScheduler+0x134>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e554:	e009      	b.n	800e56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e556:	4b2f      	ldr	r3, [pc, #188]	; (800e614 <xPortStartScheduler+0x134>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	4a2d      	ldr	r2, [pc, #180]	; (800e614 <xPortStartScheduler+0x134>)
 800e55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	b2db      	uxtb	r3, r3
 800e568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e572:	2b80      	cmp	r3, #128	; 0x80
 800e574:	d0ef      	beq.n	800e556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e576:	4b27      	ldr	r3, [pc, #156]	; (800e614 <xPortStartScheduler+0x134>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f1c3 0307 	rsb	r3, r3, #7
 800e57e:	2b04      	cmp	r3, #4
 800e580:	d00a      	beq.n	800e598 <xPortStartScheduler+0xb8>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	60bb      	str	r3, [r7, #8]
}
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e598:	4b1e      	ldr	r3, [pc, #120]	; (800e614 <xPortStartScheduler+0x134>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	021b      	lsls	r3, r3, #8
 800e59e:	4a1d      	ldr	r2, [pc, #116]	; (800e614 <xPortStartScheduler+0x134>)
 800e5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5a2:	4b1c      	ldr	r3, [pc, #112]	; (800e614 <xPortStartScheduler+0x134>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5aa:	4a1a      	ldr	r2, [pc, #104]	; (800e614 <xPortStartScheduler+0x134>)
 800e5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5b6:	4b18      	ldr	r3, [pc, #96]	; (800e618 <xPortStartScheduler+0x138>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a17      	ldr	r2, [pc, #92]	; (800e618 <xPortStartScheduler+0x138>)
 800e5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5c2:	4b15      	ldr	r3, [pc, #84]	; (800e618 <xPortStartScheduler+0x138>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a14      	ldr	r2, [pc, #80]	; (800e618 <xPortStartScheduler+0x138>)
 800e5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5ce:	f000 f8dd 	bl	800e78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5d2:	4b12      	ldr	r3, [pc, #72]	; (800e61c <xPortStartScheduler+0x13c>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5d8:	f000 f8fc 	bl	800e7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5dc:	4b10      	ldr	r3, [pc, #64]	; (800e620 <xPortStartScheduler+0x140>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a0f      	ldr	r2, [pc, #60]	; (800e620 <xPortStartScheduler+0x140>)
 800e5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5e8:	f7ff ff66 	bl	800e4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5ec:	f7ff fa62 	bl	800dab4 <vTaskSwitchContext>
	prvTaskExitError();
 800e5f0:	f7ff ff22 	bl	800e438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	e000ed00 	.word	0xe000ed00
 800e604:	410fc271 	.word	0x410fc271
 800e608:	410fc270 	.word	0x410fc270
 800e60c:	e000e400 	.word	0xe000e400
 800e610:	20005a98 	.word	0x20005a98
 800e614:	20005a9c 	.word	0x20005a9c
 800e618:	e000ed20 	.word	0xe000ed20
 800e61c:	20000020 	.word	0x20000020
 800e620:	e000ef34 	.word	0xe000ef34

0800e624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	607b      	str	r3, [r7, #4]
}
 800e63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e63e:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <vPortEnterCritical+0x58>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	4a0d      	ldr	r2, [pc, #52]	; (800e67c <vPortEnterCritical+0x58>)
 800e646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e648:	4b0c      	ldr	r3, [pc, #48]	; (800e67c <vPortEnterCritical+0x58>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d10f      	bne.n	800e670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e650:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <vPortEnterCritical+0x5c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <vPortEnterCritical+0x4c>
	__asm volatile
 800e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65e:	f383 8811 	msr	BASEPRI, r3
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	603b      	str	r3, [r7, #0]
}
 800e66c:	bf00      	nop
 800e66e:	e7fe      	b.n	800e66e <vPortEnterCritical+0x4a>
	}
}
 800e670:	bf00      	nop
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	20000020 	.word	0x20000020
 800e680:	e000ed04 	.word	0xe000ed04

0800e684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e68a:	4b12      	ldr	r3, [pc, #72]	; (800e6d4 <vPortExitCritical+0x50>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <vPortExitCritical+0x24>
	__asm volatile
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	607b      	str	r3, [r7, #4]
}
 800e6a4:	bf00      	nop
 800e6a6:	e7fe      	b.n	800e6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e6a8:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <vPortExitCritical+0x50>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	4a09      	ldr	r2, [pc, #36]	; (800e6d4 <vPortExitCritical+0x50>)
 800e6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6b2:	4b08      	ldr	r3, [pc, #32]	; (800e6d4 <vPortExitCritical+0x50>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d105      	bne.n	800e6c6 <vPortExitCritical+0x42>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	f383 8811 	msr	BASEPRI, r3
}
 800e6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6c6:	bf00      	nop
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop
 800e6d4:	20000020 	.word	0x20000020
	...

0800e6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6e0:	f3ef 8009 	mrs	r0, PSP
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4b15      	ldr	r3, [pc, #84]	; (800e740 <pxCurrentTCBConst>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	f01e 0f10 	tst.w	lr, #16
 800e6f0:	bf08      	it	eq
 800e6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	6010      	str	r0, [r2, #0]
 800e6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e704:	f380 8811 	msr	BASEPRI, r0
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f7ff f9d0 	bl	800dab4 <vTaskSwitchContext>
 800e714:	f04f 0000 	mov.w	r0, #0
 800e718:	f380 8811 	msr	BASEPRI, r0
 800e71c:	bc09      	pop	{r0, r3}
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	6808      	ldr	r0, [r1, #0]
 800e722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e726:	f01e 0f10 	tst.w	lr, #16
 800e72a:	bf08      	it	eq
 800e72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e730:	f380 8809 	msr	PSP, r0
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	f3af 8000 	nop.w

0800e740 <pxCurrentTCBConst>:
 800e740:	2000596c 	.word	0x2000596c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop

0800e748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	607b      	str	r3, [r7, #4]
}
 800e760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e762:	f7ff f8ef 	bl	800d944 <xTaskIncrementTick>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e76c:	4b06      	ldr	r3, [pc, #24]	; (800e788 <SysTick_Handler+0x40>)
 800e76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	f383 8811 	msr	BASEPRI, r3
}
 800e77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e78c:	b480      	push	{r7}
 800e78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e790:	4b0b      	ldr	r3, [pc, #44]	; (800e7c0 <vPortSetupTimerInterrupt+0x34>)
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e796:	4b0b      	ldr	r3, [pc, #44]	; (800e7c4 <vPortSetupTimerInterrupt+0x38>)
 800e798:	2200      	movs	r2, #0
 800e79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e79c:	4b0a      	ldr	r3, [pc, #40]	; (800e7c8 <vPortSetupTimerInterrupt+0x3c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a0a      	ldr	r2, [pc, #40]	; (800e7cc <vPortSetupTimerInterrupt+0x40>)
 800e7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a6:	099b      	lsrs	r3, r3, #6
 800e7a8:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <vPortSetupTimerInterrupt+0x44>)
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7ae:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <vPortSetupTimerInterrupt+0x34>)
 800e7b0:	2207      	movs	r2, #7
 800e7b2:	601a      	str	r2, [r3, #0]
}
 800e7b4:	bf00      	nop
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	e000e010 	.word	0xe000e010
 800e7c4:	e000e018 	.word	0xe000e018
 800e7c8:	20000000 	.word	0x20000000
 800e7cc:	10624dd3 	.word	0x10624dd3
 800e7d0:	e000e014 	.word	0xe000e014

0800e7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7e4 <vPortEnableVFP+0x10>
 800e7d8:	6801      	ldr	r1, [r0, #0]
 800e7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7de:	6001      	str	r1, [r0, #0]
 800e7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7e2:	bf00      	nop
 800e7e4:	e000ed88 	.word	0xe000ed88

0800e7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7ee:	f3ef 8305 	mrs	r3, IPSR
 800e7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b0f      	cmp	r3, #15
 800e7f8:	d914      	bls.n	800e824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7fa:	4a17      	ldr	r2, [pc, #92]	; (800e858 <vPortValidateInterruptPriority+0x70>)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e804:	4b15      	ldr	r3, [pc, #84]	; (800e85c <vPortValidateInterruptPriority+0x74>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	7afa      	ldrb	r2, [r7, #11]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d20a      	bcs.n	800e824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	607b      	str	r3, [r7, #4]
}
 800e820:	bf00      	nop
 800e822:	e7fe      	b.n	800e822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e824:	4b0e      	ldr	r3, [pc, #56]	; (800e860 <vPortValidateInterruptPriority+0x78>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e82c:	4b0d      	ldr	r3, [pc, #52]	; (800e864 <vPortValidateInterruptPriority+0x7c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d90a      	bls.n	800e84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	603b      	str	r3, [r7, #0]
}
 800e846:	bf00      	nop
 800e848:	e7fe      	b.n	800e848 <vPortValidateInterruptPriority+0x60>
	}
 800e84a:	bf00      	nop
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	e000e3f0 	.word	0xe000e3f0
 800e85c:	20005a98 	.word	0x20005a98
 800e860:	e000ed0c 	.word	0xe000ed0c
 800e864:	20005a9c 	.word	0x20005a9c

0800e868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08a      	sub	sp, #40	; 0x28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e870:	2300      	movs	r3, #0
 800e872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e874:	f7fe ff9a 	bl	800d7ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e878:	4b5b      	ldr	r3, [pc, #364]	; (800e9e8 <pvPortMalloc+0x180>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e880:	f000 f920 	bl	800eac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e884:	4b59      	ldr	r3, [pc, #356]	; (800e9ec <pvPortMalloc+0x184>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4013      	ands	r3, r2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f040 8093 	bne.w	800e9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d01d      	beq.n	800e8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e898:	2208      	movs	r2, #8
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4413      	add	r3, r2
 800e89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f003 0307 	and.w	r3, r3, #7
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d014      	beq.n	800e8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f023 0307 	bic.w	r3, r3, #7
 800e8b0:	3308      	adds	r3, #8
 800e8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00a      	beq.n	800e8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c2:	f383 8811 	msr	BASEPRI, r3
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	617b      	str	r3, [r7, #20]
}
 800e8d0:	bf00      	nop
 800e8d2:	e7fe      	b.n	800e8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d06e      	beq.n	800e9b8 <pvPortMalloc+0x150>
 800e8da:	4b45      	ldr	r3, [pc, #276]	; (800e9f0 <pvPortMalloc+0x188>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d869      	bhi.n	800e9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8e4:	4b43      	ldr	r3, [pc, #268]	; (800e9f4 <pvPortMalloc+0x18c>)
 800e8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8e8:	4b42      	ldr	r3, [pc, #264]	; (800e9f4 <pvPortMalloc+0x18c>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ee:	e004      	b.n	800e8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d903      	bls.n	800e90c <pvPortMalloc+0xa4>
 800e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1f1      	bne.n	800e8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e90c:	4b36      	ldr	r3, [pc, #216]	; (800e9e8 <pvPortMalloc+0x180>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e912:	429a      	cmp	r2, r3
 800e914:	d050      	beq.n	800e9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2208      	movs	r2, #8
 800e91c:	4413      	add	r3, r2
 800e91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	2308      	movs	r3, #8
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	429a      	cmp	r2, r3
 800e936:	d91f      	bls.n	800e978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4413      	add	r3, r2
 800e93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	f003 0307 	and.w	r3, r3, #7
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <pvPortMalloc+0xf8>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	613b      	str	r3, [r7, #16]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	685a      	ldr	r2, [r3, #4]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	1ad2      	subs	r2, r2, r3
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e972:	69b8      	ldr	r0, [r7, #24]
 800e974:	f000 f908 	bl	800eb88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e978:	4b1d      	ldr	r3, [pc, #116]	; (800e9f0 <pvPortMalloc+0x188>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	4a1b      	ldr	r2, [pc, #108]	; (800e9f0 <pvPortMalloc+0x188>)
 800e984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e986:	4b1a      	ldr	r3, [pc, #104]	; (800e9f0 <pvPortMalloc+0x188>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	4b1b      	ldr	r3, [pc, #108]	; (800e9f8 <pvPortMalloc+0x190>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d203      	bcs.n	800e99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e992:	4b17      	ldr	r3, [pc, #92]	; (800e9f0 <pvPortMalloc+0x188>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a18      	ldr	r2, [pc, #96]	; (800e9f8 <pvPortMalloc+0x190>)
 800e998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	4b13      	ldr	r3, [pc, #76]	; (800e9ec <pvPortMalloc+0x184>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	431a      	orrs	r2, r3
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <pvPortMalloc+0x194>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	4a11      	ldr	r2, [pc, #68]	; (800e9fc <pvPortMalloc+0x194>)
 800e9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9b8:	f7fe ff06 	bl	800d7c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	f003 0307 	and.w	r3, r3, #7
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <pvPortMalloc+0x174>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	60fb      	str	r3, [r7, #12]
}
 800e9d8:	bf00      	nop
 800e9da:	e7fe      	b.n	800e9da <pvPortMalloc+0x172>
	return pvReturn;
 800e9dc:	69fb      	ldr	r3, [r7, #28]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3728      	adds	r7, #40	; 0x28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	2000daa8 	.word	0x2000daa8
 800e9ec:	2000dabc 	.word	0x2000dabc
 800e9f0:	2000daac 	.word	0x2000daac
 800e9f4:	2000daa0 	.word	0x2000daa0
 800e9f8:	2000dab0 	.word	0x2000dab0
 800e9fc:	2000dab4 	.word	0x2000dab4

0800ea00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d04d      	beq.n	800eaae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea12:	2308      	movs	r3, #8
 800ea14:	425b      	negs	r3, r3
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4413      	add	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	4b24      	ldr	r3, [pc, #144]	; (800eab8 <vPortFree+0xb8>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10a      	bne.n	800ea44 <vPortFree+0x44>
	__asm volatile
 800ea2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	60fb      	str	r3, [r7, #12]
}
 800ea40:	bf00      	nop
 800ea42:	e7fe      	b.n	800ea42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00a      	beq.n	800ea62 <vPortFree+0x62>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	60bb      	str	r3, [r7, #8]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	4b14      	ldr	r3, [pc, #80]	; (800eab8 <vPortFree+0xb8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d01e      	beq.n	800eaae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d11a      	bne.n	800eaae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	685a      	ldr	r2, [r3, #4]
 800ea7c:	4b0e      	ldr	r3, [pc, #56]	; (800eab8 <vPortFree+0xb8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	43db      	mvns	r3, r3
 800ea82:	401a      	ands	r2, r3
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea88:	f7fe fe90 	bl	800d7ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	4b0a      	ldr	r3, [pc, #40]	; (800eabc <vPortFree+0xbc>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4413      	add	r3, r2
 800ea96:	4a09      	ldr	r2, [pc, #36]	; (800eabc <vPortFree+0xbc>)
 800ea98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea9a:	6938      	ldr	r0, [r7, #16]
 800ea9c:	f000 f874 	bl	800eb88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eaa0:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <vPortFree+0xc0>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	4a06      	ldr	r2, [pc, #24]	; (800eac0 <vPortFree+0xc0>)
 800eaa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eaaa:	f7fe fe8d 	bl	800d7c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaae:	bf00      	nop
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	2000dabc 	.word	0x2000dabc
 800eabc:	2000daac 	.word	0x2000daac
 800eac0:	2000dab8 	.word	0x2000dab8

0800eac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eaca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ead0:	4b27      	ldr	r3, [pc, #156]	; (800eb70 <prvHeapInit+0xac>)
 800ead2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f003 0307 	and.w	r3, r3, #7
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00c      	beq.n	800eaf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3307      	adds	r3, #7
 800eae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f023 0307 	bic.w	r3, r3, #7
 800eaea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	4a1f      	ldr	r2, [pc, #124]	; (800eb70 <prvHeapInit+0xac>)
 800eaf4:	4413      	add	r3, r2
 800eaf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eafc:	4a1d      	ldr	r2, [pc, #116]	; (800eb74 <prvHeapInit+0xb0>)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb02:	4b1c      	ldr	r3, [pc, #112]	; (800eb74 <prvHeapInit+0xb0>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb10:	2208      	movs	r2, #8
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	1a9b      	subs	r3, r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f023 0307 	bic.w	r3, r3, #7
 800eb1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	4a15      	ldr	r2, [pc, #84]	; (800eb78 <prvHeapInit+0xb4>)
 800eb24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb26:	4b14      	ldr	r3, [pc, #80]	; (800eb78 <prvHeapInit+0xb4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb2e:	4b12      	ldr	r3, [pc, #72]	; (800eb78 <prvHeapInit+0xb4>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2200      	movs	r2, #0
 800eb34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	1ad2      	subs	r2, r2, r3
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb44:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <prvHeapInit+0xb4>)
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	4a0a      	ldr	r2, [pc, #40]	; (800eb7c <prvHeapInit+0xb8>)
 800eb52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	4a09      	ldr	r2, [pc, #36]	; (800eb80 <prvHeapInit+0xbc>)
 800eb5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb5c:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <prvHeapInit+0xc0>)
 800eb5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb62:	601a      	str	r2, [r3, #0]
}
 800eb64:	bf00      	nop
 800eb66:	3714      	adds	r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	20005aa0 	.word	0x20005aa0
 800eb74:	2000daa0 	.word	0x2000daa0
 800eb78:	2000daa8 	.word	0x2000daa8
 800eb7c:	2000dab0 	.word	0x2000dab0
 800eb80:	2000daac 	.word	0x2000daac
 800eb84:	2000dabc 	.word	0x2000dabc

0800eb88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb90:	4b28      	ldr	r3, [pc, #160]	; (800ec34 <prvInsertBlockIntoFreeList+0xac>)
 800eb92:	60fb      	str	r3, [r7, #12]
 800eb94:	e002      	b.n	800eb9c <prvInsertBlockIntoFreeList+0x14>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d8f7      	bhi.n	800eb96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d108      	bne.n	800ebca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	441a      	add	r2, r3
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d118      	bne.n	800ec10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	4b15      	ldr	r3, [pc, #84]	; (800ec38 <prvInsertBlockIntoFreeList+0xb0>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d00d      	beq.n	800ec06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	441a      	add	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	e008      	b.n	800ec18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec06:	4b0c      	ldr	r3, [pc, #48]	; (800ec38 <prvInsertBlockIntoFreeList+0xb0>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	601a      	str	r2, [r3, #0]
 800ec0e:	e003      	b.n	800ec18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d002      	beq.n	800ec26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec26:	bf00      	nop
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	2000daa0 	.word	0x2000daa0
 800ec38:	2000daa8 	.word	0x2000daa8

0800ec3c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	330c      	adds	r3, #12
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f002 fa73 	bl	801113c <tcpip_send_msg_wait_sem>
 800ec56:	4603      	mov	r3, r0
 800ec58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ec5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d103      	bne.n	800ec6a <netconn_apimsg+0x2e>
    return apimsg->err;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ec68:	e001      	b.n	800ec6e <netconn_apimsg+0x32>
  }
  return err;
 800ec6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
	...

0800ec78 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08c      	sub	sp, #48	; 0x30
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	4603      	mov	r3, r0
 800ec80:	603a      	str	r2, [r7, #0]
 800ec82:	71fb      	strb	r3, [r7, #7]
 800ec84:	460b      	mov	r3, r1
 800ec86:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ec88:	79fb      	ldrb	r3, [r7, #7]
 800ec8a:	6839      	ldr	r1, [r7, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f001 f923 	bl	800fed8 <netconn_alloc>
 800ec92:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ec94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d054      	beq.n	800ed44 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ec9a:	79bb      	ldrb	r3, [r7, #6]
 800ec9c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800eca2:	f107 0308 	add.w	r3, r7, #8
 800eca6:	4619      	mov	r1, r3
 800eca8:	4829      	ldr	r0, [pc, #164]	; (800ed50 <netconn_new_with_proto_and_callback+0xd8>)
 800ecaa:	f7ff ffc7 	bl	800ec3c <netconn_apimsg>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ecb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d043      	beq.n	800ed44 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ecbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d005      	beq.n	800ecd0 <netconn_new_with_proto_and_callback+0x58>
 800ecc4:	4b23      	ldr	r3, [pc, #140]	; (800ed54 <netconn_new_with_proto_and_callback+0xdc>)
 800ecc6:	22a3      	movs	r2, #163	; 0xa3
 800ecc8:	4923      	ldr	r1, [pc, #140]	; (800ed58 <netconn_new_with_proto_and_callback+0xe0>)
 800ecca:	4824      	ldr	r0, [pc, #144]	; (800ed5c <netconn_new_with_proto_and_callback+0xe4>)
 800eccc:	f00e f9fe 	bl	801d0cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ecd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd2:	3310      	adds	r3, #16
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f00d f9d4 	bl	801c082 <sys_mbox_valid>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d105      	bne.n	800ecec <netconn_new_with_proto_and_callback+0x74>
 800ece0:	4b1c      	ldr	r3, [pc, #112]	; (800ed54 <netconn_new_with_proto_and_callback+0xdc>)
 800ece2:	22a4      	movs	r2, #164	; 0xa4
 800ece4:	491e      	ldr	r1, [pc, #120]	; (800ed60 <netconn_new_with_proto_and_callback+0xe8>)
 800ece6:	481d      	ldr	r0, [pc, #116]	; (800ed5c <netconn_new_with_proto_and_callback+0xe4>)
 800ece8:	f00e f9f0 	bl	801d0cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	3314      	adds	r3, #20
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f00d f9c6 	bl	801c082 <sys_mbox_valid>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <netconn_new_with_proto_and_callback+0x90>
 800ecfc:	4b15      	ldr	r3, [pc, #84]	; (800ed54 <netconn_new_with_proto_and_callback+0xdc>)
 800ecfe:	22a6      	movs	r2, #166	; 0xa6
 800ed00:	4918      	ldr	r1, [pc, #96]	; (800ed64 <netconn_new_with_proto_and_callback+0xec>)
 800ed02:	4816      	ldr	r0, [pc, #88]	; (800ed5c <netconn_new_with_proto_and_callback+0xe4>)
 800ed04:	f00e f9e2 	bl	801d0cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0a:	330c      	adds	r3, #12
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f00d fa49 	bl	801c1a4 <sys_sem_valid>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d105      	bne.n	800ed24 <netconn_new_with_proto_and_callback+0xac>
 800ed18:	4b0e      	ldr	r3, [pc, #56]	; (800ed54 <netconn_new_with_proto_and_callback+0xdc>)
 800ed1a:	22a9      	movs	r2, #169	; 0xa9
 800ed1c:	4912      	ldr	r1, [pc, #72]	; (800ed68 <netconn_new_with_proto_and_callback+0xf0>)
 800ed1e:	480f      	ldr	r0, [pc, #60]	; (800ed5c <netconn_new_with_proto_and_callback+0xe4>)
 800ed20:	f00e f9d4 	bl	801d0cc <iprintf>
      sys_sem_free(&conn->op_completed);
 800ed24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed26:	330c      	adds	r3, #12
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f00d fa2e 	bl	801c18a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	3310      	adds	r3, #16
 800ed32:	4618      	mov	r0, r3
 800ed34:	f00d f91e 	bl	801bf74 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ed38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed3a:	2007      	movs	r0, #7
 800ed3c:	f002 fff4 	bl	8011d28 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	e000      	b.n	800ed46 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3730      	adds	r7, #48	; 0x30
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	0800fead 	.word	0x0800fead
 800ed54:	0801f67c 	.word	0x0801f67c
 800ed58:	0801f6b0 	.word	0x0801f6b0
 800ed5c:	0801f6d4 	.word	0x0801f6d4
 800ed60:	0801f6fc 	.word	0x0801f6fc
 800ed64:	0801f714 	.word	0x0801f714
 800ed68:	0801f738 	.word	0x0801f738

0800ed6c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b08c      	sub	sp, #48	; 0x30
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d101      	bne.n	800ed7e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e014      	b.n	800eda8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ed82:	2329      	movs	r3, #41	; 0x29
 800ed84:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ed86:	f107 030c 	add.w	r3, r7, #12
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4808      	ldr	r0, [pc, #32]	; (800edb0 <netconn_prepare_delete+0x44>)
 800ed8e:	f7ff ff55 	bl	800ec3c <netconn_apimsg>
 800ed92:	4603      	mov	r3, r0
 800ed94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ed98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d002      	beq.n	800eda6 <netconn_prepare_delete+0x3a>
    return err;
 800eda0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800eda4:	e000      	b.n	800eda8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3730      	adds	r7, #48	; 0x30
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	08010419 	.word	0x08010419

0800edb4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <netconn_delete+0x12>
    return ERR_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	e00d      	b.n	800ede2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff ffd0 	bl	800ed6c <netconn_prepare_delete>
 800edcc:	4603      	mov	r3, r0
 800edce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800edd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d102      	bne.n	800edde <netconn_delete+0x2a>
    netconn_free(conn);
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f001 f8eb 	bl	800ffb4 <netconn_free>
  }
  return err;
 800edde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
	...

0800edec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08e      	sub	sp, #56	; 0x38
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d109      	bne.n	800ee14 <netconn_bind+0x28>
 800ee00:	4b11      	ldr	r3, [pc, #68]	; (800ee48 <netconn_bind+0x5c>)
 800ee02:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ee06:	4911      	ldr	r1, [pc, #68]	; (800ee4c <netconn_bind+0x60>)
 800ee08:	4811      	ldr	r0, [pc, #68]	; (800ee50 <netconn_bind+0x64>)
 800ee0a:	f00e f95f 	bl	801d0cc <iprintf>
 800ee0e:	f06f 030f 	mvn.w	r3, #15
 800ee12:	e015      	b.n	800ee40 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ee1a:	4b0e      	ldr	r3, [pc, #56]	; (800ee54 <netconn_bind+0x68>)
 800ee1c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ee26:	88fb      	ldrh	r3, [r7, #6]
 800ee28:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ee2a:	f107 0314 	add.w	r3, r7, #20
 800ee2e:	4619      	mov	r1, r3
 800ee30:	4809      	ldr	r0, [pc, #36]	; (800ee58 <netconn_bind+0x6c>)
 800ee32:	f7ff ff03 	bl	800ec3c <netconn_apimsg>
 800ee36:	4603      	mov	r3, r0
 800ee38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ee3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3738      	adds	r7, #56	; 0x38
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	0801f67c 	.word	0x0801f67c
 800ee4c:	0801f7b4 	.word	0x0801f7b4
 800ee50:	0801f6d4 	.word	0x0801f6d4
 800ee54:	080245c0 	.word	0x080245c0
 800ee58:	080105e1 	.word	0x080105e1

0800ee5c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08c      	sub	sp, #48	; 0x30
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d109      	bne.n	800ee82 <netconn_listen_with_backlog+0x26>
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <netconn_listen_with_backlog+0x48>)
 800ee70:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ee74:	490c      	ldr	r1, [pc, #48]	; (800eea8 <netconn_listen_with_backlog+0x4c>)
 800ee76:	480d      	ldr	r0, [pc, #52]	; (800eeac <netconn_listen_with_backlog+0x50>)
 800ee78:	f00e f928 	bl	801d0cc <iprintf>
 800ee7c:	f06f 030f 	mvn.w	r3, #15
 800ee80:	e00c      	b.n	800ee9c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ee86:	f107 030c 	add.w	r3, r7, #12
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	4808      	ldr	r0, [pc, #32]	; (800eeb0 <netconn_listen_with_backlog+0x54>)
 800ee8e:	f7ff fed5 	bl	800ec3c <netconn_apimsg>
 800ee92:	4603      	mov	r3, r0
 800ee94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ee98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3730      	adds	r7, #48	; 0x30
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	0801f67c 	.word	0x0801f67c
 800eea8:	0801f834 	.word	0x0801f834
 800eeac:	0801f6d4 	.word	0x0801f6d4
 800eeb0:	08010655 	.word	0x08010655

0800eeb4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d109      	bne.n	800eed8 <netconn_accept+0x24>
 800eec4:	4b3d      	ldr	r3, [pc, #244]	; (800efbc <netconn_accept+0x108>)
 800eec6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eeca:	493d      	ldr	r1, [pc, #244]	; (800efc0 <netconn_accept+0x10c>)
 800eecc:	483d      	ldr	r0, [pc, #244]	; (800efc4 <netconn_accept+0x110>)
 800eece:	f00e f8fd 	bl	801d0cc <iprintf>
 800eed2:	f06f 030f 	mvn.w	r3, #15
 800eed6:	e06c      	b.n	800efb2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2200      	movs	r2, #0
 800eedc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d109      	bne.n	800eef8 <netconn_accept+0x44>
 800eee4:	4b35      	ldr	r3, [pc, #212]	; (800efbc <netconn_accept+0x108>)
 800eee6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800eeea:	4937      	ldr	r1, [pc, #220]	; (800efc8 <netconn_accept+0x114>)
 800eeec:	4835      	ldr	r0, [pc, #212]	; (800efc4 <netconn_accept+0x110>)
 800eeee:	f00e f8ed 	bl	801d0cc <iprintf>
 800eef2:	f06f 030f 	mvn.w	r3, #15
 800eef6:	e05c      	b.n	800efb2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 fb6c 	bl	800f5d6 <netconn_err>
 800eefe:	4603      	mov	r3, r0
 800ef00:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ef02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d002      	beq.n	800ef10 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ef0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef0e:	e050      	b.n	800efb2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3314      	adds	r3, #20
 800ef14:	4618      	mov	r0, r3
 800ef16:	f00d f8b4 	bl	801c082 <sys_mbox_valid>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <netconn_accept+0x78>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	7f1b      	ldrb	r3, [r3, #28]
 800ef24:	f003 0301 	and.w	r3, r3, #1
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800ef2c:	f06f 030e 	mvn.w	r3, #14
 800ef30:	e03f      	b.n	800efb2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7f1b      	ldrb	r3, [r3, #28]
 800ef36:	f003 0302 	and.w	r3, r3, #2
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00e      	beq.n	800ef5c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3314      	adds	r3, #20
 800ef42:	f107 020c 	add.w	r2, r7, #12
 800ef46:	4611      	mov	r1, r2
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f00d f87e 	bl	801c04a <sys_arch_mbox_tryfetch>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef54:	d10a      	bne.n	800ef6c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ef56:	f06f 0306 	mvn.w	r3, #6
 800ef5a:	e02a      	b.n	800efb2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	3314      	adds	r3, #20
 800ef60:	f107 010c 	add.w	r1, r7, #12
 800ef64:	2200      	movs	r2, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f00d f830 	bl	801bfcc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d005      	beq.n	800ef80 <netconn_accept+0xcc>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef78:	2200      	movs	r2, #0
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f107 0213 	add.w	r2, r7, #19
 800ef86:	4611      	mov	r1, r2
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 fb75 	bl	800f678 <lwip_netconn_is_err_msg>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ef94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef98:	e00b      	b.n	800efb2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d102      	bne.n	800efa6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800efa0:	f06f 030e 	mvn.w	r3, #14
 800efa4:	e005      	b.n	800efb2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	697a      	ldr	r2, [r7, #20]
 800efae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800efb0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3718      	adds	r7, #24
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	0801f67c 	.word	0x0801f67c
 800efc0:	0801f854 	.word	0x0801f854
 800efc4:	0801f6d4 	.word	0x0801f6d4
 800efc8:	0801f874 	.word	0x0801f874

0800efcc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b088      	sub	sp, #32
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	4613      	mov	r3, r2
 800efd8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800efda:	2300      	movs	r3, #0
 800efdc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d109      	bne.n	800eff8 <netconn_recv_data+0x2c>
 800efe4:	4b58      	ldr	r3, [pc, #352]	; (800f148 <netconn_recv_data+0x17c>)
 800efe6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800efea:	4958      	ldr	r1, [pc, #352]	; (800f14c <netconn_recv_data+0x180>)
 800efec:	4858      	ldr	r0, [pc, #352]	; (800f150 <netconn_recv_data+0x184>)
 800efee:	f00e f86d 	bl	801d0cc <iprintf>
 800eff2:	f06f 030f 	mvn.w	r3, #15
 800eff6:	e0a2      	b.n	800f13e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2200      	movs	r2, #0
 800effc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d109      	bne.n	800f018 <netconn_recv_data+0x4c>
 800f004:	4b50      	ldr	r3, [pc, #320]	; (800f148 <netconn_recv_data+0x17c>)
 800f006:	f240 224a 	movw	r2, #586	; 0x24a
 800f00a:	4952      	ldr	r1, [pc, #328]	; (800f154 <netconn_recv_data+0x188>)
 800f00c:	4850      	ldr	r0, [pc, #320]	; (800f150 <netconn_recv_data+0x184>)
 800f00e:	f00e f85d 	bl	801d0cc <iprintf>
 800f012:	f06f 030f 	mvn.w	r3, #15
 800f016:	e092      	b.n	800f13e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	3310      	adds	r3, #16
 800f01c:	4618      	mov	r0, r3
 800f01e:	f00d f830 	bl	801c082 <sys_mbox_valid>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10e      	bne.n	800f046 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 fad4 	bl	800f5d6 <netconn_err>
 800f02e:	4603      	mov	r3, r0
 800f030:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800f032:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d002      	beq.n	800f040 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800f03a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800f03e:	e07e      	b.n	800f13e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800f040:	f06f 030a 	mvn.w	r3, #10
 800f044:	e07b      	b.n	800f13e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	7f1b      	ldrb	r3, [r3, #28]
 800f04a:	f003 0302 	and.w	r3, r3, #2
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d10f      	bne.n	800f072 <netconn_recv_data+0xa6>
 800f052:	79fb      	ldrb	r3, [r7, #7]
 800f054:	f003 0304 	and.w	r3, r3, #4
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10a      	bne.n	800f072 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	7f1b      	ldrb	r3, [r3, #28]
 800f060:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800f064:	2b00      	cmp	r3, #0
 800f066:	d104      	bne.n	800f072 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d023      	beq.n	800f0ba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3310      	adds	r3, #16
 800f076:	f107 0218 	add.w	r2, r7, #24
 800f07a:	4611      	mov	r1, r2
 800f07c:	4618      	mov	r0, r3
 800f07e:	f00c ffe4 	bl	801c04a <sys_arch_mbox_tryfetch>
 800f082:	4603      	mov	r3, r0
 800f084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f088:	d11f      	bne.n	800f0ca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f000 faa3 	bl	800f5d6 <netconn_err>
 800f090:	4603      	mov	r3, r0
 800f092:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f094:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d002      	beq.n	800f0a2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f09c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f0a0:	e04d      	b.n	800f13e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	7f1b      	ldrb	r3, [r3, #28]
 800f0a6:	f003 0301 	and.w	r3, r3, #1
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d002      	beq.n	800f0b4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f0ae:	f06f 030a 	mvn.w	r3, #10
 800f0b2:	e044      	b.n	800f13e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f0b4:	f06f 0306 	mvn.w	r3, #6
 800f0b8:	e041      	b.n	800f13e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	3310      	adds	r3, #16
 800f0be:	f107 0118 	add.w	r1, r7, #24
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f00c ff81 	bl	801bfcc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0d2:	2b10      	cmp	r3, #16
 800f0d4:	d117      	bne.n	800f106 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	f107 0217 	add.w	r2, r7, #23
 800f0dc:	4611      	mov	r1, r2
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 faca 	bl	800f678 <lwip_netconn_is_err_msg>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d009      	beq.n	800f0fe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0ee:	f113 0f0f 	cmn.w	r3, #15
 800f0f2:	d101      	bne.n	800f0f8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	e022      	b.n	800f13e <netconn_recv_data+0x172>
      }
      return err;
 800f0f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0fc:	e01f      	b.n	800f13e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	891b      	ldrh	r3, [r3, #8]
 800f102:	83fb      	strh	r3, [r7, #30]
 800f104:	e00d      	b.n	800f122 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <netconn_recv_data+0x14e>
 800f10c:	4b0e      	ldr	r3, [pc, #56]	; (800f148 <netconn_recv_data+0x17c>)
 800f10e:	f240 2291 	movw	r2, #657	; 0x291
 800f112:	4911      	ldr	r1, [pc, #68]	; (800f158 <netconn_recv_data+0x18c>)
 800f114:	480e      	ldr	r0, [pc, #56]	; (800f150 <netconn_recv_data+0x184>)
 800f116:	f00d ffd9 	bl	801d0cc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	891b      	ldrh	r3, [r3, #8]
 800f120:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f126:	2b00      	cmp	r3, #0
 800f128:	d005      	beq.n	800f136 <netconn_recv_data+0x16a>
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12e:	8bfa      	ldrh	r2, [r7, #30]
 800f130:	2101      	movs	r1, #1
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f136:	69ba      	ldr	r2, [r7, #24]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3720      	adds	r7, #32
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	0801f67c 	.word	0x0801f67c
 800f14c:	0801f894 	.word	0x0801f894
 800f150:	0801f6d4 	.word	0x0801f6d4
 800f154:	0801f8b4 	.word	0x0801f8b4
 800f158:	0801f8d0 	.word	0x0801f8d0

0800f15c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d005      	beq.n	800f17a <netconn_tcp_recvd_msg+0x1e>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f176:	2b10      	cmp	r3, #16
 800f178:	d009      	beq.n	800f18e <netconn_tcp_recvd_msg+0x32>
 800f17a:	4b0c      	ldr	r3, [pc, #48]	; (800f1ac <netconn_tcp_recvd_msg+0x50>)
 800f17c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800f180:	490b      	ldr	r1, [pc, #44]	; (800f1b0 <netconn_tcp_recvd_msg+0x54>)
 800f182:	480c      	ldr	r0, [pc, #48]	; (800f1b4 <netconn_tcp_recvd_msg+0x58>)
 800f184:	f00d ffa2 	bl	801d0cc <iprintf>
 800f188:	f06f 030f 	mvn.w	r3, #15
 800f18c:	e00a      	b.n	800f1a4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f19a:	6879      	ldr	r1, [r7, #4]
 800f19c:	4806      	ldr	r0, [pc, #24]	; (800f1b8 <netconn_tcp_recvd_msg+0x5c>)
 800f19e:	f7ff fd4d 	bl	800ec3c <netconn_apimsg>
 800f1a2:	4603      	mov	r3, r0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	0801f67c 	.word	0x0801f67c
 800f1b0:	0801f8dc 	.word	0x0801f8dc
 800f1b4:	0801f6d4 	.word	0x0801f6d4
 800f1b8:	08010785 	.word	0x08010785

0800f1bc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b090      	sub	sp, #64	; 0x40
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	3310      	adds	r3, #16
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f00c ff57 	bl	801c082 <sys_mbox_valid>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d102      	bne.n	800f1e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f1da:	f06f 030a 	mvn.w	r3, #10
 800f1de:	e06d      	b.n	800f2bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	7f1b      	ldrb	r3, [r3, #28]
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	da07      	bge.n	800f1fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	7f1b      	ldrb	r3, [r3, #28]
 800f1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f1f8:	e039      	b.n	800f26e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f1fa:	79fb      	ldrb	r3, [r7, #7]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	68b9      	ldr	r1, [r7, #8]
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f7ff fee3 	bl	800efcc <netconn_recv_data>
 800f206:	4603      	mov	r3, r0
 800f208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800f20c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f210:	2b00      	cmp	r3, #0
 800f212:	d002      	beq.n	800f21a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f214:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f218:	e050      	b.n	800f2bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	f003 0308 	and.w	r3, r3, #8
 800f226:	2b00      	cmp	r3, #0
 800f228:	d10e      	bne.n	800f248 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <netconn_recv_data_tcp+0x7a>
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	891b      	ldrh	r3, [r3, #8]
 800f234:	e000      	b.n	800f238 <netconn_recv_data_tcp+0x7c>
 800f236:	2301      	movs	r3, #1
 800f238:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f23a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f23c:	f107 0214 	add.w	r2, r7, #20
 800f240:	4619      	mov	r1, r3
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f7ff ff8a 	bl	800f15c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d134      	bne.n	800f2b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	f003 0310 	and.w	r3, r3, #16
 800f254:	2b00      	cmp	r3, #0
 800f256:	d009      	beq.n	800f26c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	7f1b      	ldrb	r3, [r3, #28]
 800f25c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f260:	b2da      	uxtb	r2, r3
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f266:	f06f 0306 	mvn.w	r3, #6
 800f26a:	e027      	b.n	800f2bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f26c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	2b00      	cmp	r3, #0
 800f274:	d005      	beq.n	800f282 <netconn_recv_data_tcp+0xc6>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	2200      	movs	r2, #0
 800f27c:	2101      	movs	r1, #1
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10f      	bne.n	800f2aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 f9a3 	bl	800f5d6 <netconn_err>
 800f290:	4603      	mov	r3, r0
 800f292:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800f296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d002      	beq.n	800f2a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800f29e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f2a2:	e00b      	b.n	800f2bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f2a4:	f06f 030d 	mvn.w	r3, #13
 800f2a8:	e008      	b.n	800f2bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f2aa:	2101      	movs	r1, #1
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f000 f955 	bl	800f55c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f2b2:	f06f 030e 	mvn.w	r3, #14
 800f2b6:	e001      	b.n	800f2bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f2b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3740      	adds	r7, #64	; 0x40
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d109      	bne.n	800f2ec <netconn_recv+0x28>
 800f2d8:	4b32      	ldr	r3, [pc, #200]	; (800f3a4 <netconn_recv+0xe0>)
 800f2da:	f240 3263 	movw	r2, #867	; 0x363
 800f2de:	4932      	ldr	r1, [pc, #200]	; (800f3a8 <netconn_recv+0xe4>)
 800f2e0:	4832      	ldr	r0, [pc, #200]	; (800f3ac <netconn_recv+0xe8>)
 800f2e2:	f00d fef3 	bl	801d0cc <iprintf>
 800f2e6:	f06f 030f 	mvn.w	r3, #15
 800f2ea:	e056      	b.n	800f39a <netconn_recv+0xd6>
  *new_buf = NULL;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d109      	bne.n	800f30c <netconn_recv+0x48>
 800f2f8:	4b2a      	ldr	r3, [pc, #168]	; (800f3a4 <netconn_recv+0xe0>)
 800f2fa:	f240 3265 	movw	r2, #869	; 0x365
 800f2fe:	492c      	ldr	r1, [pc, #176]	; (800f3b0 <netconn_recv+0xec>)
 800f300:	482a      	ldr	r0, [pc, #168]	; (800f3ac <netconn_recv+0xe8>)
 800f302:	f00d fee3 	bl	801d0cc <iprintf>
 800f306:	f06f 030f 	mvn.w	r3, #15
 800f30a:	e046      	b.n	800f39a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f314:	2b10      	cmp	r3, #16
 800f316:	d13a      	bne.n	800f38e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f318:	2300      	movs	r3, #0
 800f31a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f31c:	2006      	movs	r0, #6
 800f31e:	f002 fc8d 	bl	8011c3c <memp_malloc>
 800f322:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <netconn_recv+0x6c>
      return ERR_MEM;
 800f32a:	f04f 33ff 	mov.w	r3, #4294967295
 800f32e:	e034      	b.n	800f39a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f330:	f107 030c 	add.w	r3, r7, #12
 800f334:	2200      	movs	r2, #0
 800f336:	4619      	mov	r1, r3
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff ff3f 	bl	800f1bc <netconn_recv_data_tcp>
 800f33e:	4603      	mov	r3, r0
 800f340:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d006      	beq.n	800f358 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f34a:	6979      	ldr	r1, [r7, #20]
 800f34c:	2006      	movs	r0, #6
 800f34e:	f002 fceb 	bl	8011d28 <memp_free>
      return err;
 800f352:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f356:	e020      	b.n	800f39a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <netconn_recv+0xa8>
 800f35e:	4b11      	ldr	r3, [pc, #68]	; (800f3a4 <netconn_recv+0xe0>)
 800f360:	f240 3279 	movw	r2, #889	; 0x379
 800f364:	4913      	ldr	r1, [pc, #76]	; (800f3b4 <netconn_recv+0xf0>)
 800f366:	4811      	ldr	r0, [pc, #68]	; (800f3ac <netconn_recv+0xe8>)
 800f368:	f00d feb0 	bl	801d0cc <iprintf>

    buf->p = p;
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2200      	movs	r2, #0
 800f37c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	2200      	movs	r2, #0
 800f382:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f38a:	2300      	movs	r3, #0
 800f38c:	e005      	b.n	800f39a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f38e:	2200      	movs	r2, #0
 800f390:	6839      	ldr	r1, [r7, #0]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fe1a 	bl	800efcc <netconn_recv_data>
 800f398:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3718      	adds	r7, #24
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	0801f67c 	.word	0x0801f67c
 800f3a8:	0801f894 	.word	0x0801f894
 800f3ac:	0801f6d4 	.word	0x0801f6d4
 800f3b0:	0801f8b4 	.word	0x0801f8b4
 800f3b4:	0801f92c 	.word	0x0801f92c

0800f3b8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b088      	sub	sp, #32
 800f3bc:	af02      	add	r7, sp, #8
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
 800f3c4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f3ce:	78fa      	ldrb	r2, [r7, #3]
 800f3d0:	f107 0110 	add.w	r1, r7, #16
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	4613      	mov	r3, r2
 800f3da:	2201      	movs	r2, #1
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f000 f805 	bl	800f3ec <netconn_write_vectors_partly>
 800f3e2:	4603      	mov	r3, r0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b092      	sub	sp, #72	; 0x48
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	4611      	mov	r1, r2
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	80fb      	strh	r3, [r7, #6]
 800f3fe:	4613      	mov	r3, r2
 800f400:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d109      	bne.n	800f41c <netconn_write_vectors_partly+0x30>
 800f408:	4b4e      	ldr	r3, [pc, #312]	; (800f544 <netconn_write_vectors_partly+0x158>)
 800f40a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f40e:	494e      	ldr	r1, [pc, #312]	; (800f548 <netconn_write_vectors_partly+0x15c>)
 800f410:	484e      	ldr	r0, [pc, #312]	; (800f54c <netconn_write_vectors_partly+0x160>)
 800f412:	f00d fe5b 	bl	801d0cc <iprintf>
 800f416:	f06f 030f 	mvn.w	r3, #15
 800f41a:	e08e      	b.n	800f53a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f424:	2b10      	cmp	r3, #16
 800f426:	d009      	beq.n	800f43c <netconn_write_vectors_partly+0x50>
 800f428:	4b46      	ldr	r3, [pc, #280]	; (800f544 <netconn_write_vectors_partly+0x158>)
 800f42a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f42e:	4948      	ldr	r1, [pc, #288]	; (800f550 <netconn_write_vectors_partly+0x164>)
 800f430:	4846      	ldr	r0, [pc, #280]	; (800f54c <netconn_write_vectors_partly+0x160>)
 800f432:	f00d fe4b 	bl	801d0cc <iprintf>
 800f436:	f06f 0305 	mvn.w	r3, #5
 800f43a:	e07e      	b.n	800f53a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	7f1b      	ldrb	r3, [r3, #28]
 800f440:	f003 0302 	and.w	r3, r3, #2
 800f444:	2b00      	cmp	r3, #0
 800f446:	d104      	bne.n	800f452 <netconn_write_vectors_partly+0x66>
 800f448:	797b      	ldrb	r3, [r7, #5]
 800f44a:	f003 0304 	and.w	r3, r3, #4
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <netconn_write_vectors_partly+0x6a>
 800f452:	2301      	movs	r3, #1
 800f454:	e000      	b.n	800f458 <netconn_write_vectors_partly+0x6c>
 800f456:	2300      	movs	r3, #0
 800f458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f45c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f460:	2b00      	cmp	r3, #0
 800f462:	d005      	beq.n	800f470 <netconn_write_vectors_partly+0x84>
 800f464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f466:	2b00      	cmp	r3, #0
 800f468:	d102      	bne.n	800f470 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f46a:	f06f 0305 	mvn.w	r3, #5
 800f46e:	e064      	b.n	800f53a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f474:	2300      	movs	r3, #0
 800f476:	643b      	str	r3, [r7, #64]	; 0x40
 800f478:	e015      	b.n	800f4a6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	4413      	add	r3, r2
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f486:	4413      	add	r3, r2
 800f488:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	4413      	add	r3, r2
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f496:	429a      	cmp	r2, r3
 800f498:	d202      	bcs.n	800f4a0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f49a:	f06f 0305 	mvn.w	r3, #5
 800f49e:	e04c      	b.n	800f53a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	643b      	str	r3, [r7, #64]	; 0x40
 800f4a6:	88fb      	ldrh	r3, [r7, #6]
 800f4a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	dbe5      	blt.n	800f47a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	e040      	b.n	800f53a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	da0a      	bge.n	800f4d4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d102      	bne.n	800f4ca <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f4c4:	f06f 0305 	mvn.w	r3, #5
 800f4c8:	e037      	b.n	800f53a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f4ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f4ce:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f4dc:	88fb      	ldrh	r3, [r7, #6]
 800f4de:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f4e4:	797b      	ldrb	r3, [r7, #5]
 800f4e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ec:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f4f2:	f107 0314 	add.w	r3, r7, #20
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	4816      	ldr	r0, [pc, #88]	; (800f554 <netconn_write_vectors_partly+0x168>)
 800f4fa:	f7ff fb9f 	bl	800ec3c <netconn_apimsg>
 800f4fe:	4603      	mov	r3, r0
 800f500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f504:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d114      	bne.n	800f536 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d002      	beq.n	800f518 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f516:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f518:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10a      	bne.n	800f536 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f524:	429a      	cmp	r2, r3
 800f526:	d006      	beq.n	800f536 <netconn_write_vectors_partly+0x14a>
 800f528:	4b06      	ldr	r3, [pc, #24]	; (800f544 <netconn_write_vectors_partly+0x158>)
 800f52a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f52e:	490a      	ldr	r1, [pc, #40]	; (800f558 <netconn_write_vectors_partly+0x16c>)
 800f530:	4806      	ldr	r0, [pc, #24]	; (800f54c <netconn_write_vectors_partly+0x160>)
 800f532:	f00d fdcb 	bl	801d0cc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f536:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3748      	adds	r7, #72	; 0x48
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	0801f67c 	.word	0x0801f67c
 800f548:	0801f954 	.word	0x0801f954
 800f54c:	0801f6d4 	.word	0x0801f6d4
 800f550:	0801f970 	.word	0x0801f970
 800f554:	08010b89 	.word	0x08010b89
 800f558:	0801f994 	.word	0x0801f994

0800f55c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08c      	sub	sp, #48	; 0x30
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d109      	bne.n	800f582 <netconn_close_shutdown+0x26>
 800f56e:	4b0f      	ldr	r3, [pc, #60]	; (800f5ac <netconn_close_shutdown+0x50>)
 800f570:	f240 4247 	movw	r2, #1095	; 0x447
 800f574:	490e      	ldr	r1, [pc, #56]	; (800f5b0 <netconn_close_shutdown+0x54>)
 800f576:	480f      	ldr	r0, [pc, #60]	; (800f5b4 <netconn_close_shutdown+0x58>)
 800f578:	f00d fda8 	bl	801d0cc <iprintf>
 800f57c:	f06f 030f 	mvn.w	r3, #15
 800f580:	e010      	b.n	800f5a4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f586:	78fb      	ldrb	r3, [r7, #3]
 800f588:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f58a:	2329      	movs	r3, #41	; 0x29
 800f58c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f58e:	f107 030c 	add.w	r3, r7, #12
 800f592:	4619      	mov	r1, r3
 800f594:	4808      	ldr	r0, [pc, #32]	; (800f5b8 <netconn_close_shutdown+0x5c>)
 800f596:	f7ff fb51 	bl	800ec3c <netconn_apimsg>
 800f59a:	4603      	mov	r3, r0
 800f59c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f5a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3730      	adds	r7, #48	; 0x30
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0801f67c 	.word	0x0801f67c
 800f5b0:	0801f9b8 	.word	0x0801f9b8
 800f5b4:	0801f6d4 	.word	0x0801f6d4
 800f5b8:	08010ca1 	.word	0x08010ca1

0800f5bc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f5c4:	2103      	movs	r1, #3
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7ff ffc8 	bl	800f55c <netconn_close_shutdown>
 800f5cc:	4603      	mov	r3, r0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b084      	sub	sp, #16
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d101      	bne.n	800f5e8 <netconn_err+0x12>
    return ERR_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	e00d      	b.n	800f604 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f5e8:	f00c fe66 	bl	801c2b8 <sys_arch_protect>
 800f5ec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	7a1b      	ldrb	r3, [r3, #8]
 800f5f2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f00c fe6a 	bl	801c2d4 <sys_arch_unprotect>
  return err;
 800f600:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f604:	4618      	mov	r0, r3
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	4603      	mov	r3, r0
 800f614:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f61a:	f113 0f0d 	cmn.w	r3, #13
 800f61e:	d009      	beq.n	800f634 <lwip_netconn_err_to_msg+0x28>
 800f620:	f113 0f0d 	cmn.w	r3, #13
 800f624:	dc0c      	bgt.n	800f640 <lwip_netconn_err_to_msg+0x34>
 800f626:	f113 0f0f 	cmn.w	r3, #15
 800f62a:	d007      	beq.n	800f63c <lwip_netconn_err_to_msg+0x30>
 800f62c:	f113 0f0e 	cmn.w	r3, #14
 800f630:	d002      	beq.n	800f638 <lwip_netconn_err_to_msg+0x2c>
 800f632:	e005      	b.n	800f640 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f634:	4b0a      	ldr	r3, [pc, #40]	; (800f660 <lwip_netconn_err_to_msg+0x54>)
 800f636:	e00e      	b.n	800f656 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <lwip_netconn_err_to_msg+0x58>)
 800f63a:	e00c      	b.n	800f656 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f63c:	4b0a      	ldr	r3, [pc, #40]	; (800f668 <lwip_netconn_err_to_msg+0x5c>)
 800f63e:	e00a      	b.n	800f656 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d005      	beq.n	800f654 <lwip_netconn_err_to_msg+0x48>
 800f648:	4b08      	ldr	r3, [pc, #32]	; (800f66c <lwip_netconn_err_to_msg+0x60>)
 800f64a:	227d      	movs	r2, #125	; 0x7d
 800f64c:	4908      	ldr	r1, [pc, #32]	; (800f670 <lwip_netconn_err_to_msg+0x64>)
 800f64e:	4809      	ldr	r0, [pc, #36]	; (800f674 <lwip_netconn_err_to_msg+0x68>)
 800f650:	f00d fd3c 	bl	801d0cc <iprintf>
      return NULL;
 800f654:	2300      	movs	r3, #0
  }
}
 800f656:	4618      	mov	r0, r3
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	08022c18 	.word	0x08022c18
 800f664:	08022c19 	.word	0x08022c19
 800f668:	08022c1a 	.word	0x08022c1a
 800f66c:	0801f9d4 	.word	0x0801f9d4
 800f670:	0801fa08 	.word	0x0801fa08
 800f674:	0801fa18 	.word	0x0801fa18

0800f678 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d105      	bne.n	800f694 <lwip_netconn_is_err_msg+0x1c>
 800f688:	4b12      	ldr	r3, [pc, #72]	; (800f6d4 <lwip_netconn_is_err_msg+0x5c>)
 800f68a:	2285      	movs	r2, #133	; 0x85
 800f68c:	4912      	ldr	r1, [pc, #72]	; (800f6d8 <lwip_netconn_is_err_msg+0x60>)
 800f68e:	4813      	ldr	r0, [pc, #76]	; (800f6dc <lwip_netconn_is_err_msg+0x64>)
 800f690:	f00d fd1c 	bl	801d0cc <iprintf>

  if (msg == &netconn_aborted) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a12      	ldr	r2, [pc, #72]	; (800f6e0 <lwip_netconn_is_err_msg+0x68>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d104      	bne.n	800f6a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	22f3      	movs	r2, #243	; 0xf3
 800f6a0:	701a      	strb	r2, [r3, #0]
    return 1;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e012      	b.n	800f6cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a0e      	ldr	r2, [pc, #56]	; (800f6e4 <lwip_netconn_is_err_msg+0x6c>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d104      	bne.n	800f6b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	22f2      	movs	r2, #242	; 0xf2
 800f6b2:	701a      	strb	r2, [r3, #0]
    return 1;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e009      	b.n	800f6cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4a0b      	ldr	r2, [pc, #44]	; (800f6e8 <lwip_netconn_is_err_msg+0x70>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d104      	bne.n	800f6ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	22f1      	movs	r2, #241	; 0xf1
 800f6c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e000      	b.n	800f6cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	0801f9d4 	.word	0x0801f9d4
 800f6d8:	0801fa40 	.word	0x0801fa40
 800f6dc:	0801fa18 	.word	0x0801fa18
 800f6e0:	08022c18 	.word	0x08022c18
 800f6e4:	08022c19 	.word	0x08022c19
 800f6e8:	08022c1a 	.word	0x08022c1a

0800f6ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d105      	bne.n	800f70c <recv_udp+0x20>
 800f700:	4b34      	ldr	r3, [pc, #208]	; (800f7d4 <recv_udp+0xe8>)
 800f702:	22e5      	movs	r2, #229	; 0xe5
 800f704:	4934      	ldr	r1, [pc, #208]	; (800f7d8 <recv_udp+0xec>)
 800f706:	4835      	ldr	r0, [pc, #212]	; (800f7dc <recv_udp+0xf0>)
 800f708:	f00d fce0 	bl	801d0cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d105      	bne.n	800f71e <recv_udp+0x32>
 800f712:	4b30      	ldr	r3, [pc, #192]	; (800f7d4 <recv_udp+0xe8>)
 800f714:	22e6      	movs	r2, #230	; 0xe6
 800f716:	4932      	ldr	r1, [pc, #200]	; (800f7e0 <recv_udp+0xf4>)
 800f718:	4830      	ldr	r0, [pc, #192]	; (800f7dc <recv_udp+0xf0>)
 800f71a:	f00d fcd7 	bl	801d0cc <iprintf>
  conn = (struct netconn *)arg;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d103      	bne.n	800f730 <recv_udp+0x44>
    pbuf_free(p);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f003 f9a1 	bl	8012a70 <pbuf_free>
    return;
 800f72e:	e04d      	b.n	800f7cc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	429a      	cmp	r2, r3
 800f738:	d005      	beq.n	800f746 <recv_udp+0x5a>
 800f73a:	4b26      	ldr	r3, [pc, #152]	; (800f7d4 <recv_udp+0xe8>)
 800f73c:	22ee      	movs	r2, #238	; 0xee
 800f73e:	4929      	ldr	r1, [pc, #164]	; (800f7e4 <recv_udp+0xf8>)
 800f740:	4826      	ldr	r0, [pc, #152]	; (800f7dc <recv_udp+0xf0>)
 800f742:	f00d fcc3 	bl	801d0cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	3310      	adds	r3, #16
 800f74a:	4618      	mov	r0, r3
 800f74c:	f00c fc99 	bl	801c082 <sys_mbox_valid>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d103      	bne.n	800f75e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f003 f98a 	bl	8012a70 <pbuf_free>
    return;
 800f75c:	e036      	b.n	800f7cc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f75e:	2006      	movs	r0, #6
 800f760:	f002 fa6c 	bl	8011c3c <memp_malloc>
 800f764:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d103      	bne.n	800f774 <recv_udp+0x88>
    pbuf_free(p);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f003 f97f 	bl	8012a70 <pbuf_free>
    return;
 800f772:	e02b      	b.n	800f7cc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f774:	69bb      	ldr	r3, [r7, #24]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <recv_udp+0xa0>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	e000      	b.n	800f78e <recv_udp+0xa2>
 800f78c:	2300      	movs	r3, #0
 800f78e:	69ba      	ldr	r2, [r7, #24]
 800f790:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f796:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	891b      	ldrh	r3, [r3, #8]
 800f79c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	3310      	adds	r3, #16
 800f7a2:	69b9      	ldr	r1, [r7, #24]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f00c fbf7 	bl	801bf98 <sys_mbox_trypost>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d003      	beq.n	800f7b8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f7b0:	69b8      	ldr	r0, [r7, #24]
 800f7b2:	f001 fb01 	bl	8010db8 <netbuf_delete>
    return;
 800f7b6:	e009      	b.n	800f7cc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d005      	beq.n	800f7cc <recv_udp+0xe0>
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c4:	8afa      	ldrh	r2, [r7, #22]
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	69f8      	ldr	r0, [r7, #28]
 800f7ca:	4798      	blx	r3
  }
}
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	0801f9d4 	.word	0x0801f9d4
 800f7d8:	0801fa4c 	.word	0x0801fa4c
 800f7dc:	0801fa18 	.word	0x0801fa18
 800f7e0:	0801fa70 	.word	0x0801fa70
 800f7e4:	0801fa90 	.word	0x0801fa90

0800f7e8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b088      	sub	sp, #32
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
 800f7f4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d106      	bne.n	800f80a <recv_tcp+0x22>
 800f7fc:	4b36      	ldr	r3, [pc, #216]	; (800f8d8 <recv_tcp+0xf0>)
 800f7fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f802:	4936      	ldr	r1, [pc, #216]	; (800f8dc <recv_tcp+0xf4>)
 800f804:	4836      	ldr	r0, [pc, #216]	; (800f8e0 <recv_tcp+0xf8>)
 800f806:	f00d fc61 	bl	801d0cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d106      	bne.n	800f81e <recv_tcp+0x36>
 800f810:	4b31      	ldr	r3, [pc, #196]	; (800f8d8 <recv_tcp+0xf0>)
 800f812:	f240 122d 	movw	r2, #301	; 0x12d
 800f816:	4933      	ldr	r1, [pc, #204]	; (800f8e4 <recv_tcp+0xfc>)
 800f818:	4831      	ldr	r0, [pc, #196]	; (800f8e0 <recv_tcp+0xf8>)
 800f81a:	f00d fc57 	bl	801d0cc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f81e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d006      	beq.n	800f834 <recv_tcp+0x4c>
 800f826:	4b2c      	ldr	r3, [pc, #176]	; (800f8d8 <recv_tcp+0xf0>)
 800f828:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f82c:	492e      	ldr	r1, [pc, #184]	; (800f8e8 <recv_tcp+0x100>)
 800f82e:	482c      	ldr	r0, [pc, #176]	; (800f8e0 <recv_tcp+0xf8>)
 800f830:	f00d fc4c 	bl	801d0cc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d102      	bne.n	800f844 <recv_tcp+0x5c>
    return ERR_VAL;
 800f83e:	f06f 0305 	mvn.w	r3, #5
 800f842:	e045      	b.n	800f8d0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d006      	beq.n	800f85c <recv_tcp+0x74>
 800f84e:	4b22      	ldr	r3, [pc, #136]	; (800f8d8 <recv_tcp+0xf0>)
 800f850:	f240 1235 	movw	r2, #309	; 0x135
 800f854:	4925      	ldr	r1, [pc, #148]	; (800f8ec <recv_tcp+0x104>)
 800f856:	4822      	ldr	r0, [pc, #136]	; (800f8e0 <recv_tcp+0xf8>)
 800f858:	f00d fc38 	bl	801d0cc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	3310      	adds	r3, #16
 800f860:	4618      	mov	r0, r3
 800f862:	f00c fc0e 	bl	801c082 <sys_mbox_valid>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d10d      	bne.n	800f888 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d008      	beq.n	800f884 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	891b      	ldrh	r3, [r3, #8]
 800f876:	4619      	mov	r1, r3
 800f878:	68b8      	ldr	r0, [r7, #8]
 800f87a:	f004 f8b1 	bl	80139e0 <tcp_recved>
      pbuf_free(p);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f003 f8f6 	bl	8012a70 <pbuf_free>
    }
    return ERR_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	e023      	b.n	800f8d0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d005      	beq.n	800f89a <recv_tcp+0xb2>
    msg = p;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	891b      	ldrh	r3, [r3, #8]
 800f896:	83fb      	strh	r3, [r7, #30]
 800f898:	e003      	b.n	800f8a2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f89a:	4b15      	ldr	r3, [pc, #84]	; (800f8f0 <recv_tcp+0x108>)
 800f89c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	3310      	adds	r3, #16
 800f8a6:	69b9      	ldr	r1, [r7, #24]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f00c fb75 	bl	801bf98 <sys_mbox_trypost>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b8:	e00a      	b.n	800f8d0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d005      	beq.n	800f8ce <recv_tcp+0xe6>
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c6:	8bfa      	ldrh	r2, [r7, #30]
 800f8c8:	2100      	movs	r1, #0
 800f8ca:	6978      	ldr	r0, [r7, #20]
 800f8cc:	4798      	blx	r3
  }

  return ERR_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3720      	adds	r7, #32
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	0801f9d4 	.word	0x0801f9d4
 800f8dc:	0801fab0 	.word	0x0801fab0
 800f8e0:	0801fa18 	.word	0x0801fa18
 800f8e4:	0801fad4 	.word	0x0801fad4
 800f8e8:	0801faf4 	.word	0x0801faf4
 800f8ec:	0801fb0c 	.word	0x0801fb0c
 800f8f0:	08022c1a 	.word	0x08022c1a

0800f8f4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d106      	bne.n	800f916 <poll_tcp+0x22>
 800f908:	4b29      	ldr	r3, [pc, #164]	; (800f9b0 <poll_tcp+0xbc>)
 800f90a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f90e:	4929      	ldr	r1, [pc, #164]	; (800f9b4 <poll_tcp+0xc0>)
 800f910:	4829      	ldr	r0, [pc, #164]	; (800f9b8 <poll_tcp+0xc4>)
 800f912:	f00d fbdb 	bl	801d0cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	785b      	ldrb	r3, [r3, #1]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d104      	bne.n	800f928 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f91e:	2101      	movs	r1, #1
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f000 ff65 	bl	80107f0 <lwip_netconn_do_writemore>
 800f926:	e016      	b.n	800f956 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	785b      	ldrb	r3, [r3, #1]
 800f92c:	2b04      	cmp	r3, #4
 800f92e:	d112      	bne.n	800f956 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	6a1b      	ldr	r3, [r3, #32]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00a      	beq.n	800f94e <poll_tcp+0x5a>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6a1b      	ldr	r3, [r3, #32]
 800f93c:	7a5b      	ldrb	r3, [r3, #9]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d005      	beq.n	800f94e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	7a5a      	ldrb	r2, [r3, #9]
 800f948:	3a01      	subs	r2, #1
 800f94a:	b2d2      	uxtb	r2, r2
 800f94c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f94e:	2101      	movs	r1, #1
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f000 fbf7 	bl	8010144 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	7f1b      	ldrb	r3, [r3, #28]
 800f95a:	f003 0310 	and.w	r3, r3, #16
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d021      	beq.n	800f9a6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d01d      	beq.n	800f9a6 <poll_tcp+0xb2>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f972:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f976:	d316      	bcc.n	800f9a6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f980:	2b04      	cmp	r3, #4
 800f982:	d810      	bhi.n	800f9a6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	7f1b      	ldrb	r3, [r3, #28]
 800f988:	f023 0310 	bic.w	r3, r3, #16
 800f98c:	b2da      	uxtb	r2, r3
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f996:	2b00      	cmp	r3, #0
 800f998:	d005      	beq.n	800f9a6 <poll_tcp+0xb2>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99e:	2200      	movs	r2, #0
 800f9a0:	2102      	movs	r1, #2
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	0801f9d4 	.word	0x0801f9d4
 800f9b4:	0801fb2c 	.word	0x0801fb2c
 800f9b8:	0801fa18 	.word	0x0801fa18

0800f9bc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b086      	sub	sp, #24
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d106      	bne.n	800f9e2 <sent_tcp+0x26>
 800f9d4:	4b20      	ldr	r3, [pc, #128]	; (800fa58 <sent_tcp+0x9c>)
 800f9d6:	f240 1293 	movw	r2, #403	; 0x193
 800f9da:	4920      	ldr	r1, [pc, #128]	; (800fa5c <sent_tcp+0xa0>)
 800f9dc:	4820      	ldr	r0, [pc, #128]	; (800fa60 <sent_tcp+0xa4>)
 800f9de:	f00d fb75 	bl	801d0cc <iprintf>

  if (conn) {
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d032      	beq.n	800fa4e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	785b      	ldrb	r3, [r3, #1]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d104      	bne.n	800f9fa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f9f0:	2101      	movs	r1, #1
 800f9f2:	6978      	ldr	r0, [r7, #20]
 800f9f4:	f000 fefc 	bl	80107f0 <lwip_netconn_do_writemore>
 800f9f8:	e007      	b.n	800fa0a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2b04      	cmp	r3, #4
 800fa00:	d103      	bne.n	800fa0a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800fa02:	2101      	movs	r1, #1
 800fa04:	6978      	ldr	r0, [r7, #20]
 800fa06:	f000 fb9d 	bl	8010144 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d01d      	beq.n	800fa4e <sent_tcp+0x92>
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fa1a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fa1e:	d316      	bcc.n	800fa4e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800fa28:	2b04      	cmp	r3, #4
 800fa2a:	d810      	bhi.n	800fa4e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	7f1b      	ldrb	r3, [r3, #28]
 800fa30:	f023 0310 	bic.w	r3, r3, #16
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d005      	beq.n	800fa4e <sent_tcp+0x92>
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa46:	88fa      	ldrh	r2, [r7, #6]
 800fa48:	2102      	movs	r1, #2
 800fa4a:	6978      	ldr	r0, [r7, #20]
 800fa4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3718      	adds	r7, #24
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	0801f9d4 	.word	0x0801f9d4
 800fa5c:	0801fb2c 	.word	0x0801fb2c
 800fa60:	0801fa18 	.word	0x0801fa18

0800fa64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b088      	sub	sp, #32
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d106      	bne.n	800fa88 <err_tcp+0x24>
 800fa7a:	4b5f      	ldr	r3, [pc, #380]	; (800fbf8 <err_tcp+0x194>)
 800fa7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800fa80:	495e      	ldr	r1, [pc, #376]	; (800fbfc <err_tcp+0x198>)
 800fa82:	485f      	ldr	r0, [pc, #380]	; (800fc00 <err_tcp+0x19c>)
 800fa84:	f00d fb22 	bl	801d0cc <iprintf>

  SYS_ARCH_PROTECT(lev);
 800fa88:	f00c fc16 	bl	801c2b8 <sys_arch_protect>
 800fa8c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	2200      	movs	r2, #0
 800fa92:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	78fa      	ldrb	r2, [r7, #3]
 800fa98:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	7f1b      	ldrb	r3, [r3, #28]
 800fa9e:	f043 0301 	orr.w	r3, r3, #1
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	785b      	ldrb	r3, [r3, #1]
 800faac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	2200      	movs	r2, #0
 800fab2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800fab4:	69b8      	ldr	r0, [r7, #24]
 800fab6:	f00c fc0d 	bl	801c2d4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d005      	beq.n	800face <err_tcp+0x6a>
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac6:	2200      	movs	r2, #0
 800fac8:	2104      	movs	r1, #4
 800faca:	69f8      	ldr	r0, [r7, #28]
 800facc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d005      	beq.n	800fae2 <err_tcp+0x7e>
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fada:	2200      	movs	r2, #0
 800fadc:	2100      	movs	r1, #0
 800fade:	69f8      	ldr	r0, [r7, #28]
 800fae0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d005      	beq.n	800faf6 <err_tcp+0x92>
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faee:	2200      	movs	r2, #0
 800faf0:	2102      	movs	r1, #2
 800faf2:	69f8      	ldr	r0, [r7, #28]
 800faf4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800faf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7ff fd86 	bl	800f60c <lwip_netconn_err_to_msg>
 800fb00:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	3310      	adds	r3, #16
 800fb06:	4618      	mov	r0, r3
 800fb08:	f00c fabb 	bl	801c082 <sys_mbox_valid>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d005      	beq.n	800fb1e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	3310      	adds	r3, #16
 800fb16:	6939      	ldr	r1, [r7, #16]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f00c fa3d 	bl	801bf98 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fb1e:	69fb      	ldr	r3, [r7, #28]
 800fb20:	3314      	adds	r3, #20
 800fb22:	4618      	mov	r0, r3
 800fb24:	f00c faad 	bl	801c082 <sys_mbox_valid>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d005      	beq.n	800fb3a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	3314      	adds	r3, #20
 800fb32:	6939      	ldr	r1, [r7, #16]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f00c fa2f 	bl	801bf98 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d005      	beq.n	800fb4c <err_tcp+0xe8>
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
 800fb42:	2b04      	cmp	r3, #4
 800fb44:	d002      	beq.n	800fb4c <err_tcp+0xe8>
 800fb46:	7dfb      	ldrb	r3, [r7, #23]
 800fb48:	2b03      	cmp	r3, #3
 800fb4a:	d143      	bne.n	800fbd4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	7f1b      	ldrb	r3, [r3, #28]
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	bf14      	ite	ne
 800fb58:	2301      	movne	r3, #1
 800fb5a:	2300      	moveq	r3, #0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	7f1b      	ldrb	r3, [r3, #28]
 800fb64:	f023 0304 	bic.w	r3, r3, #4
 800fb68:	b2da      	uxtb	r2, r3
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d13b      	bne.n	800fbec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	6a1b      	ldr	r3, [r3, #32]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d106      	bne.n	800fb8a <err_tcp+0x126>
 800fb7c:	4b1e      	ldr	r3, [pc, #120]	; (800fbf8 <err_tcp+0x194>)
 800fb7e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb82:	4920      	ldr	r1, [pc, #128]	; (800fc04 <err_tcp+0x1a0>)
 800fb84:	481e      	ldr	r0, [pc, #120]	; (800fc00 <err_tcp+0x19c>)
 800fb86:	f00d faa1 	bl	801d0cc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
 800fb8c:	2b04      	cmp	r3, #4
 800fb8e:	d104      	bne.n	800fb9a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	6a1b      	ldr	r3, [r3, #32]
 800fb94:	2200      	movs	r2, #0
 800fb96:	711a      	strb	r2, [r3, #4]
 800fb98:	e003      	b.n	800fba2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	78fa      	ldrb	r2, [r7, #3]
 800fba0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	6a1b      	ldr	r3, [r3, #32]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	330c      	adds	r3, #12
 800fbaa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800fbac:	68b8      	ldr	r0, [r7, #8]
 800fbae:	f00c faf9 	bl	801c1a4 <sys_sem_valid>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d106      	bne.n	800fbc6 <err_tcp+0x162>
 800fbb8:	4b0f      	ldr	r3, [pc, #60]	; (800fbf8 <err_tcp+0x194>)
 800fbba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800fbbe:	4912      	ldr	r1, [pc, #72]	; (800fc08 <err_tcp+0x1a4>)
 800fbc0:	480f      	ldr	r0, [pc, #60]	; (800fc00 <err_tcp+0x19c>)
 800fbc2:	f00d fa83 	bl	801d0cc <iprintf>
      conn->current_msg = NULL;
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800fbcc:	68b8      	ldr	r0, [r7, #8]
 800fbce:	f00c facf 	bl	801c170 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800fbd2:	e00b      	b.n	800fbec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	6a1b      	ldr	r3, [r3, #32]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d008      	beq.n	800fbee <err_tcp+0x18a>
 800fbdc:	4b06      	ldr	r3, [pc, #24]	; (800fbf8 <err_tcp+0x194>)
 800fbde:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fbe2:	490a      	ldr	r1, [pc, #40]	; (800fc0c <err_tcp+0x1a8>)
 800fbe4:	4806      	ldr	r0, [pc, #24]	; (800fc00 <err_tcp+0x19c>)
 800fbe6:	f00d fa71 	bl	801d0cc <iprintf>
  }
}
 800fbea:	e000      	b.n	800fbee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800fbec:	bf00      	nop
}
 800fbee:	bf00      	nop
 800fbf0:	3720      	adds	r7, #32
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	0801f9d4 	.word	0x0801f9d4
 800fbfc:	0801fb2c 	.word	0x0801fb2c
 800fc00:	0801fa18 	.word	0x0801fa18
 800fc04:	0801fb3c 	.word	0x0801fb3c
 800fc08:	0801fb58 	.word	0x0801fb58
 800fc0c:	0801fb74 	.word	0x0801fb74

0800fc10 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800fc1e:	6879      	ldr	r1, [r7, #4]
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f004 fda3 	bl	801476c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800fc26:	490a      	ldr	r1, [pc, #40]	; (800fc50 <setup_tcp+0x40>)
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f004 fdb1 	bl	8014790 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800fc2e:	4909      	ldr	r1, [pc, #36]	; (800fc54 <setup_tcp+0x44>)
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f004 fdcf 	bl	80147d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800fc36:	2202      	movs	r2, #2
 800fc38:	4907      	ldr	r1, [pc, #28]	; (800fc58 <setup_tcp+0x48>)
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f004 fe26 	bl	801488c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800fc40:	4906      	ldr	r1, [pc, #24]	; (800fc5c <setup_tcp+0x4c>)
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f004 fde8 	bl	8014818 <tcp_err>
}
 800fc48:	bf00      	nop
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	0800f7e9 	.word	0x0800f7e9
 800fc54:	0800f9bd 	.word	0x0800f9bd
 800fc58:	0800f8f5 	.word	0x0800f8f5
 800fc5c:	0800fa65 	.word	0x0800fa65

0800fc60 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800fc60:	b590      	push	{r4, r7, lr}
 800fc62:	b089      	sub	sp, #36	; 0x24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d102      	bne.n	800fc7e <accept_function+0x1e>
    return ERR_VAL;
 800fc78:	f06f 0305 	mvn.w	r3, #5
 800fc7c:	e0a1      	b.n	800fdc2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	3314      	adds	r3, #20
 800fc82:	4618      	mov	r0, r3
 800fc84:	f00c f9fd 	bl	801c082 <sys_mbox_valid>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d102      	bne.n	800fc94 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800fc8e:	f06f 0305 	mvn.w	r3, #5
 800fc92:	e096      	b.n	800fdc2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d11b      	bne.n	800fcd2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	f103 0414 	add.w	r4, r3, #20
 800fca0:	f06f 000c 	mvn.w	r0, #12
 800fca4:	f7ff fcb2 	bl	800f60c <lwip_netconn_err_to_msg>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	4619      	mov	r1, r3
 800fcac:	4620      	mov	r0, r4
 800fcae:	f00c f973 	bl	801bf98 <sys_mbox_trypost>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d109      	bne.n	800fccc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d005      	beq.n	800fccc <accept_function+0x6c>
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	69f8      	ldr	r0, [r7, #28]
 800fcca:	4798      	blx	r3
    }
    return ERR_VAL;
 800fccc:	f06f 0305 	mvn.w	r3, #5
 800fcd0:	e077      	b.n	800fdc2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800fcd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d006      	beq.n	800fce8 <accept_function+0x88>
 800fcda:	4b3c      	ldr	r3, [pc, #240]	; (800fdcc <accept_function+0x16c>)
 800fcdc:	f240 222a 	movw	r2, #554	; 0x22a
 800fce0:	493b      	ldr	r1, [pc, #236]	; (800fdd0 <accept_function+0x170>)
 800fce2:	483c      	ldr	r0, [pc, #240]	; (800fdd4 <accept_function+0x174>)
 800fce4:	f00d f9f2 	bl	801d0cc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	781a      	ldrb	r2, [r3, #0]
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	f000 f8f0 	bl	800fed8 <netconn_alloc>
 800fcf8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d11b      	bne.n	800fd38 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	f103 0414 	add.w	r4, r3, #20
 800fd06:	f06f 000c 	mvn.w	r0, #12
 800fd0a:	f7ff fc7f 	bl	800f60c <lwip_netconn_err_to_msg>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	4619      	mov	r1, r3
 800fd12:	4620      	mov	r0, r4
 800fd14:	f00c f940 	bl	801bf98 <sys_mbox_trypost>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d109      	bne.n	800fd32 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d005      	beq.n	800fd32 <accept_function+0xd2>
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	69f8      	ldr	r0, [r7, #28]
 800fd30:	4798      	blx	r3
    }
    return ERR_MEM;
 800fd32:	f04f 33ff 	mov.w	r3, #4294967295
 800fd36:	e044      	b.n	800fdc2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800fd3e:	69b8      	ldr	r0, [r7, #24]
 800fd40:	f7ff ff66 	bl	800fc10 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	3314      	adds	r3, #20
 800fd48:	69b9      	ldr	r1, [r7, #24]
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f00c f924 	bl	801bf98 <sys_mbox_trypost>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d02a      	beq.n	800fdac <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	6978      	ldr	r0, [r7, #20]
 800fd60:	f004 fd04 	bl	801476c <tcp_arg>
    tcp_recv(pcb, NULL);
 800fd64:	2100      	movs	r1, #0
 800fd66:	6978      	ldr	r0, [r7, #20]
 800fd68:	f004 fd12 	bl	8014790 <tcp_recv>
    tcp_sent(pcb, NULL);
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	6978      	ldr	r0, [r7, #20]
 800fd70:	f004 fd30 	bl	80147d4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800fd74:	2200      	movs	r2, #0
 800fd76:	2100      	movs	r1, #0
 800fd78:	6978      	ldr	r0, [r7, #20]
 800fd7a:	f004 fd87 	bl	801488c <tcp_poll>
    tcp_err(pcb, NULL);
 800fd7e:	2100      	movs	r1, #0
 800fd80:	6978      	ldr	r0, [r7, #20]
 800fd82:	f004 fd49 	bl	8014818 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	3310      	adds	r3, #16
 800fd90:	4618      	mov	r0, r3
 800fd92:	f00c f8ef 	bl	801bf74 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	3310      	adds	r3, #16
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f00c f982 	bl	801c0a4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800fda0:	69b8      	ldr	r0, [r7, #24]
 800fda2:	f000 f907 	bl	800ffb4 <netconn_free>
    return ERR_MEM;
 800fda6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdaa:	e00a      	b.n	800fdc2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d005      	beq.n	800fdc0 <accept_function+0x160>
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2100      	movs	r1, #0
 800fdbc:	69f8      	ldr	r0, [r7, #28]
 800fdbe:	4798      	blx	r3
  }

  return ERR_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3724      	adds	r7, #36	; 0x24
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd90      	pop	{r4, r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	0801f9d4 	.word	0x0801f9d4
 800fdd0:	0801fb90 	.word	0x0801fb90
 800fdd4:	0801fa18 	.word	0x0801fa18

0800fdd8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800fdd8:	b590      	push	{r4, r7, lr}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800fde0:	2300      	movs	r3, #0
 800fde2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d006      	beq.n	800fdfc <pcb_new+0x24>
 800fdee:	4b2b      	ldr	r3, [pc, #172]	; (800fe9c <pcb_new+0xc4>)
 800fdf0:	f240 2265 	movw	r2, #613	; 0x265
 800fdf4:	492a      	ldr	r1, [pc, #168]	; (800fea0 <pcb_new+0xc8>)
 800fdf6:	482b      	ldr	r0, [pc, #172]	; (800fea4 <pcb_new+0xcc>)
 800fdf8:	f00d f968 	bl	801d0cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe06:	2b10      	cmp	r3, #16
 800fe08:	d022      	beq.n	800fe50 <pcb_new+0x78>
 800fe0a:	2b20      	cmp	r3, #32
 800fe0c:	d133      	bne.n	800fe76 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681c      	ldr	r4, [r3, #0]
 800fe12:	7bfb      	ldrb	r3, [r7, #15]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f009 fd88 	bl	801992a <udp_new_ip_type>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d02a      	beq.n	800fe7e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	2b22      	cmp	r3, #34	; 0x22
 800fe30:	d104      	bne.n	800fe3c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	6858      	ldr	r0, [r3, #4]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	4917      	ldr	r1, [pc, #92]	; (800fea8 <pcb_new+0xd0>)
 800fe4a:	f009 fcf5 	bl	8019838 <udp_recv>
      }
      break;
 800fe4e:	e016      	b.n	800fe7e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681c      	ldr	r4, [r3, #0]
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f004 fc7a 	bl	8014750 <tcp_new_ip_type>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00b      	beq.n	800fe82 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff fece 	bl	800fc10 <setup_tcp>
      }
      break;
 800fe74:	e005      	b.n	800fe82 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	22fa      	movs	r2, #250	; 0xfa
 800fe7a:	711a      	strb	r2, [r3, #4]
      return;
 800fe7c:	e00a      	b.n	800fe94 <pcb_new+0xbc>
      break;
 800fe7e:	bf00      	nop
 800fe80:	e000      	b.n	800fe84 <pcb_new+0xac>
      break;
 800fe82:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d102      	bne.n	800fe94 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	22ff      	movs	r2, #255	; 0xff
 800fe92:	711a      	strb	r2, [r3, #4]
  }
}
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd90      	pop	{r4, r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	0801f9d4 	.word	0x0801f9d4
 800fea0:	0801fbb8 	.word	0x0801fbb8
 800fea4:	0801fa18 	.word	0x0801fa18
 800fea8:	0800f6ed 	.word	0x0800f6ed

0800feac <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2200      	movs	r2, #0
 800febc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d102      	bne.n	800fece <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	f7ff ff85 	bl	800fdd8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fece:	bf00      	nop
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	6039      	str	r1, [r7, #0]
 800fee2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fee4:	2300      	movs	r3, #0
 800fee6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fee8:	2007      	movs	r0, #7
 800feea:	f001 fea7 	bl	8011c3c <memp_malloc>
 800feee:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d101      	bne.n	800fefa <netconn_alloc+0x22>
    return NULL;
 800fef6:	2300      	movs	r3, #0
 800fef8:	e052      	b.n	800ffa0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2200      	movs	r2, #0
 800fefe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	79fa      	ldrb	r2, [r7, #7]
 800ff04:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ff0c:	79fb      	ldrb	r3, [r7, #7]
 800ff0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff12:	2b10      	cmp	r3, #16
 800ff14:	d004      	beq.n	800ff20 <netconn_alloc+0x48>
 800ff16:	2b20      	cmp	r3, #32
 800ff18:	d105      	bne.n	800ff26 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ff1a:	2306      	movs	r3, #6
 800ff1c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ff1e:	e00a      	b.n	800ff36 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ff20:	2306      	movs	r3, #6
 800ff22:	617b      	str	r3, [r7, #20]
      break;
 800ff24:	e007      	b.n	800ff36 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ff26:	4b20      	ldr	r3, [pc, #128]	; (800ffa8 <netconn_alloc+0xd0>)
 800ff28:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ff2c:	491f      	ldr	r1, [pc, #124]	; (800ffac <netconn_alloc+0xd4>)
 800ff2e:	4820      	ldr	r0, [pc, #128]	; (800ffb0 <netconn_alloc+0xd8>)
 800ff30:	f00d f8cc 	bl	801d0cc <iprintf>
      goto free_and_return;
 800ff34:	e02f      	b.n	800ff96 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	3310      	adds	r3, #16
 800ff3a:	6979      	ldr	r1, [r7, #20]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f00b fff7 	bl	801bf30 <sys_mbox_new>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d125      	bne.n	800ff94 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	330c      	adds	r3, #12
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f00c f8b5 	bl	801c0be <sys_sem_new>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d005      	beq.n	800ff66 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3310      	adds	r3, #16
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f00c f808 	bl	801bf74 <sys_mbox_free>
    goto free_and_return;
 800ff64:	e017      	b.n	800ff96 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	3314      	adds	r3, #20
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f00c f89a 	bl	801c0a4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2200      	movs	r2, #0
 800ff74:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f04f 32ff 	mov.w	r2, #4294967295
 800ff7c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	683a      	ldr	r2, [r7, #0]
 800ff82:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2200      	movs	r2, #0
 800ff88:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	7cfa      	ldrb	r2, [r7, #19]
 800ff8e:	771a      	strb	r2, [r3, #28]
  return conn;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	e005      	b.n	800ffa0 <netconn_alloc+0xc8>
    goto free_and_return;
 800ff94:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ff96:	68f9      	ldr	r1, [r7, #12]
 800ff98:	2007      	movs	r0, #7
 800ff9a:	f001 fec5 	bl	8011d28 <memp_free>
  return NULL;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	0801f9d4 	.word	0x0801f9d4
 800ffac:	0801fbd8 	.word	0x0801fbd8
 800ffb0:	0801fa18 	.word	0x0801fa18

0800ffb4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d006      	beq.n	800ffd2 <netconn_free+0x1e>
 800ffc4:	4b1b      	ldr	r3, [pc, #108]	; (8010034 <netconn_free+0x80>)
 800ffc6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ffca:	491b      	ldr	r1, [pc, #108]	; (8010038 <netconn_free+0x84>)
 800ffcc:	481b      	ldr	r0, [pc, #108]	; (801003c <netconn_free+0x88>)
 800ffce:	f00d f87d 	bl	801d0cc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3310      	adds	r3, #16
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f00c f853 	bl	801c082 <sys_mbox_valid>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d006      	beq.n	800fff0 <netconn_free+0x3c>
 800ffe2:	4b14      	ldr	r3, [pc, #80]	; (8010034 <netconn_free+0x80>)
 800ffe4:	f240 3223 	movw	r2, #803	; 0x323
 800ffe8:	4915      	ldr	r1, [pc, #84]	; (8010040 <netconn_free+0x8c>)
 800ffea:	4814      	ldr	r0, [pc, #80]	; (801003c <netconn_free+0x88>)
 800ffec:	f00d f86e 	bl	801d0cc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	3314      	adds	r3, #20
 800fff4:	4618      	mov	r0, r3
 800fff6:	f00c f844 	bl	801c082 <sys_mbox_valid>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d006      	beq.n	801000e <netconn_free+0x5a>
 8010000:	4b0c      	ldr	r3, [pc, #48]	; (8010034 <netconn_free+0x80>)
 8010002:	f240 3226 	movw	r2, #806	; 0x326
 8010006:	490f      	ldr	r1, [pc, #60]	; (8010044 <netconn_free+0x90>)
 8010008:	480c      	ldr	r0, [pc, #48]	; (801003c <netconn_free+0x88>)
 801000a:	f00d f85f 	bl	801d0cc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	330c      	adds	r3, #12
 8010012:	4618      	mov	r0, r3
 8010014:	f00c f8b9 	bl	801c18a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	330c      	adds	r3, #12
 801001c:	4618      	mov	r0, r3
 801001e:	f00c f8d2 	bl	801c1c6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8010022:	6879      	ldr	r1, [r7, #4]
 8010024:	2007      	movs	r0, #7
 8010026:	f001 fe7f 	bl	8011d28 <memp_free>
}
 801002a:	bf00      	nop
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	0801f9d4 	.word	0x0801f9d4
 8010038:	0801fc00 	.word	0x0801fc00
 801003c:	0801fa18 	.word	0x0801fa18
 8010040:	0801fc30 	.word	0x0801fc30
 8010044:	0801fc6c 	.word	0x0801fc6c

08010048 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	3310      	adds	r3, #16
 8010054:	4618      	mov	r0, r3
 8010056:	f00c f814 	bl	801c082 <sys_mbox_valid>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d02f      	beq.n	80100c0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010060:	e018      	b.n	8010094 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801006a:	2b10      	cmp	r3, #16
 801006c:	d10e      	bne.n	801008c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	f107 020f 	add.w	r2, r7, #15
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fafe 	bl	800f678 <lwip_netconn_is_err_msg>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d108      	bne.n	8010094 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	4618      	mov	r0, r3
 8010086:	f002 fcf3 	bl	8012a70 <pbuf_free>
 801008a:	e003      	b.n	8010094 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	4618      	mov	r0, r3
 8010090:	f000 fe92 	bl	8010db8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	3310      	adds	r3, #16
 8010098:	f107 0210 	add.w	r2, r7, #16
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f00b ffd3 	bl	801c04a <sys_arch_mbox_tryfetch>
 80100a4:	4603      	mov	r3, r0
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100aa:	d1da      	bne.n	8010062 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3310      	adds	r3, #16
 80100b0:	4618      	mov	r0, r3
 80100b2:	f00b ff5f 	bl	801bf74 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	3310      	adds	r3, #16
 80100ba:	4618      	mov	r0, r3
 80100bc:	f00b fff2 	bl	801c0a4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	3314      	adds	r3, #20
 80100c4:	4618      	mov	r0, r3
 80100c6:	f00b ffdc 	bl	801c082 <sys_mbox_valid>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d034      	beq.n	801013a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80100d0:	e01d      	b.n	801010e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	f107 020e 	add.w	r2, r7, #14
 80100d8:	4611      	mov	r1, r2
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff facc 	bl	800f678 <lwip_netconn_is_err_msg>
 80100e0:	4603      	mov	r3, r0
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d113      	bne.n	801010e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80100ea:	6978      	ldr	r0, [r7, #20]
 80100ec:	f7ff ffac 	bl	8010048 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d007      	beq.n	8010108 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f003 faa7 	bl	8013650 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	2200      	movs	r2, #0
 8010106:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010108:	6978      	ldr	r0, [r7, #20]
 801010a:	f7ff ff53 	bl	800ffb4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	3314      	adds	r3, #20
 8010112:	f107 0210 	add.w	r2, r7, #16
 8010116:	4611      	mov	r1, r2
 8010118:	4618      	mov	r0, r3
 801011a:	f00b ff96 	bl	801c04a <sys_arch_mbox_tryfetch>
 801011e:	4603      	mov	r3, r0
 8010120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010124:	d1d5      	bne.n	80100d2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	3314      	adds	r3, #20
 801012a:	4618      	mov	r0, r3
 801012c:	f00b ff22 	bl	801bf74 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	3314      	adds	r3, #20
 8010134:	4618      	mov	r0, r3
 8010136:	f00b ffb5 	bl	801c0a4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801013a:	bf00      	nop
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
	...

08010144 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b086      	sub	sp, #24
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	460b      	mov	r3, r1
 801014e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <lwip_netconn_do_close_internal+0x24>
 801015a:	4b87      	ldr	r3, [pc, #540]	; (8010378 <lwip_netconn_do_close_internal+0x234>)
 801015c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010160:	4986      	ldr	r1, [pc, #536]	; (801037c <lwip_netconn_do_close_internal+0x238>)
 8010162:	4887      	ldr	r0, [pc, #540]	; (8010380 <lwip_netconn_do_close_internal+0x23c>)
 8010164:	f00c ffb2 	bl	801d0cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010170:	2b10      	cmp	r3, #16
 8010172:	d006      	beq.n	8010182 <lwip_netconn_do_close_internal+0x3e>
 8010174:	4b80      	ldr	r3, [pc, #512]	; (8010378 <lwip_netconn_do_close_internal+0x234>)
 8010176:	f240 32a3 	movw	r2, #931	; 0x3a3
 801017a:	4982      	ldr	r1, [pc, #520]	; (8010384 <lwip_netconn_do_close_internal+0x240>)
 801017c:	4880      	ldr	r0, [pc, #512]	; (8010380 <lwip_netconn_do_close_internal+0x23c>)
 801017e:	f00c ffa5 	bl	801d0cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	785b      	ldrb	r3, [r3, #1]
 8010186:	2b04      	cmp	r3, #4
 8010188:	d006      	beq.n	8010198 <lwip_netconn_do_close_internal+0x54>
 801018a:	4b7b      	ldr	r3, [pc, #492]	; (8010378 <lwip_netconn_do_close_internal+0x234>)
 801018c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010190:	497d      	ldr	r1, [pc, #500]	; (8010388 <lwip_netconn_do_close_internal+0x244>)
 8010192:	487b      	ldr	r0, [pc, #492]	; (8010380 <lwip_netconn_do_close_internal+0x23c>)
 8010194:	f00c ff9a 	bl	801d0cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d106      	bne.n	80101ae <lwip_netconn_do_close_internal+0x6a>
 80101a0:	4b75      	ldr	r3, [pc, #468]	; (8010378 <lwip_netconn_do_close_internal+0x234>)
 80101a2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80101a6:	4979      	ldr	r1, [pc, #484]	; (801038c <lwip_netconn_do_close_internal+0x248>)
 80101a8:	4875      	ldr	r0, [pc, #468]	; (8010380 <lwip_netconn_do_close_internal+0x23c>)
 80101aa:	f00c ff8f 	bl	801d0cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a1b      	ldr	r3, [r3, #32]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <lwip_netconn_do_close_internal+0x80>
 80101b6:	4b70      	ldr	r3, [pc, #448]	; (8010378 <lwip_netconn_do_close_internal+0x234>)
 80101b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80101bc:	4974      	ldr	r1, [pc, #464]	; (8010390 <lwip_netconn_do_close_internal+0x24c>)
 80101be:	4870      	ldr	r0, [pc, #448]	; (8010380 <lwip_netconn_do_close_internal+0x23c>)
 80101c0:	f00c ff84 	bl	801d0cc <iprintf>

  tpcb = conn->pcb.tcp;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a1b      	ldr	r3, [r3, #32]
 80101ce:	7a1b      	ldrb	r3, [r3, #8]
 80101d0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80101d2:	7bfb      	ldrb	r3, [r7, #15]
 80101d4:	f003 0301 	and.w	r3, r3, #1
 80101d8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80101da:	7bfb      	ldrb	r3, [r7, #15]
 80101dc:	f003 0302 	and.w	r3, r3, #2
 80101e0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80101e2:	7bfb      	ldrb	r3, [r7, #15]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d102      	bne.n	80101ee <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80101e8:	2301      	movs	r3, #1
 80101ea:	75bb      	strb	r3, [r7, #22]
 80101ec:	e01f      	b.n	801022e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80101ee:	7bbb      	ldrb	r3, [r7, #14]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00e      	beq.n	8010212 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80101f8:	2b05      	cmp	r3, #5
 80101fa:	d007      	beq.n	801020c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8010200:	2b06      	cmp	r3, #6
 8010202:	d003      	beq.n	801020c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010208:	2b08      	cmp	r3, #8
 801020a:	d102      	bne.n	8010212 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 801020c:	2301      	movs	r3, #1
 801020e:	75bb      	strb	r3, [r7, #22]
 8010210:	e00d      	b.n	801022e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8010212:	7b7b      	ldrb	r3, [r7, #13]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d008      	beq.n	801022a <lwip_netconn_do_close_internal+0xe6>
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	8b5b      	ldrh	r3, [r3, #26]
 801021c:	f003 0310 	and.w	r3, r3, #16
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010224:	2301      	movs	r3, #1
 8010226:	75bb      	strb	r3, [r7, #22]
 8010228:	e001      	b.n	801022e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801022e:	7dbb      	ldrb	r3, [r7, #22]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010234:	2100      	movs	r1, #0
 8010236:	6938      	ldr	r0, [r7, #16]
 8010238:	f004 fa98 	bl	801476c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	7d1b      	ldrb	r3, [r3, #20]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d104      	bne.n	801024e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010244:	2100      	movs	r1, #0
 8010246:	6938      	ldr	r0, [r7, #16]
 8010248:	f004 fb08 	bl	801485c <tcp_accept>
 801024c:	e01d      	b.n	801028a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801024e:	7bbb      	ldrb	r3, [r7, #14]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d007      	beq.n	8010264 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010254:	2100      	movs	r1, #0
 8010256:	6938      	ldr	r0, [r7, #16]
 8010258:	f004 fa9a 	bl	8014790 <tcp_recv>
      tcp_accept(tpcb, NULL);
 801025c:	2100      	movs	r1, #0
 801025e:	6938      	ldr	r0, [r7, #16]
 8010260:	f004 fafc 	bl	801485c <tcp_accept>
    }
    if (shut_tx) {
 8010264:	7b7b      	ldrb	r3, [r7, #13]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d003      	beq.n	8010272 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801026a:	2100      	movs	r1, #0
 801026c:	6938      	ldr	r0, [r7, #16]
 801026e:	f004 fab1 	bl	80147d4 <tcp_sent>
    }
    if (shut_close) {
 8010272:	7dbb      	ldrb	r3, [r7, #22]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d008      	beq.n	801028a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010278:	2200      	movs	r2, #0
 801027a:	2100      	movs	r1, #0
 801027c:	6938      	ldr	r0, [r7, #16]
 801027e:	f004 fb05 	bl	801488c <tcp_poll>
      tcp_err(tpcb, NULL);
 8010282:	2100      	movs	r1, #0
 8010284:	6938      	ldr	r0, [r7, #16]
 8010286:	f004 fac7 	bl	8014818 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801028a:	7dbb      	ldrb	r3, [r7, #22]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d005      	beq.n	801029c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010290:	6938      	ldr	r0, [r7, #16]
 8010292:	f003 f897 	bl	80133c4 <tcp_close>
 8010296:	4603      	mov	r3, r0
 8010298:	75fb      	strb	r3, [r7, #23]
 801029a:	e007      	b.n	80102ac <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 801029c:	7bbb      	ldrb	r3, [r7, #14]
 801029e:	7b7a      	ldrb	r2, [r7, #13]
 80102a0:	4619      	mov	r1, r3
 80102a2:	6938      	ldr	r0, [r7, #16]
 80102a4:	f003 f8ba 	bl	801341c <tcp_shutdown>
 80102a8:	4603      	mov	r3, r0
 80102aa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80102ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d102      	bne.n	80102ba <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80102b4:	2301      	movs	r3, #1
 80102b6:	757b      	strb	r3, [r7, #21]
 80102b8:	e016      	b.n	80102e8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80102ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80102be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c2:	d10f      	bne.n	80102e4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6a1b      	ldr	r3, [r3, #32]
 80102c8:	7a5b      	ldrb	r3, [r3, #9]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d10c      	bne.n	80102e8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80102ce:	2301      	movs	r3, #1
 80102d0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80102d2:	7dbb      	ldrb	r3, [r7, #22]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80102d8:	6938      	ldr	r0, [r7, #16]
 80102da:	f003 f9b9 	bl	8013650 <tcp_abort>
          err = ERR_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	75fb      	strb	r3, [r7, #23]
 80102e2:	e001      	b.n	80102e8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80102e4:	2301      	movs	r3, #1
 80102e6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80102e8:	7d7b      	ldrb	r3, [r7, #21]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d052      	beq.n	8010394 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	330c      	adds	r3, #12
 80102f6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6a1b      	ldr	r3, [r3, #32]
 80102fc:	7dfa      	ldrb	r2, [r7, #23]
 80102fe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2200      	movs	r2, #0
 801030a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 801030c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d129      	bne.n	8010368 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010314:	7dbb      	ldrb	r3, [r7, #22]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00c      	beq.n	8010334 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	2b00      	cmp	r3, #0
 8010326:	d005      	beq.n	8010334 <lwip_netconn_do_close_internal+0x1f0>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032c:	2200      	movs	r2, #0
 801032e:	2104      	movs	r1, #4
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	4798      	blx	r3
      }
      if (shut_rx) {
 8010334:	7bbb      	ldrb	r3, [r7, #14]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d009      	beq.n	801034e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801033e:	2b00      	cmp	r3, #0
 8010340:	d005      	beq.n	801034e <lwip_netconn_do_close_internal+0x20a>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010346:	2200      	movs	r2, #0
 8010348:	2100      	movs	r1, #0
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	4798      	blx	r3
      }
      if (shut_tx) {
 801034e:	7b7b      	ldrb	r3, [r7, #13]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d009      	beq.n	8010368 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010358:	2b00      	cmp	r3, #0
 801035a:	d005      	beq.n	8010368 <lwip_netconn_do_close_internal+0x224>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010360:	2200      	movs	r2, #0
 8010362:	2102      	movs	r1, #2
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d002      	beq.n	8010374 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801036e:	68b8      	ldr	r0, [r7, #8]
 8010370:	f00b fefe 	bl	801c170 <sys_sem_signal>
    }
    return ERR_OK;
 8010374:	2300      	movs	r3, #0
 8010376:	e03c      	b.n	80103f2 <lwip_netconn_do_close_internal+0x2ae>
 8010378:	0801f9d4 	.word	0x0801f9d4
 801037c:	0801fca8 	.word	0x0801fca8
 8010380:	0801fa18 	.word	0x0801fa18
 8010384:	0801fcb8 	.word	0x0801fcb8
 8010388:	0801fcd8 	.word	0x0801fcd8
 801038c:	0801fcfc 	.word	0x0801fcfc
 8010390:	0801fb3c 	.word	0x0801fb3c
  }
  if (!close_finished) {
 8010394:	7d7b      	ldrb	r3, [r7, #21]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d11e      	bne.n	80103d8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	7d1b      	ldrb	r3, [r3, #20]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d106      	bne.n	80103b0 <lwip_netconn_do_close_internal+0x26c>
 80103a2:	4b16      	ldr	r3, [pc, #88]	; (80103fc <lwip_netconn_do_close_internal+0x2b8>)
 80103a4:	f240 4241 	movw	r2, #1089	; 0x441
 80103a8:	4915      	ldr	r1, [pc, #84]	; (8010400 <lwip_netconn_do_close_internal+0x2bc>)
 80103aa:	4816      	ldr	r0, [pc, #88]	; (8010404 <lwip_netconn_do_close_internal+0x2c0>)
 80103ac:	f00c fe8e 	bl	801d0cc <iprintf>
    if (shut_tx) {
 80103b0:	7b7b      	ldrb	r3, [r7, #13]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d003      	beq.n	80103be <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80103b6:	4914      	ldr	r1, [pc, #80]	; (8010408 <lwip_netconn_do_close_internal+0x2c4>)
 80103b8:	6938      	ldr	r0, [r7, #16]
 80103ba:	f004 fa0b 	bl	80147d4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80103be:	2201      	movs	r2, #1
 80103c0:	4912      	ldr	r1, [pc, #72]	; (801040c <lwip_netconn_do_close_internal+0x2c8>)
 80103c2:	6938      	ldr	r0, [r7, #16]
 80103c4:	f004 fa62 	bl	801488c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80103c8:	4911      	ldr	r1, [pc, #68]	; (8010410 <lwip_netconn_do_close_internal+0x2cc>)
 80103ca:	6938      	ldr	r0, [r7, #16]
 80103cc:	f004 fa24 	bl	8014818 <tcp_err>
    tcp_arg(tpcb, conn);
 80103d0:	6879      	ldr	r1, [r7, #4]
 80103d2:	6938      	ldr	r0, [r7, #16]
 80103d4:	f004 f9ca 	bl	801476c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80103d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d106      	bne.n	80103ee <lwip_netconn_do_close_internal+0x2aa>
 80103e0:	4b06      	ldr	r3, [pc, #24]	; (80103fc <lwip_netconn_do_close_internal+0x2b8>)
 80103e2:	f240 424d 	movw	r2, #1101	; 0x44d
 80103e6:	490b      	ldr	r1, [pc, #44]	; (8010414 <lwip_netconn_do_close_internal+0x2d0>)
 80103e8:	4806      	ldr	r0, [pc, #24]	; (8010404 <lwip_netconn_do_close_internal+0x2c0>)
 80103ea:	f00c fe6f 	bl	801d0cc <iprintf>
  return err;
 80103ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	0801f9d4 	.word	0x0801f9d4
 8010400:	0801fd10 	.word	0x0801fd10
 8010404:	0801fa18 	.word	0x0801fa18
 8010408:	0800f9bd 	.word	0x0800f9bd
 801040c:	0800f8f5 	.word	0x0800f8f5
 8010410:	0800fa65 	.word	0x0800fa65
 8010414:	0801fd34 	.word	0x0801fd34

08010418 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	785b      	ldrb	r3, [r3, #1]
 801042a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801042c:	7afb      	ldrb	r3, [r7, #11]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00d      	beq.n	801044e <lwip_netconn_do_delconn+0x36>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801043c:	2b10      	cmp	r3, #16
 801043e:	d006      	beq.n	801044e <lwip_netconn_do_delconn+0x36>
 8010440:	4b60      	ldr	r3, [pc, #384]	; (80105c4 <lwip_netconn_do_delconn+0x1ac>)
 8010442:	f240 425e 	movw	r2, #1118	; 0x45e
 8010446:	4960      	ldr	r1, [pc, #384]	; (80105c8 <lwip_netconn_do_delconn+0x1b0>)
 8010448:	4860      	ldr	r0, [pc, #384]	; (80105cc <lwip_netconn_do_delconn+0x1b4>)
 801044a:	f00c fe3f 	bl	801d0cc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801044e:	7afb      	ldrb	r3, [r7, #11]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d005      	beq.n	8010460 <lwip_netconn_do_delconn+0x48>
 8010454:	7afb      	ldrb	r3, [r7, #11]
 8010456:	2b02      	cmp	r3, #2
 8010458:	d002      	beq.n	8010460 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801045a:	7afb      	ldrb	r3, [r7, #11]
 801045c:	2b03      	cmp	r3, #3
 801045e:	d109      	bne.n	8010474 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010460:	7afb      	ldrb	r3, [r7, #11]
 8010462:	2b03      	cmp	r3, #3
 8010464:	d10a      	bne.n	801047c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	7f1b      	ldrb	r3, [r3, #28]
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d103      	bne.n	801047c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	22fb      	movs	r2, #251	; 0xfb
 8010478:	711a      	strb	r2, [r3, #4]
 801047a:	e097      	b.n	80105ac <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801047c:	7afb      	ldrb	r3, [r7, #11]
 801047e:	2b03      	cmp	r3, #3
 8010480:	d10d      	bne.n	801049e <lwip_netconn_do_delconn+0x86>
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	7f1b      	ldrb	r3, [r3, #28]
 8010488:	f003 0304 	and.w	r3, r3, #4
 801048c:	2b00      	cmp	r3, #0
 801048e:	d106      	bne.n	801049e <lwip_netconn_do_delconn+0x86>
 8010490:	4b4c      	ldr	r3, [pc, #304]	; (80105c4 <lwip_netconn_do_delconn+0x1ac>)
 8010492:	f240 427a 	movw	r2, #1146	; 0x47a
 8010496:	494e      	ldr	r1, [pc, #312]	; (80105d0 <lwip_netconn_do_delconn+0x1b8>)
 8010498:	484c      	ldr	r0, [pc, #304]	; (80105cc <lwip_netconn_do_delconn+0x1b4>)
 801049a:	f00c fe17 	bl	801d0cc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2200      	movs	r2, #0
 80104a2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7ff fdcd 	bl	8010048 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d05f      	beq.n	8010578 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104c2:	2b10      	cmp	r3, #16
 80104c4:	d00d      	beq.n	80104e2 <lwip_netconn_do_delconn+0xca>
 80104c6:	2b20      	cmp	r3, #32
 80104c8:	d151      	bne.n	801056e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	4618      	mov	r0, r3
 80104dc:	f009 f9cc 	bl	8019878 <udp_remove>
          break;
 80104e0:	e046      	b.n	8010570 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	6a1b      	ldr	r3, [r3, #32]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d006      	beq.n	80104fa <lwip_netconn_do_delconn+0xe2>
 80104ec:	4b35      	ldr	r3, [pc, #212]	; (80105c4 <lwip_netconn_do_delconn+0x1ac>)
 80104ee:	f240 4294 	movw	r2, #1172	; 0x494
 80104f2:	4938      	ldr	r1, [pc, #224]	; (80105d4 <lwip_netconn_do_delconn+0x1bc>)
 80104f4:	4835      	ldr	r0, [pc, #212]	; (80105cc <lwip_netconn_do_delconn+0x1b4>)
 80104f6:	f00c fde9 	bl	801d0cc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2204      	movs	r2, #4
 8010500:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2203      	movs	r2, #3
 8010506:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2100      	movs	r1, #0
 8010516:	4618      	mov	r0, r3
 8010518:	f7ff fe14 	bl	8010144 <lwip_netconn_do_close_internal>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d04b      	beq.n	80105ba <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	785b      	ldrb	r3, [r3, #1]
 8010528:	2b04      	cmp	r3, #4
 801052a:	d006      	beq.n	801053a <lwip_netconn_do_delconn+0x122>
 801052c:	4b25      	ldr	r3, [pc, #148]	; (80105c4 <lwip_netconn_do_delconn+0x1ac>)
 801052e:	f240 429a 	movw	r2, #1178	; 0x49a
 8010532:	4929      	ldr	r1, [pc, #164]	; (80105d8 <lwip_netconn_do_delconn+0x1c0>)
 8010534:	4825      	ldr	r0, [pc, #148]	; (80105cc <lwip_netconn_do_delconn+0x1b4>)
 8010536:	f00c fdc9 	bl	801d0cc <iprintf>
            UNLOCK_TCPIP_CORE();
 801053a:	4828      	ldr	r0, [pc, #160]	; (80105dc <lwip_netconn_do_delconn+0x1c4>)
 801053c:	f00b fe89 	bl	801c252 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	330c      	adds	r3, #12
 8010546:	2100      	movs	r1, #0
 8010548:	4618      	mov	r0, r3
 801054a:	f00b fde0 	bl	801c10e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801054e:	4823      	ldr	r0, [pc, #140]	; (80105dc <lwip_netconn_do_delconn+0x1c4>)
 8010550:	f00b fe70 	bl	801c234 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	785b      	ldrb	r3, [r3, #1]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d02d      	beq.n	80105ba <lwip_netconn_do_delconn+0x1a2>
 801055e:	4b19      	ldr	r3, [pc, #100]	; (80105c4 <lwip_netconn_do_delconn+0x1ac>)
 8010560:	f240 429e 	movw	r2, #1182	; 0x49e
 8010564:	491c      	ldr	r1, [pc, #112]	; (80105d8 <lwip_netconn_do_delconn+0x1c0>)
 8010566:	4819      	ldr	r0, [pc, #100]	; (80105cc <lwip_netconn_do_delconn+0x1b4>)
 8010568:	f00c fdb0 	bl	801d0cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801056c:	e025      	b.n	80105ba <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801056e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2200      	movs	r2, #0
 8010576:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d007      	beq.n	8010592 <lwip_netconn_do_delconn+0x17a>
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	6810      	ldr	r0, [r2, #0]
 801058c:	2200      	movs	r2, #0
 801058e:	2100      	movs	r1, #0
 8010590:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	d007      	beq.n	80105ac <lwip_netconn_do_delconn+0x194>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a2:	68fa      	ldr	r2, [r7, #12]
 80105a4:	6810      	ldr	r0, [r2, #0]
 80105a6:	2200      	movs	r2, #0
 80105a8:	2102      	movs	r1, #2
 80105aa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	330c      	adds	r3, #12
 80105b2:	4618      	mov	r0, r3
 80105b4:	f00b fdf6 	bl	801c1a4 <sys_sem_valid>
 80105b8:	e000      	b.n	80105bc <lwip_netconn_do_delconn+0x1a4>
          return;
 80105ba:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	0801f9d4 	.word	0x0801f9d4
 80105c8:	0801fd44 	.word	0x0801fd44
 80105cc:	0801fa18 	.word	0x0801fa18
 80105d0:	0801fd58 	.word	0x0801fd58
 80105d4:	0801fd78 	.word	0x0801fd78
 80105d8:	0801fd94 	.word	0x0801fd94
 80105dc:	2000dacc 	.word	0x2000dacc

080105e0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d025      	beq.n	8010642 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010600:	2b10      	cmp	r3, #16
 8010602:	d00e      	beq.n	8010622 <lwip_netconn_do_bind+0x42>
 8010604:	2b20      	cmp	r3, #32
 8010606:	d119      	bne.n	801063c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	6858      	ldr	r0, [r3, #4]
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	6899      	ldr	r1, [r3, #8]
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	899b      	ldrh	r3, [r3, #12]
 8010616:	461a      	mov	r2, r3
 8010618:	f009 f886 	bl	8019728 <udp_bind>
 801061c:	4603      	mov	r3, r0
 801061e:	73fb      	strb	r3, [r7, #15]
        break;
 8010620:	e011      	b.n	8010646 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6858      	ldr	r0, [r3, #4]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	6899      	ldr	r1, [r3, #8]
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	899b      	ldrh	r3, [r3, #12]
 8010630:	461a      	mov	r2, r3
 8010632:	f003 f819 	bl	8013668 <tcp_bind>
 8010636:	4603      	mov	r3, r0
 8010638:	73fb      	strb	r3, [r7, #15]
        break;
 801063a:	e004      	b.n	8010646 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801063c:	23fa      	movs	r3, #250	; 0xfa
 801063e:	73fb      	strb	r3, [r7, #15]
        break;
 8010640:	e001      	b.n	8010646 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010642:	23fa      	movs	r3, #250	; 0xfa
 8010644:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	7bfa      	ldrb	r2, [r7, #15]
 801064a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801064c:	bf00      	nop
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d07f      	beq.n	801076a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010674:	2b10      	cmp	r3, #16
 8010676:	d175      	bne.n	8010764 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	785b      	ldrb	r3, [r3, #1]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d165      	bne.n	801074e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	7d1b      	ldrb	r3, [r3, #20]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d002      	beq.n	8010694 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 801068e:	23fa      	movs	r3, #250	; 0xfa
 8010690:	72fb      	strb	r3, [r7, #11]
 8010692:	e06c      	b.n	801076e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010694:	23ff      	movs	r3, #255	; 0xff
 8010696:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	f107 020b 	add.w	r2, r7, #11
 80106a2:	7cf9      	ldrb	r1, [r7, #19]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f003 f897 	bl	80137d8 <tcp_listen_with_backlog_and_err>
 80106aa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d05d      	beq.n	801076e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3310      	adds	r3, #16
 80106b8:	4618      	mov	r0, r3
 80106ba:	f00b fce2 	bl	801c082 <sys_mbox_valid>
 80106be:	4603      	mov	r3, r0
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00b      	beq.n	80106dc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	3310      	adds	r3, #16
 80106ca:	4618      	mov	r0, r3
 80106cc:	f00b fc52 	bl	801bf74 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	3310      	adds	r3, #16
 80106d6:	4618      	mov	r0, r3
 80106d8:	f00b fce4 	bl	801c0a4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80106dc:	2300      	movs	r3, #0
 80106de:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3314      	adds	r3, #20
 80106e6:	4618      	mov	r0, r3
 80106e8:	f00b fccb 	bl	801c082 <sys_mbox_valid>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d108      	bne.n	8010704 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3314      	adds	r3, #20
 80106f8:	2106      	movs	r1, #6
 80106fa:	4618      	mov	r0, r3
 80106fc:	f00b fc18 	bl	801bf30 <sys_mbox_new>
 8010700:	4603      	mov	r3, r0
 8010702:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010704:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d118      	bne.n	801073e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2202      	movs	r2, #2
 8010712:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	685a      	ldr	r2, [r3, #4]
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4619      	mov	r1, r3
 8010728:	4610      	mov	r0, r2
 801072a:	f004 f81f 	bl	801476c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	4912      	ldr	r1, [pc, #72]	; (8010780 <lwip_netconn_do_listen+0x12c>)
 8010736:	4618      	mov	r0, r3
 8010738:	f004 f890 	bl	801485c <tcp_accept>
 801073c:	e017      	b.n	801076e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	f002 fe40 	bl	80133c4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2200      	movs	r2, #0
 801074a:	605a      	str	r2, [r3, #4]
 801074c:	e00f      	b.n	801076e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	785b      	ldrb	r3, [r3, #1]
 8010754:	2b02      	cmp	r3, #2
 8010756:	d102      	bne.n	801075e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010758:	2300      	movs	r3, #0
 801075a:	72fb      	strb	r3, [r7, #11]
 801075c:	e007      	b.n	801076e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801075e:	23f5      	movs	r3, #245	; 0xf5
 8010760:	72fb      	strb	r3, [r7, #11]
 8010762:	e004      	b.n	801076e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8010764:	23f0      	movs	r3, #240	; 0xf0
 8010766:	72fb      	strb	r3, [r7, #11]
 8010768:	e001      	b.n	801076e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801076a:	23f5      	movs	r3, #245	; 0xf5
 801076c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801076e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010776:	bf00      	nop
 8010778:	3718      	adds	r7, #24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	0800fc61 	.word	0x0800fc61

08010784 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	2200      	movs	r2, #0
 8010794:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d022      	beq.n	80107e6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107aa:	2b10      	cmp	r3, #16
 80107ac:	d11b      	bne.n	80107e6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	689b      	ldr	r3, [r3, #8]
 80107b2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ba:	d202      	bcs.n	80107c2 <lwip_netconn_do_recv+0x3e>
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	b29b      	uxth	r3, r3
 80107c0:	e001      	b.n	80107c6 <lwip_netconn_do_recv+0x42>
 80107c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107c6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	89fa      	ldrh	r2, [r7, #14]
 80107d0:	4611      	mov	r1, r2
 80107d2:	4618      	mov	r0, r3
 80107d4:	f003 f904 	bl	80139e0 <tcp_recved>
        remaining -= recved;
 80107d8:	89fb      	ldrh	r3, [r7, #14]
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1e6      	bne.n	80107b4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80107e6:	bf00      	nop
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
	...

080107f0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b088      	sub	sp, #32
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d106      	bne.n	8010814 <lwip_netconn_do_writemore+0x24>
 8010806:	4b96      	ldr	r3, [pc, #600]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 8010808:	f240 6273 	movw	r2, #1651	; 0x673
 801080c:	4995      	ldr	r1, [pc, #596]	; (8010a64 <lwip_netconn_do_writemore+0x274>)
 801080e:	4896      	ldr	r0, [pc, #600]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 8010810:	f00c fc5c 	bl	801d0cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	785b      	ldrb	r3, [r3, #1]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d006      	beq.n	801082a <lwip_netconn_do_writemore+0x3a>
 801081c:	4b90      	ldr	r3, [pc, #576]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 801081e:	f240 6274 	movw	r2, #1652	; 0x674
 8010822:	4992      	ldr	r1, [pc, #584]	; (8010a6c <lwip_netconn_do_writemore+0x27c>)
 8010824:	4890      	ldr	r0, [pc, #576]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 8010826:	f00c fc51 	bl	801d0cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a1b      	ldr	r3, [r3, #32]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <lwip_netconn_do_writemore+0x50>
 8010832:	4b8b      	ldr	r3, [pc, #556]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 8010834:	f240 6275 	movw	r2, #1653	; 0x675
 8010838:	498d      	ldr	r1, [pc, #564]	; (8010a70 <lwip_netconn_do_writemore+0x280>)
 801083a:	488b      	ldr	r0, [pc, #556]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 801083c:	f00c fc46 	bl	801d0cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d106      	bne.n	8010856 <lwip_netconn_do_writemore+0x66>
 8010848:	4b85      	ldr	r3, [pc, #532]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 801084a:	f240 6276 	movw	r2, #1654	; 0x676
 801084e:	4989      	ldr	r1, [pc, #548]	; (8010a74 <lwip_netconn_do_writemore+0x284>)
 8010850:	4885      	ldr	r0, [pc, #532]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 8010852:	f00c fc3b 	bl	801d0cc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a1b      	ldr	r3, [r3, #32]
 801085a:	699a      	ldr	r2, [r3, #24]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a1b      	ldr	r3, [r3, #32]
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	429a      	cmp	r2, r3
 8010864:	d306      	bcc.n	8010874 <lwip_netconn_do_writemore+0x84>
 8010866:	4b7e      	ldr	r3, [pc, #504]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 8010868:	f240 6277 	movw	r2, #1655	; 0x677
 801086c:	4982      	ldr	r1, [pc, #520]	; (8010a78 <lwip_netconn_do_writemore+0x288>)
 801086e:	487e      	ldr	r0, [pc, #504]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 8010870:	f00c fc2c 	bl	801d0cc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6a1b      	ldr	r3, [r3, #32]
 8010878:	899b      	ldrh	r3, [r3, #12]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d106      	bne.n	801088c <lwip_netconn_do_writemore+0x9c>
 801087e:	4b78      	ldr	r3, [pc, #480]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 8010880:	f240 6279 	movw	r2, #1657	; 0x679
 8010884:	497d      	ldr	r1, [pc, #500]	; (8010a7c <lwip_netconn_do_writemore+0x28c>)
 8010886:	4878      	ldr	r0, [pc, #480]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 8010888:	f00c fc20 	bl	801d0cc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a1b      	ldr	r3, [r3, #32]
 8010890:	7f1b      	ldrb	r3, [r3, #28]
 8010892:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	7f1b      	ldrb	r3, [r3, #28]
 8010898:	f003 0302 	and.w	r3, r3, #2
 801089c:	2b00      	cmp	r3, #0
 801089e:	d104      	bne.n	80108aa <lwip_netconn_do_writemore+0xba>
 80108a0:	7ebb      	ldrb	r3, [r7, #26]
 80108a2:	f003 0304 	and.w	r3, r3, #4
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d001      	beq.n	80108ae <lwip_netconn_do_writemore+0xbe>
 80108aa:	2301      	movs	r3, #1
 80108ac:	e000      	b.n	80108b0 <lwip_netconn_do_writemore+0xc0>
 80108ae:	2300      	movs	r3, #0
 80108b0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a1b      	ldr	r3, [r3, #32]
 80108b6:	689b      	ldr	r3, [r3, #8]
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a1b      	ldr	r3, [r3, #32]
 80108be:	691b      	ldr	r3, [r3, #16]
 80108c0:	4413      	add	r3, r2
 80108c2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	689b      	ldr	r3, [r3, #8]
 80108ca:	685a      	ldr	r2, [r3, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6a1b      	ldr	r3, [r3, #32]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108dc:	d307      	bcc.n	80108ee <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80108de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108e2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80108e4:	7ebb      	ldrb	r3, [r7, #26]
 80108e6:	f043 0302 	orr.w	r3, r3, #2
 80108ea:	76bb      	strb	r3, [r7, #26]
 80108ec:	e001      	b.n	80108f2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80108fa:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80108fc:	89fa      	ldrh	r2, [r7, #14]
 80108fe:	8bbb      	ldrh	r3, [r7, #28]
 8010900:	429a      	cmp	r2, r3
 8010902:	d216      	bcs.n	8010932 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010904:	89fb      	ldrh	r3, [r7, #14]
 8010906:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010908:	7e3b      	ldrb	r3, [r7, #24]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00d      	beq.n	801092a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801090e:	8bbb      	ldrh	r3, [r7, #28]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10e      	bne.n	8010932 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a1b      	ldr	r3, [r3, #32]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d102      	bne.n	8010924 <lwip_netconn_do_writemore+0x134>
 801091e:	f06f 0306 	mvn.w	r3, #6
 8010922:	e000      	b.n	8010926 <lwip_netconn_do_writemore+0x136>
 8010924:	2300      	movs	r3, #0
 8010926:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010928:	e07d      	b.n	8010a26 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801092a:	7ebb      	ldrb	r3, [r7, #26]
 801092c:	f043 0302 	orr.w	r3, r3, #2
 8010930:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a1b      	ldr	r3, [r3, #32]
 8010936:	691a      	ldr	r2, [r3, #16]
 8010938:	8bbb      	ldrh	r3, [r7, #28]
 801093a:	441a      	add	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6a1b      	ldr	r3, [r3, #32]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	429a      	cmp	r2, r3
 8010946:	d906      	bls.n	8010956 <lwip_netconn_do_writemore+0x166>
 8010948:	4b45      	ldr	r3, [pc, #276]	; (8010a60 <lwip_netconn_do_writemore+0x270>)
 801094a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801094e:	494c      	ldr	r1, [pc, #304]	; (8010a80 <lwip_netconn_do_writemore+0x290>)
 8010950:	4845      	ldr	r0, [pc, #276]	; (8010a68 <lwip_netconn_do_writemore+0x278>)
 8010952:	f00c fbbb 	bl	801d0cc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010956:	8bbb      	ldrh	r3, [r7, #28]
 8010958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801095c:	4293      	cmp	r3, r2
 801095e:	d103      	bne.n	8010968 <lwip_netconn_do_writemore+0x178>
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010966:	d209      	bcs.n	801097c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801096c:	8bba      	ldrh	r2, [r7, #28]
 801096e:	429a      	cmp	r2, r3
 8010970:	d10b      	bne.n	801098a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	899b      	ldrh	r3, [r3, #12]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d906      	bls.n	801098a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801097c:	2301      	movs	r3, #1
 801097e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010980:	7ebb      	ldrb	r3, [r7, #26]
 8010982:	f043 0302 	orr.w	r3, r3, #2
 8010986:	76bb      	strb	r3, [r7, #26]
 8010988:	e001      	b.n	801098e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801098a:	2300      	movs	r3, #0
 801098c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6858      	ldr	r0, [r3, #4]
 8010992:	7ebb      	ldrb	r3, [r7, #26]
 8010994:	8bba      	ldrh	r2, [r7, #28]
 8010996:	6979      	ldr	r1, [r7, #20]
 8010998:	f006 fe2a 	bl	80175f0 <tcp_write>
 801099c:	4603      	mov	r3, r0
 801099e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80109a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d12c      	bne.n	8010a02 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a1b      	ldr	r3, [r3, #32]
 80109ac:	6999      	ldr	r1, [r3, #24]
 80109ae:	8bba      	ldrh	r2, [r7, #28]
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a1b      	ldr	r3, [r3, #32]
 80109b4:	440a      	add	r2, r1
 80109b6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6a1b      	ldr	r3, [r3, #32]
 80109bc:	6919      	ldr	r1, [r3, #16]
 80109be:	8bba      	ldrh	r2, [r7, #28]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6a1b      	ldr	r3, [r3, #32]
 80109c4:	440a      	add	r2, r1
 80109c6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6a1b      	ldr	r3, [r3, #32]
 80109cc:	691a      	ldr	r2, [r3, #16]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	689b      	ldr	r3, [r3, #8]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d113      	bne.n	8010a02 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6a1b      	ldr	r3, [r3, #32]
 80109de:	899a      	ldrh	r2, [r3, #12]
 80109e0:	3a01      	subs	r2, #1
 80109e2:	b292      	uxth	r2, r2
 80109e4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a1b      	ldr	r3, [r3, #32]
 80109ea:	899b      	ldrh	r3, [r3, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d008      	beq.n	8010a02 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a1b      	ldr	r3, [r3, #32]
 80109f4:	689a      	ldr	r2, [r3, #8]
 80109f6:	3208      	adds	r2, #8
 80109f8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6a1b      	ldr	r3, [r3, #32]
 80109fe:	2200      	movs	r2, #0
 8010a00:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010a02:	7e7b      	ldrb	r3, [r7, #25]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d004      	beq.n	8010a12 <lwip_netconn_do_writemore+0x222>
 8010a08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f43f af50 	beq.w	80108b2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d004      	beq.n	8010a24 <lwip_netconn_do_writemore+0x234>
 8010a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a22:	d146      	bne.n	8010ab2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010a24:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010a26:	7e3b      	ldrb	r3, [r7, #24]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d02b      	beq.n	8010a84 <lwip_netconn_do_writemore+0x294>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a1b      	ldr	r3, [r3, #32]
 8010a30:	699a      	ldr	r2, [r3, #24]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6a1b      	ldr	r3, [r3, #32]
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d223      	bcs.n	8010a84 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d005      	beq.n	8010a50 <lwip_netconn_do_writemore+0x260>
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a48:	2200      	movs	r2, #0
 8010a4a:	2103      	movs	r1, #3
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	7f1b      	ldrb	r3, [r3, #28]
 8010a54:	f043 0310 	orr.w	r3, r3, #16
 8010a58:	b2da      	uxtb	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	771a      	strb	r2, [r3, #28]
 8010a5e:	e028      	b.n	8010ab2 <lwip_netconn_do_writemore+0x2c2>
 8010a60:	0801f9d4 	.word	0x0801f9d4
 8010a64:	0801fb2c 	.word	0x0801fb2c
 8010a68:	0801fa18 	.word	0x0801fa18
 8010a6c:	0801fe34 	.word	0x0801fe34
 8010a70:	0801fb3c 	.word	0x0801fb3c
 8010a74:	0801fe54 	.word	0x0801fe54
 8010a78:	0801fe6c 	.word	0x0801fe6c
 8010a7c:	0801feac 	.word	0x0801feac
 8010a80:	0801fed4 	.word	0x0801fed4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010a8c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010a90:	d305      	bcc.n	8010a9e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010a9a:	2b04      	cmp	r3, #4
 8010a9c:	d909      	bls.n	8010ab2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d005      	beq.n	8010ab2 <lwip_netconn_do_writemore+0x2c2>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aaa:	2200      	movs	r2, #0
 8010aac:	2103      	movs	r1, #3
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d11d      	bne.n	8010af6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6a1b      	ldr	r3, [r3, #32]
 8010abe:	699a      	ldr	r2, [r3, #24]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6a1b      	ldr	r3, [r3, #32]
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d002      	beq.n	8010ad0 <lwip_netconn_do_writemore+0x2e0>
 8010aca:	7e3b      	ldrb	r3, [r7, #24]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d001      	beq.n	8010ad4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f007 fb73 	bl	80181c4 <tcp_output>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010ae2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010ae6:	f113 0f04 	cmn.w	r3, #4
 8010aea:	d12c      	bne.n	8010b46 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010aec:	7b3b      	ldrb	r3, [r7, #12]
 8010aee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010af0:	2301      	movs	r3, #1
 8010af2:	76fb      	strb	r3, [r7, #27]
 8010af4:	e027      	b.n	8010b46 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010afe:	d120      	bne.n	8010b42 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f007 fb5d 	bl	80181c4 <tcp_output>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010b0e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010b12:	f113 0f04 	cmn.w	r3, #4
 8010b16:	d104      	bne.n	8010b22 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010b18:	7b7b      	ldrb	r3, [r7, #13]
 8010b1a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	76fb      	strb	r3, [r7, #27]
 8010b20:	e011      	b.n	8010b46 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010b22:	7e3b      	ldrb	r3, [r7, #24]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00e      	beq.n	8010b46 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6a1b      	ldr	r3, [r3, #32]
 8010b2c:	699b      	ldr	r3, [r3, #24]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d102      	bne.n	8010b38 <lwip_netconn_do_writemore+0x348>
 8010b32:	f06f 0306 	mvn.w	r3, #6
 8010b36:	e000      	b.n	8010b3a <lwip_netconn_do_writemore+0x34a>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	76fb      	strb	r3, [r7, #27]
 8010b40:	e001      	b.n	8010b46 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010b42:	2301      	movs	r3, #1
 8010b44:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010b46:	7efb      	ldrb	r3, [r7, #27]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d015      	beq.n	8010b78 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a1b      	ldr	r3, [r3, #32]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	330c      	adds	r3, #12
 8010b54:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a1b      	ldr	r3, [r3, #32]
 8010b5a:	7ffa      	ldrb	r2, [r7, #31]
 8010b5c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010b6a:	78fb      	ldrb	r3, [r7, #3]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d006      	beq.n	8010b7e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010b70:	68b8      	ldr	r0, [r7, #8]
 8010b72:	f00b fafd 	bl	801c170 <sys_sem_signal>
 8010b76:	e002      	b.n	8010b7e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010b78:	f04f 33ff 	mov.w	r3, #4294967295
 8010b7c:	e000      	b.n	8010b80 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3720      	adds	r7, #32
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7fe fd1c 	bl	800f5d6 <netconn_err>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d166      	bne.n	8010c78 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bb4:	2b10      	cmp	r3, #16
 8010bb6:	d15d      	bne.n	8010c74 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	785b      	ldrb	r3, [r3, #1]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d002      	beq.n	8010bc8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010bc2:	23fb      	movs	r3, #251	; 0xfb
 8010bc4:	73fb      	strb	r3, [r7, #15]
 8010bc6:	e057      	b.n	8010c78 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d04d      	beq.n	8010c6e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	6a1b      	ldr	r3, [r3, #32]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d006      	beq.n	8010bf2 <lwip_netconn_do_write+0x6a>
 8010be4:	4b28      	ldr	r3, [pc, #160]	; (8010c88 <lwip_netconn_do_write+0x100>)
 8010be6:	f240 7223 	movw	r2, #1827	; 0x723
 8010bea:	4928      	ldr	r1, [pc, #160]	; (8010c8c <lwip_netconn_do_write+0x104>)
 8010bec:	4828      	ldr	r0, [pc, #160]	; (8010c90 <lwip_netconn_do_write+0x108>)
 8010bee:	f00c fa6d 	bl	801d0cc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	695b      	ldr	r3, [r3, #20]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d106      	bne.n	8010c08 <lwip_netconn_do_write+0x80>
 8010bfa:	4b23      	ldr	r3, [pc, #140]	; (8010c88 <lwip_netconn_do_write+0x100>)
 8010bfc:	f240 7224 	movw	r2, #1828	; 0x724
 8010c00:	4924      	ldr	r1, [pc, #144]	; (8010c94 <lwip_netconn_do_write+0x10c>)
 8010c02:	4823      	ldr	r0, [pc, #140]	; (8010c90 <lwip_netconn_do_write+0x108>)
 8010c04:	f00c fa62 	bl	801d0cc <iprintf>
        msg->conn->current_msg = msg;
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	68ba      	ldr	r2, [r7, #8]
 8010c0e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2100      	movs	r1, #0
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fdea 	bl	80107f0 <lwip_netconn_do_writemore>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d02e      	beq.n	8010c80 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	785b      	ldrb	r3, [r3, #1]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d006      	beq.n	8010c3a <lwip_netconn_do_write+0xb2>
 8010c2c:	4b16      	ldr	r3, [pc, #88]	; (8010c88 <lwip_netconn_do_write+0x100>)
 8010c2e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010c32:	4919      	ldr	r1, [pc, #100]	; (8010c98 <lwip_netconn_do_write+0x110>)
 8010c34:	4816      	ldr	r0, [pc, #88]	; (8010c90 <lwip_netconn_do_write+0x108>)
 8010c36:	f00c fa49 	bl	801d0cc <iprintf>
          UNLOCK_TCPIP_CORE();
 8010c3a:	4818      	ldr	r0, [pc, #96]	; (8010c9c <lwip_netconn_do_write+0x114>)
 8010c3c:	f00b fb09 	bl	801c252 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	330c      	adds	r3, #12
 8010c46:	2100      	movs	r1, #0
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f00b fa60 	bl	801c10e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010c4e:	4813      	ldr	r0, [pc, #76]	; (8010c9c <lwip_netconn_do_write+0x114>)
 8010c50:	f00b faf0 	bl	801c234 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	785b      	ldrb	r3, [r3, #1]
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d110      	bne.n	8010c80 <lwip_netconn_do_write+0xf8>
 8010c5e:	4b0a      	ldr	r3, [pc, #40]	; (8010c88 <lwip_netconn_do_write+0x100>)
 8010c60:	f240 722c 	movw	r2, #1836	; 0x72c
 8010c64:	490c      	ldr	r1, [pc, #48]	; (8010c98 <lwip_netconn_do_write+0x110>)
 8010c66:	480a      	ldr	r0, [pc, #40]	; (8010c90 <lwip_netconn_do_write+0x108>)
 8010c68:	f00c fa30 	bl	801d0cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010c6c:	e008      	b.n	8010c80 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010c6e:	23f5      	movs	r3, #245	; 0xf5
 8010c70:	73fb      	strb	r3, [r7, #15]
 8010c72:	e001      	b.n	8010c78 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010c74:	23fa      	movs	r3, #250	; 0xfa
 8010c76:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	7bfa      	ldrb	r2, [r7, #15]
 8010c7c:	711a      	strb	r2, [r3, #4]
 8010c7e:	e000      	b.n	8010c82 <lwip_netconn_do_write+0xfa>
        return;
 8010c80:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010c82:	3710      	adds	r7, #16
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	0801f9d4 	.word	0x0801f9d4
 8010c8c:	0801fd78 	.word	0x0801fd78
 8010c90:	0801fa18 	.word	0x0801fa18
 8010c94:	0801ff00 	.word	0x0801ff00
 8010c98:	0801fd94 	.word	0x0801fd94
 8010c9c:	2000dacc 	.word	0x2000dacc

08010ca0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	785b      	ldrb	r3, [r3, #1]
 8010cb2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d069      	beq.n	8010d92 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010cc8:	2b10      	cmp	r3, #16
 8010cca:	d162      	bne.n	8010d92 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010cd0:	2b03      	cmp	r3, #3
 8010cd2:	d002      	beq.n	8010cda <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010cd4:	7afb      	ldrb	r3, [r7, #11]
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	d05b      	beq.n	8010d92 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010cda:	7afb      	ldrb	r3, [r7, #11]
 8010cdc:	2b03      	cmp	r3, #3
 8010cde:	d103      	bne.n	8010ce8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	22f5      	movs	r2, #245	; 0xf5
 8010ce4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010ce6:	e059      	b.n	8010d9c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010ce8:	7afb      	ldrb	r3, [r7, #11]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d103      	bne.n	8010cf6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	22fb      	movs	r2, #251	; 0xfb
 8010cf2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010cf4:	e052      	b.n	8010d9c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	7a1b      	ldrb	r3, [r3, #8]
 8010cfa:	f003 0301 	and.w	r3, r3, #1
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d004      	beq.n	8010d0c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff f99e 	bl	8010048 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	6a1b      	ldr	r3, [r3, #32]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d006      	beq.n	8010d24 <lwip_netconn_do_close+0x84>
 8010d16:	4b23      	ldr	r3, [pc, #140]	; (8010da4 <lwip_netconn_do_close+0x104>)
 8010d18:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010d1c:	4922      	ldr	r1, [pc, #136]	; (8010da8 <lwip_netconn_do_close+0x108>)
 8010d1e:	4823      	ldr	r0, [pc, #140]	; (8010dac <lwip_netconn_do_close+0x10c>)
 8010d20:	f00c f9d4 	bl	801d0cc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2204      	movs	r2, #4
 8010d2a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7ff fa02 	bl	8010144 <lwip_netconn_do_close_internal>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d029      	beq.n	8010d9a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	785b      	ldrb	r3, [r3, #1]
 8010d4c:	2b04      	cmp	r3, #4
 8010d4e:	d006      	beq.n	8010d5e <lwip_netconn_do_close+0xbe>
 8010d50:	4b14      	ldr	r3, [pc, #80]	; (8010da4 <lwip_netconn_do_close+0x104>)
 8010d52:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8010d56:	4916      	ldr	r1, [pc, #88]	; (8010db0 <lwip_netconn_do_close+0x110>)
 8010d58:	4814      	ldr	r0, [pc, #80]	; (8010dac <lwip_netconn_do_close+0x10c>)
 8010d5a:	f00c f9b7 	bl	801d0cc <iprintf>
        UNLOCK_TCPIP_CORE();
 8010d5e:	4815      	ldr	r0, [pc, #84]	; (8010db4 <lwip_netconn_do_close+0x114>)
 8010d60:	f00b fa77 	bl	801c252 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	330c      	adds	r3, #12
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f00b f9ce 	bl	801c10e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010d72:	4810      	ldr	r0, [pc, #64]	; (8010db4 <lwip_netconn_do_close+0x114>)
 8010d74:	f00b fa5e 	bl	801c234 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	785b      	ldrb	r3, [r3, #1]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d00b      	beq.n	8010d9a <lwip_netconn_do_close+0xfa>
 8010d82:	4b08      	ldr	r3, [pc, #32]	; (8010da4 <lwip_netconn_do_close+0x104>)
 8010d84:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010d88:	4909      	ldr	r1, [pc, #36]	; (8010db0 <lwip_netconn_do_close+0x110>)
 8010d8a:	4808      	ldr	r0, [pc, #32]	; (8010dac <lwip_netconn_do_close+0x10c>)
 8010d8c:	f00c f99e 	bl	801d0cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010d90:	e003      	b.n	8010d9a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	22f5      	movs	r2, #245	; 0xf5
 8010d96:	711a      	strb	r2, [r3, #4]
 8010d98:	e000      	b.n	8010d9c <lwip_netconn_do_close+0xfc>
      return;
 8010d9a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	0801f9d4 	.word	0x0801f9d4
 8010da8:	0801fd78 	.word	0x0801fd78
 8010dac:	0801fa18 	.word	0x0801fa18
 8010db0:	0801fd94 	.word	0x0801fd94
 8010db4:	2000dacc 	.word	0x2000dacc

08010db8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b082      	sub	sp, #8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d013      	beq.n	8010dee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00b      	beq.n	8010de6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f001 fe4c 	bl	8012a70 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	605a      	str	r2, [r3, #4]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	685a      	ldr	r2, [r3, #4]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010de6:	6879      	ldr	r1, [r7, #4]
 8010de8:	2006      	movs	r0, #6
 8010dea:	f000 ff9d 	bl	8011d28 <memp_free>
  }
}
 8010dee:	bf00      	nop
 8010df0:	3708      	adds	r7, #8
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
	...

08010df8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d108      	bne.n	8010e1c <netbuf_data+0x24>
 8010e0a:	4b1b      	ldr	r3, [pc, #108]	; (8010e78 <netbuf_data+0x80>)
 8010e0c:	22c6      	movs	r2, #198	; 0xc6
 8010e0e:	491b      	ldr	r1, [pc, #108]	; (8010e7c <netbuf_data+0x84>)
 8010e10:	481b      	ldr	r0, [pc, #108]	; (8010e80 <netbuf_data+0x88>)
 8010e12:	f00c f95b 	bl	801d0cc <iprintf>
 8010e16:	f06f 030f 	mvn.w	r3, #15
 8010e1a:	e029      	b.n	8010e70 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d108      	bne.n	8010e34 <netbuf_data+0x3c>
 8010e22:	4b15      	ldr	r3, [pc, #84]	; (8010e78 <netbuf_data+0x80>)
 8010e24:	22c7      	movs	r2, #199	; 0xc7
 8010e26:	4917      	ldr	r1, [pc, #92]	; (8010e84 <netbuf_data+0x8c>)
 8010e28:	4815      	ldr	r0, [pc, #84]	; (8010e80 <netbuf_data+0x88>)
 8010e2a:	f00c f94f 	bl	801d0cc <iprintf>
 8010e2e:	f06f 030f 	mvn.w	r3, #15
 8010e32:	e01d      	b.n	8010e70 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d108      	bne.n	8010e4c <netbuf_data+0x54>
 8010e3a:	4b0f      	ldr	r3, [pc, #60]	; (8010e78 <netbuf_data+0x80>)
 8010e3c:	22c8      	movs	r2, #200	; 0xc8
 8010e3e:	4912      	ldr	r1, [pc, #72]	; (8010e88 <netbuf_data+0x90>)
 8010e40:	480f      	ldr	r0, [pc, #60]	; (8010e80 <netbuf_data+0x88>)
 8010e42:	f00c f943 	bl	801d0cc <iprintf>
 8010e46:	f06f 030f 	mvn.w	r3, #15
 8010e4a:	e011      	b.n	8010e70 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d102      	bne.n	8010e5a <netbuf_data+0x62>
    return ERR_BUF;
 8010e54:	f06f 0301 	mvn.w	r3, #1
 8010e58:	e00a      	b.n	8010e70 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	685a      	ldr	r2, [r3, #4]
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	895a      	ldrh	r2, [r3, #10]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	0801ff2c 	.word	0x0801ff2c
 8010e7c:	08020034 	.word	0x08020034
 8010e80:	0801ff7c 	.word	0x0801ff7c
 8010e84:	08020050 	.word	0x08020050
 8010e88:	08020070 	.word	0x08020070

08010e8c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010e96:	f008 fa4d 	bl	8019334 <sys_timeouts_sleeptime>
 8010e9a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea2:	d10b      	bne.n	8010ebc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010ea4:	4813      	ldr	r0, [pc, #76]	; (8010ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8010ea6:	f00b f9d4 	bl	801c252 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010eaa:	2200      	movs	r2, #0
 8010eac:	6839      	ldr	r1, [r7, #0]
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f00b f88c 	bl	801bfcc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010eb4:	480f      	ldr	r0, [pc, #60]	; (8010ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8010eb6:	f00b f9bd 	bl	801c234 <sys_mutex_lock>
    return;
 8010eba:	e018      	b.n	8010eee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d102      	bne.n	8010ec8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010ec2:	f008 f9fd 	bl	80192c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010ec6:	e7e6      	b.n	8010e96 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010ec8:	480a      	ldr	r0, [pc, #40]	; (8010ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8010eca:	f00b f9c2 	bl	801c252 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010ece:	68fa      	ldr	r2, [r7, #12]
 8010ed0:	6839      	ldr	r1, [r7, #0]
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f00b f87a 	bl	801bfcc <sys_arch_mbox_fetch>
 8010ed8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010eda:	4806      	ldr	r0, [pc, #24]	; (8010ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8010edc:	f00b f9aa 	bl	801c234 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ee6:	d102      	bne.n	8010eee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010ee8:	f008 f9ea 	bl	80192c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010eec:	e7d3      	b.n	8010e96 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010eee:	3710      	adds	r7, #16
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	2000dacc 	.word	0x2000dacc

08010ef8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010f00:	4810      	ldr	r0, [pc, #64]	; (8010f44 <tcpip_thread+0x4c>)
 8010f02:	f00b f997 	bl	801c234 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010f06:	4b10      	ldr	r3, [pc, #64]	; (8010f48 <tcpip_thread+0x50>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d005      	beq.n	8010f1a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010f0e:	4b0e      	ldr	r3, [pc, #56]	; (8010f48 <tcpip_thread+0x50>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a0e      	ldr	r2, [pc, #56]	; (8010f4c <tcpip_thread+0x54>)
 8010f14:	6812      	ldr	r2, [r2, #0]
 8010f16:	4610      	mov	r0, r2
 8010f18:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010f1a:	f107 030c 	add.w	r3, r7, #12
 8010f1e:	4619      	mov	r1, r3
 8010f20:	480b      	ldr	r0, [pc, #44]	; (8010f50 <tcpip_thread+0x58>)
 8010f22:	f7ff ffb3 	bl	8010e8c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010f2c:	4b09      	ldr	r3, [pc, #36]	; (8010f54 <tcpip_thread+0x5c>)
 8010f2e:	2291      	movs	r2, #145	; 0x91
 8010f30:	4909      	ldr	r1, [pc, #36]	; (8010f58 <tcpip_thread+0x60>)
 8010f32:	480a      	ldr	r0, [pc, #40]	; (8010f5c <tcpip_thread+0x64>)
 8010f34:	f00c f8ca 	bl	801d0cc <iprintf>
      continue;
 8010f38:	e003      	b.n	8010f42 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f000 f80f 	bl	8010f60 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010f42:	e7ea      	b.n	8010f1a <tcpip_thread+0x22>
 8010f44:	2000dacc 	.word	0x2000dacc
 8010f48:	2000dac0 	.word	0x2000dac0
 8010f4c:	2000dac4 	.word	0x2000dac4
 8010f50:	2000dac8 	.word	0x2000dac8
 8010f54:	080200c4 	.word	0x080200c4
 8010f58:	080200f4 	.word	0x080200f4
 8010f5c:	08020114 	.word	0x08020114

08010f60 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	2b02      	cmp	r3, #2
 8010f6e:	d026      	beq.n	8010fbe <tcpip_thread_handle_msg+0x5e>
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	dc2b      	bgt.n	8010fcc <tcpip_thread_handle_msg+0x6c>
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <tcpip_thread_handle_msg+0x1e>
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d015      	beq.n	8010fa8 <tcpip_thread_handle_msg+0x48>
 8010f7c:	e026      	b.n	8010fcc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	6850      	ldr	r0, [r2, #4]
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	6892      	ldr	r2, [r2, #8]
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4798      	blx	r3
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d004      	beq.n	8010f9e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f001 fd69 	bl	8012a70 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010f9e:	6879      	ldr	r1, [r7, #4]
 8010fa0:	2009      	movs	r0, #9
 8010fa2:	f000 fec1 	bl	8011d28 <memp_free>
      break;
 8010fa6:	e018      	b.n	8010fda <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	6892      	ldr	r2, [r2, #8]
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010fb4:	6879      	ldr	r1, [r7, #4]
 8010fb6:	2008      	movs	r0, #8
 8010fb8:	f000 feb6 	bl	8011d28 <memp_free>
      break;
 8010fbc:	e00d      	b.n	8010fda <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	687a      	ldr	r2, [r7, #4]
 8010fc4:	6892      	ldr	r2, [r2, #8]
 8010fc6:	4610      	mov	r0, r2
 8010fc8:	4798      	blx	r3
      break;
 8010fca:	e006      	b.n	8010fda <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010fcc:	4b05      	ldr	r3, [pc, #20]	; (8010fe4 <tcpip_thread_handle_msg+0x84>)
 8010fce:	22cf      	movs	r2, #207	; 0xcf
 8010fd0:	4905      	ldr	r1, [pc, #20]	; (8010fe8 <tcpip_thread_handle_msg+0x88>)
 8010fd2:	4806      	ldr	r0, [pc, #24]	; (8010fec <tcpip_thread_handle_msg+0x8c>)
 8010fd4:	f00c f87a 	bl	801d0cc <iprintf>
      break;
 8010fd8:	bf00      	nop
  }
}
 8010fda:	bf00      	nop
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	080200c4 	.word	0x080200c4
 8010fe8:	080200f4 	.word	0x080200f4
 8010fec:	08020114 	.word	0x08020114

08010ff0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010ffc:	481a      	ldr	r0, [pc, #104]	; (8011068 <tcpip_inpkt+0x78>)
 8010ffe:	f00b f840 	bl	801c082 <sys_mbox_valid>
 8011002:	4603      	mov	r3, r0
 8011004:	2b00      	cmp	r3, #0
 8011006:	d105      	bne.n	8011014 <tcpip_inpkt+0x24>
 8011008:	4b18      	ldr	r3, [pc, #96]	; (801106c <tcpip_inpkt+0x7c>)
 801100a:	22fc      	movs	r2, #252	; 0xfc
 801100c:	4918      	ldr	r1, [pc, #96]	; (8011070 <tcpip_inpkt+0x80>)
 801100e:	4819      	ldr	r0, [pc, #100]	; (8011074 <tcpip_inpkt+0x84>)
 8011010:	f00c f85c 	bl	801d0cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011014:	2009      	movs	r0, #9
 8011016:	f000 fe11 	bl	8011c3c <memp_malloc>
 801101a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d102      	bne.n	8011028 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011022:	f04f 33ff 	mov.w	r3, #4294967295
 8011026:	e01a      	b.n	801105e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	2200      	movs	r2, #0
 801102c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	68ba      	ldr	r2, [r7, #8]
 8011038:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011040:	6979      	ldr	r1, [r7, #20]
 8011042:	4809      	ldr	r0, [pc, #36]	; (8011068 <tcpip_inpkt+0x78>)
 8011044:	f00a ffa8 	bl	801bf98 <sys_mbox_trypost>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d006      	beq.n	801105c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801104e:	6979      	ldr	r1, [r7, #20]
 8011050:	2009      	movs	r0, #9
 8011052:	f000 fe69 	bl	8011d28 <memp_free>
    return ERR_MEM;
 8011056:	f04f 33ff 	mov.w	r3, #4294967295
 801105a:	e000      	b.n	801105e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801105c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801105e:	4618      	mov	r0, r3
 8011060:	3718      	adds	r7, #24
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	2000dac8 	.word	0x2000dac8
 801106c:	080200c4 	.word	0x080200c4
 8011070:	0802013c 	.word	0x0802013c
 8011074:	08020114 	.word	0x08020114

08011078 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011088:	f003 0318 	and.w	r3, r3, #24
 801108c:	2b00      	cmp	r3, #0
 801108e:	d006      	beq.n	801109e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011090:	4a08      	ldr	r2, [pc, #32]	; (80110b4 <tcpip_input+0x3c>)
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7ff ffab 	bl	8010ff0 <tcpip_inpkt>
 801109a:	4603      	mov	r3, r0
 801109c:	e005      	b.n	80110aa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801109e:	4a06      	ldr	r2, [pc, #24]	; (80110b8 <tcpip_input+0x40>)
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff ffa4 	bl	8010ff0 <tcpip_inpkt>
 80110a8:	4603      	mov	r3, r0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	0801bd85 	.word	0x0801bd85
 80110b8:	0801ac8d 	.word	0x0801ac8d

080110bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80110c6:	4819      	ldr	r0, [pc, #100]	; (801112c <tcpip_try_callback+0x70>)
 80110c8:	f00a ffdb 	bl	801c082 <sys_mbox_valid>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d106      	bne.n	80110e0 <tcpip_try_callback+0x24>
 80110d2:	4b17      	ldr	r3, [pc, #92]	; (8011130 <tcpip_try_callback+0x74>)
 80110d4:	f240 125d 	movw	r2, #349	; 0x15d
 80110d8:	4916      	ldr	r1, [pc, #88]	; (8011134 <tcpip_try_callback+0x78>)
 80110da:	4817      	ldr	r0, [pc, #92]	; (8011138 <tcpip_try_callback+0x7c>)
 80110dc:	f00b fff6 	bl	801d0cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80110e0:	2008      	movs	r0, #8
 80110e2:	f000 fdab 	bl	8011c3c <memp_malloc>
 80110e6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d102      	bne.n	80110f4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80110ee:	f04f 33ff 	mov.w	r3, #4294967295
 80110f2:	e017      	b.n	8011124 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2201      	movs	r2, #1
 80110f8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	683a      	ldr	r2, [r7, #0]
 8011104:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011106:	68f9      	ldr	r1, [r7, #12]
 8011108:	4808      	ldr	r0, [pc, #32]	; (801112c <tcpip_try_callback+0x70>)
 801110a:	f00a ff45 	bl	801bf98 <sys_mbox_trypost>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d006      	beq.n	8011122 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011114:	68f9      	ldr	r1, [r7, #12]
 8011116:	2008      	movs	r0, #8
 8011118:	f000 fe06 	bl	8011d28 <memp_free>
    return ERR_MEM;
 801111c:	f04f 33ff 	mov.w	r3, #4294967295
 8011120:	e000      	b.n	8011124 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	2000dac8 	.word	0x2000dac8
 8011130:	080200c4 	.word	0x080200c4
 8011134:	0802013c 	.word	0x0802013c
 8011138:	08020114 	.word	0x08020114

0801113c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011148:	4806      	ldr	r0, [pc, #24]	; (8011164 <tcpip_send_msg_wait_sem+0x28>)
 801114a:	f00b f873 	bl	801c234 <sys_mutex_lock>
  fn(apimsg);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	68b8      	ldr	r0, [r7, #8]
 8011152:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011154:	4803      	ldr	r0, [pc, #12]	; (8011164 <tcpip_send_msg_wait_sem+0x28>)
 8011156:	f00b f87c 	bl	801c252 <sys_mutex_unlock>
  return ERR_OK;
 801115a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801115c:	4618      	mov	r0, r3
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	2000dacc 	.word	0x2000dacc

08011168 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af02      	add	r7, sp, #8
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011172:	f000 f8b9 	bl	80112e8 <lwip_init>

  tcpip_init_done = initfunc;
 8011176:	4a17      	ldr	r2, [pc, #92]	; (80111d4 <tcpip_init+0x6c>)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801117c:	4a16      	ldr	r2, [pc, #88]	; (80111d8 <tcpip_init+0x70>)
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011182:	2106      	movs	r1, #6
 8011184:	4815      	ldr	r0, [pc, #84]	; (80111dc <tcpip_init+0x74>)
 8011186:	f00a fed3 	bl	801bf30 <sys_mbox_new>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d006      	beq.n	801119e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011190:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <tcpip_init+0x78>)
 8011192:	f240 2261 	movw	r2, #609	; 0x261
 8011196:	4913      	ldr	r1, [pc, #76]	; (80111e4 <tcpip_init+0x7c>)
 8011198:	4813      	ldr	r0, [pc, #76]	; (80111e8 <tcpip_init+0x80>)
 801119a:	f00b ff97 	bl	801d0cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801119e:	4813      	ldr	r0, [pc, #76]	; (80111ec <tcpip_init+0x84>)
 80111a0:	f00b f82c 	bl	801c1fc <sys_mutex_new>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d006      	beq.n	80111b8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80111aa:	4b0d      	ldr	r3, [pc, #52]	; (80111e0 <tcpip_init+0x78>)
 80111ac:	f240 2265 	movw	r2, #613	; 0x265
 80111b0:	490f      	ldr	r1, [pc, #60]	; (80111f0 <tcpip_init+0x88>)
 80111b2:	480d      	ldr	r0, [pc, #52]	; (80111e8 <tcpip_init+0x80>)
 80111b4:	f00b ff8a 	bl	801d0cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80111b8:	2300      	movs	r3, #0
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111c0:	2200      	movs	r2, #0
 80111c2:	490c      	ldr	r1, [pc, #48]	; (80111f4 <tcpip_init+0x8c>)
 80111c4:	480c      	ldr	r0, [pc, #48]	; (80111f8 <tcpip_init+0x90>)
 80111c6:	f00b f851 	bl	801c26c <sys_thread_new>
}
 80111ca:	bf00      	nop
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	2000dac0 	.word	0x2000dac0
 80111d8:	2000dac4 	.word	0x2000dac4
 80111dc:	2000dac8 	.word	0x2000dac8
 80111e0:	080200c4 	.word	0x080200c4
 80111e4:	0802014c 	.word	0x0802014c
 80111e8:	08020114 	.word	0x08020114
 80111ec:	2000dacc 	.word	0x2000dacc
 80111f0:	08020170 	.word	0x08020170
 80111f4:	08010ef9 	.word	0x08010ef9
 80111f8:	08020194 	.word	0x08020194

080111fc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <fs_open+0x16>
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d102      	bne.n	8011218 <fs_open+0x1c>
    return ERR_ARG;
 8011212:	f06f 030f 	mvn.w	r3, #15
 8011216:	e028      	b.n	801126a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8011218:	4b16      	ldr	r3, [pc, #88]	; (8011274 <fs_open+0x78>)
 801121a:	60fb      	str	r3, [r7, #12]
 801121c:	e020      	b.n	8011260 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	4619      	mov	r1, r3
 8011224:	6838      	ldr	r0, [r7, #0]
 8011226:	f7ee ffe3 	bl	80001f0 <strcmp>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d114      	bne.n	801125a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	689a      	ldr	r2, [r3, #8]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	68da      	ldr	r2, [r3, #12]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	68da      	ldr	r2, [r3, #12]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2200      	movs	r2, #0
 801124c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	7c1a      	ldrb	r2, [r3, #16]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	e007      	b.n	801126a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	60fb      	str	r3, [r7, #12]
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d1db      	bne.n	801121e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8011266:	f06f 0305 	mvn.w	r3, #5
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	0802449c 	.word	0x0802449c

08011278 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8011280:	bf00      	nop
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011296:	88fb      	ldrh	r3, [r7, #6]
 8011298:	021b      	lsls	r3, r3, #8
 801129a:	b21a      	sxth	r2, r3
 801129c:	88fb      	ldrh	r3, [r7, #6]
 801129e:	0a1b      	lsrs	r3, r3, #8
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	b21b      	sxth	r3, r3
 80112a4:	4313      	orrs	r3, r2
 80112a6:	b21b      	sxth	r3, r3
 80112a8:	b29b      	uxth	r3, r3
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	370c      	adds	r7, #12
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80112b6:	b480      	push	{r7}
 80112b8:	b083      	sub	sp, #12
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	061a      	lsls	r2, r3, #24
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	021b      	lsls	r3, r3, #8
 80112c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80112ca:	431a      	orrs	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	0a1b      	lsrs	r3, r3, #8
 80112d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80112d4:	431a      	orrs	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	0e1b      	lsrs	r3, r3, #24
 80112da:	4313      	orrs	r3, r2
}
 80112dc:	4618      	mov	r0, r3
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80112ee:	2300      	movs	r3, #0
 80112f0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80112f2:	f00a ff75 	bl	801c1e0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80112f6:	f000 f8d5 	bl	80114a4 <mem_init>
  memp_init();
 80112fa:	f000 fc31 	bl	8011b60 <memp_init>
  pbuf_init();
  netif_init();
 80112fe:	f000 fd3d 	bl	8011d7c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011302:	f008 f84f 	bl	80193a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011306:	f001 fe4d 	bl	8012fa4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801130a:	f007 ff91 	bl	8019230 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801130e:	bf00      	nop
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
	...

08011318 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011322:	4b05      	ldr	r3, [pc, #20]	; (8011338 <ptr_to_mem+0x20>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	88fb      	ldrh	r3, [r7, #6]
 8011328:	4413      	add	r3, r2
}
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	200102fc 	.word	0x200102fc

0801133c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011344:	4b05      	ldr	r3, [pc, #20]	; (801135c <mem_to_ptr+0x20>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	b29b      	uxth	r3, r3
}
 801134e:	4618      	mov	r0, r3
 8011350:	370c      	adds	r7, #12
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	200102fc 	.word	0x200102fc

08011360 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011360:	b590      	push	{r4, r7, lr}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011368:	4b45      	ldr	r3, [pc, #276]	; (8011480 <plug_holes+0x120>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	429a      	cmp	r2, r3
 8011370:	d206      	bcs.n	8011380 <plug_holes+0x20>
 8011372:	4b44      	ldr	r3, [pc, #272]	; (8011484 <plug_holes+0x124>)
 8011374:	f240 12df 	movw	r2, #479	; 0x1df
 8011378:	4943      	ldr	r1, [pc, #268]	; (8011488 <plug_holes+0x128>)
 801137a:	4844      	ldr	r0, [pc, #272]	; (801148c <plug_holes+0x12c>)
 801137c:	f00b fea6 	bl	801d0cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011380:	4b43      	ldr	r3, [pc, #268]	; (8011490 <plug_holes+0x130>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	429a      	cmp	r2, r3
 8011388:	d306      	bcc.n	8011398 <plug_holes+0x38>
 801138a:	4b3e      	ldr	r3, [pc, #248]	; (8011484 <plug_holes+0x124>)
 801138c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011390:	4940      	ldr	r1, [pc, #256]	; (8011494 <plug_holes+0x134>)
 8011392:	483e      	ldr	r0, [pc, #248]	; (801148c <plug_holes+0x12c>)
 8011394:	f00b fe9a 	bl	801d0cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	791b      	ldrb	r3, [r3, #4]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d006      	beq.n	80113ae <plug_holes+0x4e>
 80113a0:	4b38      	ldr	r3, [pc, #224]	; (8011484 <plug_holes+0x124>)
 80113a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80113a6:	493c      	ldr	r1, [pc, #240]	; (8011498 <plug_holes+0x138>)
 80113a8:	4838      	ldr	r0, [pc, #224]	; (801148c <plug_holes+0x12c>)
 80113aa:	f00b fe8f 	bl	801d0cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80113b6:	d906      	bls.n	80113c6 <plug_holes+0x66>
 80113b8:	4b32      	ldr	r3, [pc, #200]	; (8011484 <plug_holes+0x124>)
 80113ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80113be:	4937      	ldr	r1, [pc, #220]	; (801149c <plug_holes+0x13c>)
 80113c0:	4832      	ldr	r0, [pc, #200]	; (801148c <plug_holes+0x12c>)
 80113c2:	f00b fe83 	bl	801d0cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	881b      	ldrh	r3, [r3, #0]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff ffa4 	bl	8011318 <ptr_to_mem>
 80113d0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d024      	beq.n	8011424 <plug_holes+0xc4>
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	791b      	ldrb	r3, [r3, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d120      	bne.n	8011424 <plug_holes+0xc4>
 80113e2:	4b2b      	ldr	r3, [pc, #172]	; (8011490 <plug_holes+0x130>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	68fa      	ldr	r2, [r7, #12]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d01b      	beq.n	8011424 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80113ec:	4b2c      	ldr	r3, [pc, #176]	; (80114a0 <plug_holes+0x140>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d102      	bne.n	80113fc <plug_holes+0x9c>
      lfree = mem;
 80113f6:	4a2a      	ldr	r2, [pc, #168]	; (80114a0 <plug_holes+0x140>)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	881a      	ldrh	r2, [r3, #0]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	881b      	ldrh	r3, [r3, #0]
 8011408:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801140c:	d00a      	beq.n	8011424 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	881b      	ldrh	r3, [r3, #0]
 8011412:	4618      	mov	r0, r3
 8011414:	f7ff ff80 	bl	8011318 <ptr_to_mem>
 8011418:	4604      	mov	r4, r0
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7ff ff8e 	bl	801133c <mem_to_ptr>
 8011420:	4603      	mov	r3, r0
 8011422:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	885b      	ldrh	r3, [r3, #2]
 8011428:	4618      	mov	r0, r3
 801142a:	f7ff ff75 	bl	8011318 <ptr_to_mem>
 801142e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	429a      	cmp	r2, r3
 8011436:	d01f      	beq.n	8011478 <plug_holes+0x118>
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	791b      	ldrb	r3, [r3, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d11b      	bne.n	8011478 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011440:	4b17      	ldr	r3, [pc, #92]	; (80114a0 <plug_holes+0x140>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	429a      	cmp	r2, r3
 8011448:	d102      	bne.n	8011450 <plug_holes+0xf0>
      lfree = pmem;
 801144a:	4a15      	ldr	r2, [pc, #84]	; (80114a0 <plug_holes+0x140>)
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	881a      	ldrh	r2, [r3, #0]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011460:	d00a      	beq.n	8011478 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	881b      	ldrh	r3, [r3, #0]
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff ff56 	bl	8011318 <ptr_to_mem>
 801146c:	4604      	mov	r4, r0
 801146e:	68b8      	ldr	r0, [r7, #8]
 8011470:	f7ff ff64 	bl	801133c <mem_to_ptr>
 8011474:	4603      	mov	r3, r0
 8011476:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011478:	bf00      	nop
 801147a:	3714      	adds	r7, #20
 801147c:	46bd      	mov	sp, r7
 801147e:	bd90      	pop	{r4, r7, pc}
 8011480:	200102fc 	.word	0x200102fc
 8011484:	080201a4 	.word	0x080201a4
 8011488:	080201d4 	.word	0x080201d4
 801148c:	080201ec 	.word	0x080201ec
 8011490:	20010300 	.word	0x20010300
 8011494:	08020214 	.word	0x08020214
 8011498:	08020230 	.word	0x08020230
 801149c:	0802024c 	.word	0x0802024c
 80114a0:	20010308 	.word	0x20010308

080114a4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80114aa:	4b1f      	ldr	r3, [pc, #124]	; (8011528 <mem_init+0x84>)
 80114ac:	3303      	adds	r3, #3
 80114ae:	f023 0303 	bic.w	r3, r3, #3
 80114b2:	461a      	mov	r2, r3
 80114b4:	4b1d      	ldr	r3, [pc, #116]	; (801152c <mem_init+0x88>)
 80114b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80114b8:	4b1c      	ldr	r3, [pc, #112]	; (801152c <mem_init+0x88>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80114c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2200      	movs	r2, #0
 80114ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80114d2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80114d6:	f7ff ff1f 	bl	8011318 <ptr_to_mem>
 80114da:	4603      	mov	r3, r0
 80114dc:	4a14      	ldr	r2, [pc, #80]	; (8011530 <mem_init+0x8c>)
 80114de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80114e0:	4b13      	ldr	r3, [pc, #76]	; (8011530 <mem_init+0x8c>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	2201      	movs	r2, #1
 80114e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80114e8:	4b11      	ldr	r3, [pc, #68]	; (8011530 <mem_init+0x8c>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80114f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80114f2:	4b0f      	ldr	r3, [pc, #60]	; (8011530 <mem_init+0x8c>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80114fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80114fc:	4b0b      	ldr	r3, [pc, #44]	; (801152c <mem_init+0x88>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a0c      	ldr	r2, [pc, #48]	; (8011534 <mem_init+0x90>)
 8011502:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011504:	480c      	ldr	r0, [pc, #48]	; (8011538 <mem_init+0x94>)
 8011506:	f00a fe79 	bl	801c1fc <sys_mutex_new>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d006      	beq.n	801151e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011510:	4b0a      	ldr	r3, [pc, #40]	; (801153c <mem_init+0x98>)
 8011512:	f240 221f 	movw	r2, #543	; 0x21f
 8011516:	490a      	ldr	r1, [pc, #40]	; (8011540 <mem_init+0x9c>)
 8011518:	480a      	ldr	r0, [pc, #40]	; (8011544 <mem_init+0xa0>)
 801151a:	f00b fdd7 	bl	801d0cc <iprintf>
  }
}
 801151e:	bf00      	nop
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	2000dae8 	.word	0x2000dae8
 801152c:	200102fc 	.word	0x200102fc
 8011530:	20010300 	.word	0x20010300
 8011534:	20010308 	.word	0x20010308
 8011538:	20010304 	.word	0x20010304
 801153c:	080201a4 	.word	0x080201a4
 8011540:	08020278 	.word	0x08020278
 8011544:	080201ec 	.word	0x080201ec

08011548 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7ff fef3 	bl	801133c <mem_to_ptr>
 8011556:	4603      	mov	r3, r0
 8011558:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	881b      	ldrh	r3, [r3, #0]
 801155e:	4618      	mov	r0, r3
 8011560:	f7ff feda 	bl	8011318 <ptr_to_mem>
 8011564:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	885b      	ldrh	r3, [r3, #2]
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff fed4 	bl	8011318 <ptr_to_mem>
 8011570:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	881b      	ldrh	r3, [r3, #0]
 8011576:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801157a:	d818      	bhi.n	80115ae <mem_link_valid+0x66>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	885b      	ldrh	r3, [r3, #2]
 8011580:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011584:	d813      	bhi.n	80115ae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801158a:	8afa      	ldrh	r2, [r7, #22]
 801158c:	429a      	cmp	r2, r3
 801158e:	d004      	beq.n	801159a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	8afa      	ldrh	r2, [r7, #22]
 8011596:	429a      	cmp	r2, r3
 8011598:	d109      	bne.n	80115ae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801159a:	4b08      	ldr	r3, [pc, #32]	; (80115bc <mem_link_valid+0x74>)
 801159c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801159e:	693a      	ldr	r2, [r7, #16]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d006      	beq.n	80115b2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	885b      	ldrh	r3, [r3, #2]
 80115a8:	8afa      	ldrh	r2, [r7, #22]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d001      	beq.n	80115b2 <mem_link_valid+0x6a>
    return 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	e000      	b.n	80115b4 <mem_link_valid+0x6c>
  }
  return 1;
 80115b2:	2301      	movs	r3, #1
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3718      	adds	r7, #24
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	20010300 	.word	0x20010300

080115c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b088      	sub	sp, #32
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d070      	beq.n	80116b0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f003 0303 	and.w	r3, r3, #3
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00d      	beq.n	80115f4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80115d8:	4b37      	ldr	r3, [pc, #220]	; (80116b8 <mem_free+0xf8>)
 80115da:	f240 2273 	movw	r2, #627	; 0x273
 80115de:	4937      	ldr	r1, [pc, #220]	; (80116bc <mem_free+0xfc>)
 80115e0:	4837      	ldr	r0, [pc, #220]	; (80116c0 <mem_free+0x100>)
 80115e2:	f00b fd73 	bl	801d0cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80115e6:	f00a fe67 	bl	801c2b8 <sys_arch_protect>
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f00a fe71 	bl	801c2d4 <sys_arch_unprotect>
    return;
 80115f2:	e05e      	b.n	80116b2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	3b08      	subs	r3, #8
 80115f8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80115fa:	4b32      	ldr	r3, [pc, #200]	; (80116c4 <mem_free+0x104>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	69fa      	ldr	r2, [r7, #28]
 8011600:	429a      	cmp	r2, r3
 8011602:	d306      	bcc.n	8011612 <mem_free+0x52>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f103 020c 	add.w	r2, r3, #12
 801160a:	4b2f      	ldr	r3, [pc, #188]	; (80116c8 <mem_free+0x108>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	429a      	cmp	r2, r3
 8011610:	d90d      	bls.n	801162e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011612:	4b29      	ldr	r3, [pc, #164]	; (80116b8 <mem_free+0xf8>)
 8011614:	f240 227f 	movw	r2, #639	; 0x27f
 8011618:	492c      	ldr	r1, [pc, #176]	; (80116cc <mem_free+0x10c>)
 801161a:	4829      	ldr	r0, [pc, #164]	; (80116c0 <mem_free+0x100>)
 801161c:	f00b fd56 	bl	801d0cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011620:	f00a fe4a 	bl	801c2b8 <sys_arch_protect>
 8011624:	6138      	str	r0, [r7, #16]
 8011626:	6938      	ldr	r0, [r7, #16]
 8011628:	f00a fe54 	bl	801c2d4 <sys_arch_unprotect>
    return;
 801162c:	e041      	b.n	80116b2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801162e:	4828      	ldr	r0, [pc, #160]	; (80116d0 <mem_free+0x110>)
 8011630:	f00a fe00 	bl	801c234 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	791b      	ldrb	r3, [r3, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d110      	bne.n	801165e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801163c:	4b1e      	ldr	r3, [pc, #120]	; (80116b8 <mem_free+0xf8>)
 801163e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011642:	4924      	ldr	r1, [pc, #144]	; (80116d4 <mem_free+0x114>)
 8011644:	481e      	ldr	r0, [pc, #120]	; (80116c0 <mem_free+0x100>)
 8011646:	f00b fd41 	bl	801d0cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801164a:	4821      	ldr	r0, [pc, #132]	; (80116d0 <mem_free+0x110>)
 801164c:	f00a fe01 	bl	801c252 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011650:	f00a fe32 	bl	801c2b8 <sys_arch_protect>
 8011654:	6178      	str	r0, [r7, #20]
 8011656:	6978      	ldr	r0, [r7, #20]
 8011658:	f00a fe3c 	bl	801c2d4 <sys_arch_unprotect>
    return;
 801165c:	e029      	b.n	80116b2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801165e:	69f8      	ldr	r0, [r7, #28]
 8011660:	f7ff ff72 	bl	8011548 <mem_link_valid>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d110      	bne.n	801168c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801166a:	4b13      	ldr	r3, [pc, #76]	; (80116b8 <mem_free+0xf8>)
 801166c:	f240 2295 	movw	r2, #661	; 0x295
 8011670:	4919      	ldr	r1, [pc, #100]	; (80116d8 <mem_free+0x118>)
 8011672:	4813      	ldr	r0, [pc, #76]	; (80116c0 <mem_free+0x100>)
 8011674:	f00b fd2a 	bl	801d0cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011678:	4815      	ldr	r0, [pc, #84]	; (80116d0 <mem_free+0x110>)
 801167a:	f00a fdea 	bl	801c252 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801167e:	f00a fe1b 	bl	801c2b8 <sys_arch_protect>
 8011682:	61b8      	str	r0, [r7, #24]
 8011684:	69b8      	ldr	r0, [r7, #24]
 8011686:	f00a fe25 	bl	801c2d4 <sys_arch_unprotect>
    return;
 801168a:	e012      	b.n	80116b2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	2200      	movs	r2, #0
 8011690:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011692:	4b12      	ldr	r3, [pc, #72]	; (80116dc <mem_free+0x11c>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	69fa      	ldr	r2, [r7, #28]
 8011698:	429a      	cmp	r2, r3
 801169a:	d202      	bcs.n	80116a2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801169c:	4a0f      	ldr	r2, [pc, #60]	; (80116dc <mem_free+0x11c>)
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80116a2:	69f8      	ldr	r0, [r7, #28]
 80116a4:	f7ff fe5c 	bl	8011360 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80116a8:	4809      	ldr	r0, [pc, #36]	; (80116d0 <mem_free+0x110>)
 80116aa:	f00a fdd2 	bl	801c252 <sys_mutex_unlock>
 80116ae:	e000      	b.n	80116b2 <mem_free+0xf2>
    return;
 80116b0:	bf00      	nop
}
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	080201a4 	.word	0x080201a4
 80116bc:	08020294 	.word	0x08020294
 80116c0:	080201ec 	.word	0x080201ec
 80116c4:	200102fc 	.word	0x200102fc
 80116c8:	20010300 	.word	0x20010300
 80116cc:	080202b8 	.word	0x080202b8
 80116d0:	20010304 	.word	0x20010304
 80116d4:	080202d4 	.word	0x080202d4
 80116d8:	080202fc 	.word	0x080202fc
 80116dc:	20010308 	.word	0x20010308

080116e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	460b      	mov	r3, r1
 80116ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80116ec:	887b      	ldrh	r3, [r7, #2]
 80116ee:	3303      	adds	r3, #3
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	f023 0303 	bic.w	r3, r3, #3
 80116f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80116f8:	8bfb      	ldrh	r3, [r7, #30]
 80116fa:	2b0b      	cmp	r3, #11
 80116fc:	d801      	bhi.n	8011702 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80116fe:	230c      	movs	r3, #12
 8011700:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011702:	8bfb      	ldrh	r3, [r7, #30]
 8011704:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011708:	d803      	bhi.n	8011712 <mem_trim+0x32>
 801170a:	8bfa      	ldrh	r2, [r7, #30]
 801170c:	887b      	ldrh	r3, [r7, #2]
 801170e:	429a      	cmp	r2, r3
 8011710:	d201      	bcs.n	8011716 <mem_trim+0x36>
    return NULL;
 8011712:	2300      	movs	r3, #0
 8011714:	e0d8      	b.n	80118c8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011716:	4b6e      	ldr	r3, [pc, #440]	; (80118d0 <mem_trim+0x1f0>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	429a      	cmp	r2, r3
 801171e:	d304      	bcc.n	801172a <mem_trim+0x4a>
 8011720:	4b6c      	ldr	r3, [pc, #432]	; (80118d4 <mem_trim+0x1f4>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	429a      	cmp	r2, r3
 8011728:	d306      	bcc.n	8011738 <mem_trim+0x58>
 801172a:	4b6b      	ldr	r3, [pc, #428]	; (80118d8 <mem_trim+0x1f8>)
 801172c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011730:	496a      	ldr	r1, [pc, #424]	; (80118dc <mem_trim+0x1fc>)
 8011732:	486b      	ldr	r0, [pc, #428]	; (80118e0 <mem_trim+0x200>)
 8011734:	f00b fcca 	bl	801d0cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011738:	4b65      	ldr	r3, [pc, #404]	; (80118d0 <mem_trim+0x1f0>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d304      	bcc.n	801174c <mem_trim+0x6c>
 8011742:	4b64      	ldr	r3, [pc, #400]	; (80118d4 <mem_trim+0x1f4>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	429a      	cmp	r2, r3
 801174a:	d307      	bcc.n	801175c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801174c:	f00a fdb4 	bl	801c2b8 <sys_arch_protect>
 8011750:	60b8      	str	r0, [r7, #8]
 8011752:	68b8      	ldr	r0, [r7, #8]
 8011754:	f00a fdbe 	bl	801c2d4 <sys_arch_unprotect>
    return rmem;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	e0b5      	b.n	80118c8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	3b08      	subs	r3, #8
 8011760:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011762:	69b8      	ldr	r0, [r7, #24]
 8011764:	f7ff fdea 	bl	801133c <mem_to_ptr>
 8011768:	4603      	mov	r3, r0
 801176a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	881a      	ldrh	r2, [r3, #0]
 8011770:	8afb      	ldrh	r3, [r7, #22]
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	b29b      	uxth	r3, r3
 8011776:	3b08      	subs	r3, #8
 8011778:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801177a:	8bfa      	ldrh	r2, [r7, #30]
 801177c:	8abb      	ldrh	r3, [r7, #20]
 801177e:	429a      	cmp	r2, r3
 8011780:	d906      	bls.n	8011790 <mem_trim+0xb0>
 8011782:	4b55      	ldr	r3, [pc, #340]	; (80118d8 <mem_trim+0x1f8>)
 8011784:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011788:	4956      	ldr	r1, [pc, #344]	; (80118e4 <mem_trim+0x204>)
 801178a:	4855      	ldr	r0, [pc, #340]	; (80118e0 <mem_trim+0x200>)
 801178c:	f00b fc9e 	bl	801d0cc <iprintf>
  if (newsize > size) {
 8011790:	8bfa      	ldrh	r2, [r7, #30]
 8011792:	8abb      	ldrh	r3, [r7, #20]
 8011794:	429a      	cmp	r2, r3
 8011796:	d901      	bls.n	801179c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011798:	2300      	movs	r3, #0
 801179a:	e095      	b.n	80118c8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801179c:	8bfa      	ldrh	r2, [r7, #30]
 801179e:	8abb      	ldrh	r3, [r7, #20]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d101      	bne.n	80117a8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	e08f      	b.n	80118c8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80117a8:	484f      	ldr	r0, [pc, #316]	; (80118e8 <mem_trim+0x208>)
 80117aa:	f00a fd43 	bl	801c234 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff fdb0 	bl	8011318 <ptr_to_mem>
 80117b8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	791b      	ldrb	r3, [r3, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d13f      	bne.n	8011842 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80117ca:	d106      	bne.n	80117da <mem_trim+0xfa>
 80117cc:	4b42      	ldr	r3, [pc, #264]	; (80118d8 <mem_trim+0x1f8>)
 80117ce:	f240 22f5 	movw	r2, #757	; 0x2f5
 80117d2:	4946      	ldr	r1, [pc, #280]	; (80118ec <mem_trim+0x20c>)
 80117d4:	4842      	ldr	r0, [pc, #264]	; (80118e0 <mem_trim+0x200>)
 80117d6:	f00b fc79 	bl	801d0cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	881b      	ldrh	r3, [r3, #0]
 80117de:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80117e0:	8afa      	ldrh	r2, [r7, #22]
 80117e2:	8bfb      	ldrh	r3, [r7, #30]
 80117e4:	4413      	add	r3, r2
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	3308      	adds	r3, #8
 80117ea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80117ec:	4b40      	ldr	r3, [pc, #256]	; (80118f0 <mem_trim+0x210>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d106      	bne.n	8011804 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80117f6:	89fb      	ldrh	r3, [r7, #14]
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7ff fd8d 	bl	8011318 <ptr_to_mem>
 80117fe:	4603      	mov	r3, r0
 8011800:	4a3b      	ldr	r2, [pc, #236]	; (80118f0 <mem_trim+0x210>)
 8011802:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011804:	89fb      	ldrh	r3, [r7, #14]
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff fd86 	bl	8011318 <ptr_to_mem>
 801180c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	2200      	movs	r2, #0
 8011812:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	89ba      	ldrh	r2, [r7, #12]
 8011818:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	8afa      	ldrh	r2, [r7, #22]
 801181e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	89fa      	ldrh	r2, [r7, #14]
 8011824:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	881b      	ldrh	r3, [r3, #0]
 801182a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801182e:	d047      	beq.n	80118c0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	881b      	ldrh	r3, [r3, #0]
 8011834:	4618      	mov	r0, r3
 8011836:	f7ff fd6f 	bl	8011318 <ptr_to_mem>
 801183a:	4602      	mov	r2, r0
 801183c:	89fb      	ldrh	r3, [r7, #14]
 801183e:	8053      	strh	r3, [r2, #2]
 8011840:	e03e      	b.n	80118c0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011842:	8bfb      	ldrh	r3, [r7, #30]
 8011844:	f103 0214 	add.w	r2, r3, #20
 8011848:	8abb      	ldrh	r3, [r7, #20]
 801184a:	429a      	cmp	r2, r3
 801184c:	d838      	bhi.n	80118c0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801184e:	8afa      	ldrh	r2, [r7, #22]
 8011850:	8bfb      	ldrh	r3, [r7, #30]
 8011852:	4413      	add	r3, r2
 8011854:	b29b      	uxth	r3, r3
 8011856:	3308      	adds	r3, #8
 8011858:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	881b      	ldrh	r3, [r3, #0]
 801185e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011862:	d106      	bne.n	8011872 <mem_trim+0x192>
 8011864:	4b1c      	ldr	r3, [pc, #112]	; (80118d8 <mem_trim+0x1f8>)
 8011866:	f240 3216 	movw	r2, #790	; 0x316
 801186a:	4920      	ldr	r1, [pc, #128]	; (80118ec <mem_trim+0x20c>)
 801186c:	481c      	ldr	r0, [pc, #112]	; (80118e0 <mem_trim+0x200>)
 801186e:	f00b fc2d 	bl	801d0cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011872:	89fb      	ldrh	r3, [r7, #14]
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff fd4f 	bl	8011318 <ptr_to_mem>
 801187a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801187c:	4b1c      	ldr	r3, [pc, #112]	; (80118f0 <mem_trim+0x210>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	693a      	ldr	r2, [r7, #16]
 8011882:	429a      	cmp	r2, r3
 8011884:	d202      	bcs.n	801188c <mem_trim+0x1ac>
      lfree = mem2;
 8011886:	4a1a      	ldr	r2, [pc, #104]	; (80118f0 <mem_trim+0x210>)
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	2200      	movs	r2, #0
 8011890:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	881a      	ldrh	r2, [r3, #0]
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	8afa      	ldrh	r2, [r7, #22]
 801189e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	89fa      	ldrh	r2, [r7, #14]
 80118a4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	881b      	ldrh	r3, [r3, #0]
 80118aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80118ae:	d007      	beq.n	80118c0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7ff fd2f 	bl	8011318 <ptr_to_mem>
 80118ba:	4602      	mov	r2, r0
 80118bc:	89fb      	ldrh	r3, [r7, #14]
 80118be:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80118c0:	4809      	ldr	r0, [pc, #36]	; (80118e8 <mem_trim+0x208>)
 80118c2:	f00a fcc6 	bl	801c252 <sys_mutex_unlock>
  return rmem;
 80118c6:	687b      	ldr	r3, [r7, #4]
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3720      	adds	r7, #32
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	200102fc 	.word	0x200102fc
 80118d4:	20010300 	.word	0x20010300
 80118d8:	080201a4 	.word	0x080201a4
 80118dc:	08020330 	.word	0x08020330
 80118e0:	080201ec 	.word	0x080201ec
 80118e4:	08020348 	.word	0x08020348
 80118e8:	20010304 	.word	0x20010304
 80118ec:	08020368 	.word	0x08020368
 80118f0:	20010308 	.word	0x20010308

080118f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b088      	sub	sp, #32
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	4603      	mov	r3, r0
 80118fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80118fe:	88fb      	ldrh	r3, [r7, #6]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d101      	bne.n	8011908 <mem_malloc+0x14>
    return NULL;
 8011904:	2300      	movs	r3, #0
 8011906:	e0e2      	b.n	8011ace <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011908:	88fb      	ldrh	r3, [r7, #6]
 801190a:	3303      	adds	r3, #3
 801190c:	b29b      	uxth	r3, r3
 801190e:	f023 0303 	bic.w	r3, r3, #3
 8011912:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011914:	8bbb      	ldrh	r3, [r7, #28]
 8011916:	2b0b      	cmp	r3, #11
 8011918:	d801      	bhi.n	801191e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801191a:	230c      	movs	r3, #12
 801191c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801191e:	8bbb      	ldrh	r3, [r7, #28]
 8011920:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8011924:	d803      	bhi.n	801192e <mem_malloc+0x3a>
 8011926:	8bba      	ldrh	r2, [r7, #28]
 8011928:	88fb      	ldrh	r3, [r7, #6]
 801192a:	429a      	cmp	r2, r3
 801192c:	d201      	bcs.n	8011932 <mem_malloc+0x3e>
    return NULL;
 801192e:	2300      	movs	r3, #0
 8011930:	e0cd      	b.n	8011ace <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011932:	4869      	ldr	r0, [pc, #420]	; (8011ad8 <mem_malloc+0x1e4>)
 8011934:	f00a fc7e 	bl	801c234 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011938:	4b68      	ldr	r3, [pc, #416]	; (8011adc <mem_malloc+0x1e8>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4618      	mov	r0, r3
 801193e:	f7ff fcfd 	bl	801133c <mem_to_ptr>
 8011942:	4603      	mov	r3, r0
 8011944:	83fb      	strh	r3, [r7, #30]
 8011946:	e0b7      	b.n	8011ab8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011948:	8bfb      	ldrh	r3, [r7, #30]
 801194a:	4618      	mov	r0, r3
 801194c:	f7ff fce4 	bl	8011318 <ptr_to_mem>
 8011950:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	791b      	ldrb	r3, [r3, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	f040 80a7 	bne.w	8011aaa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	881b      	ldrh	r3, [r3, #0]
 8011960:	461a      	mov	r2, r3
 8011962:	8bfb      	ldrh	r3, [r7, #30]
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	f1a3 0208 	sub.w	r2, r3, #8
 801196a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801196c:	429a      	cmp	r2, r3
 801196e:	f0c0 809c 	bcc.w	8011aaa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	461a      	mov	r2, r3
 8011978:	8bfb      	ldrh	r3, [r7, #30]
 801197a:	1ad3      	subs	r3, r2, r3
 801197c:	f1a3 0208 	sub.w	r2, r3, #8
 8011980:	8bbb      	ldrh	r3, [r7, #28]
 8011982:	3314      	adds	r3, #20
 8011984:	429a      	cmp	r2, r3
 8011986:	d333      	bcc.n	80119f0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011988:	8bfa      	ldrh	r2, [r7, #30]
 801198a:	8bbb      	ldrh	r3, [r7, #28]
 801198c:	4413      	add	r3, r2
 801198e:	b29b      	uxth	r3, r3
 8011990:	3308      	adds	r3, #8
 8011992:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011994:	8a7b      	ldrh	r3, [r7, #18]
 8011996:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801199a:	d106      	bne.n	80119aa <mem_malloc+0xb6>
 801199c:	4b50      	ldr	r3, [pc, #320]	; (8011ae0 <mem_malloc+0x1ec>)
 801199e:	f240 3287 	movw	r2, #903	; 0x387
 80119a2:	4950      	ldr	r1, [pc, #320]	; (8011ae4 <mem_malloc+0x1f0>)
 80119a4:	4850      	ldr	r0, [pc, #320]	; (8011ae8 <mem_malloc+0x1f4>)
 80119a6:	f00b fb91 	bl	801d0cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80119aa:	8a7b      	ldrh	r3, [r7, #18]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff fcb3 	bl	8011318 <ptr_to_mem>
 80119b2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2200      	movs	r2, #0
 80119b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	881a      	ldrh	r2, [r3, #0]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	8bfa      	ldrh	r2, [r7, #30]
 80119c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	8a7a      	ldrh	r2, [r7, #18]
 80119cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2201      	movs	r2, #1
 80119d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80119dc:	d00b      	beq.n	80119f6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff fc98 	bl	8011318 <ptr_to_mem>
 80119e8:	4602      	mov	r2, r0
 80119ea:	8a7b      	ldrh	r3, [r7, #18]
 80119ec:	8053      	strh	r3, [r2, #2]
 80119ee:	e002      	b.n	80119f6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	2201      	movs	r2, #1
 80119f4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80119f6:	4b39      	ldr	r3, [pc, #228]	; (8011adc <mem_malloc+0x1e8>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	697a      	ldr	r2, [r7, #20]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d127      	bne.n	8011a50 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011a00:	4b36      	ldr	r3, [pc, #216]	; (8011adc <mem_malloc+0x1e8>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011a06:	e005      	b.n	8011a14 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ff fc83 	bl	8011318 <ptr_to_mem>
 8011a12:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	791b      	ldrb	r3, [r3, #4]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d004      	beq.n	8011a26 <mem_malloc+0x132>
 8011a1c:	4b33      	ldr	r3, [pc, #204]	; (8011aec <mem_malloc+0x1f8>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	69ba      	ldr	r2, [r7, #24]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d1f0      	bne.n	8011a08 <mem_malloc+0x114>
          }
          lfree = cur;
 8011a26:	4a2d      	ldr	r2, [pc, #180]	; (8011adc <mem_malloc+0x1e8>)
 8011a28:	69bb      	ldr	r3, [r7, #24]
 8011a2a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011a2c:	4b2b      	ldr	r3, [pc, #172]	; (8011adc <mem_malloc+0x1e8>)
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	4b2e      	ldr	r3, [pc, #184]	; (8011aec <mem_malloc+0x1f8>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d00b      	beq.n	8011a50 <mem_malloc+0x15c>
 8011a38:	4b28      	ldr	r3, [pc, #160]	; (8011adc <mem_malloc+0x1e8>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	791b      	ldrb	r3, [r3, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d006      	beq.n	8011a50 <mem_malloc+0x15c>
 8011a42:	4b27      	ldr	r3, [pc, #156]	; (8011ae0 <mem_malloc+0x1ec>)
 8011a44:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011a48:	4929      	ldr	r1, [pc, #164]	; (8011af0 <mem_malloc+0x1fc>)
 8011a4a:	4827      	ldr	r0, [pc, #156]	; (8011ae8 <mem_malloc+0x1f4>)
 8011a4c:	f00b fb3e 	bl	801d0cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011a50:	4821      	ldr	r0, [pc, #132]	; (8011ad8 <mem_malloc+0x1e4>)
 8011a52:	f00a fbfe 	bl	801c252 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011a56:	8bba      	ldrh	r2, [r7, #28]
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	3308      	adds	r3, #8
 8011a5e:	4a23      	ldr	r2, [pc, #140]	; (8011aec <mem_malloc+0x1f8>)
 8011a60:	6812      	ldr	r2, [r2, #0]
 8011a62:	4293      	cmp	r3, r2
 8011a64:	d906      	bls.n	8011a74 <mem_malloc+0x180>
 8011a66:	4b1e      	ldr	r3, [pc, #120]	; (8011ae0 <mem_malloc+0x1ec>)
 8011a68:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011a6c:	4921      	ldr	r1, [pc, #132]	; (8011af4 <mem_malloc+0x200>)
 8011a6e:	481e      	ldr	r0, [pc, #120]	; (8011ae8 <mem_malloc+0x1f4>)
 8011a70:	f00b fb2c 	bl	801d0cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	f003 0303 	and.w	r3, r3, #3
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d006      	beq.n	8011a8c <mem_malloc+0x198>
 8011a7e:	4b18      	ldr	r3, [pc, #96]	; (8011ae0 <mem_malloc+0x1ec>)
 8011a80:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011a84:	491c      	ldr	r1, [pc, #112]	; (8011af8 <mem_malloc+0x204>)
 8011a86:	4818      	ldr	r0, [pc, #96]	; (8011ae8 <mem_malloc+0x1f4>)
 8011a88:	f00b fb20 	bl	801d0cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	f003 0303 	and.w	r3, r3, #3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d006      	beq.n	8011aa4 <mem_malloc+0x1b0>
 8011a96:	4b12      	ldr	r3, [pc, #72]	; (8011ae0 <mem_malloc+0x1ec>)
 8011a98:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011a9c:	4917      	ldr	r1, [pc, #92]	; (8011afc <mem_malloc+0x208>)
 8011a9e:	4812      	ldr	r0, [pc, #72]	; (8011ae8 <mem_malloc+0x1f4>)
 8011aa0:	f00b fb14 	bl	801d0cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	3308      	adds	r3, #8
 8011aa8:	e011      	b.n	8011ace <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011aaa:	8bfb      	ldrh	r3, [r7, #30]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff fc33 	bl	8011318 <ptr_to_mem>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011ab8:	8bfa      	ldrh	r2, [r7, #30]
 8011aba:	8bbb      	ldrh	r3, [r7, #28]
 8011abc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	f4ff af41 	bcc.w	8011948 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011ac6:	4804      	ldr	r0, [pc, #16]	; (8011ad8 <mem_malloc+0x1e4>)
 8011ac8:	f00a fbc3 	bl	801c252 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011acc:	2300      	movs	r3, #0
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3720      	adds	r7, #32
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	20010304 	.word	0x20010304
 8011adc:	20010308 	.word	0x20010308
 8011ae0:	080201a4 	.word	0x080201a4
 8011ae4:	08020368 	.word	0x08020368
 8011ae8:	080201ec 	.word	0x080201ec
 8011aec:	20010300 	.word	0x20010300
 8011af0:	0802037c 	.word	0x0802037c
 8011af4:	08020398 	.word	0x08020398
 8011af8:	080203c8 	.word	0x080203c8
 8011afc:	080203f8 	.word	0x080203f8

08011b00 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	689b      	ldr	r3, [r3, #8]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	3303      	adds	r3, #3
 8011b16:	f023 0303 	bic.w	r3, r3, #3
 8011b1a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	e011      	b.n	8011b46 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	689b      	ldr	r3, [r3, #8]
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	68ba      	ldr	r2, [r7, #8]
 8011b32:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	881b      	ldrh	r3, [r3, #0]
 8011b38:	461a      	mov	r2, r3
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3301      	adds	r3, #1
 8011b44:	60fb      	str	r3, [r7, #12]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	885b      	ldrh	r3, [r3, #2]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	dbe7      	blt.n	8011b22 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011b52:	bf00      	nop
 8011b54:	bf00      	nop
 8011b56:	3714      	adds	r7, #20
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011b66:	2300      	movs	r3, #0
 8011b68:	80fb      	strh	r3, [r7, #6]
 8011b6a:	e009      	b.n	8011b80 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011b6c:	88fb      	ldrh	r3, [r7, #6]
 8011b6e:	4a08      	ldr	r2, [pc, #32]	; (8011b90 <memp_init+0x30>)
 8011b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7ff ffc3 	bl	8011b00 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011b7a:	88fb      	ldrh	r3, [r7, #6]
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	80fb      	strh	r3, [r7, #6]
 8011b80:	88fb      	ldrh	r3, [r7, #6]
 8011b82:	2b0c      	cmp	r3, #12
 8011b84:	d9f2      	bls.n	8011b6c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011b86:	bf00      	nop
 8011b88:	bf00      	nop
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	0802454c 	.word	0x0802454c

08011b94 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b084      	sub	sp, #16
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011b9c:	f00a fb8c 	bl	801c2b8 <sys_arch_protect>
 8011ba0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d015      	beq.n	8011bdc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	68ba      	ldr	r2, [r7, #8]
 8011bb6:	6812      	ldr	r2, [r2, #0]
 8011bb8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	f003 0303 	and.w	r3, r3, #3
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d006      	beq.n	8011bd2 <do_memp_malloc_pool+0x3e>
 8011bc4:	4b09      	ldr	r3, [pc, #36]	; (8011bec <do_memp_malloc_pool+0x58>)
 8011bc6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011bca:	4909      	ldr	r1, [pc, #36]	; (8011bf0 <do_memp_malloc_pool+0x5c>)
 8011bcc:	4809      	ldr	r0, [pc, #36]	; (8011bf4 <do_memp_malloc_pool+0x60>)
 8011bce:	f00b fa7d 	bl	801d0cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f00a fb7e 	bl	801c2d4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	e003      	b.n	8011be4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f00a fb79 	bl	801c2d4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	0802041c 	.word	0x0802041c
 8011bf0:	0802044c 	.word	0x0802044c
 8011bf4:	08020470 	.word	0x08020470

08011bf8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <memp_malloc_pool+0x1c>
 8011c06:	4b0a      	ldr	r3, [pc, #40]	; (8011c30 <memp_malloc_pool+0x38>)
 8011c08:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011c0c:	4909      	ldr	r1, [pc, #36]	; (8011c34 <memp_malloc_pool+0x3c>)
 8011c0e:	480a      	ldr	r0, [pc, #40]	; (8011c38 <memp_malloc_pool+0x40>)
 8011c10:	f00b fa5c 	bl	801d0cc <iprintf>
  if (desc == NULL) {
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d101      	bne.n	8011c1e <memp_malloc_pool+0x26>
    return NULL;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	e003      	b.n	8011c26 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff ffb8 	bl	8011b94 <do_memp_malloc_pool>
 8011c24:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	0802041c 	.word	0x0802041c
 8011c34:	08020498 	.word	0x08020498
 8011c38:	08020470 	.word	0x08020470

08011c3c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	4603      	mov	r3, r0
 8011c44:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011c46:	79fb      	ldrb	r3, [r7, #7]
 8011c48:	2b0c      	cmp	r3, #12
 8011c4a:	d908      	bls.n	8011c5e <memp_malloc+0x22>
 8011c4c:	4b0a      	ldr	r3, [pc, #40]	; (8011c78 <memp_malloc+0x3c>)
 8011c4e:	f240 1257 	movw	r2, #343	; 0x157
 8011c52:	490a      	ldr	r1, [pc, #40]	; (8011c7c <memp_malloc+0x40>)
 8011c54:	480a      	ldr	r0, [pc, #40]	; (8011c80 <memp_malloc+0x44>)
 8011c56:	f00b fa39 	bl	801d0cc <iprintf>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e008      	b.n	8011c70 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011c5e:	79fb      	ldrb	r3, [r7, #7]
 8011c60:	4a08      	ldr	r2, [pc, #32]	; (8011c84 <memp_malloc+0x48>)
 8011c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7ff ff94 	bl	8011b94 <do_memp_malloc_pool>
 8011c6c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	0802041c 	.word	0x0802041c
 8011c7c:	080204ac 	.word	0x080204ac
 8011c80:	08020470 	.word	0x08020470
 8011c84:	0802454c 	.word	0x0802454c

08011c88 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b084      	sub	sp, #16
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	f003 0303 	and.w	r3, r3, #3
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d006      	beq.n	8011caa <do_memp_free_pool+0x22>
 8011c9c:	4b0d      	ldr	r3, [pc, #52]	; (8011cd4 <do_memp_free_pool+0x4c>)
 8011c9e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011ca2:	490d      	ldr	r1, [pc, #52]	; (8011cd8 <do_memp_free_pool+0x50>)
 8011ca4:	480d      	ldr	r0, [pc, #52]	; (8011cdc <do_memp_free_pool+0x54>)
 8011ca6:	f00b fa11 	bl	801d0cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011cae:	f00a fb03 	bl	801c2b8 <sys_arch_protect>
 8011cb2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011cc6:	68b8      	ldr	r0, [r7, #8]
 8011cc8:	f00a fb04 	bl	801c2d4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011ccc:	bf00      	nop
 8011cce:	3710      	adds	r7, #16
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	0802041c 	.word	0x0802041c
 8011cd8:	080204cc 	.word	0x080204cc
 8011cdc:	08020470 	.word	0x08020470

08011ce0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d106      	bne.n	8011cfe <memp_free_pool+0x1e>
 8011cf0:	4b0a      	ldr	r3, [pc, #40]	; (8011d1c <memp_free_pool+0x3c>)
 8011cf2:	f240 1295 	movw	r2, #405	; 0x195
 8011cf6:	490a      	ldr	r1, [pc, #40]	; (8011d20 <memp_free_pool+0x40>)
 8011cf8:	480a      	ldr	r0, [pc, #40]	; (8011d24 <memp_free_pool+0x44>)
 8011cfa:	f00b f9e7 	bl	801d0cc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d007      	beq.n	8011d14 <memp_free_pool+0x34>
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d004      	beq.n	8011d14 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011d0a:	6839      	ldr	r1, [r7, #0]
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	f7ff ffbb 	bl	8011c88 <do_memp_free_pool>
 8011d12:	e000      	b.n	8011d16 <memp_free_pool+0x36>
    return;
 8011d14:	bf00      	nop
}
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	0802041c 	.word	0x0802041c
 8011d20:	08020498 	.word	0x08020498
 8011d24:	08020470 	.word	0x08020470

08011d28 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	6039      	str	r1, [r7, #0]
 8011d32:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011d34:	79fb      	ldrb	r3, [r7, #7]
 8011d36:	2b0c      	cmp	r3, #12
 8011d38:	d907      	bls.n	8011d4a <memp_free+0x22>
 8011d3a:	4b0c      	ldr	r3, [pc, #48]	; (8011d6c <memp_free+0x44>)
 8011d3c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011d40:	490b      	ldr	r1, [pc, #44]	; (8011d70 <memp_free+0x48>)
 8011d42:	480c      	ldr	r0, [pc, #48]	; (8011d74 <memp_free+0x4c>)
 8011d44:	f00b f9c2 	bl	801d0cc <iprintf>
 8011d48:	e00c      	b.n	8011d64 <memp_free+0x3c>

  if (mem == NULL) {
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d008      	beq.n	8011d62 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011d50:	79fb      	ldrb	r3, [r7, #7]
 8011d52:	4a09      	ldr	r2, [pc, #36]	; (8011d78 <memp_free+0x50>)
 8011d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7ff ff94 	bl	8011c88 <do_memp_free_pool>
 8011d60:	e000      	b.n	8011d64 <memp_free+0x3c>
    return;
 8011d62:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011d64:	3708      	adds	r7, #8
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0802041c 	.word	0x0802041c
 8011d70:	080204ec 	.word	0x080204ec
 8011d74:	08020470 	.word	0x08020470
 8011d78:	0802454c 	.word	0x0802454c

08011d7c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011d80:	bf00      	nop
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr
	...

08011d8c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d108      	bne.n	8011db2 <netif_add+0x26>
 8011da0:	4b57      	ldr	r3, [pc, #348]	; (8011f00 <netif_add+0x174>)
 8011da2:	f240 1227 	movw	r2, #295	; 0x127
 8011da6:	4957      	ldr	r1, [pc, #348]	; (8011f04 <netif_add+0x178>)
 8011da8:	4857      	ldr	r0, [pc, #348]	; (8011f08 <netif_add+0x17c>)
 8011daa:	f00b f98f 	bl	801d0cc <iprintf>
 8011dae:	2300      	movs	r3, #0
 8011db0:	e0a2      	b.n	8011ef8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d108      	bne.n	8011dca <netif_add+0x3e>
 8011db8:	4b51      	ldr	r3, [pc, #324]	; (8011f00 <netif_add+0x174>)
 8011dba:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011dbe:	4953      	ldr	r1, [pc, #332]	; (8011f0c <netif_add+0x180>)
 8011dc0:	4851      	ldr	r0, [pc, #324]	; (8011f08 <netif_add+0x17c>)
 8011dc2:	f00b f983 	bl	801d0cc <iprintf>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e096      	b.n	8011ef8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d101      	bne.n	8011dd4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011dd0:	4b4f      	ldr	r3, [pc, #316]	; (8011f10 <netif_add+0x184>)
 8011dd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d101      	bne.n	8011dde <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011dda:	4b4d      	ldr	r3, [pc, #308]	; (8011f10 <netif_add+0x184>)
 8011ddc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d101      	bne.n	8011de8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011de4:	4b4a      	ldr	r3, [pc, #296]	; (8011f10 <netif_add+0x184>)
 8011de6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2200      	movs	r2, #0
 8011dec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2200      	movs	r2, #0
 8011df2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4a45      	ldr	r2, [pc, #276]	; (8011f14 <netif_add+0x188>)
 8011dfe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2200      	movs	r2, #0
 8011e04:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2200      	movs	r2, #0
 8011e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	2200      	movs	r2, #0
 8011e12:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6a3a      	ldr	r2, [r7, #32]
 8011e18:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011e1a:	4b3f      	ldr	r3, [pc, #252]	; (8011f18 <netif_add+0x18c>)
 8011e1c:	781a      	ldrb	r2, [r3, #0]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e28:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	68b9      	ldr	r1, [r7, #8]
 8011e30:	68f8      	ldr	r0, [r7, #12]
 8011e32:	f000 f913 	bl	801205c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	4798      	blx	r3
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d001      	beq.n	8011e46 <netif_add+0xba>
    return NULL;
 8011e42:	2300      	movs	r3, #0
 8011e44:	e058      	b.n	8011ef8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e4c:	2bff      	cmp	r3, #255	; 0xff
 8011e4e:	d103      	bne.n	8011e58 <netif_add+0xcc>
        netif->num = 0;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011e5c:	4b2f      	ldr	r3, [pc, #188]	; (8011f1c <netif_add+0x190>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	617b      	str	r3, [r7, #20]
 8011e62:	e02b      	b.n	8011ebc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011e64:	697a      	ldr	r2, [r7, #20]
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d106      	bne.n	8011e7a <netif_add+0xee>
 8011e6c:	4b24      	ldr	r3, [pc, #144]	; (8011f00 <netif_add+0x174>)
 8011e6e:	f240 128b 	movw	r2, #395	; 0x18b
 8011e72:	492b      	ldr	r1, [pc, #172]	; (8011f20 <netif_add+0x194>)
 8011e74:	4824      	ldr	r0, [pc, #144]	; (8011f08 <netif_add+0x17c>)
 8011e76:	f00b f929 	bl	801d0cc <iprintf>
        num_netifs++;
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	2bff      	cmp	r3, #255	; 0xff
 8011e84:	dd06      	ble.n	8011e94 <netif_add+0x108>
 8011e86:	4b1e      	ldr	r3, [pc, #120]	; (8011f00 <netif_add+0x174>)
 8011e88:	f240 128d 	movw	r2, #397	; 0x18d
 8011e8c:	4925      	ldr	r1, [pc, #148]	; (8011f24 <netif_add+0x198>)
 8011e8e:	481e      	ldr	r0, [pc, #120]	; (8011f08 <netif_add+0x17c>)
 8011e90:	f00b f91c 	bl	801d0cc <iprintf>
        if (netif2->num == netif->num) {
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d108      	bne.n	8011eb6 <netif_add+0x12a>
          netif->num++;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011eaa:	3301      	adds	r3, #1
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011eb4:	e005      	b.n	8011ec2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	617b      	str	r3, [r7, #20]
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d1d0      	bne.n	8011e64 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1be      	bne.n	8011e46 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ece:	2bfe      	cmp	r3, #254	; 0xfe
 8011ed0:	d103      	bne.n	8011eda <netif_add+0x14e>
    netif_num = 0;
 8011ed2:	4b11      	ldr	r3, [pc, #68]	; (8011f18 <netif_add+0x18c>)
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e006      	b.n	8011ee8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	4b0c      	ldr	r3, [pc, #48]	; (8011f18 <netif_add+0x18c>)
 8011ee6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011ee8:	4b0c      	ldr	r3, [pc, #48]	; (8011f1c <netif_add+0x190>)
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011ef0:	4a0a      	ldr	r2, [pc, #40]	; (8011f1c <netif_add+0x190>)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3718      	adds	r7, #24
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	08020508 	.word	0x08020508
 8011f04:	0802059c 	.word	0x0802059c
 8011f08:	08020558 	.word	0x08020558
 8011f0c:	080205b8 	.word	0x080205b8
 8011f10:	080245c0 	.word	0x080245c0
 8011f14:	08012337 	.word	0x08012337
 8011f18:	200133e0 	.word	0x200133e0
 8011f1c:	200133d8 	.word	0x200133d8
 8011f20:	080205dc 	.word	0x080205dc
 8011f24:	080205f0 	.word	0x080205f0

08011f28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011f32:	6839      	ldr	r1, [r7, #0]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f002 fe4f 	bl	8014bd8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011f3a:	6839      	ldr	r1, [r7, #0]
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f007 fd01 	bl	8019944 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011f42:	bf00      	nop
 8011f44:	3708      	adds	r7, #8
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
	...

08011f4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b086      	sub	sp, #24
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d106      	bne.n	8011f6c <netif_do_set_ipaddr+0x20>
 8011f5e:	4b1d      	ldr	r3, [pc, #116]	; (8011fd4 <netif_do_set_ipaddr+0x88>)
 8011f60:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011f64:	491c      	ldr	r1, [pc, #112]	; (8011fd8 <netif_do_set_ipaddr+0x8c>)
 8011f66:	481d      	ldr	r0, [pc, #116]	; (8011fdc <netif_do_set_ipaddr+0x90>)
 8011f68:	f00b f8b0 	bl	801d0cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <netif_do_set_ipaddr+0x34>
 8011f72:	4b18      	ldr	r3, [pc, #96]	; (8011fd4 <netif_do_set_ipaddr+0x88>)
 8011f74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011f78:	4917      	ldr	r1, [pc, #92]	; (8011fd8 <netif_do_set_ipaddr+0x8c>)
 8011f7a:	4818      	ldr	r0, [pc, #96]	; (8011fdc <netif_do_set_ipaddr+0x90>)
 8011f7c:	f00b f8a6 	bl	801d0cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	681a      	ldr	r2, [r3, #0]
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	3304      	adds	r3, #4
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d01c      	beq.n	8011fc8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	3304      	adds	r3, #4
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011f9e:	f107 0314 	add.w	r3, r7, #20
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7ff ffbf 	bl	8011f28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d002      	beq.n	8011fb6 <netif_do_set_ipaddr+0x6a>
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	e000      	b.n	8011fb8 <netif_do_set_ipaddr+0x6c>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	68fa      	ldr	r2, [r7, #12]
 8011fba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	68f8      	ldr	r0, [r7, #12]
 8011fc0:	f000 f8d2 	bl	8012168 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e000      	b.n	8011fca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011fc8:	2300      	movs	r3, #0
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3718      	adds	r7, #24
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
 8011fd2:	bf00      	nop
 8011fd4:	08020508 	.word	0x08020508
 8011fd8:	08020620 	.word	0x08020620
 8011fdc:	08020558 	.word	0x08020558

08011fe0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b085      	sub	sp, #20
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	3308      	adds	r3, #8
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d00a      	beq.n	8012010 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d002      	beq.n	8012006 <netif_do_set_netmask+0x26>
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	e000      	b.n	8012008 <netif_do_set_netmask+0x28>
 8012006:	2300      	movs	r3, #0
 8012008:	68fa      	ldr	r2, [r7, #12]
 801200a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801200c:	2301      	movs	r3, #1
 801200e:	e000      	b.n	8012012 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012010:	2300      	movs	r3, #0
}
 8012012:	4618      	mov	r0, r3
 8012014:	3714      	adds	r7, #20
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr

0801201e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801201e:	b480      	push	{r7}
 8012020:	b085      	sub	sp, #20
 8012022:	af00      	add	r7, sp, #0
 8012024:	60f8      	str	r0, [r7, #12]
 8012026:	60b9      	str	r1, [r7, #8]
 8012028:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	330c      	adds	r3, #12
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	429a      	cmp	r2, r3
 8012036:	d00a      	beq.n	801204e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d002      	beq.n	8012044 <netif_do_set_gw+0x26>
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	e000      	b.n	8012046 <netif_do_set_gw+0x28>
 8012044:	2300      	movs	r3, #0
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801204a:	2301      	movs	r3, #1
 801204c:	e000      	b.n	8012050 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3714      	adds	r7, #20
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr

0801205c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b088      	sub	sp, #32
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
 8012068:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801206a:	2300      	movs	r3, #0
 801206c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801206e:	2300      	movs	r3, #0
 8012070:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d101      	bne.n	801207c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012078:	4b1c      	ldr	r3, [pc, #112]	; (80120ec <netif_set_addr+0x90>)
 801207a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d101      	bne.n	8012086 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012082:	4b1a      	ldr	r3, [pc, #104]	; (80120ec <netif_set_addr+0x90>)
 8012084:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d101      	bne.n	8012090 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801208c:	4b17      	ldr	r3, [pc, #92]	; (80120ec <netif_set_addr+0x90>)
 801208e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d003      	beq.n	801209e <netif_set_addr+0x42>
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d101      	bne.n	80120a2 <netif_set_addr+0x46>
 801209e:	2301      	movs	r3, #1
 80120a0:	e000      	b.n	80120a4 <netif_set_addr+0x48>
 80120a2:	2300      	movs	r3, #0
 80120a4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d006      	beq.n	80120ba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80120ac:	f107 0310 	add.w	r3, r7, #16
 80120b0:	461a      	mov	r2, r3
 80120b2:	68b9      	ldr	r1, [r7, #8]
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f7ff ff49 	bl	8011f4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80120ba:	69fa      	ldr	r2, [r7, #28]
 80120bc:	6879      	ldr	r1, [r7, #4]
 80120be:	68f8      	ldr	r0, [r7, #12]
 80120c0:	f7ff ff8e 	bl	8011fe0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80120c4:	69ba      	ldr	r2, [r7, #24]
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f7ff ffa8 	bl	801201e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d106      	bne.n	80120e2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80120d4:	f107 0310 	add.w	r3, r7, #16
 80120d8:	461a      	mov	r2, r3
 80120da:	68b9      	ldr	r1, [r7, #8]
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	f7ff ff35 	bl	8011f4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80120e2:	bf00      	nop
 80120e4:	3720      	adds	r7, #32
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	080245c0 	.word	0x080245c0

080120f0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80120f8:	4a04      	ldr	r2, [pc, #16]	; (801210c <netif_set_default+0x1c>)
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80120fe:	bf00      	nop
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop
 801210c:	200133dc 	.word	0x200133dc

08012110 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d107      	bne.n	801212e <netif_set_up+0x1e>
 801211e:	4b0f      	ldr	r3, [pc, #60]	; (801215c <netif_set_up+0x4c>)
 8012120:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012124:	490e      	ldr	r1, [pc, #56]	; (8012160 <netif_set_up+0x50>)
 8012126:	480f      	ldr	r0, [pc, #60]	; (8012164 <netif_set_up+0x54>)
 8012128:	f00a ffd0 	bl	801d0cc <iprintf>
 801212c:	e013      	b.n	8012156 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012134:	f003 0301 	and.w	r3, r3, #1
 8012138:	2b00      	cmp	r3, #0
 801213a:	d10c      	bne.n	8012156 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012142:	f043 0301 	orr.w	r3, r3, #1
 8012146:	b2da      	uxtb	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801214e:	2103      	movs	r1, #3
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f000 f809 	bl	8012168 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	08020508 	.word	0x08020508
 8012160:	08020690 	.word	0x08020690
 8012164:	08020558 	.word	0x08020558

08012168 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	460b      	mov	r3, r1
 8012172:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d106      	bne.n	8012188 <netif_issue_reports+0x20>
 801217a:	4b18      	ldr	r3, [pc, #96]	; (80121dc <netif_issue_reports+0x74>)
 801217c:	f240 326d 	movw	r2, #877	; 0x36d
 8012180:	4917      	ldr	r1, [pc, #92]	; (80121e0 <netif_issue_reports+0x78>)
 8012182:	4818      	ldr	r0, [pc, #96]	; (80121e4 <netif_issue_reports+0x7c>)
 8012184:	f00a ffa2 	bl	801d0cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801218e:	f003 0304 	and.w	r3, r3, #4
 8012192:	2b00      	cmp	r3, #0
 8012194:	d01e      	beq.n	80121d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801219c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d017      	beq.n	80121d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80121a4:	78fb      	ldrb	r3, [r7, #3]
 80121a6:	f003 0301 	and.w	r3, r3, #1
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d013      	beq.n	80121d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	3304      	adds	r3, #4
 80121b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00e      	beq.n	80121d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80121be:	f003 0308 	and.w	r3, r3, #8
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d007      	beq.n	80121d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	3304      	adds	r3, #4
 80121ca:	4619      	mov	r1, r3
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f008 fb23 	bl	801a818 <etharp_request>
 80121d2:	e000      	b.n	80121d6 <netif_issue_reports+0x6e>
    return;
 80121d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80121d6:	3708      	adds	r7, #8
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	08020508 	.word	0x08020508
 80121e0:	080206ac 	.word	0x080206ac
 80121e4:	08020558 	.word	0x08020558

080121e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d107      	bne.n	8012206 <netif_set_down+0x1e>
 80121f6:	4b12      	ldr	r3, [pc, #72]	; (8012240 <netif_set_down+0x58>)
 80121f8:	f240 329b 	movw	r2, #923	; 0x39b
 80121fc:	4911      	ldr	r1, [pc, #68]	; (8012244 <netif_set_down+0x5c>)
 80121fe:	4812      	ldr	r0, [pc, #72]	; (8012248 <netif_set_down+0x60>)
 8012200:	f00a ff64 	bl	801d0cc <iprintf>
 8012204:	e019      	b.n	801223a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801220c:	f003 0301 	and.w	r3, r3, #1
 8012210:	2b00      	cmp	r3, #0
 8012212:	d012      	beq.n	801223a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801221a:	f023 0301 	bic.w	r3, r3, #1
 801221e:	b2da      	uxtb	r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801222c:	f003 0308 	and.w	r3, r3, #8
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f007 fead 	bl	8019f94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	08020508 	.word	0x08020508
 8012244:	080206d0 	.word	0x080206d0
 8012248:	08020558 	.word	0x08020558

0801224c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d107      	bne.n	801226a <netif_set_link_up+0x1e>
 801225a:	4b13      	ldr	r3, [pc, #76]	; (80122a8 <netif_set_link_up+0x5c>)
 801225c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012260:	4912      	ldr	r1, [pc, #72]	; (80122ac <netif_set_link_up+0x60>)
 8012262:	4813      	ldr	r0, [pc, #76]	; (80122b0 <netif_set_link_up+0x64>)
 8012264:	f00a ff32 	bl	801d0cc <iprintf>
 8012268:	e01b      	b.n	80122a2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012270:	f003 0304 	and.w	r3, r3, #4
 8012274:	2b00      	cmp	r3, #0
 8012276:	d114      	bne.n	80122a2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801227e:	f043 0304 	orr.w	r3, r3, #4
 8012282:	b2da      	uxtb	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801228a:	2103      	movs	r1, #3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff ff6b 	bl	8012168 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	69db      	ldr	r3, [r3, #28]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d003      	beq.n	80122a2 <netif_set_link_up+0x56>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	69db      	ldr	r3, [r3, #28]
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	08020508 	.word	0x08020508
 80122ac:	080206f0 	.word	0x080206f0
 80122b0:	08020558 	.word	0x08020558

080122b4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d107      	bne.n	80122d2 <netif_set_link_down+0x1e>
 80122c2:	4b11      	ldr	r3, [pc, #68]	; (8012308 <netif_set_link_down+0x54>)
 80122c4:	f240 4206 	movw	r2, #1030	; 0x406
 80122c8:	4910      	ldr	r1, [pc, #64]	; (801230c <netif_set_link_down+0x58>)
 80122ca:	4811      	ldr	r0, [pc, #68]	; (8012310 <netif_set_link_down+0x5c>)
 80122cc:	f00a fefe 	bl	801d0cc <iprintf>
 80122d0:	e017      	b.n	8012302 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122d8:	f003 0304 	and.w	r3, r3, #4
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d010      	beq.n	8012302 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122e6:	f023 0304 	bic.w	r3, r3, #4
 80122ea:	b2da      	uxtb	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	69db      	ldr	r3, [r3, #28]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <netif_set_link_down+0x4e>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	69db      	ldr	r3, [r3, #28]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	08020508 	.word	0x08020508
 801230c:	08020714 	.word	0x08020714
 8012310:	08020558 	.word	0x08020558

08012314 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d002      	beq.n	801232a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	61da      	str	r2, [r3, #28]
  }
}
 801232a:	bf00      	nop
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012336:	b480      	push	{r7}
 8012338:	b085      	sub	sp, #20
 801233a:	af00      	add	r7, sp, #0
 801233c:	60f8      	str	r0, [r7, #12]
 801233e:	60b9      	str	r1, [r7, #8]
 8012340:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012342:	f06f 030b 	mvn.w	r3, #11
}
 8012346:	4618      	mov	r0, r3
 8012348:	3714      	adds	r7, #20
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
	...

08012354 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	4603      	mov	r3, r0
 801235c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801235e:	79fb      	ldrb	r3, [r7, #7]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d013      	beq.n	801238c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012364:	4b0d      	ldr	r3, [pc, #52]	; (801239c <netif_get_by_index+0x48>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	60fb      	str	r3, [r7, #12]
 801236a:	e00c      	b.n	8012386 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012372:	3301      	adds	r3, #1
 8012374:	b2db      	uxtb	r3, r3
 8012376:	79fa      	ldrb	r2, [r7, #7]
 8012378:	429a      	cmp	r2, r3
 801237a:	d101      	bne.n	8012380 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	e006      	b.n	801238e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	60fb      	str	r3, [r7, #12]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d1ef      	bne.n	801236c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	3714      	adds	r7, #20
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop
 801239c:	200133d8 	.word	0x200133d8

080123a0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80123a6:	f009 ff87 	bl	801c2b8 <sys_arch_protect>
 80123aa:	6038      	str	r0, [r7, #0]
 80123ac:	4b0d      	ldr	r3, [pc, #52]	; (80123e4 <pbuf_free_ooseq+0x44>)
 80123ae:	2200      	movs	r2, #0
 80123b0:	701a      	strb	r2, [r3, #0]
 80123b2:	6838      	ldr	r0, [r7, #0]
 80123b4:	f009 ff8e 	bl	801c2d4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80123b8:	4b0b      	ldr	r3, [pc, #44]	; (80123e8 <pbuf_free_ooseq+0x48>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	607b      	str	r3, [r7, #4]
 80123be:	e00a      	b.n	80123d6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d003      	beq.n	80123d0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f002 fc43 	bl	8014c54 <tcp_free_ooseq>
      return;
 80123ce:	e005      	b.n	80123dc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	607b      	str	r3, [r7, #4]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d1f1      	bne.n	80123c0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	200133e1 	.word	0x200133e1
 80123e8:	200133f0 	.word	0x200133f0

080123ec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80123f4:	f7ff ffd4 	bl	80123a0 <pbuf_free_ooseq>
}
 80123f8:	bf00      	nop
 80123fa:	3708      	adds	r7, #8
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012406:	f009 ff57 	bl	801c2b8 <sys_arch_protect>
 801240a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801240c:	4b0f      	ldr	r3, [pc, #60]	; (801244c <pbuf_pool_is_empty+0x4c>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012412:	4b0e      	ldr	r3, [pc, #56]	; (801244c <pbuf_pool_is_empty+0x4c>)
 8012414:	2201      	movs	r2, #1
 8012416:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f009 ff5b 	bl	801c2d4 <sys_arch_unprotect>

  if (!queued) {
 801241e:	78fb      	ldrb	r3, [r7, #3]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d10f      	bne.n	8012444 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012424:	2100      	movs	r1, #0
 8012426:	480a      	ldr	r0, [pc, #40]	; (8012450 <pbuf_pool_is_empty+0x50>)
 8012428:	f7fe fe48 	bl	80110bc <tcpip_try_callback>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d008      	beq.n	8012444 <pbuf_pool_is_empty+0x44>
 8012432:	f009 ff41 	bl	801c2b8 <sys_arch_protect>
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	4b04      	ldr	r3, [pc, #16]	; (801244c <pbuf_pool_is_empty+0x4c>)
 801243a:	2200      	movs	r2, #0
 801243c:	701a      	strb	r2, [r3, #0]
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f009 ff48 	bl	801c2d4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012444:	bf00      	nop
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	200133e1 	.word	0x200133e1
 8012450:	080123ed 	.word	0x080123ed

08012454 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012454:	b480      	push	{r7}
 8012456:	b085      	sub	sp, #20
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	4611      	mov	r1, r2
 8012460:	461a      	mov	r2, r3
 8012462:	460b      	mov	r3, r1
 8012464:	80fb      	strh	r3, [r7, #6]
 8012466:	4613      	mov	r3, r2
 8012468:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2200      	movs	r2, #0
 801246e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	68ba      	ldr	r2, [r7, #8]
 8012474:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	88fa      	ldrh	r2, [r7, #6]
 801247a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	88ba      	ldrh	r2, [r7, #4]
 8012480:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012482:	8b3b      	ldrh	r3, [r7, #24]
 8012484:	b2da      	uxtb	r2, r3
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	7f3a      	ldrb	r2, [r7, #28]
 801248e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2201      	movs	r2, #1
 8012494:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2200      	movs	r2, #0
 801249a:	73da      	strb	r2, [r3, #15]
}
 801249c:	bf00      	nop
 801249e:	3714      	adds	r7, #20
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr

080124a8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b08c      	sub	sp, #48	; 0x30
 80124ac:	af02      	add	r7, sp, #8
 80124ae:	4603      	mov	r3, r0
 80124b0:	71fb      	strb	r3, [r7, #7]
 80124b2:	460b      	mov	r3, r1
 80124b4:	80bb      	strh	r3, [r7, #4]
 80124b6:	4613      	mov	r3, r2
 80124b8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80124ba:	79fb      	ldrb	r3, [r7, #7]
 80124bc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80124be:	887b      	ldrh	r3, [r7, #2]
 80124c0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80124c4:	d07f      	beq.n	80125c6 <pbuf_alloc+0x11e>
 80124c6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80124ca:	f300 80c8 	bgt.w	801265e <pbuf_alloc+0x1b6>
 80124ce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80124d2:	d010      	beq.n	80124f6 <pbuf_alloc+0x4e>
 80124d4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80124d8:	f300 80c1 	bgt.w	801265e <pbuf_alloc+0x1b6>
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d002      	beq.n	80124e6 <pbuf_alloc+0x3e>
 80124e0:	2b41      	cmp	r3, #65	; 0x41
 80124e2:	f040 80bc 	bne.w	801265e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80124e6:	887a      	ldrh	r2, [r7, #2]
 80124e8:	88bb      	ldrh	r3, [r7, #4]
 80124ea:	4619      	mov	r1, r3
 80124ec:	2000      	movs	r0, #0
 80124ee:	f000 f8d1 	bl	8012694 <pbuf_alloc_reference>
 80124f2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80124f4:	e0bd      	b.n	8012672 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80124f6:	2300      	movs	r3, #0
 80124f8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80124fa:	2300      	movs	r3, #0
 80124fc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80124fe:	88bb      	ldrh	r3, [r7, #4]
 8012500:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012502:	200c      	movs	r0, #12
 8012504:	f7ff fb9a 	bl	8011c3c <memp_malloc>
 8012508:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d109      	bne.n	8012524 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012510:	f7ff ff76 	bl	8012400 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012516:	2b00      	cmp	r3, #0
 8012518:	d002      	beq.n	8012520 <pbuf_alloc+0x78>
            pbuf_free(p);
 801251a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801251c:	f000 faa8 	bl	8012a70 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012520:	2300      	movs	r3, #0
 8012522:	e0a7      	b.n	8012674 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012526:	3303      	adds	r3, #3
 8012528:	b29b      	uxth	r3, r3
 801252a:	f023 0303 	bic.w	r3, r3, #3
 801252e:	b29b      	uxth	r3, r3
 8012530:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012534:	b29b      	uxth	r3, r3
 8012536:	8b7a      	ldrh	r2, [r7, #26]
 8012538:	4293      	cmp	r3, r2
 801253a:	bf28      	it	cs
 801253c:	4613      	movcs	r3, r2
 801253e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012542:	3310      	adds	r3, #16
 8012544:	693a      	ldr	r2, [r7, #16]
 8012546:	4413      	add	r3, r2
 8012548:	3303      	adds	r3, #3
 801254a:	f023 0303 	bic.w	r3, r3, #3
 801254e:	4618      	mov	r0, r3
 8012550:	89f9      	ldrh	r1, [r7, #14]
 8012552:	8b7a      	ldrh	r2, [r7, #26]
 8012554:	2300      	movs	r3, #0
 8012556:	9301      	str	r3, [sp, #4]
 8012558:	887b      	ldrh	r3, [r7, #2]
 801255a:	9300      	str	r3, [sp, #0]
 801255c:	460b      	mov	r3, r1
 801255e:	4601      	mov	r1, r0
 8012560:	6938      	ldr	r0, [r7, #16]
 8012562:	f7ff ff77 	bl	8012454 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	f003 0303 	and.w	r3, r3, #3
 801256e:	2b00      	cmp	r3, #0
 8012570:	d006      	beq.n	8012580 <pbuf_alloc+0xd8>
 8012572:	4b42      	ldr	r3, [pc, #264]	; (801267c <pbuf_alloc+0x1d4>)
 8012574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012578:	4941      	ldr	r1, [pc, #260]	; (8012680 <pbuf_alloc+0x1d8>)
 801257a:	4842      	ldr	r0, [pc, #264]	; (8012684 <pbuf_alloc+0x1dc>)
 801257c:	f00a fda6 	bl	801d0cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012582:	3303      	adds	r3, #3
 8012584:	f023 0303 	bic.w	r3, r3, #3
 8012588:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801258c:	d106      	bne.n	801259c <pbuf_alloc+0xf4>
 801258e:	4b3b      	ldr	r3, [pc, #236]	; (801267c <pbuf_alloc+0x1d4>)
 8012590:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012594:	493c      	ldr	r1, [pc, #240]	; (8012688 <pbuf_alloc+0x1e0>)
 8012596:	483b      	ldr	r0, [pc, #236]	; (8012684 <pbuf_alloc+0x1dc>)
 8012598:	f00a fd98 	bl	801d0cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d102      	bne.n	80125a8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	627b      	str	r3, [r7, #36]	; 0x24
 80125a6:	e002      	b.n	80125ae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	693a      	ldr	r2, [r7, #16]
 80125ac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80125b2:	8b7a      	ldrh	r2, [r7, #26]
 80125b4:	89fb      	ldrh	r3, [r7, #14]
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80125be:	8b7b      	ldrh	r3, [r7, #26]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d19e      	bne.n	8012502 <pbuf_alloc+0x5a>
      break;
 80125c4:	e055      	b.n	8012672 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80125c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125c8:	3303      	adds	r3, #3
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	f023 0303 	bic.w	r3, r3, #3
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	88bb      	ldrh	r3, [r7, #4]
 80125d4:	3303      	adds	r3, #3
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	f023 0303 	bic.w	r3, r3, #3
 80125dc:	b29b      	uxth	r3, r3
 80125de:	4413      	add	r3, r2
 80125e0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80125e2:	8b3b      	ldrh	r3, [r7, #24]
 80125e4:	3310      	adds	r3, #16
 80125e6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80125e8:	8b3a      	ldrh	r2, [r7, #24]
 80125ea:	88bb      	ldrh	r3, [r7, #4]
 80125ec:	3303      	adds	r3, #3
 80125ee:	f023 0303 	bic.w	r3, r3, #3
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d306      	bcc.n	8012604 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80125f6:	8afa      	ldrh	r2, [r7, #22]
 80125f8:	88bb      	ldrh	r3, [r7, #4]
 80125fa:	3303      	adds	r3, #3
 80125fc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012600:	429a      	cmp	r2, r3
 8012602:	d201      	bcs.n	8012608 <pbuf_alloc+0x160>
        return NULL;
 8012604:	2300      	movs	r3, #0
 8012606:	e035      	b.n	8012674 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012608:	8afb      	ldrh	r3, [r7, #22]
 801260a:	4618      	mov	r0, r3
 801260c:	f7ff f972 	bl	80118f4 <mem_malloc>
 8012610:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <pbuf_alloc+0x174>
        return NULL;
 8012618:	2300      	movs	r3, #0
 801261a:	e02b      	b.n	8012674 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801261c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801261e:	3310      	adds	r3, #16
 8012620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012622:	4413      	add	r3, r2
 8012624:	3303      	adds	r3, #3
 8012626:	f023 0303 	bic.w	r3, r3, #3
 801262a:	4618      	mov	r0, r3
 801262c:	88b9      	ldrh	r1, [r7, #4]
 801262e:	88ba      	ldrh	r2, [r7, #4]
 8012630:	2300      	movs	r3, #0
 8012632:	9301      	str	r3, [sp, #4]
 8012634:	887b      	ldrh	r3, [r7, #2]
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	460b      	mov	r3, r1
 801263a:	4601      	mov	r1, r0
 801263c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801263e:	f7ff ff09 	bl	8012454 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	f003 0303 	and.w	r3, r3, #3
 801264a:	2b00      	cmp	r3, #0
 801264c:	d010      	beq.n	8012670 <pbuf_alloc+0x1c8>
 801264e:	4b0b      	ldr	r3, [pc, #44]	; (801267c <pbuf_alloc+0x1d4>)
 8012650:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012654:	490d      	ldr	r1, [pc, #52]	; (801268c <pbuf_alloc+0x1e4>)
 8012656:	480b      	ldr	r0, [pc, #44]	; (8012684 <pbuf_alloc+0x1dc>)
 8012658:	f00a fd38 	bl	801d0cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801265c:	e008      	b.n	8012670 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801265e:	4b07      	ldr	r3, [pc, #28]	; (801267c <pbuf_alloc+0x1d4>)
 8012660:	f240 1227 	movw	r2, #295	; 0x127
 8012664:	490a      	ldr	r1, [pc, #40]	; (8012690 <pbuf_alloc+0x1e8>)
 8012666:	4807      	ldr	r0, [pc, #28]	; (8012684 <pbuf_alloc+0x1dc>)
 8012668:	f00a fd30 	bl	801d0cc <iprintf>
      return NULL;
 801266c:	2300      	movs	r3, #0
 801266e:	e001      	b.n	8012674 <pbuf_alloc+0x1cc>
      break;
 8012670:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012674:	4618      	mov	r0, r3
 8012676:	3728      	adds	r7, #40	; 0x28
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	08020738 	.word	0x08020738
 8012680:	08020768 	.word	0x08020768
 8012684:	08020798 	.word	0x08020798
 8012688:	080207c0 	.word	0x080207c0
 801268c:	080207f4 	.word	0x080207f4
 8012690:	08020820 	.word	0x08020820

08012694 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b086      	sub	sp, #24
 8012698:	af02      	add	r7, sp, #8
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	460b      	mov	r3, r1
 801269e:	807b      	strh	r3, [r7, #2]
 80126a0:	4613      	mov	r3, r2
 80126a2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80126a4:	883b      	ldrh	r3, [r7, #0]
 80126a6:	2b41      	cmp	r3, #65	; 0x41
 80126a8:	d009      	beq.n	80126be <pbuf_alloc_reference+0x2a>
 80126aa:	883b      	ldrh	r3, [r7, #0]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d006      	beq.n	80126be <pbuf_alloc_reference+0x2a>
 80126b0:	4b0f      	ldr	r3, [pc, #60]	; (80126f0 <pbuf_alloc_reference+0x5c>)
 80126b2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80126b6:	490f      	ldr	r1, [pc, #60]	; (80126f4 <pbuf_alloc_reference+0x60>)
 80126b8:	480f      	ldr	r0, [pc, #60]	; (80126f8 <pbuf_alloc_reference+0x64>)
 80126ba:	f00a fd07 	bl	801d0cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80126be:	200b      	movs	r0, #11
 80126c0:	f7ff fabc 	bl	8011c3c <memp_malloc>
 80126c4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d101      	bne.n	80126d0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80126cc:	2300      	movs	r3, #0
 80126ce:	e00b      	b.n	80126e8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80126d0:	8879      	ldrh	r1, [r7, #2]
 80126d2:	887a      	ldrh	r2, [r7, #2]
 80126d4:	2300      	movs	r3, #0
 80126d6:	9301      	str	r3, [sp, #4]
 80126d8:	883b      	ldrh	r3, [r7, #0]
 80126da:	9300      	str	r3, [sp, #0]
 80126dc:	460b      	mov	r3, r1
 80126de:	6879      	ldr	r1, [r7, #4]
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f7ff feb7 	bl	8012454 <pbuf_init_alloced_pbuf>
  return p;
 80126e6:	68fb      	ldr	r3, [r7, #12]
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3710      	adds	r7, #16
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	08020738 	.word	0x08020738
 80126f4:	0802083c 	.word	0x0802083c
 80126f8:	08020798 	.word	0x08020798

080126fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b088      	sub	sp, #32
 8012700:	af02      	add	r7, sp, #8
 8012702:	607b      	str	r3, [r7, #4]
 8012704:	4603      	mov	r3, r0
 8012706:	73fb      	strb	r3, [r7, #15]
 8012708:	460b      	mov	r3, r1
 801270a:	81bb      	strh	r3, [r7, #12]
 801270c:	4613      	mov	r3, r2
 801270e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012710:	7bfb      	ldrb	r3, [r7, #15]
 8012712:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012714:	8a7b      	ldrh	r3, [r7, #18]
 8012716:	3303      	adds	r3, #3
 8012718:	f023 0203 	bic.w	r2, r3, #3
 801271c:	89bb      	ldrh	r3, [r7, #12]
 801271e:	441a      	add	r2, r3
 8012720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012722:	429a      	cmp	r2, r3
 8012724:	d901      	bls.n	801272a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012726:	2300      	movs	r3, #0
 8012728:	e018      	b.n	801275c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801272a:	6a3b      	ldr	r3, [r7, #32]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d007      	beq.n	8012740 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012730:	8a7b      	ldrh	r3, [r7, #18]
 8012732:	3303      	adds	r3, #3
 8012734:	f023 0303 	bic.w	r3, r3, #3
 8012738:	6a3a      	ldr	r2, [r7, #32]
 801273a:	4413      	add	r3, r2
 801273c:	617b      	str	r3, [r7, #20]
 801273e:	e001      	b.n	8012744 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012740:	2300      	movs	r3, #0
 8012742:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	89b9      	ldrh	r1, [r7, #12]
 8012748:	89ba      	ldrh	r2, [r7, #12]
 801274a:	2302      	movs	r3, #2
 801274c:	9301      	str	r3, [sp, #4]
 801274e:	897b      	ldrh	r3, [r7, #10]
 8012750:	9300      	str	r3, [sp, #0]
 8012752:	460b      	mov	r3, r1
 8012754:	6979      	ldr	r1, [r7, #20]
 8012756:	f7ff fe7d 	bl	8012454 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801275a:	687b      	ldr	r3, [r7, #4]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	460b      	mov	r3, r1
 801276e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d106      	bne.n	8012784 <pbuf_realloc+0x20>
 8012776:	4b3a      	ldr	r3, [pc, #232]	; (8012860 <pbuf_realloc+0xfc>)
 8012778:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801277c:	4939      	ldr	r1, [pc, #228]	; (8012864 <pbuf_realloc+0x100>)
 801277e:	483a      	ldr	r0, [pc, #232]	; (8012868 <pbuf_realloc+0x104>)
 8012780:	f00a fca4 	bl	801d0cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	891b      	ldrh	r3, [r3, #8]
 8012788:	887a      	ldrh	r2, [r7, #2]
 801278a:	429a      	cmp	r2, r3
 801278c:	d263      	bcs.n	8012856 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	891a      	ldrh	r2, [r3, #8]
 8012792:	887b      	ldrh	r3, [r7, #2]
 8012794:	1ad3      	subs	r3, r2, r3
 8012796:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012798:	887b      	ldrh	r3, [r7, #2]
 801279a:	817b      	strh	r3, [r7, #10]
  q = p;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80127a0:	e018      	b.n	80127d4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	895b      	ldrh	r3, [r3, #10]
 80127a6:	897a      	ldrh	r2, [r7, #10]
 80127a8:	1ad3      	subs	r3, r2, r3
 80127aa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	891a      	ldrh	r2, [r3, #8]
 80127b0:	893b      	ldrh	r3, [r7, #8]
 80127b2:	1ad3      	subs	r3, r2, r3
 80127b4:	b29a      	uxth	r2, r3
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d106      	bne.n	80127d4 <pbuf_realloc+0x70>
 80127c6:	4b26      	ldr	r3, [pc, #152]	; (8012860 <pbuf_realloc+0xfc>)
 80127c8:	f240 12af 	movw	r2, #431	; 0x1af
 80127cc:	4927      	ldr	r1, [pc, #156]	; (801286c <pbuf_realloc+0x108>)
 80127ce:	4826      	ldr	r0, [pc, #152]	; (8012868 <pbuf_realloc+0x104>)
 80127d0:	f00a fc7c 	bl	801d0cc <iprintf>
  while (rem_len > q->len) {
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	895b      	ldrh	r3, [r3, #10]
 80127d8:	897a      	ldrh	r2, [r7, #10]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d8e1      	bhi.n	80127a2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	7b1b      	ldrb	r3, [r3, #12]
 80127e2:	f003 030f 	and.w	r3, r3, #15
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d121      	bne.n	801282e <pbuf_realloc+0xca>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	895b      	ldrh	r3, [r3, #10]
 80127ee:	897a      	ldrh	r2, [r7, #10]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d01c      	beq.n	801282e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	7b5b      	ldrb	r3, [r3, #13]
 80127f8:	f003 0302 	and.w	r3, r3, #2
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d116      	bne.n	801282e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	b29a      	uxth	r2, r3
 801280a:	897b      	ldrh	r3, [r7, #10]
 801280c:	4413      	add	r3, r2
 801280e:	b29b      	uxth	r3, r3
 8012810:	4619      	mov	r1, r3
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f7fe ff64 	bl	80116e0 <mem_trim>
 8012818:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d106      	bne.n	801282e <pbuf_realloc+0xca>
 8012820:	4b0f      	ldr	r3, [pc, #60]	; (8012860 <pbuf_realloc+0xfc>)
 8012822:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012826:	4912      	ldr	r1, [pc, #72]	; (8012870 <pbuf_realloc+0x10c>)
 8012828:	480f      	ldr	r0, [pc, #60]	; (8012868 <pbuf_realloc+0x104>)
 801282a:	f00a fc4f 	bl	801d0cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	897a      	ldrh	r2, [r7, #10]
 8012832:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	895a      	ldrh	r2, [r3, #10]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d004      	beq.n	801284e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4618      	mov	r0, r3
 801284a:	f000 f911 	bl	8012a70 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2200      	movs	r2, #0
 8012852:	601a      	str	r2, [r3, #0]
 8012854:	e000      	b.n	8012858 <pbuf_realloc+0xf4>
    return;
 8012856:	bf00      	nop

}
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	08020738 	.word	0x08020738
 8012864:	08020850 	.word	0x08020850
 8012868:	08020798 	.word	0x08020798
 801286c:	08020868 	.word	0x08020868
 8012870:	08020880 	.word	0x08020880

08012874 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	4613      	mov	r3, r2
 8012880:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d106      	bne.n	8012896 <pbuf_add_header_impl+0x22>
 8012888:	4b2b      	ldr	r3, [pc, #172]	; (8012938 <pbuf_add_header_impl+0xc4>)
 801288a:	f240 12df 	movw	r2, #479	; 0x1df
 801288e:	492b      	ldr	r1, [pc, #172]	; (801293c <pbuf_add_header_impl+0xc8>)
 8012890:	482b      	ldr	r0, [pc, #172]	; (8012940 <pbuf_add_header_impl+0xcc>)
 8012892:	f00a fc1b 	bl	801d0cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d003      	beq.n	80128a4 <pbuf_add_header_impl+0x30>
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128a2:	d301      	bcc.n	80128a8 <pbuf_add_header_impl+0x34>
    return 1;
 80128a4:	2301      	movs	r3, #1
 80128a6:	e043      	b.n	8012930 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d101      	bne.n	80128b2 <pbuf_add_header_impl+0x3e>
    return 0;
 80128ae:	2300      	movs	r3, #0
 80128b0:	e03e      	b.n	8012930 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	891a      	ldrh	r2, [r3, #8]
 80128ba:	8a7b      	ldrh	r3, [r7, #18]
 80128bc:	4413      	add	r3, r2
 80128be:	b29b      	uxth	r3, r3
 80128c0:	8a7a      	ldrh	r2, [r7, #18]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d901      	bls.n	80128ca <pbuf_add_header_impl+0x56>
    return 1;
 80128c6:	2301      	movs	r3, #1
 80128c8:	e032      	b.n	8012930 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	7b1b      	ldrb	r3, [r3, #12]
 80128ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80128d0:	8a3b      	ldrh	r3, [r7, #16]
 80128d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00c      	beq.n	80128f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	685a      	ldr	r2, [r3, #4]
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	425b      	negs	r3, r3
 80128e2:	4413      	add	r3, r2
 80128e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	3310      	adds	r3, #16
 80128ea:	697a      	ldr	r2, [r7, #20]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d20d      	bcs.n	801290c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80128f0:	2301      	movs	r3, #1
 80128f2:	e01d      	b.n	8012930 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80128f4:	79fb      	ldrb	r3, [r7, #7]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d006      	beq.n	8012908 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	685a      	ldr	r2, [r3, #4]
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	425b      	negs	r3, r3
 8012902:	4413      	add	r3, r2
 8012904:	617b      	str	r3, [r7, #20]
 8012906:	e001      	b.n	801290c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012908:	2301      	movs	r3, #1
 801290a:	e011      	b.n	8012930 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	895a      	ldrh	r2, [r3, #10]
 8012916:	8a7b      	ldrh	r3, [r7, #18]
 8012918:	4413      	add	r3, r2
 801291a:	b29a      	uxth	r2, r3
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	891a      	ldrh	r2, [r3, #8]
 8012924:	8a7b      	ldrh	r3, [r7, #18]
 8012926:	4413      	add	r3, r2
 8012928:	b29a      	uxth	r2, r3
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	811a      	strh	r2, [r3, #8]


  return 0;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3718      	adds	r7, #24
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	08020738 	.word	0x08020738
 801293c:	0802089c 	.word	0x0802089c
 8012940:	08020798 	.word	0x08020798

08012944 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801294e:	2200      	movs	r2, #0
 8012950:	6839      	ldr	r1, [r7, #0]
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7ff ff8e 	bl	8012874 <pbuf_add_header_impl>
 8012958:	4603      	mov	r3, r0
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
	...

08012964 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d106      	bne.n	8012982 <pbuf_remove_header+0x1e>
 8012974:	4b20      	ldr	r3, [pc, #128]	; (80129f8 <pbuf_remove_header+0x94>)
 8012976:	f240 224b 	movw	r2, #587	; 0x24b
 801297a:	4920      	ldr	r1, [pc, #128]	; (80129fc <pbuf_remove_header+0x98>)
 801297c:	4820      	ldr	r0, [pc, #128]	; (8012a00 <pbuf_remove_header+0x9c>)
 801297e:	f00a fba5 	bl	801d0cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d003      	beq.n	8012990 <pbuf_remove_header+0x2c>
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801298e:	d301      	bcc.n	8012994 <pbuf_remove_header+0x30>
    return 1;
 8012990:	2301      	movs	r3, #1
 8012992:	e02c      	b.n	80129ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d101      	bne.n	801299e <pbuf_remove_header+0x3a>
    return 0;
 801299a:	2300      	movs	r3, #0
 801299c:	e027      	b.n	80129ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	895b      	ldrh	r3, [r3, #10]
 80129a6:	89fa      	ldrh	r2, [r7, #14]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d908      	bls.n	80129be <pbuf_remove_header+0x5a>
 80129ac:	4b12      	ldr	r3, [pc, #72]	; (80129f8 <pbuf_remove_header+0x94>)
 80129ae:	f240 2255 	movw	r2, #597	; 0x255
 80129b2:	4914      	ldr	r1, [pc, #80]	; (8012a04 <pbuf_remove_header+0xa0>)
 80129b4:	4812      	ldr	r0, [pc, #72]	; (8012a00 <pbuf_remove_header+0x9c>)
 80129b6:	f00a fb89 	bl	801d0cc <iprintf>
 80129ba:	2301      	movs	r3, #1
 80129bc:	e017      	b.n	80129ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	685a      	ldr	r2, [r3, #4]
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	441a      	add	r2, r3
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	895a      	ldrh	r2, [r3, #10]
 80129d4:	89fb      	ldrh	r3, [r7, #14]
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	b29a      	uxth	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	891a      	ldrh	r2, [r3, #8]
 80129e2:	89fb      	ldrh	r3, [r7, #14]
 80129e4:	1ad3      	subs	r3, r2, r3
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80129ec:	2300      	movs	r3, #0
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3710      	adds	r7, #16
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	08020738 	.word	0x08020738
 80129fc:	0802089c 	.word	0x0802089c
 8012a00:	08020798 	.word	0x08020798
 8012a04:	080208a8 	.word	0x080208a8

08012a08 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	460b      	mov	r3, r1
 8012a12:	807b      	strh	r3, [r7, #2]
 8012a14:	4613      	mov	r3, r2
 8012a16:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012a18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	da08      	bge.n	8012a32 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a24:	425b      	negs	r3, r3
 8012a26:	4619      	mov	r1, r3
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f7ff ff9b 	bl	8012964 <pbuf_remove_header>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	e007      	b.n	8012a42 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012a32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a36:	787a      	ldrb	r2, [r7, #1]
 8012a38:	4619      	mov	r1, r3
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f7ff ff1a 	bl	8012874 <pbuf_add_header_impl>
 8012a40:	4603      	mov	r3, r0
  }
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3708      	adds	r7, #8
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}

08012a4a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012a4a:	b580      	push	{r7, lr}
 8012a4c:	b082      	sub	sp, #8
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	460b      	mov	r3, r1
 8012a54:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012a56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f7ff ffd2 	bl	8012a08 <pbuf_header_impl>
 8012a64:	4603      	mov	r3, r0
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
	...

08012a70 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b088      	sub	sp, #32
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10b      	bne.n	8012a96 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <pbuf_free+0x22>
 8012a84:	4b3b      	ldr	r3, [pc, #236]	; (8012b74 <pbuf_free+0x104>)
 8012a86:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012a8a:	493b      	ldr	r1, [pc, #236]	; (8012b78 <pbuf_free+0x108>)
 8012a8c:	483b      	ldr	r0, [pc, #236]	; (8012b7c <pbuf_free+0x10c>)
 8012a8e:	f00a fb1d 	bl	801d0cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	e069      	b.n	8012b6a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012a9a:	e062      	b.n	8012b62 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012a9c:	f009 fc0c 	bl	801c2b8 <sys_arch_protect>
 8012aa0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	7b9b      	ldrb	r3, [r3, #14]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d106      	bne.n	8012ab8 <pbuf_free+0x48>
 8012aaa:	4b32      	ldr	r3, [pc, #200]	; (8012b74 <pbuf_free+0x104>)
 8012aac:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012ab0:	4933      	ldr	r1, [pc, #204]	; (8012b80 <pbuf_free+0x110>)
 8012ab2:	4832      	ldr	r0, [pc, #200]	; (8012b7c <pbuf_free+0x10c>)
 8012ab4:	f00a fb0a 	bl	801d0cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	7b9b      	ldrb	r3, [r3, #14]
 8012abc:	3b01      	subs	r3, #1
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	739a      	strb	r2, [r3, #14]
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	7b9b      	ldrb	r3, [r3, #14]
 8012ac8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012aca:	69b8      	ldr	r0, [r7, #24]
 8012acc:	f009 fc02 	bl	801c2d4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012ad0:	7dfb      	ldrb	r3, [r7, #23]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d143      	bne.n	8012b5e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	7b1b      	ldrb	r3, [r3, #12]
 8012ae0:	f003 030f 	and.w	r3, r3, #15
 8012ae4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	7b5b      	ldrb	r3, [r3, #13]
 8012aea:	f003 0302 	and.w	r3, r3, #2
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d011      	beq.n	8012b16 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	691b      	ldr	r3, [r3, #16]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d106      	bne.n	8012b0c <pbuf_free+0x9c>
 8012afe:	4b1d      	ldr	r3, [pc, #116]	; (8012b74 <pbuf_free+0x104>)
 8012b00:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012b04:	491f      	ldr	r1, [pc, #124]	; (8012b84 <pbuf_free+0x114>)
 8012b06:	481d      	ldr	r0, [pc, #116]	; (8012b7c <pbuf_free+0x10c>)
 8012b08:	f00a fae0 	bl	801d0cc <iprintf>
        pc->custom_free_function(p);
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	691b      	ldr	r3, [r3, #16]
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	4798      	blx	r3
 8012b14:	e01d      	b.n	8012b52 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012b16:	7bfb      	ldrb	r3, [r7, #15]
 8012b18:	2b02      	cmp	r3, #2
 8012b1a:	d104      	bne.n	8012b26 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	200c      	movs	r0, #12
 8012b20:	f7ff f902 	bl	8011d28 <memp_free>
 8012b24:	e015      	b.n	8012b52 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d104      	bne.n	8012b36 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012b2c:	6879      	ldr	r1, [r7, #4]
 8012b2e:	200b      	movs	r0, #11
 8012b30:	f7ff f8fa 	bl	8011d28 <memp_free>
 8012b34:	e00d      	b.n	8012b52 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012b36:	7bfb      	ldrb	r3, [r7, #15]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d103      	bne.n	8012b44 <pbuf_free+0xd4>
          mem_free(p);
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7fe fd3f 	bl	80115c0 <mem_free>
 8012b42:	e006      	b.n	8012b52 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012b44:	4b0b      	ldr	r3, [pc, #44]	; (8012b74 <pbuf_free+0x104>)
 8012b46:	f240 320f 	movw	r2, #783	; 0x30f
 8012b4a:	490f      	ldr	r1, [pc, #60]	; (8012b88 <pbuf_free+0x118>)
 8012b4c:	480b      	ldr	r0, [pc, #44]	; (8012b7c <pbuf_free+0x10c>)
 8012b4e:	f00a fabd 	bl	801d0cc <iprintf>
        }
      }
      count++;
 8012b52:	7ffb      	ldrb	r3, [r7, #31]
 8012b54:	3301      	adds	r3, #1
 8012b56:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	607b      	str	r3, [r7, #4]
 8012b5c:	e001      	b.n	8012b62 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d199      	bne.n	8012a9c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3720      	adds	r7, #32
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	08020738 	.word	0x08020738
 8012b78:	0802089c 	.word	0x0802089c
 8012b7c:	08020798 	.word	0x08020798
 8012b80:	080208c8 	.word	0x080208c8
 8012b84:	080208e0 	.word	0x080208e0
 8012b88:	08020904 	.word	0x08020904

08012b8c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012b98:	e005      	b.n	8012ba6 <pbuf_clen+0x1a>
    ++len;
 8012b9a:	89fb      	ldrh	r3, [r7, #14]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d1f6      	bne.n	8012b9a <pbuf_clen+0xe>
  }
  return len;
 8012bac:	89fb      	ldrh	r3, [r7, #14]
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3714      	adds	r7, #20
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr
	...

08012bbc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d016      	beq.n	8012bf8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012bca:	f009 fb75 	bl	801c2b8 <sys_arch_protect>
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	7b9b      	ldrb	r3, [r3, #14]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	b2da      	uxtb	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	739a      	strb	r2, [r3, #14]
 8012bdc:	68f8      	ldr	r0, [r7, #12]
 8012bde:	f009 fb79 	bl	801c2d4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	7b9b      	ldrb	r3, [r3, #14]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d106      	bne.n	8012bf8 <pbuf_ref+0x3c>
 8012bea:	4b05      	ldr	r3, [pc, #20]	; (8012c00 <pbuf_ref+0x44>)
 8012bec:	f240 3242 	movw	r2, #834	; 0x342
 8012bf0:	4904      	ldr	r1, [pc, #16]	; (8012c04 <pbuf_ref+0x48>)
 8012bf2:	4805      	ldr	r0, [pc, #20]	; (8012c08 <pbuf_ref+0x4c>)
 8012bf4:	f00a fa6a 	bl	801d0cc <iprintf>
  }
}
 8012bf8:	bf00      	nop
 8012bfa:	3710      	adds	r7, #16
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	08020738 	.word	0x08020738
 8012c04:	08020918 	.word	0x08020918
 8012c08:	08020798 	.word	0x08020798

08012c0c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <pbuf_cat+0x16>
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d107      	bne.n	8012c32 <pbuf_cat+0x26>
 8012c22:	4b20      	ldr	r3, [pc, #128]	; (8012ca4 <pbuf_cat+0x98>)
 8012c24:	f240 3259 	movw	r2, #857	; 0x359
 8012c28:	491f      	ldr	r1, [pc, #124]	; (8012ca8 <pbuf_cat+0x9c>)
 8012c2a:	4820      	ldr	r0, [pc, #128]	; (8012cac <pbuf_cat+0xa0>)
 8012c2c:	f00a fa4e 	bl	801d0cc <iprintf>
 8012c30:	e034      	b.n	8012c9c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	60fb      	str	r3, [r7, #12]
 8012c36:	e00a      	b.n	8012c4e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	891a      	ldrh	r2, [r3, #8]
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	891b      	ldrh	r3, [r3, #8]
 8012c40:	4413      	add	r3, r2
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	60fb      	str	r3, [r7, #12]
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d1f0      	bne.n	8012c38 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	891a      	ldrh	r2, [r3, #8]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	895b      	ldrh	r3, [r3, #10]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d006      	beq.n	8012c70 <pbuf_cat+0x64>
 8012c62:	4b10      	ldr	r3, [pc, #64]	; (8012ca4 <pbuf_cat+0x98>)
 8012c64:	f240 3262 	movw	r2, #866	; 0x362
 8012c68:	4911      	ldr	r1, [pc, #68]	; (8012cb0 <pbuf_cat+0xa4>)
 8012c6a:	4810      	ldr	r0, [pc, #64]	; (8012cac <pbuf_cat+0xa0>)
 8012c6c:	f00a fa2e 	bl	801d0cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d006      	beq.n	8012c86 <pbuf_cat+0x7a>
 8012c78:	4b0a      	ldr	r3, [pc, #40]	; (8012ca4 <pbuf_cat+0x98>)
 8012c7a:	f240 3263 	movw	r2, #867	; 0x363
 8012c7e:	490d      	ldr	r1, [pc, #52]	; (8012cb4 <pbuf_cat+0xa8>)
 8012c80:	480a      	ldr	r0, [pc, #40]	; (8012cac <pbuf_cat+0xa0>)
 8012c82:	f00a fa23 	bl	801d0cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	891a      	ldrh	r2, [r3, #8]
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	891b      	ldrh	r3, [r3, #8]
 8012c8e:	4413      	add	r3, r2
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	08020738 	.word	0x08020738
 8012ca8:	0802092c 	.word	0x0802092c
 8012cac:	08020798 	.word	0x08020798
 8012cb0:	08020964 	.word	0x08020964
 8012cb4:	08020994 	.word	0x08020994

08012cb8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	617b      	str	r3, [r7, #20]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d008      	beq.n	8012ce2 <pbuf_copy+0x2a>
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d005      	beq.n	8012ce2 <pbuf_copy+0x2a>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	891a      	ldrh	r2, [r3, #8]
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	891b      	ldrh	r3, [r3, #8]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d209      	bcs.n	8012cf6 <pbuf_copy+0x3e>
 8012ce2:	4b57      	ldr	r3, [pc, #348]	; (8012e40 <pbuf_copy+0x188>)
 8012ce4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012ce8:	4956      	ldr	r1, [pc, #344]	; (8012e44 <pbuf_copy+0x18c>)
 8012cea:	4857      	ldr	r0, [pc, #348]	; (8012e48 <pbuf_copy+0x190>)
 8012cec:	f00a f9ee 	bl	801d0cc <iprintf>
 8012cf0:	f06f 030f 	mvn.w	r3, #15
 8012cf4:	e09f      	b.n	8012e36 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	895b      	ldrh	r3, [r3, #10]
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	1ad2      	subs	r2, r2, r3
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	895b      	ldrh	r3, [r3, #10]
 8012d04:	4619      	mov	r1, r3
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	1acb      	subs	r3, r1, r3
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d306      	bcc.n	8012d1c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	895b      	ldrh	r3, [r3, #10]
 8012d12:	461a      	mov	r2, r3
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	60fb      	str	r3, [r7, #12]
 8012d1a:	e005      	b.n	8012d28 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	895b      	ldrh	r3, [r3, #10]
 8012d20:	461a      	mov	r2, r3
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	1ad3      	subs	r3, r2, r3
 8012d26:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	685a      	ldr	r2, [r3, #4]
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	18d0      	adds	r0, r2, r3
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	4413      	add	r3, r2
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	f00a fc47 	bl	801d5ce <memcpy>
    offset_to += len;
 8012d40:	697a      	ldr	r2, [r7, #20]
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	4413      	add	r3, r2
 8012d46:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012d48:	693a      	ldr	r2, [r7, #16]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	895b      	ldrh	r3, [r3, #10]
 8012d54:	461a      	mov	r2, r3
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	4293      	cmp	r3, r2
 8012d5a:	d906      	bls.n	8012d6a <pbuf_copy+0xb2>
 8012d5c:	4b38      	ldr	r3, [pc, #224]	; (8012e40 <pbuf_copy+0x188>)
 8012d5e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012d62:	493a      	ldr	r1, [pc, #232]	; (8012e4c <pbuf_copy+0x194>)
 8012d64:	4838      	ldr	r0, [pc, #224]	; (8012e48 <pbuf_copy+0x190>)
 8012d66:	f00a f9b1 	bl	801d0cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	895b      	ldrh	r3, [r3, #10]
 8012d6e:	461a      	mov	r2, r3
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d906      	bls.n	8012d84 <pbuf_copy+0xcc>
 8012d76:	4b32      	ldr	r3, [pc, #200]	; (8012e40 <pbuf_copy+0x188>)
 8012d78:	f240 32da 	movw	r2, #986	; 0x3da
 8012d7c:	4934      	ldr	r1, [pc, #208]	; (8012e50 <pbuf_copy+0x198>)
 8012d7e:	4832      	ldr	r0, [pc, #200]	; (8012e48 <pbuf_copy+0x190>)
 8012d80:	f00a f9a4 	bl	801d0cc <iprintf>
    if (offset_from >= p_from->len) {
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	895b      	ldrh	r3, [r3, #10]
 8012d88:	461a      	mov	r2, r3
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d304      	bcc.n	8012d9a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	895b      	ldrh	r3, [r3, #10]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	4293      	cmp	r3, r2
 8012da4:	d114      	bne.n	8012dd0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d10c      	bne.n	8012dd0 <pbuf_copy+0x118>
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d009      	beq.n	8012dd0 <pbuf_copy+0x118>
 8012dbc:	4b20      	ldr	r3, [pc, #128]	; (8012e40 <pbuf_copy+0x188>)
 8012dbe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012dc2:	4924      	ldr	r1, [pc, #144]	; (8012e54 <pbuf_copy+0x19c>)
 8012dc4:	4820      	ldr	r0, [pc, #128]	; (8012e48 <pbuf_copy+0x190>)
 8012dc6:	f00a f981 	bl	801d0cc <iprintf>
 8012dca:	f06f 030f 	mvn.w	r3, #15
 8012dce:	e032      	b.n	8012e36 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d013      	beq.n	8012dfe <pbuf_copy+0x146>
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	895a      	ldrh	r2, [r3, #10]
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	891b      	ldrh	r3, [r3, #8]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d10d      	bne.n	8012dfe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d009      	beq.n	8012dfe <pbuf_copy+0x146>
 8012dea:	4b15      	ldr	r3, [pc, #84]	; (8012e40 <pbuf_copy+0x188>)
 8012dec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012df0:	4919      	ldr	r1, [pc, #100]	; (8012e58 <pbuf_copy+0x1a0>)
 8012df2:	4815      	ldr	r0, [pc, #84]	; (8012e48 <pbuf_copy+0x190>)
 8012df4:	f00a f96a 	bl	801d0cc <iprintf>
 8012df8:	f06f 0305 	mvn.w	r3, #5
 8012dfc:	e01b      	b.n	8012e36 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d013      	beq.n	8012e2c <pbuf_copy+0x174>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	895a      	ldrh	r2, [r3, #10]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	891b      	ldrh	r3, [r3, #8]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d10d      	bne.n	8012e2c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d009      	beq.n	8012e2c <pbuf_copy+0x174>
 8012e18:	4b09      	ldr	r3, [pc, #36]	; (8012e40 <pbuf_copy+0x188>)
 8012e1a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012e1e:	490e      	ldr	r1, [pc, #56]	; (8012e58 <pbuf_copy+0x1a0>)
 8012e20:	4809      	ldr	r0, [pc, #36]	; (8012e48 <pbuf_copy+0x190>)
 8012e22:	f00a f953 	bl	801d0cc <iprintf>
 8012e26:	f06f 0305 	mvn.w	r3, #5
 8012e2a:	e004      	b.n	8012e36 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	f47f af61 	bne.w	8012cf6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012e34:	2300      	movs	r3, #0
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	3718      	adds	r7, #24
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
 8012e3e:	bf00      	nop
 8012e40:	08020738 	.word	0x08020738
 8012e44:	080209e0 	.word	0x080209e0
 8012e48:	08020798 	.word	0x08020798
 8012e4c:	08020a10 	.word	0x08020a10
 8012e50:	08020a28 	.word	0x08020a28
 8012e54:	08020a44 	.word	0x08020a44
 8012e58:	08020a54 	.word	0x08020a54

08012e5c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b088      	sub	sp, #32
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	4611      	mov	r1, r2
 8012e68:	461a      	mov	r2, r3
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	80fb      	strh	r3, [r7, #6]
 8012e6e:	4613      	mov	r3, r2
 8012e70:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012e76:	2300      	movs	r3, #0
 8012e78:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d108      	bne.n	8012e92 <pbuf_copy_partial+0x36>
 8012e80:	4b2b      	ldr	r3, [pc, #172]	; (8012f30 <pbuf_copy_partial+0xd4>)
 8012e82:	f240 420a 	movw	r2, #1034	; 0x40a
 8012e86:	492b      	ldr	r1, [pc, #172]	; (8012f34 <pbuf_copy_partial+0xd8>)
 8012e88:	482b      	ldr	r0, [pc, #172]	; (8012f38 <pbuf_copy_partial+0xdc>)
 8012e8a:	f00a f91f 	bl	801d0cc <iprintf>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e04a      	b.n	8012f28 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d108      	bne.n	8012eaa <pbuf_copy_partial+0x4e>
 8012e98:	4b25      	ldr	r3, [pc, #148]	; (8012f30 <pbuf_copy_partial+0xd4>)
 8012e9a:	f240 420b 	movw	r2, #1035	; 0x40b
 8012e9e:	4927      	ldr	r1, [pc, #156]	; (8012f3c <pbuf_copy_partial+0xe0>)
 8012ea0:	4825      	ldr	r0, [pc, #148]	; (8012f38 <pbuf_copy_partial+0xdc>)
 8012ea2:	f00a f913 	bl	801d0cc <iprintf>
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	e03e      	b.n	8012f28 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	61fb      	str	r3, [r7, #28]
 8012eae:	e034      	b.n	8012f1a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012eb0:	88bb      	ldrh	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d00a      	beq.n	8012ecc <pbuf_copy_partial+0x70>
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	895b      	ldrh	r3, [r3, #10]
 8012eba:	88ba      	ldrh	r2, [r7, #4]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d305      	bcc.n	8012ecc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	895b      	ldrh	r3, [r3, #10]
 8012ec4:	88ba      	ldrh	r2, [r7, #4]
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	80bb      	strh	r3, [r7, #4]
 8012eca:	e023      	b.n	8012f14 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	895a      	ldrh	r2, [r3, #10]
 8012ed0:	88bb      	ldrh	r3, [r7, #4]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012ed6:	8b3a      	ldrh	r2, [r7, #24]
 8012ed8:	88fb      	ldrh	r3, [r7, #6]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d901      	bls.n	8012ee2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012ede:	88fb      	ldrh	r3, [r7, #6]
 8012ee0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012ee2:	8b7b      	ldrh	r3, [r7, #26]
 8012ee4:	68ba      	ldr	r2, [r7, #8]
 8012ee6:	18d0      	adds	r0, r2, r3
 8012ee8:	69fb      	ldr	r3, [r7, #28]
 8012eea:	685a      	ldr	r2, [r3, #4]
 8012eec:	88bb      	ldrh	r3, [r7, #4]
 8012eee:	4413      	add	r3, r2
 8012ef0:	8b3a      	ldrh	r2, [r7, #24]
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	f00a fb6b 	bl	801d5ce <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012ef8:	8afa      	ldrh	r2, [r7, #22]
 8012efa:	8b3b      	ldrh	r3, [r7, #24]
 8012efc:	4413      	add	r3, r2
 8012efe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012f00:	8b7a      	ldrh	r2, [r7, #26]
 8012f02:	8b3b      	ldrh	r3, [r7, #24]
 8012f04:	4413      	add	r3, r2
 8012f06:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012f08:	88fa      	ldrh	r2, [r7, #6]
 8012f0a:	8b3b      	ldrh	r3, [r7, #24]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012f10:	2300      	movs	r3, #0
 8012f12:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	61fb      	str	r3, [r7, #28]
 8012f1a:	88fb      	ldrh	r3, [r7, #6]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d002      	beq.n	8012f26 <pbuf_copy_partial+0xca>
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1c4      	bne.n	8012eb0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012f26:	8afb      	ldrh	r3, [r7, #22]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3720      	adds	r7, #32
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	08020738 	.word	0x08020738
 8012f34:	08020a80 	.word	0x08020a80
 8012f38:	08020798 	.word	0x08020798
 8012f3c:	08020aa0 	.word	0x08020aa0

08012f40 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	4603      	mov	r3, r0
 8012f48:	603a      	str	r2, [r7, #0]
 8012f4a:	71fb      	strb	r3, [r7, #7]
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	8919      	ldrh	r1, [r3, #8]
 8012f54:	88ba      	ldrh	r2, [r7, #4]
 8012f56:	79fb      	ldrb	r3, [r7, #7]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7ff faa5 	bl	80124a8 <pbuf_alloc>
 8012f5e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <pbuf_clone+0x2a>
    return NULL;
 8012f66:	2300      	movs	r3, #0
 8012f68:	e011      	b.n	8012f8e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012f6a:	6839      	ldr	r1, [r7, #0]
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f7ff fea3 	bl	8012cb8 <pbuf_copy>
 8012f72:	4603      	mov	r3, r0
 8012f74:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012f76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d006      	beq.n	8012f8c <pbuf_clone+0x4c>
 8012f7e:	4b06      	ldr	r3, [pc, #24]	; (8012f98 <pbuf_clone+0x58>)
 8012f80:	f240 5224 	movw	r2, #1316	; 0x524
 8012f84:	4905      	ldr	r1, [pc, #20]	; (8012f9c <pbuf_clone+0x5c>)
 8012f86:	4806      	ldr	r0, [pc, #24]	; (8012fa0 <pbuf_clone+0x60>)
 8012f88:	f00a f8a0 	bl	801d0cc <iprintf>
  return q;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	08020738 	.word	0x08020738
 8012f9c:	08020bac 	.word	0x08020bac
 8012fa0:	08020798 	.word	0x08020798

08012fa4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012fa8:	f009 fa9c 	bl	801c4e4 <rand>
 8012fac:	4603      	mov	r3, r0
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012fba:	b29a      	uxth	r2, r3
 8012fbc:	4b01      	ldr	r3, [pc, #4]	; (8012fc4 <tcp_init+0x20>)
 8012fbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012fc0:	bf00      	nop
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	20000024 	.word	0x20000024

08012fc8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	7d1b      	ldrb	r3, [r3, #20]
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d105      	bne.n	8012fe4 <tcp_free+0x1c>
 8012fd8:	4b06      	ldr	r3, [pc, #24]	; (8012ff4 <tcp_free+0x2c>)
 8012fda:	22d4      	movs	r2, #212	; 0xd4
 8012fdc:	4906      	ldr	r1, [pc, #24]	; (8012ff8 <tcp_free+0x30>)
 8012fde:	4807      	ldr	r0, [pc, #28]	; (8012ffc <tcp_free+0x34>)
 8012fe0:	f00a f874 	bl	801d0cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012fe4:	6879      	ldr	r1, [r7, #4]
 8012fe6:	2001      	movs	r0, #1
 8012fe8:	f7fe fe9e 	bl	8011d28 <memp_free>
}
 8012fec:	bf00      	nop
 8012fee:	3708      	adds	r7, #8
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	08020c38 	.word	0x08020c38
 8012ff8:	08020c68 	.word	0x08020c68
 8012ffc:	08020c7c 	.word	0x08020c7c

08013000 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	7d1b      	ldrb	r3, [r3, #20]
 801300c:	2b01      	cmp	r3, #1
 801300e:	d105      	bne.n	801301c <tcp_free_listen+0x1c>
 8013010:	4b06      	ldr	r3, [pc, #24]	; (801302c <tcp_free_listen+0x2c>)
 8013012:	22df      	movs	r2, #223	; 0xdf
 8013014:	4906      	ldr	r1, [pc, #24]	; (8013030 <tcp_free_listen+0x30>)
 8013016:	4807      	ldr	r0, [pc, #28]	; (8013034 <tcp_free_listen+0x34>)
 8013018:	f00a f858 	bl	801d0cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801301c:	6879      	ldr	r1, [r7, #4]
 801301e:	2002      	movs	r0, #2
 8013020:	f7fe fe82 	bl	8011d28 <memp_free>
}
 8013024:	bf00      	nop
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	08020c38 	.word	0x08020c38
 8013030:	08020ca4 	.word	0x08020ca4
 8013034:	08020c7c 	.word	0x08020c7c

08013038 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801303c:	f001 f8a6 	bl	801418c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013040:	4b07      	ldr	r3, [pc, #28]	; (8013060 <tcp_tmr+0x28>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	3301      	adds	r3, #1
 8013046:	b2da      	uxtb	r2, r3
 8013048:	4b05      	ldr	r3, [pc, #20]	; (8013060 <tcp_tmr+0x28>)
 801304a:	701a      	strb	r2, [r3, #0]
 801304c:	4b04      	ldr	r3, [pc, #16]	; (8013060 <tcp_tmr+0x28>)
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	2b00      	cmp	r3, #0
 8013056:	d001      	beq.n	801305c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013058:	f000 fd58 	bl	8013b0c <tcp_slowtmr>
  }
}
 801305c:	bf00      	nop
 801305e:	bd80      	pop	{r7, pc}
 8013060:	200133f9 	.word	0x200133f9

08013064 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d105      	bne.n	8013080 <tcp_remove_listener+0x1c>
 8013074:	4b0d      	ldr	r3, [pc, #52]	; (80130ac <tcp_remove_listener+0x48>)
 8013076:	22ff      	movs	r2, #255	; 0xff
 8013078:	490d      	ldr	r1, [pc, #52]	; (80130b0 <tcp_remove_listener+0x4c>)
 801307a:	480e      	ldr	r0, [pc, #56]	; (80130b4 <tcp_remove_listener+0x50>)
 801307c:	f00a f826 	bl	801d0cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	60fb      	str	r3, [r7, #12]
 8013084:	e00a      	b.n	801309c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801308a:	683a      	ldr	r2, [r7, #0]
 801308c:	429a      	cmp	r2, r3
 801308e:	d102      	bne.n	8013096 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2200      	movs	r2, #0
 8013094:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	60fb      	str	r3, [r7, #12]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1f1      	bne.n	8013086 <tcp_remove_listener+0x22>
    }
  }
}
 80130a2:	bf00      	nop
 80130a4:	bf00      	nop
 80130a6:	3710      	adds	r7, #16
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	08020c38 	.word	0x08020c38
 80130b0:	08020cc0 	.word	0x08020cc0
 80130b4:	08020c7c 	.word	0x08020c7c

080130b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d106      	bne.n	80130d4 <tcp_listen_closed+0x1c>
 80130c6:	4b14      	ldr	r3, [pc, #80]	; (8013118 <tcp_listen_closed+0x60>)
 80130c8:	f240 1211 	movw	r2, #273	; 0x111
 80130cc:	4913      	ldr	r1, [pc, #76]	; (801311c <tcp_listen_closed+0x64>)
 80130ce:	4814      	ldr	r0, [pc, #80]	; (8013120 <tcp_listen_closed+0x68>)
 80130d0:	f009 fffc 	bl	801d0cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7d1b      	ldrb	r3, [r3, #20]
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d006      	beq.n	80130ea <tcp_listen_closed+0x32>
 80130dc:	4b0e      	ldr	r3, [pc, #56]	; (8013118 <tcp_listen_closed+0x60>)
 80130de:	f44f 7289 	mov.w	r2, #274	; 0x112
 80130e2:	4910      	ldr	r1, [pc, #64]	; (8013124 <tcp_listen_closed+0x6c>)
 80130e4:	480e      	ldr	r0, [pc, #56]	; (8013120 <tcp_listen_closed+0x68>)
 80130e6:	f009 fff1 	bl	801d0cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80130ea:	2301      	movs	r3, #1
 80130ec:	60fb      	str	r3, [r7, #12]
 80130ee:	e00b      	b.n	8013108 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80130f0:	4a0d      	ldr	r2, [pc, #52]	; (8013128 <tcp_listen_closed+0x70>)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	6879      	ldr	r1, [r7, #4]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff ffb1 	bl	8013064 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	3301      	adds	r3, #1
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2b03      	cmp	r3, #3
 801310c:	d9f0      	bls.n	80130f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801310e:	bf00      	nop
 8013110:	bf00      	nop
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	08020c38 	.word	0x08020c38
 801311c:	08020ce8 	.word	0x08020ce8
 8013120:	08020c7c 	.word	0x08020c7c
 8013124:	08020cf4 	.word	0x08020cf4
 8013128:	08024598 	.word	0x08024598

0801312c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801312c:	b5b0      	push	{r4, r5, r7, lr}
 801312e:	b088      	sub	sp, #32
 8013130:	af04      	add	r7, sp, #16
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d106      	bne.n	801314c <tcp_close_shutdown+0x20>
 801313e:	4b63      	ldr	r3, [pc, #396]	; (80132cc <tcp_close_shutdown+0x1a0>)
 8013140:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013144:	4962      	ldr	r1, [pc, #392]	; (80132d0 <tcp_close_shutdown+0x1a4>)
 8013146:	4863      	ldr	r0, [pc, #396]	; (80132d4 <tcp_close_shutdown+0x1a8>)
 8013148:	f009 ffc0 	bl	801d0cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801314c:	78fb      	ldrb	r3, [r7, #3]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d066      	beq.n	8013220 <tcp_close_shutdown+0xf4>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	7d1b      	ldrb	r3, [r3, #20]
 8013156:	2b04      	cmp	r3, #4
 8013158:	d003      	beq.n	8013162 <tcp_close_shutdown+0x36>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	7d1b      	ldrb	r3, [r3, #20]
 801315e:	2b07      	cmp	r3, #7
 8013160:	d15e      	bne.n	8013220 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013166:	2b00      	cmp	r3, #0
 8013168:	d104      	bne.n	8013174 <tcp_close_shutdown+0x48>
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801316e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013172:	d055      	beq.n	8013220 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	8b5b      	ldrh	r3, [r3, #26]
 8013178:	f003 0310 	and.w	r3, r3, #16
 801317c:	2b00      	cmp	r3, #0
 801317e:	d106      	bne.n	801318e <tcp_close_shutdown+0x62>
 8013180:	4b52      	ldr	r3, [pc, #328]	; (80132cc <tcp_close_shutdown+0x1a0>)
 8013182:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013186:	4954      	ldr	r1, [pc, #336]	; (80132d8 <tcp_close_shutdown+0x1ac>)
 8013188:	4852      	ldr	r0, [pc, #328]	; (80132d4 <tcp_close_shutdown+0x1a8>)
 801318a:	f009 ff9f 	bl	801d0cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013196:	687d      	ldr	r5, [r7, #4]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	3304      	adds	r3, #4
 801319c:	687a      	ldr	r2, [r7, #4]
 801319e:	8ad2      	ldrh	r2, [r2, #22]
 80131a0:	6879      	ldr	r1, [r7, #4]
 80131a2:	8b09      	ldrh	r1, [r1, #24]
 80131a4:	9102      	str	r1, [sp, #8]
 80131a6:	9201      	str	r2, [sp, #4]
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	462b      	mov	r3, r5
 80131ac:	4622      	mov	r2, r4
 80131ae:	4601      	mov	r1, r0
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f005 fdbb 	bl	8018d2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f001 fb98 	bl	80148ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80131bc:	4b47      	ldr	r3, [pc, #284]	; (80132dc <tcp_close_shutdown+0x1b0>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d105      	bne.n	80131d2 <tcp_close_shutdown+0xa6>
 80131c6:	4b45      	ldr	r3, [pc, #276]	; (80132dc <tcp_close_shutdown+0x1b0>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	68db      	ldr	r3, [r3, #12]
 80131cc:	4a43      	ldr	r2, [pc, #268]	; (80132dc <tcp_close_shutdown+0x1b0>)
 80131ce:	6013      	str	r3, [r2, #0]
 80131d0:	e013      	b.n	80131fa <tcp_close_shutdown+0xce>
 80131d2:	4b42      	ldr	r3, [pc, #264]	; (80132dc <tcp_close_shutdown+0x1b0>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	60fb      	str	r3, [r7, #12]
 80131d8:	e00c      	b.n	80131f4 <tcp_close_shutdown+0xc8>
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d104      	bne.n	80131ee <tcp_close_shutdown+0xc2>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	68da      	ldr	r2, [r3, #12]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	60da      	str	r2, [r3, #12]
 80131ec:	e005      	b.n	80131fa <tcp_close_shutdown+0xce>
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	60fb      	str	r3, [r7, #12]
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d1ef      	bne.n	80131da <tcp_close_shutdown+0xae>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2200      	movs	r2, #0
 80131fe:	60da      	str	r2, [r3, #12]
 8013200:	4b37      	ldr	r3, [pc, #220]	; (80132e0 <tcp_close_shutdown+0x1b4>)
 8013202:	2201      	movs	r2, #1
 8013204:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013206:	4b37      	ldr	r3, [pc, #220]	; (80132e4 <tcp_close_shutdown+0x1b8>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	687a      	ldr	r2, [r7, #4]
 801320c:	429a      	cmp	r2, r3
 801320e:	d102      	bne.n	8013216 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013210:	f004 f830 	bl	8017274 <tcp_trigger_input_pcb_close>
 8013214:	e002      	b.n	801321c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7ff fed6 	bl	8012fc8 <tcp_free>
      }
      return ERR_OK;
 801321c:	2300      	movs	r3, #0
 801321e:	e050      	b.n	80132c2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	7d1b      	ldrb	r3, [r3, #20]
 8013224:	2b02      	cmp	r3, #2
 8013226:	d03b      	beq.n	80132a0 <tcp_close_shutdown+0x174>
 8013228:	2b02      	cmp	r3, #2
 801322a:	dc44      	bgt.n	80132b6 <tcp_close_shutdown+0x18a>
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <tcp_close_shutdown+0x10a>
 8013230:	2b01      	cmp	r3, #1
 8013232:	d02a      	beq.n	801328a <tcp_close_shutdown+0x15e>
 8013234:	e03f      	b.n	80132b6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	8adb      	ldrh	r3, [r3, #22]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d021      	beq.n	8013282 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801323e:	4b2a      	ldr	r3, [pc, #168]	; (80132e8 <tcp_close_shutdown+0x1bc>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	429a      	cmp	r2, r3
 8013246:	d105      	bne.n	8013254 <tcp_close_shutdown+0x128>
 8013248:	4b27      	ldr	r3, [pc, #156]	; (80132e8 <tcp_close_shutdown+0x1bc>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	68db      	ldr	r3, [r3, #12]
 801324e:	4a26      	ldr	r2, [pc, #152]	; (80132e8 <tcp_close_shutdown+0x1bc>)
 8013250:	6013      	str	r3, [r2, #0]
 8013252:	e013      	b.n	801327c <tcp_close_shutdown+0x150>
 8013254:	4b24      	ldr	r3, [pc, #144]	; (80132e8 <tcp_close_shutdown+0x1bc>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	60bb      	str	r3, [r7, #8]
 801325a:	e00c      	b.n	8013276 <tcp_close_shutdown+0x14a>
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	429a      	cmp	r2, r3
 8013264:	d104      	bne.n	8013270 <tcp_close_shutdown+0x144>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	68da      	ldr	r2, [r3, #12]
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	60da      	str	r2, [r3, #12]
 801326e:	e005      	b.n	801327c <tcp_close_shutdown+0x150>
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	60bb      	str	r3, [r7, #8]
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d1ef      	bne.n	801325c <tcp_close_shutdown+0x130>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff fea0 	bl	8012fc8 <tcp_free>
      break;
 8013288:	e01a      	b.n	80132c0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f7ff ff14 	bl	80130b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013290:	6879      	ldr	r1, [r7, #4]
 8013292:	4816      	ldr	r0, [pc, #88]	; (80132ec <tcp_close_shutdown+0x1c0>)
 8013294:	f001 fb7a 	bl	801498c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff feb1 	bl	8013000 <tcp_free_listen>
      break;
 801329e:	e00f      	b.n	80132c0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80132a0:	6879      	ldr	r1, [r7, #4]
 80132a2:	480e      	ldr	r0, [pc, #56]	; (80132dc <tcp_close_shutdown+0x1b0>)
 80132a4:	f001 fb72 	bl	801498c <tcp_pcb_remove>
 80132a8:	4b0d      	ldr	r3, [pc, #52]	; (80132e0 <tcp_close_shutdown+0x1b4>)
 80132aa:	2201      	movs	r2, #1
 80132ac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff fe8a 	bl	8012fc8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80132b4:	e004      	b.n	80132c0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 f81a 	bl	80132f0 <tcp_close_shutdown_fin>
 80132bc:	4603      	mov	r3, r0
 80132be:	e000      	b.n	80132c2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80132c0:	2300      	movs	r3, #0
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bdb0      	pop	{r4, r5, r7, pc}
 80132ca:	bf00      	nop
 80132cc:	08020c38 	.word	0x08020c38
 80132d0:	08020d0c 	.word	0x08020d0c
 80132d4:	08020c7c 	.word	0x08020c7c
 80132d8:	08020d2c 	.word	0x08020d2c
 80132dc:	200133f0 	.word	0x200133f0
 80132e0:	200133f8 	.word	0x200133f8
 80132e4:	20013430 	.word	0x20013430
 80132e8:	200133e8 	.word	0x200133e8
 80132ec:	200133ec 	.word	0x200133ec

080132f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d106      	bne.n	801330c <tcp_close_shutdown_fin+0x1c>
 80132fe:	4b2e      	ldr	r3, [pc, #184]	; (80133b8 <tcp_close_shutdown_fin+0xc8>)
 8013300:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013304:	492d      	ldr	r1, [pc, #180]	; (80133bc <tcp_close_shutdown_fin+0xcc>)
 8013306:	482e      	ldr	r0, [pc, #184]	; (80133c0 <tcp_close_shutdown_fin+0xd0>)
 8013308:	f009 fee0 	bl	801d0cc <iprintf>

  switch (pcb->state) {
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	7d1b      	ldrb	r3, [r3, #20]
 8013310:	2b07      	cmp	r3, #7
 8013312:	d020      	beq.n	8013356 <tcp_close_shutdown_fin+0x66>
 8013314:	2b07      	cmp	r3, #7
 8013316:	dc2b      	bgt.n	8013370 <tcp_close_shutdown_fin+0x80>
 8013318:	2b03      	cmp	r3, #3
 801331a:	d002      	beq.n	8013322 <tcp_close_shutdown_fin+0x32>
 801331c:	2b04      	cmp	r3, #4
 801331e:	d00d      	beq.n	801333c <tcp_close_shutdown_fin+0x4c>
 8013320:	e026      	b.n	8013370 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f004 fe10 	bl	8017f48 <tcp_send_fin>
 8013328:	4603      	mov	r3, r0
 801332a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d11f      	bne.n	8013374 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2205      	movs	r2, #5
 8013338:	751a      	strb	r2, [r3, #20]
      }
      break;
 801333a:	e01b      	b.n	8013374 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f004 fe03 	bl	8017f48 <tcp_send_fin>
 8013342:	4603      	mov	r3, r0
 8013344:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d114      	bne.n	8013378 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2205      	movs	r2, #5
 8013352:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013354:	e010      	b.n	8013378 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f004 fdf6 	bl	8017f48 <tcp_send_fin>
 801335c:	4603      	mov	r3, r0
 801335e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d109      	bne.n	801337c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2209      	movs	r2, #9
 801336c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801336e:	e005      	b.n	801337c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013370:	2300      	movs	r3, #0
 8013372:	e01c      	b.n	80133ae <tcp_close_shutdown_fin+0xbe>
      break;
 8013374:	bf00      	nop
 8013376:	e002      	b.n	801337e <tcp_close_shutdown_fin+0x8e>
      break;
 8013378:	bf00      	nop
 801337a:	e000      	b.n	801337e <tcp_close_shutdown_fin+0x8e>
      break;
 801337c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d103      	bne.n	801338e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f004 ff1c 	bl	80181c4 <tcp_output>
 801338c:	e00d      	b.n	80133aa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801338e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013396:	d108      	bne.n	80133aa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	8b5b      	ldrh	r3, [r3, #26]
 801339c:	f043 0308 	orr.w	r3, r3, #8
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80133a6:	2300      	movs	r3, #0
 80133a8:	e001      	b.n	80133ae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80133aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	08020c38 	.word	0x08020c38
 80133bc:	08020ce8 	.word	0x08020ce8
 80133c0:	08020c7c 	.word	0x08020c7c

080133c4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d109      	bne.n	80133e6 <tcp_close+0x22>
 80133d2:	4b0f      	ldr	r3, [pc, #60]	; (8013410 <tcp_close+0x4c>)
 80133d4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80133d8:	490e      	ldr	r1, [pc, #56]	; (8013414 <tcp_close+0x50>)
 80133da:	480f      	ldr	r0, [pc, #60]	; (8013418 <tcp_close+0x54>)
 80133dc:	f009 fe76 	bl	801d0cc <iprintf>
 80133e0:	f06f 030f 	mvn.w	r3, #15
 80133e4:	e00f      	b.n	8013406 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	7d1b      	ldrb	r3, [r3, #20]
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d006      	beq.n	80133fc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	8b5b      	ldrh	r3, [r3, #26]
 80133f2:	f043 0310 	orr.w	r3, r3, #16
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80133fc:	2101      	movs	r1, #1
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f7ff fe94 	bl	801312c <tcp_close_shutdown>
 8013404:	4603      	mov	r3, r0
}
 8013406:	4618      	mov	r0, r3
 8013408:	3708      	adds	r7, #8
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	08020c38 	.word	0x08020c38
 8013414:	08020d48 	.word	0x08020d48
 8013418:	08020c7c 	.word	0x08020c7c

0801341c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d109      	bne.n	8013442 <tcp_shutdown+0x26>
 801342e:	4b26      	ldr	r3, [pc, #152]	; (80134c8 <tcp_shutdown+0xac>)
 8013430:	f240 2207 	movw	r2, #519	; 0x207
 8013434:	4925      	ldr	r1, [pc, #148]	; (80134cc <tcp_shutdown+0xb0>)
 8013436:	4826      	ldr	r0, [pc, #152]	; (80134d0 <tcp_shutdown+0xb4>)
 8013438:	f009 fe48 	bl	801d0cc <iprintf>
 801343c:	f06f 030f 	mvn.w	r3, #15
 8013440:	e03d      	b.n	80134be <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	7d1b      	ldrb	r3, [r3, #20]
 8013446:	2b01      	cmp	r3, #1
 8013448:	d102      	bne.n	8013450 <tcp_shutdown+0x34>
    return ERR_CONN;
 801344a:	f06f 030a 	mvn.w	r3, #10
 801344e:	e036      	b.n	80134be <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d01b      	beq.n	801348e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	8b5b      	ldrh	r3, [r3, #26]
 801345a:	f043 0310 	orr.w	r3, r3, #16
 801345e:	b29a      	uxth	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d005      	beq.n	8013476 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801346a:	2101      	movs	r1, #1
 801346c:	68f8      	ldr	r0, [r7, #12]
 801346e:	f7ff fe5d 	bl	801312c <tcp_close_shutdown>
 8013472:	4603      	mov	r3, r0
 8013474:	e023      	b.n	80134be <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801347a:	2b00      	cmp	r3, #0
 801347c:	d007      	beq.n	801348e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff faf4 	bl	8012a70 <pbuf_free>
      pcb->refused_data = NULL;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2200      	movs	r2, #0
 801348c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d013      	beq.n	80134bc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	7d1b      	ldrb	r3, [r3, #20]
 8013498:	2b04      	cmp	r3, #4
 801349a:	dc02      	bgt.n	80134a2 <tcp_shutdown+0x86>
 801349c:	2b03      	cmp	r3, #3
 801349e:	da02      	bge.n	80134a6 <tcp_shutdown+0x8a>
 80134a0:	e009      	b.n	80134b6 <tcp_shutdown+0x9a>
 80134a2:	2b07      	cmp	r3, #7
 80134a4:	d107      	bne.n	80134b6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	b2db      	uxtb	r3, r3
 80134aa:	4619      	mov	r1, r3
 80134ac:	68f8      	ldr	r0, [r7, #12]
 80134ae:	f7ff fe3d 	bl	801312c <tcp_close_shutdown>
 80134b2:	4603      	mov	r3, r0
 80134b4:	e003      	b.n	80134be <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80134b6:	f06f 030a 	mvn.w	r3, #10
 80134ba:	e000      	b.n	80134be <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80134bc:	2300      	movs	r3, #0
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3710      	adds	r7, #16
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	08020c38 	.word	0x08020c38
 80134cc:	08020d60 	.word	0x08020d60
 80134d0:	08020c7c 	.word	0x08020c7c

080134d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b08e      	sub	sp, #56	; 0x38
 80134d8:	af04      	add	r7, sp, #16
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d107      	bne.n	80134f4 <tcp_abandon+0x20>
 80134e4:	4b52      	ldr	r3, [pc, #328]	; (8013630 <tcp_abandon+0x15c>)
 80134e6:	f240 223d 	movw	r2, #573	; 0x23d
 80134ea:	4952      	ldr	r1, [pc, #328]	; (8013634 <tcp_abandon+0x160>)
 80134ec:	4852      	ldr	r0, [pc, #328]	; (8013638 <tcp_abandon+0x164>)
 80134ee:	f009 fded 	bl	801d0cc <iprintf>
 80134f2:	e099      	b.n	8013628 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	7d1b      	ldrb	r3, [r3, #20]
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d106      	bne.n	801350a <tcp_abandon+0x36>
 80134fc:	4b4c      	ldr	r3, [pc, #304]	; (8013630 <tcp_abandon+0x15c>)
 80134fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013502:	494e      	ldr	r1, [pc, #312]	; (801363c <tcp_abandon+0x168>)
 8013504:	484c      	ldr	r0, [pc, #304]	; (8013638 <tcp_abandon+0x164>)
 8013506:	f009 fde1 	bl	801d0cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	7d1b      	ldrb	r3, [r3, #20]
 801350e:	2b0a      	cmp	r3, #10
 8013510:	d107      	bne.n	8013522 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013512:	6879      	ldr	r1, [r7, #4]
 8013514:	484a      	ldr	r0, [pc, #296]	; (8013640 <tcp_abandon+0x16c>)
 8013516:	f001 fa39 	bl	801498c <tcp_pcb_remove>
    tcp_free(pcb);
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f7ff fd54 	bl	8012fc8 <tcp_free>
 8013520:	e082      	b.n	8013628 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013522:	2300      	movs	r3, #0
 8013524:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013526:	2300      	movs	r3, #0
 8013528:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801352e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013534:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801353c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	691b      	ldr	r3, [r3, #16]
 8013542:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	7d1b      	ldrb	r3, [r3, #20]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d126      	bne.n	801359a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	8adb      	ldrh	r3, [r3, #22]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d02e      	beq.n	80135b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013554:	4b3b      	ldr	r3, [pc, #236]	; (8013644 <tcp_abandon+0x170>)
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	429a      	cmp	r2, r3
 801355c:	d105      	bne.n	801356a <tcp_abandon+0x96>
 801355e:	4b39      	ldr	r3, [pc, #228]	; (8013644 <tcp_abandon+0x170>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	4a37      	ldr	r2, [pc, #220]	; (8013644 <tcp_abandon+0x170>)
 8013566:	6013      	str	r3, [r2, #0]
 8013568:	e013      	b.n	8013592 <tcp_abandon+0xbe>
 801356a:	4b36      	ldr	r3, [pc, #216]	; (8013644 <tcp_abandon+0x170>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	61fb      	str	r3, [r7, #28]
 8013570:	e00c      	b.n	801358c <tcp_abandon+0xb8>
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	68db      	ldr	r3, [r3, #12]
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	429a      	cmp	r2, r3
 801357a:	d104      	bne.n	8013586 <tcp_abandon+0xb2>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	68da      	ldr	r2, [r3, #12]
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	60da      	str	r2, [r3, #12]
 8013584:	e005      	b.n	8013592 <tcp_abandon+0xbe>
 8013586:	69fb      	ldr	r3, [r7, #28]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	61fb      	str	r3, [r7, #28]
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d1ef      	bne.n	8013572 <tcp_abandon+0x9e>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2200      	movs	r2, #0
 8013596:	60da      	str	r2, [r3, #12]
 8013598:	e00b      	b.n	80135b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	8adb      	ldrh	r3, [r3, #22]
 80135a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80135a4:	6879      	ldr	r1, [r7, #4]
 80135a6:	4828      	ldr	r0, [pc, #160]	; (8013648 <tcp_abandon+0x174>)
 80135a8:	f001 f9f0 	bl	801498c <tcp_pcb_remove>
 80135ac:	4b27      	ldr	r3, [pc, #156]	; (801364c <tcp_abandon+0x178>)
 80135ae:	2201      	movs	r2, #1
 80135b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d004      	beq.n	80135c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135be:	4618      	mov	r0, r3
 80135c0:	f000 fec4 	bl	801434c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d004      	beq.n	80135d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135d0:	4618      	mov	r0, r3
 80135d2:	f000 febb 	bl	801434c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d004      	beq.n	80135e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80135e2:	4618      	mov	r0, r3
 80135e4:	f000 feb2 	bl	801434c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80135e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00e      	beq.n	801360c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80135ee:	6879      	ldr	r1, [r7, #4]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	3304      	adds	r3, #4
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	8b12      	ldrh	r2, [r2, #24]
 80135f8:	9202      	str	r2, [sp, #8]
 80135fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80135fc:	9201      	str	r2, [sp, #4]
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	460b      	mov	r3, r1
 8013602:	697a      	ldr	r2, [r7, #20]
 8013604:	69b9      	ldr	r1, [r7, #24]
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f005 fb90 	bl	8018d2c <tcp_rst>
    }
    last_state = pcb->state;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	7d1b      	ldrb	r3, [r3, #20]
 8013610:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7ff fcd8 	bl	8012fc8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d004      	beq.n	8013628 <tcp_abandon+0x154>
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	f06f 010c 	mvn.w	r1, #12
 8013624:	68f8      	ldr	r0, [r7, #12]
 8013626:	4798      	blx	r3
  }
}
 8013628:	3728      	adds	r7, #40	; 0x28
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	08020c38 	.word	0x08020c38
 8013634:	08020d7c 	.word	0x08020d7c
 8013638:	08020c7c 	.word	0x08020c7c
 801363c:	08020d98 	.word	0x08020d98
 8013640:	200133f4 	.word	0x200133f4
 8013644:	200133e8 	.word	0x200133e8
 8013648:	200133f0 	.word	0x200133f0
 801364c:	200133f8 	.word	0x200133f8

08013650 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013658:	2101      	movs	r1, #1
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7ff ff3a 	bl	80134d4 <tcp_abandon>
}
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b088      	sub	sp, #32
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	4613      	mov	r3, r2
 8013674:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013676:	2304      	movs	r3, #4
 8013678:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d101      	bne.n	8013684 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013680:	4b3e      	ldr	r3, [pc, #248]	; (801377c <tcp_bind+0x114>)
 8013682:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d109      	bne.n	801369e <tcp_bind+0x36>
 801368a:	4b3d      	ldr	r3, [pc, #244]	; (8013780 <tcp_bind+0x118>)
 801368c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013690:	493c      	ldr	r1, [pc, #240]	; (8013784 <tcp_bind+0x11c>)
 8013692:	483d      	ldr	r0, [pc, #244]	; (8013788 <tcp_bind+0x120>)
 8013694:	f009 fd1a 	bl	801d0cc <iprintf>
 8013698:	f06f 030f 	mvn.w	r3, #15
 801369c:	e06a      	b.n	8013774 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	7d1b      	ldrb	r3, [r3, #20]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d009      	beq.n	80136ba <tcp_bind+0x52>
 80136a6:	4b36      	ldr	r3, [pc, #216]	; (8013780 <tcp_bind+0x118>)
 80136a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80136ac:	4937      	ldr	r1, [pc, #220]	; (801378c <tcp_bind+0x124>)
 80136ae:	4836      	ldr	r0, [pc, #216]	; (8013788 <tcp_bind+0x120>)
 80136b0:	f009 fd0c 	bl	801d0cc <iprintf>
 80136b4:	f06f 0305 	mvn.w	r3, #5
 80136b8:	e05c      	b.n	8013774 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80136ba:	88fb      	ldrh	r3, [r7, #6]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d109      	bne.n	80136d4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80136c0:	f000 f9de 	bl	8013a80 <tcp_new_port>
 80136c4:	4603      	mov	r3, r0
 80136c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80136c8:	88fb      	ldrh	r3, [r7, #6]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d135      	bne.n	801373a <tcp_bind+0xd2>
      return ERR_BUF;
 80136ce:	f06f 0301 	mvn.w	r3, #1
 80136d2:	e04f      	b.n	8013774 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80136d4:	2300      	movs	r3, #0
 80136d6:	61fb      	str	r3, [r7, #28]
 80136d8:	e02b      	b.n	8013732 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80136da:	4a2d      	ldr	r2, [pc, #180]	; (8013790 <tcp_bind+0x128>)
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	61bb      	str	r3, [r7, #24]
 80136e6:	e01e      	b.n	8013726 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	8adb      	ldrh	r3, [r3, #22]
 80136ec:	88fa      	ldrh	r2, [r7, #6]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d116      	bne.n	8013720 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80136f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d010      	beq.n	801371a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80136f8:	69bb      	ldr	r3, [r7, #24]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d00c      	beq.n	801371a <tcp_bind+0xb2>
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d009      	beq.n	801371a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d005      	beq.n	801371a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013716:	429a      	cmp	r2, r3
 8013718:	d102      	bne.n	8013720 <tcp_bind+0xb8>
              return ERR_USE;
 801371a:	f06f 0307 	mvn.w	r3, #7
 801371e:	e029      	b.n	8013774 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	68db      	ldr	r3, [r3, #12]
 8013724:	61bb      	str	r3, [r7, #24]
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1dd      	bne.n	80136e8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	3301      	adds	r3, #1
 8013730:	61fb      	str	r3, [r7, #28]
 8013732:	69fa      	ldr	r2, [r7, #28]
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	429a      	cmp	r2, r3
 8013738:	dbcf      	blt.n	80136da <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00c      	beq.n	801375a <tcp_bind+0xf2>
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d008      	beq.n	801375a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d002      	beq.n	8013754 <tcp_bind+0xec>
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	e000      	b.n	8013756 <tcp_bind+0xee>
 8013754:	2300      	movs	r3, #0
 8013756:	68fa      	ldr	r2, [r7, #12]
 8013758:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	88fa      	ldrh	r2, [r7, #6]
 801375e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013760:	4b0c      	ldr	r3, [pc, #48]	; (8013794 <tcp_bind+0x12c>)
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	60da      	str	r2, [r3, #12]
 8013768:	4a0a      	ldr	r2, [pc, #40]	; (8013794 <tcp_bind+0x12c>)
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	6013      	str	r3, [r2, #0]
 801376e:	f005 fc9f 	bl	80190b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	3720      	adds	r7, #32
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	080245c0 	.word	0x080245c0
 8013780:	08020c38 	.word	0x08020c38
 8013784:	08020dcc 	.word	0x08020dcc
 8013788:	08020c7c 	.word	0x08020c7c
 801378c:	08020de4 	.word	0x08020de4
 8013790:	08024598 	.word	0x08024598
 8013794:	200133e8 	.word	0x200133e8

08013798 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	4613      	mov	r3, r2
 80137a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d106      	bne.n	80137ba <tcp_accept_null+0x22>
 80137ac:	4b07      	ldr	r3, [pc, #28]	; (80137cc <tcp_accept_null+0x34>)
 80137ae:	f240 320f 	movw	r2, #783	; 0x30f
 80137b2:	4907      	ldr	r1, [pc, #28]	; (80137d0 <tcp_accept_null+0x38>)
 80137b4:	4807      	ldr	r0, [pc, #28]	; (80137d4 <tcp_accept_null+0x3c>)
 80137b6:	f009 fc89 	bl	801d0cc <iprintf>

  tcp_abort(pcb);
 80137ba:	68b8      	ldr	r0, [r7, #8]
 80137bc:	f7ff ff48 	bl	8013650 <tcp_abort>

  return ERR_ABRT;
 80137c0:	f06f 030c 	mvn.w	r3, #12
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	3710      	adds	r7, #16
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	08020c38 	.word	0x08020c38
 80137d0:	08020e0c 	.word	0x08020e0c
 80137d4:	08020c7c 	.word	0x08020c7c

080137d8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b088      	sub	sp, #32
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	460b      	mov	r3, r1
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80137e6:	2300      	movs	r3, #0
 80137e8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d109      	bne.n	8013804 <tcp_listen_with_backlog_and_err+0x2c>
 80137f0:	4b47      	ldr	r3, [pc, #284]	; (8013910 <tcp_listen_with_backlog_and_err+0x138>)
 80137f2:	f240 3259 	movw	r2, #857	; 0x359
 80137f6:	4947      	ldr	r1, [pc, #284]	; (8013914 <tcp_listen_with_backlog_and_err+0x13c>)
 80137f8:	4847      	ldr	r0, [pc, #284]	; (8013918 <tcp_listen_with_backlog_and_err+0x140>)
 80137fa:	f009 fc67 	bl	801d0cc <iprintf>
 80137fe:	23f0      	movs	r3, #240	; 0xf0
 8013800:	76fb      	strb	r3, [r7, #27]
 8013802:	e079      	b.n	80138f8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	7d1b      	ldrb	r3, [r3, #20]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d009      	beq.n	8013820 <tcp_listen_with_backlog_and_err+0x48>
 801380c:	4b40      	ldr	r3, [pc, #256]	; (8013910 <tcp_listen_with_backlog_and_err+0x138>)
 801380e:	f240 325a 	movw	r2, #858	; 0x35a
 8013812:	4942      	ldr	r1, [pc, #264]	; (801391c <tcp_listen_with_backlog_and_err+0x144>)
 8013814:	4840      	ldr	r0, [pc, #256]	; (8013918 <tcp_listen_with_backlog_and_err+0x140>)
 8013816:	f009 fc59 	bl	801d0cc <iprintf>
 801381a:	23f1      	movs	r3, #241	; 0xf1
 801381c:	76fb      	strb	r3, [r7, #27]
 801381e:	e06b      	b.n	80138f8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	7d1b      	ldrb	r3, [r3, #20]
 8013824:	2b01      	cmp	r3, #1
 8013826:	d104      	bne.n	8013832 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801382c:	23f7      	movs	r3, #247	; 0xf7
 801382e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013830:	e062      	b.n	80138f8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013832:	2002      	movs	r0, #2
 8013834:	f7fe fa02 	bl	8011c3c <memp_malloc>
 8013838:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d102      	bne.n	8013846 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013840:	23ff      	movs	r3, #255	; 0xff
 8013842:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013844:	e058      	b.n	80138f8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	691a      	ldr	r2, [r3, #16]
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	8ada      	ldrh	r2, [r3, #22]
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	2201      	movs	r2, #1
 801385a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	7d5a      	ldrb	r2, [r3, #21]
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	7a5a      	ldrb	r2, [r3, #9]
 8013868:	69fb      	ldr	r3, [r7, #28]
 801386a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	2200      	movs	r2, #0
 8013870:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	7ada      	ldrb	r2, [r3, #11]
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	7a9a      	ldrb	r2, [r3, #10]
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	69fb      	ldr	r3, [r7, #28]
 8013888:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	8adb      	ldrh	r3, [r3, #22]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d021      	beq.n	80138d6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013892:	4b23      	ldr	r3, [pc, #140]	; (8013920 <tcp_listen_with_backlog_and_err+0x148>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	429a      	cmp	r2, r3
 801389a:	d105      	bne.n	80138a8 <tcp_listen_with_backlog_and_err+0xd0>
 801389c:	4b20      	ldr	r3, [pc, #128]	; (8013920 <tcp_listen_with_backlog_and_err+0x148>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	4a1f      	ldr	r2, [pc, #124]	; (8013920 <tcp_listen_with_backlog_and_err+0x148>)
 80138a4:	6013      	str	r3, [r2, #0]
 80138a6:	e013      	b.n	80138d0 <tcp_listen_with_backlog_and_err+0xf8>
 80138a8:	4b1d      	ldr	r3, [pc, #116]	; (8013920 <tcp_listen_with_backlog_and_err+0x148>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	617b      	str	r3, [r7, #20]
 80138ae:	e00c      	b.n	80138ca <tcp_listen_with_backlog_and_err+0xf2>
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	68db      	ldr	r3, [r3, #12]
 80138b4:	68fa      	ldr	r2, [r7, #12]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d104      	bne.n	80138c4 <tcp_listen_with_backlog_and_err+0xec>
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	68da      	ldr	r2, [r3, #12]
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	60da      	str	r2, [r3, #12]
 80138c2:	e005      	b.n	80138d0 <tcp_listen_with_backlog_and_err+0xf8>
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	617b      	str	r3, [r7, #20]
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1ef      	bne.n	80138b0 <tcp_listen_with_backlog_and_err+0xd8>
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2200      	movs	r2, #0
 80138d4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80138d6:	68f8      	ldr	r0, [r7, #12]
 80138d8:	f7ff fb76 	bl	8012fc8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	4a11      	ldr	r2, [pc, #68]	; (8013924 <tcp_listen_with_backlog_and_err+0x14c>)
 80138e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80138e2:	4b11      	ldr	r3, [pc, #68]	; (8013928 <tcp_listen_with_backlog_and_err+0x150>)
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	60da      	str	r2, [r3, #12]
 80138ea:	4a0f      	ldr	r2, [pc, #60]	; (8013928 <tcp_listen_with_backlog_and_err+0x150>)
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	6013      	str	r3, [r2, #0]
 80138f0:	f005 fbde 	bl	80190b0 <tcp_timer_needed>
  res = ERR_OK;
 80138f4:	2300      	movs	r3, #0
 80138f6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d002      	beq.n	8013904 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	7efa      	ldrb	r2, [r7, #27]
 8013902:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013904:	69fb      	ldr	r3, [r7, #28]
}
 8013906:	4618      	mov	r0, r3
 8013908:	3720      	adds	r7, #32
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	08020c38 	.word	0x08020c38
 8013914:	08020e2c 	.word	0x08020e2c
 8013918:	08020c7c 	.word	0x08020c7c
 801391c:	08020e5c 	.word	0x08020e5c
 8013920:	200133e8 	.word	0x200133e8
 8013924:	08013799 	.word	0x08013799
 8013928:	200133ec 	.word	0x200133ec

0801392c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b084      	sub	sp, #16
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d106      	bne.n	8013948 <tcp_update_rcv_ann_wnd+0x1c>
 801393a:	4b25      	ldr	r3, [pc, #148]	; (80139d0 <tcp_update_rcv_ann_wnd+0xa4>)
 801393c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013940:	4924      	ldr	r1, [pc, #144]	; (80139d4 <tcp_update_rcv_ann_wnd+0xa8>)
 8013942:	4825      	ldr	r0, [pc, #148]	; (80139d8 <tcp_update_rcv_ann_wnd+0xac>)
 8013944:	f009 fbc2 	bl	801d0cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801394c:	687a      	ldr	r2, [r7, #4]
 801394e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013950:	4413      	add	r3, r2
 8013952:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801395c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013960:	bf28      	it	cs
 8013962:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013966:	b292      	uxth	r2, r2
 8013968:	4413      	add	r3, r2
 801396a:	68fa      	ldr	r2, [r7, #12]
 801396c:	1ad3      	subs	r3, r2, r3
 801396e:	2b00      	cmp	r3, #0
 8013970:	db08      	blt.n	8013984 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	1ad3      	subs	r3, r2, r3
 8013982:	e020      	b.n	80139c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398c:	1ad3      	subs	r3, r2, r3
 801398e:	2b00      	cmp	r3, #0
 8013990:	dd03      	ble.n	801399a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2200      	movs	r2, #0
 8013996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013998:	e014      	b.n	80139c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a2:	1ad3      	subs	r3, r2, r3
 80139a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139ac:	d306      	bcc.n	80139bc <tcp_update_rcv_ann_wnd+0x90>
 80139ae:	4b08      	ldr	r3, [pc, #32]	; (80139d0 <tcp_update_rcv_ann_wnd+0xa4>)
 80139b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80139b4:	4909      	ldr	r1, [pc, #36]	; (80139dc <tcp_update_rcv_ann_wnd+0xb0>)
 80139b6:	4808      	ldr	r0, [pc, #32]	; (80139d8 <tcp_update_rcv_ann_wnd+0xac>)
 80139b8:	f009 fb88 	bl	801d0cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	b29a      	uxth	r2, r3
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80139c4:	2300      	movs	r3, #0
  }
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	08020c38 	.word	0x08020c38
 80139d4:	08020e94 	.word	0x08020e94
 80139d8:	08020c7c 	.word	0x08020c7c
 80139dc:	08020eb8 	.word	0x08020eb8

080139e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	460b      	mov	r3, r1
 80139ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d107      	bne.n	8013a02 <tcp_recved+0x22>
 80139f2:	4b1f      	ldr	r3, [pc, #124]	; (8013a70 <tcp_recved+0x90>)
 80139f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80139f8:	491e      	ldr	r1, [pc, #120]	; (8013a74 <tcp_recved+0x94>)
 80139fa:	481f      	ldr	r0, [pc, #124]	; (8013a78 <tcp_recved+0x98>)
 80139fc:	f009 fb66 	bl	801d0cc <iprintf>
 8013a00:	e032      	b.n	8013a68 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	7d1b      	ldrb	r3, [r3, #20]
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	d106      	bne.n	8013a18 <tcp_recved+0x38>
 8013a0a:	4b19      	ldr	r3, [pc, #100]	; (8013a70 <tcp_recved+0x90>)
 8013a0c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013a10:	491a      	ldr	r1, [pc, #104]	; (8013a7c <tcp_recved+0x9c>)
 8013a12:	4819      	ldr	r0, [pc, #100]	; (8013a78 <tcp_recved+0x98>)
 8013a14:	f009 fb5a 	bl	801d0cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a1c:	887b      	ldrh	r3, [r7, #2]
 8013a1e:	4413      	add	r3, r2
 8013a20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013a22:	89fb      	ldrh	r3, [r7, #14]
 8013a24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013a28:	d804      	bhi.n	8013a34 <tcp_recved+0x54>
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a2e:	89fa      	ldrh	r2, [r7, #14]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d204      	bcs.n	8013a3e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013a3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8013a3c:	e002      	b.n	8013a44 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	89fa      	ldrh	r2, [r7, #14]
 8013a42:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f7ff ff71 	bl	801392c <tcp_update_rcv_ann_wnd>
 8013a4a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013a52:	d309      	bcc.n	8013a68 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	8b5b      	ldrh	r3, [r3, #26]
 8013a58:	f043 0302 	orr.w	r3, r3, #2
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f004 fbae 	bl	80181c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	08020c38 	.word	0x08020c38
 8013a74:	08020ed4 	.word	0x08020ed4
 8013a78:	08020c7c 	.word	0x08020c7c
 8013a7c:	08020eec 	.word	0x08020eec

08013a80 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013a86:	2300      	movs	r3, #0
 8013a88:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013a8a:	4b1e      	ldr	r3, [pc, #120]	; (8013b04 <tcp_new_port+0x84>)
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	3301      	adds	r3, #1
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	4b1c      	ldr	r3, [pc, #112]	; (8013b04 <tcp_new_port+0x84>)
 8013a94:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013a96:	4b1b      	ldr	r3, [pc, #108]	; (8013b04 <tcp_new_port+0x84>)
 8013a98:	881b      	ldrh	r3, [r3, #0]
 8013a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	d103      	bne.n	8013aaa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013aa2:	4b18      	ldr	r3, [pc, #96]	; (8013b04 <tcp_new_port+0x84>)
 8013aa4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013aa8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013aaa:	2300      	movs	r3, #0
 8013aac:	71fb      	strb	r3, [r7, #7]
 8013aae:	e01e      	b.n	8013aee <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013ab0:	79fb      	ldrb	r3, [r7, #7]
 8013ab2:	4a15      	ldr	r2, [pc, #84]	; (8013b08 <tcp_new_port+0x88>)
 8013ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	603b      	str	r3, [r7, #0]
 8013abc:	e011      	b.n	8013ae2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	8ada      	ldrh	r2, [r3, #22]
 8013ac2:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <tcp_new_port+0x84>)
 8013ac4:	881b      	ldrh	r3, [r3, #0]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d108      	bne.n	8013adc <tcp_new_port+0x5c>
        n++;
 8013aca:	88bb      	ldrh	r3, [r7, #4]
 8013acc:	3301      	adds	r3, #1
 8013ace:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013ad0:	88bb      	ldrh	r3, [r7, #4]
 8013ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013ad6:	d3d8      	bcc.n	8013a8a <tcp_new_port+0xa>
          return 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	e00d      	b.n	8013af8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	603b      	str	r3, [r7, #0]
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1ea      	bne.n	8013abe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013ae8:	79fb      	ldrb	r3, [r7, #7]
 8013aea:	3301      	adds	r3, #1
 8013aec:	71fb      	strb	r3, [r7, #7]
 8013aee:	79fb      	ldrb	r3, [r7, #7]
 8013af0:	2b03      	cmp	r3, #3
 8013af2:	d9dd      	bls.n	8013ab0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013af4:	4b03      	ldr	r3, [pc, #12]	; (8013b04 <tcp_new_port+0x84>)
 8013af6:	881b      	ldrh	r3, [r3, #0]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	370c      	adds	r7, #12
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr
 8013b04:	20000024 	.word	0x20000024
 8013b08:	08024598 	.word	0x08024598

08013b0c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013b0c:	b5b0      	push	{r4, r5, r7, lr}
 8013b0e:	b090      	sub	sp, #64	; 0x40
 8013b10:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013b18:	4b94      	ldr	r3, [pc, #592]	; (8013d6c <tcp_slowtmr+0x260>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	3301      	adds	r3, #1
 8013b1e:	4a93      	ldr	r2, [pc, #588]	; (8013d6c <tcp_slowtmr+0x260>)
 8013b20:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013b22:	4b93      	ldr	r3, [pc, #588]	; (8013d70 <tcp_slowtmr+0x264>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	3301      	adds	r3, #1
 8013b28:	b2da      	uxtb	r2, r3
 8013b2a:	4b91      	ldr	r3, [pc, #580]	; (8013d70 <tcp_slowtmr+0x264>)
 8013b2c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013b32:	4b90      	ldr	r3, [pc, #576]	; (8013d74 <tcp_slowtmr+0x268>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013b38:	e29f      	b.n	801407a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3c:	7d1b      	ldrb	r3, [r3, #20]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d106      	bne.n	8013b50 <tcp_slowtmr+0x44>
 8013b42:	4b8d      	ldr	r3, [pc, #564]	; (8013d78 <tcp_slowtmr+0x26c>)
 8013b44:	f240 42be 	movw	r2, #1214	; 0x4be
 8013b48:	498c      	ldr	r1, [pc, #560]	; (8013d7c <tcp_slowtmr+0x270>)
 8013b4a:	488d      	ldr	r0, [pc, #564]	; (8013d80 <tcp_slowtmr+0x274>)
 8013b4c:	f009 fabe 	bl	801d0cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b52:	7d1b      	ldrb	r3, [r3, #20]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d106      	bne.n	8013b66 <tcp_slowtmr+0x5a>
 8013b58:	4b87      	ldr	r3, [pc, #540]	; (8013d78 <tcp_slowtmr+0x26c>)
 8013b5a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013b5e:	4989      	ldr	r1, [pc, #548]	; (8013d84 <tcp_slowtmr+0x278>)
 8013b60:	4887      	ldr	r0, [pc, #540]	; (8013d80 <tcp_slowtmr+0x274>)
 8013b62:	f009 fab3 	bl	801d0cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b68:	7d1b      	ldrb	r3, [r3, #20]
 8013b6a:	2b0a      	cmp	r3, #10
 8013b6c:	d106      	bne.n	8013b7c <tcp_slowtmr+0x70>
 8013b6e:	4b82      	ldr	r3, [pc, #520]	; (8013d78 <tcp_slowtmr+0x26c>)
 8013b70:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013b74:	4984      	ldr	r1, [pc, #528]	; (8013d88 <tcp_slowtmr+0x27c>)
 8013b76:	4882      	ldr	r0, [pc, #520]	; (8013d80 <tcp_slowtmr+0x274>)
 8013b78:	f009 faa8 	bl	801d0cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b7e:	7f9a      	ldrb	r2, [r3, #30]
 8013b80:	4b7b      	ldr	r3, [pc, #492]	; (8013d70 <tcp_slowtmr+0x264>)
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d105      	bne.n	8013b94 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013b92:	e272      	b.n	801407a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013b94:	4b76      	ldr	r3, [pc, #472]	; (8013d70 <tcp_slowtmr+0x264>)
 8013b96:	781a      	ldrb	r2, [r3, #0]
 8013b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b9a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013baa:	7d1b      	ldrb	r3, [r3, #20]
 8013bac:	2b02      	cmp	r3, #2
 8013bae:	d10a      	bne.n	8013bc6 <tcp_slowtmr+0xba>
 8013bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bb6:	2b05      	cmp	r3, #5
 8013bb8:	d905      	bls.n	8013bc6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013bc4:	e11e      	b.n	8013e04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bcc:	2b0b      	cmp	r3, #11
 8013bce:	d905      	bls.n	8013bdc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013bda:	e113      	b.n	8013e04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d075      	beq.n	8013cd2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d006      	beq.n	8013bfc <tcp_slowtmr+0xf0>
 8013bee:	4b62      	ldr	r3, [pc, #392]	; (8013d78 <tcp_slowtmr+0x26c>)
 8013bf0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013bf4:	4965      	ldr	r1, [pc, #404]	; (8013d8c <tcp_slowtmr+0x280>)
 8013bf6:	4862      	ldr	r0, [pc, #392]	; (8013d80 <tcp_slowtmr+0x274>)
 8013bf8:	f009 fa68 	bl	801d0cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d106      	bne.n	8013c12 <tcp_slowtmr+0x106>
 8013c04:	4b5c      	ldr	r3, [pc, #368]	; (8013d78 <tcp_slowtmr+0x26c>)
 8013c06:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013c0a:	4961      	ldr	r1, [pc, #388]	; (8013d90 <tcp_slowtmr+0x284>)
 8013c0c:	485c      	ldr	r0, [pc, #368]	; (8013d80 <tcp_slowtmr+0x274>)
 8013c0e:	f009 fa5d 	bl	801d0cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c18:	2b0b      	cmp	r3, #11
 8013c1a:	d905      	bls.n	8013c28 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c20:	3301      	adds	r3, #1
 8013c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c26:	e0ed      	b.n	8013e04 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013c2e:	3b01      	subs	r3, #1
 8013c30:	4a58      	ldr	r2, [pc, #352]	; (8013d94 <tcp_slowtmr+0x288>)
 8013c32:	5cd3      	ldrb	r3, [r2, r3]
 8013c34:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013c3c:	7c7a      	ldrb	r2, [r7, #17]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d907      	bls.n	8013c52 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013c48:	3301      	adds	r3, #1
 8013c4a:	b2da      	uxtb	r2, r3
 8013c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013c58:	7c7a      	ldrb	r2, [r7, #17]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	f200 80d2 	bhi.w	8013e04 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013c60:	2301      	movs	r3, #1
 8013c62:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d108      	bne.n	8013c80 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c70:	f005 f950 	bl	8018f14 <tcp_zero_window_probe>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d014      	beq.n	8013ca4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	623b      	str	r3, [r7, #32]
 8013c7e:	e011      	b.n	8013ca4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c86:	4619      	mov	r1, r3
 8013c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c8a:	f004 f815 	bl	8017cb8 <tcp_split_unsent_seg>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d107      	bne.n	8013ca4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c96:	f004 fa95 	bl	80181c4 <tcp_output>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d101      	bne.n	8013ca4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013ca4:	6a3b      	ldr	r3, [r7, #32]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	f000 80ac 	beq.w	8013e04 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013cba:	2b06      	cmp	r3, #6
 8013cbc:	f200 80a2 	bhi.w	8013e04 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	b2da      	uxtb	r2, r3
 8013cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ccc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013cd0:	e098      	b.n	8013e04 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	db0f      	blt.n	8013cfc <tcp_slowtmr+0x1f0>
 8013cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ce2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	d008      	beq.n	8013cfc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	b21a      	sxth	r2, r3
 8013cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cfa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cfe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d04:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	db7b      	blt.n	8013e04 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d0e:	f004 fd4d 	bl	80187ac <tcp_rexmit_rto_prepare>
 8013d12:	4603      	mov	r3, r0
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d007      	beq.n	8013d28 <tcp_slowtmr+0x21c>
 8013d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d171      	bne.n	8013e04 <tcp_slowtmr+0x2f8>
 8013d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d06d      	beq.n	8013e04 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2a:	7d1b      	ldrb	r3, [r3, #20]
 8013d2c:	2b02      	cmp	r3, #2
 8013d2e:	d03a      	beq.n	8013da6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d36:	2b0c      	cmp	r3, #12
 8013d38:	bf28      	it	cs
 8013d3a:	230c      	movcs	r3, #12
 8013d3c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d44:	10db      	asrs	r3, r3, #3
 8013d46:	b21b      	sxth	r3, r3
 8013d48:	461a      	mov	r2, r3
 8013d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013d50:	4413      	add	r3, r2
 8013d52:	7efa      	ldrb	r2, [r7, #27]
 8013d54:	4910      	ldr	r1, [pc, #64]	; (8013d98 <tcp_slowtmr+0x28c>)
 8013d56:	5c8a      	ldrb	r2, [r1, r2]
 8013d58:	4093      	lsls	r3, r2
 8013d5a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013d62:	4293      	cmp	r3, r2
 8013d64:	dc1a      	bgt.n	8013d9c <tcp_slowtmr+0x290>
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	b21a      	sxth	r2, r3
 8013d6a:	e019      	b.n	8013da0 <tcp_slowtmr+0x294>
 8013d6c:	200133e4 	.word	0x200133e4
 8013d70:	200133fa 	.word	0x200133fa
 8013d74:	200133f0 	.word	0x200133f0
 8013d78:	08020c38 	.word	0x08020c38
 8013d7c:	08020f7c 	.word	0x08020f7c
 8013d80:	08020c7c 	.word	0x08020c7c
 8013d84:	08020fa8 	.word	0x08020fa8
 8013d88:	08020fd4 	.word	0x08020fd4
 8013d8c:	08021004 	.word	0x08021004
 8013d90:	08021038 	.word	0x08021038
 8013d94:	08024590 	.word	0x08024590
 8013d98:	08024580 	.word	0x08024580
 8013d9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da8:	2200      	movs	r2, #0
 8013daa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013db8:	4293      	cmp	r3, r2
 8013dba:	bf28      	it	cs
 8013dbc:	4613      	movcs	r3, r2
 8013dbe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013dc0:	8a7b      	ldrh	r3, [r7, #18]
 8013dc2:	085b      	lsrs	r3, r3, #1
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013dd6:	005b      	lsls	r3, r3, #1
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d206      	bcs.n	8013dec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013de2:	005b      	lsls	r3, r3, #1
 8013de4:	b29a      	uxth	r2, r3
 8013de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df8:	2200      	movs	r2, #0
 8013dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e00:	f004 fd44 	bl	801888c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e06:	7d1b      	ldrb	r3, [r3, #20]
 8013e08:	2b06      	cmp	r3, #6
 8013e0a:	d111      	bne.n	8013e30 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0e:	8b5b      	ldrh	r3, [r3, #26]
 8013e10:	f003 0310 	and.w	r3, r3, #16
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d00b      	beq.n	8013e30 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013e18:	4b9d      	ldr	r3, [pc, #628]	; (8014090 <tcp_slowtmr+0x584>)
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1e:	6a1b      	ldr	r3, [r3, #32]
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	2b28      	cmp	r3, #40	; 0x28
 8013e24:	d904      	bls.n	8013e30 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e32:	7a5b      	ldrb	r3, [r3, #9]
 8013e34:	f003 0308 	and.w	r3, r3, #8
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d04c      	beq.n	8013ed6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013e40:	2b04      	cmp	r3, #4
 8013e42:	d003      	beq.n	8013e4c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013e48:	2b07      	cmp	r3, #7
 8013e4a:	d144      	bne.n	8013ed6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013e4c:	4b90      	ldr	r3, [pc, #576]	; (8014090 <tcp_slowtmr+0x584>)
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e52:	6a1b      	ldr	r3, [r3, #32]
 8013e54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013e5c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013e60:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013e64:	498b      	ldr	r1, [pc, #556]	; (8014094 <tcp_slowtmr+0x588>)
 8013e66:	fba1 1303 	umull	r1, r3, r1, r3
 8013e6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d90a      	bls.n	8013e86 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e74:	3301      	adds	r3, #1
 8013e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e7e:	3301      	adds	r3, #1
 8013e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013e84:	e027      	b.n	8013ed6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013e86:	4b82      	ldr	r3, [pc, #520]	; (8014090 <tcp_slowtmr+0x584>)
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8c:	6a1b      	ldr	r3, [r3, #32]
 8013e8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	4b7e      	ldr	r3, [pc, #504]	; (8014098 <tcp_slowtmr+0x58c>)
 8013ea0:	fb00 f303 	mul.w	r3, r0, r3
 8013ea4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013ea6:	497b      	ldr	r1, [pc, #492]	; (8014094 <tcp_slowtmr+0x588>)
 8013ea8:	fba1 1303 	umull	r1, r3, r1, r3
 8013eac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d911      	bls.n	8013ed6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013eb4:	f004 ffee 	bl	8018e94 <tcp_keepalive>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013ebe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d107      	bne.n	8013ed6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013ecc:	3301      	adds	r3, #1
 8013ece:	b2da      	uxtb	r2, r3
 8013ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d011      	beq.n	8013f02 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013ede:	4b6c      	ldr	r3, [pc, #432]	; (8014090 <tcp_slowtmr+0x584>)
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee4:	6a1b      	ldr	r3, [r3, #32]
 8013ee6:	1ad2      	subs	r2, r2, r3
 8013ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013eee:	4619      	mov	r1, r3
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	005b      	lsls	r3, r3, #1
 8013ef4:	440b      	add	r3, r1
 8013ef6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d302      	bcc.n	8013f02 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013efe:	f000 fea9 	bl	8014c54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f04:	7d1b      	ldrb	r3, [r3, #20]
 8013f06:	2b03      	cmp	r3, #3
 8013f08:	d10b      	bne.n	8013f22 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013f0a:	4b61      	ldr	r3, [pc, #388]	; (8014090 <tcp_slowtmr+0x584>)
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f10:	6a1b      	ldr	r3, [r3, #32]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	2b28      	cmp	r3, #40	; 0x28
 8013f16:	d904      	bls.n	8013f22 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f24:	7d1b      	ldrb	r3, [r3, #20]
 8013f26:	2b09      	cmp	r3, #9
 8013f28:	d10b      	bne.n	8013f42 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013f2a:	4b59      	ldr	r3, [pc, #356]	; (8014090 <tcp_slowtmr+0x584>)
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f30:	6a1b      	ldr	r3, [r3, #32]
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	2bf0      	cmp	r3, #240	; 0xf0
 8013f36:	d904      	bls.n	8013f42 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f3c:	3301      	adds	r3, #1
 8013f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d060      	beq.n	801400c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f50:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f54:	f000 fcca 	bl	80148ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d010      	beq.n	8013f80 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013f5e:	4b4f      	ldr	r3, [pc, #316]	; (801409c <tcp_slowtmr+0x590>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d106      	bne.n	8013f76 <tcp_slowtmr+0x46a>
 8013f68:	4b4d      	ldr	r3, [pc, #308]	; (80140a0 <tcp_slowtmr+0x594>)
 8013f6a:	f240 526d 	movw	r2, #1389	; 0x56d
 8013f6e:	494d      	ldr	r1, [pc, #308]	; (80140a4 <tcp_slowtmr+0x598>)
 8013f70:	484d      	ldr	r0, [pc, #308]	; (80140a8 <tcp_slowtmr+0x59c>)
 8013f72:	f009 f8ab 	bl	801d0cc <iprintf>
        prev->next = pcb->next;
 8013f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f78:	68da      	ldr	r2, [r3, #12]
 8013f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7c:	60da      	str	r2, [r3, #12]
 8013f7e:	e00f      	b.n	8013fa0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013f80:	4b46      	ldr	r3, [pc, #280]	; (801409c <tcp_slowtmr+0x590>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d006      	beq.n	8013f98 <tcp_slowtmr+0x48c>
 8013f8a:	4b45      	ldr	r3, [pc, #276]	; (80140a0 <tcp_slowtmr+0x594>)
 8013f8c:	f240 5271 	movw	r2, #1393	; 0x571
 8013f90:	4946      	ldr	r1, [pc, #280]	; (80140ac <tcp_slowtmr+0x5a0>)
 8013f92:	4845      	ldr	r0, [pc, #276]	; (80140a8 <tcp_slowtmr+0x59c>)
 8013f94:	f009 f89a 	bl	801d0cc <iprintf>
        tcp_active_pcbs = pcb->next;
 8013f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	4a3f      	ldr	r2, [pc, #252]	; (801409c <tcp_slowtmr+0x590>)
 8013f9e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013fa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d013      	beq.n	8013fd0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013faa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013fb0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb4:	3304      	adds	r3, #4
 8013fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fb8:	8ad2      	ldrh	r2, [r2, #22]
 8013fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013fbc:	8b09      	ldrh	r1, [r1, #24]
 8013fbe:	9102      	str	r1, [sp, #8]
 8013fc0:	9201      	str	r2, [sp, #4]
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	462b      	mov	r3, r5
 8013fc6:	4622      	mov	r2, r4
 8013fc8:	4601      	mov	r1, r0
 8013fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fcc:	f004 feae 	bl	8018d2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	691b      	ldr	r3, [r3, #16]
 8013fd4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd8:	7d1b      	ldrb	r3, [r3, #20]
 8013fda:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fde:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013fe6:	6838      	ldr	r0, [r7, #0]
 8013fe8:	f7fe ffee 	bl	8012fc8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013fec:	4b30      	ldr	r3, [pc, #192]	; (80140b0 <tcp_slowtmr+0x5a4>)
 8013fee:	2200      	movs	r2, #0
 8013ff0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d004      	beq.n	8014002 <tcp_slowtmr+0x4f6>
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f06f 010c 	mvn.w	r1, #12
 8013ffe:	68b8      	ldr	r0, [r7, #8]
 8014000:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014002:	4b2b      	ldr	r3, [pc, #172]	; (80140b0 <tcp_slowtmr+0x5a4>)
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d037      	beq.n	801407a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801400a:	e590      	b.n	8013b2e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014018:	7f1b      	ldrb	r3, [r3, #28]
 801401a:	3301      	adds	r3, #1
 801401c:	b2da      	uxtb	r2, r3
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014024:	7f1a      	ldrb	r2, [r3, #28]
 8014026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014028:	7f5b      	ldrb	r3, [r3, #29]
 801402a:	429a      	cmp	r2, r3
 801402c:	d325      	bcc.n	801407a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014030:	2200      	movs	r2, #0
 8014032:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014034:	4b1e      	ldr	r3, [pc, #120]	; (80140b0 <tcp_slowtmr+0x5a4>)
 8014036:	2200      	movs	r2, #0
 8014038:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00b      	beq.n	801405c <tcp_slowtmr+0x550>
 8014044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801404a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801404c:	6912      	ldr	r2, [r2, #16]
 801404e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014050:	4610      	mov	r0, r2
 8014052:	4798      	blx	r3
 8014054:	4603      	mov	r3, r0
 8014056:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801405a:	e002      	b.n	8014062 <tcp_slowtmr+0x556>
 801405c:	2300      	movs	r3, #0
 801405e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014062:	4b13      	ldr	r3, [pc, #76]	; (80140b0 <tcp_slowtmr+0x5a4>)
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d000      	beq.n	801406c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801406a:	e560      	b.n	8013b2e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801406c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014070:	2b00      	cmp	r3, #0
 8014072:	d102      	bne.n	801407a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014076:	f004 f8a5 	bl	80181c4 <tcp_output>
  while (pcb != NULL) {
 801407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407c:	2b00      	cmp	r3, #0
 801407e:	f47f ad5c 	bne.w	8013b3a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014082:	2300      	movs	r3, #0
 8014084:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014086:	4b0b      	ldr	r3, [pc, #44]	; (80140b4 <tcp_slowtmr+0x5a8>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801408c:	e067      	b.n	801415e <tcp_slowtmr+0x652>
 801408e:	bf00      	nop
 8014090:	200133e4 	.word	0x200133e4
 8014094:	10624dd3 	.word	0x10624dd3
 8014098:	000124f8 	.word	0x000124f8
 801409c:	200133f0 	.word	0x200133f0
 80140a0:	08020c38 	.word	0x08020c38
 80140a4:	08021070 	.word	0x08021070
 80140a8:	08020c7c 	.word	0x08020c7c
 80140ac:	0802109c 	.word	0x0802109c
 80140b0:	200133f8 	.word	0x200133f8
 80140b4:	200133f4 	.word	0x200133f4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80140b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ba:	7d1b      	ldrb	r3, [r3, #20]
 80140bc:	2b0a      	cmp	r3, #10
 80140be:	d006      	beq.n	80140ce <tcp_slowtmr+0x5c2>
 80140c0:	4b2b      	ldr	r3, [pc, #172]	; (8014170 <tcp_slowtmr+0x664>)
 80140c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80140c6:	492b      	ldr	r1, [pc, #172]	; (8014174 <tcp_slowtmr+0x668>)
 80140c8:	482b      	ldr	r0, [pc, #172]	; (8014178 <tcp_slowtmr+0x66c>)
 80140ca:	f008 ffff 	bl	801d0cc <iprintf>
    pcb_remove = 0;
 80140ce:	2300      	movs	r3, #0
 80140d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80140d4:	4b29      	ldr	r3, [pc, #164]	; (801417c <tcp_slowtmr+0x670>)
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140da:	6a1b      	ldr	r3, [r3, #32]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	2bf0      	cmp	r3, #240	; 0xf0
 80140e0:	d904      	bls.n	80140ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80140e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e6:	3301      	adds	r3, #1
 80140e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80140ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d02f      	beq.n	8014154 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80140f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140f6:	f000 fbf9 	bl	80148ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80140fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d010      	beq.n	8014122 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014100:	4b1f      	ldr	r3, [pc, #124]	; (8014180 <tcp_slowtmr+0x674>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014106:	429a      	cmp	r2, r3
 8014108:	d106      	bne.n	8014118 <tcp_slowtmr+0x60c>
 801410a:	4b19      	ldr	r3, [pc, #100]	; (8014170 <tcp_slowtmr+0x664>)
 801410c:	f240 52af 	movw	r2, #1455	; 0x5af
 8014110:	491c      	ldr	r1, [pc, #112]	; (8014184 <tcp_slowtmr+0x678>)
 8014112:	4819      	ldr	r0, [pc, #100]	; (8014178 <tcp_slowtmr+0x66c>)
 8014114:	f008 ffda 	bl	801d0cc <iprintf>
        prev->next = pcb->next;
 8014118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411a:	68da      	ldr	r2, [r3, #12]
 801411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801411e:	60da      	str	r2, [r3, #12]
 8014120:	e00f      	b.n	8014142 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014122:	4b17      	ldr	r3, [pc, #92]	; (8014180 <tcp_slowtmr+0x674>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014128:	429a      	cmp	r2, r3
 801412a:	d006      	beq.n	801413a <tcp_slowtmr+0x62e>
 801412c:	4b10      	ldr	r3, [pc, #64]	; (8014170 <tcp_slowtmr+0x664>)
 801412e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014132:	4915      	ldr	r1, [pc, #84]	; (8014188 <tcp_slowtmr+0x67c>)
 8014134:	4810      	ldr	r0, [pc, #64]	; (8014178 <tcp_slowtmr+0x66c>)
 8014136:	f008 ffc9 	bl	801d0cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 801413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	4a10      	ldr	r2, [pc, #64]	; (8014180 <tcp_slowtmr+0x674>)
 8014140:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014144:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014148:	68db      	ldr	r3, [r3, #12]
 801414a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801414c:	69f8      	ldr	r0, [r7, #28]
 801414e:	f7fe ff3b 	bl	8012fc8 <tcp_free>
 8014152:	e004      	b.n	801415e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014156:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014160:	2b00      	cmp	r3, #0
 8014162:	d1a9      	bne.n	80140b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014164:	bf00      	nop
 8014166:	bf00      	nop
 8014168:	3730      	adds	r7, #48	; 0x30
 801416a:	46bd      	mov	sp, r7
 801416c:	bdb0      	pop	{r4, r5, r7, pc}
 801416e:	bf00      	nop
 8014170:	08020c38 	.word	0x08020c38
 8014174:	080210c8 	.word	0x080210c8
 8014178:	08020c7c 	.word	0x08020c7c
 801417c:	200133e4 	.word	0x200133e4
 8014180:	200133f4 	.word	0x200133f4
 8014184:	080210f8 	.word	0x080210f8
 8014188:	08021120 	.word	0x08021120

0801418c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014192:	4b2d      	ldr	r3, [pc, #180]	; (8014248 <tcp_fasttmr+0xbc>)
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	3301      	adds	r3, #1
 8014198:	b2da      	uxtb	r2, r3
 801419a:	4b2b      	ldr	r3, [pc, #172]	; (8014248 <tcp_fasttmr+0xbc>)
 801419c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801419e:	4b2b      	ldr	r3, [pc, #172]	; (801424c <tcp_fasttmr+0xc0>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80141a4:	e048      	b.n	8014238 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	7f9a      	ldrb	r2, [r3, #30]
 80141aa:	4b27      	ldr	r3, [pc, #156]	; (8014248 <tcp_fasttmr+0xbc>)
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d03f      	beq.n	8014232 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80141b2:	4b25      	ldr	r3, [pc, #148]	; (8014248 <tcp_fasttmr+0xbc>)
 80141b4:	781a      	ldrb	r2, [r3, #0]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	8b5b      	ldrh	r3, [r3, #26]
 80141be:	f003 0301 	and.w	r3, r3, #1
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d010      	beq.n	80141e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	8b5b      	ldrh	r3, [r3, #26]
 80141ca:	f043 0302 	orr.w	r3, r3, #2
 80141ce:	b29a      	uxth	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f003 fff5 	bl	80181c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	8b5b      	ldrh	r3, [r3, #26]
 80141de:	f023 0303 	bic.w	r3, r3, #3
 80141e2:	b29a      	uxth	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	8b5b      	ldrh	r3, [r3, #26]
 80141ec:	f003 0308 	and.w	r3, r3, #8
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d009      	beq.n	8014208 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	8b5b      	ldrh	r3, [r3, #26]
 80141f8:	f023 0308 	bic.w	r3, r3, #8
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f7ff f874 	bl	80132f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00a      	beq.n	801422c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014216:	4b0e      	ldr	r3, [pc, #56]	; (8014250 <tcp_fasttmr+0xc4>)
 8014218:	2200      	movs	r2, #0
 801421a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f000 f819 	bl	8014254 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014222:	4b0b      	ldr	r3, [pc, #44]	; (8014250 <tcp_fasttmr+0xc4>)
 8014224:	781b      	ldrb	r3, [r3, #0]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d000      	beq.n	801422c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801422a:	e7b8      	b.n	801419e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	607b      	str	r3, [r7, #4]
 8014230:	e002      	b.n	8014238 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d1b3      	bne.n	80141a6 <tcp_fasttmr+0x1a>
    }
  }
}
 801423e:	bf00      	nop
 8014240:	bf00      	nop
 8014242:	3708      	adds	r7, #8
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	200133fa 	.word	0x200133fa
 801424c:	200133f0 	.word	0x200133f0
 8014250:	200133f8 	.word	0x200133f8

08014254 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014254:	b590      	push	{r4, r7, lr}
 8014256:	b085      	sub	sp, #20
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d109      	bne.n	8014276 <tcp_process_refused_data+0x22>
 8014262:	4b37      	ldr	r3, [pc, #220]	; (8014340 <tcp_process_refused_data+0xec>)
 8014264:	f240 6209 	movw	r2, #1545	; 0x609
 8014268:	4936      	ldr	r1, [pc, #216]	; (8014344 <tcp_process_refused_data+0xf0>)
 801426a:	4837      	ldr	r0, [pc, #220]	; (8014348 <tcp_process_refused_data+0xf4>)
 801426c:	f008 ff2e 	bl	801d0cc <iprintf>
 8014270:	f06f 030f 	mvn.w	r3, #15
 8014274:	e060      	b.n	8014338 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801427a:	7b5b      	ldrb	r3, [r3, #13]
 801427c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014282:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2200      	movs	r2, #0
 8014288:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014290:	2b00      	cmp	r3, #0
 8014292:	d00b      	beq.n	80142ac <tcp_process_refused_data+0x58>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6918      	ldr	r0, [r3, #16]
 801429e:	2300      	movs	r3, #0
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	6879      	ldr	r1, [r7, #4]
 80142a4:	47a0      	blx	r4
 80142a6:	4603      	mov	r3, r0
 80142a8:	73fb      	strb	r3, [r7, #15]
 80142aa:	e007      	b.n	80142bc <tcp_process_refused_data+0x68>
 80142ac:	2300      	movs	r3, #0
 80142ae:	68ba      	ldr	r2, [r7, #8]
 80142b0:	6879      	ldr	r1, [r7, #4]
 80142b2:	2000      	movs	r0, #0
 80142b4:	f000 f8a4 	bl	8014400 <tcp_recv_null>
 80142b8:	4603      	mov	r3, r0
 80142ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80142bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d12a      	bne.n	801431a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80142c4:	7bbb      	ldrb	r3, [r7, #14]
 80142c6:	f003 0320 	and.w	r3, r3, #32
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d033      	beq.n	8014336 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80142d6:	d005      	beq.n	80142e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80142dc:	3301      	adds	r3, #1
 80142de:	b29a      	uxth	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d00b      	beq.n	8014306 <tcp_process_refused_data+0xb2>
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6918      	ldr	r0, [r3, #16]
 80142f8:	2300      	movs	r3, #0
 80142fa:	2200      	movs	r2, #0
 80142fc:	6879      	ldr	r1, [r7, #4]
 80142fe:	47a0      	blx	r4
 8014300:	4603      	mov	r3, r0
 8014302:	73fb      	strb	r3, [r7, #15]
 8014304:	e001      	b.n	801430a <tcp_process_refused_data+0xb6>
 8014306:	2300      	movs	r3, #0
 8014308:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801430e:	f113 0f0d 	cmn.w	r3, #13
 8014312:	d110      	bne.n	8014336 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014314:	f06f 030c 	mvn.w	r3, #12
 8014318:	e00e      	b.n	8014338 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801431a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801431e:	f113 0f0d 	cmn.w	r3, #13
 8014322:	d102      	bne.n	801432a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014324:	f06f 030c 	mvn.w	r3, #12
 8014328:	e006      	b.n	8014338 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	68ba      	ldr	r2, [r7, #8]
 801432e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014330:	f06f 0304 	mvn.w	r3, #4
 8014334:	e000      	b.n	8014338 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014336:	2300      	movs	r3, #0
}
 8014338:	4618      	mov	r0, r3
 801433a:	3714      	adds	r7, #20
 801433c:	46bd      	mov	sp, r7
 801433e:	bd90      	pop	{r4, r7, pc}
 8014340:	08020c38 	.word	0x08020c38
 8014344:	08021148 	.word	0x08021148
 8014348:	08020c7c 	.word	0x08020c7c

0801434c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014354:	e007      	b.n	8014366 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 f80a 	bl	8014376 <tcp_seg_free>
    seg = next;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d1f4      	bne.n	8014356 <tcp_segs_free+0xa>
  }
}
 801436c:	bf00      	nop
 801436e:	bf00      	nop
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b082      	sub	sp, #8
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00c      	beq.n	801439e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d004      	beq.n	8014396 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	4618      	mov	r0, r3
 8014392:	f7fe fb6d 	bl	8012a70 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014396:	6879      	ldr	r1, [r7, #4]
 8014398:	2003      	movs	r0, #3
 801439a:	f7fd fcc5 	bl	8011d28 <memp_free>
  }
}
 801439e:	bf00      	nop
 80143a0:	3708      	adds	r7, #8
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
	...

080143a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d106      	bne.n	80143c4 <tcp_seg_copy+0x1c>
 80143b6:	4b0f      	ldr	r3, [pc, #60]	; (80143f4 <tcp_seg_copy+0x4c>)
 80143b8:	f240 6282 	movw	r2, #1666	; 0x682
 80143bc:	490e      	ldr	r1, [pc, #56]	; (80143f8 <tcp_seg_copy+0x50>)
 80143be:	480f      	ldr	r0, [pc, #60]	; (80143fc <tcp_seg_copy+0x54>)
 80143c0:	f008 fe84 	bl	801d0cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80143c4:	2003      	movs	r0, #3
 80143c6:	f7fd fc39 	bl	8011c3c <memp_malloc>
 80143ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d101      	bne.n	80143d6 <tcp_seg_copy+0x2e>
    return NULL;
 80143d2:	2300      	movs	r3, #0
 80143d4:	e00a      	b.n	80143ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80143d6:	2210      	movs	r2, #16
 80143d8:	6879      	ldr	r1, [r7, #4]
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	f009 f8f7 	bl	801d5ce <memcpy>
  pbuf_ref(cseg->p);
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7fe fbe9 	bl	8012bbc <pbuf_ref>
  return cseg;
 80143ea:	68fb      	ldr	r3, [r7, #12]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	08020c38 	.word	0x08020c38
 80143f8:	0802118c 	.word	0x0802118c
 80143fc:	08020c7c 	.word	0x08020c7c

08014400 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d109      	bne.n	8014428 <tcp_recv_null+0x28>
 8014414:	4b12      	ldr	r3, [pc, #72]	; (8014460 <tcp_recv_null+0x60>)
 8014416:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801441a:	4912      	ldr	r1, [pc, #72]	; (8014464 <tcp_recv_null+0x64>)
 801441c:	4812      	ldr	r0, [pc, #72]	; (8014468 <tcp_recv_null+0x68>)
 801441e:	f008 fe55 	bl	801d0cc <iprintf>
 8014422:	f06f 030f 	mvn.w	r3, #15
 8014426:	e016      	b.n	8014456 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d009      	beq.n	8014442 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	891b      	ldrh	r3, [r3, #8]
 8014432:	4619      	mov	r1, r3
 8014434:	68b8      	ldr	r0, [r7, #8]
 8014436:	f7ff fad3 	bl	80139e0 <tcp_recved>
    pbuf_free(p);
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f7fe fb18 	bl	8012a70 <pbuf_free>
 8014440:	e008      	b.n	8014454 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d104      	bne.n	8014454 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801444a:	68b8      	ldr	r0, [r7, #8]
 801444c:	f7fe ffba 	bl	80133c4 <tcp_close>
 8014450:	4603      	mov	r3, r0
 8014452:	e000      	b.n	8014456 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014454:	2300      	movs	r3, #0
}
 8014456:	4618      	mov	r0, r3
 8014458:	3710      	adds	r7, #16
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	08020c38 	.word	0x08020c38
 8014464:	080211a8 	.word	0x080211a8
 8014468:	08020c7c 	.word	0x08020c7c

0801446c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	4603      	mov	r3, r0
 8014474:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801447a:	2b00      	cmp	r3, #0
 801447c:	db01      	blt.n	8014482 <tcp_kill_prio+0x16>
 801447e:	79fb      	ldrb	r3, [r7, #7]
 8014480:	e000      	b.n	8014484 <tcp_kill_prio+0x18>
 8014482:	237f      	movs	r3, #127	; 0x7f
 8014484:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014486:	7afb      	ldrb	r3, [r7, #11]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d034      	beq.n	80144f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801448c:	7afb      	ldrb	r3, [r7, #11]
 801448e:	3b01      	subs	r3, #1
 8014490:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014492:	2300      	movs	r3, #0
 8014494:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014496:	2300      	movs	r3, #0
 8014498:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801449a:	4b19      	ldr	r3, [pc, #100]	; (8014500 <tcp_kill_prio+0x94>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	617b      	str	r3, [r7, #20]
 80144a0:	e01f      	b.n	80144e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	7d5b      	ldrb	r3, [r3, #21]
 80144a6:	7afa      	ldrb	r2, [r7, #11]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d80c      	bhi.n	80144c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80144b0:	7afa      	ldrb	r2, [r7, #11]
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d112      	bne.n	80144dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80144b6:	4b13      	ldr	r3, [pc, #76]	; (8014504 <tcp_kill_prio+0x98>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	6a1b      	ldr	r3, [r3, #32]
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	68fa      	ldr	r2, [r7, #12]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d80a      	bhi.n	80144dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80144c6:	4b0f      	ldr	r3, [pc, #60]	; (8014504 <tcp_kill_prio+0x98>)
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	6a1b      	ldr	r3, [r3, #32]
 80144ce:	1ad3      	subs	r3, r2, r3
 80144d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	7d5b      	ldrb	r3, [r3, #21]
 80144da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	68db      	ldr	r3, [r3, #12]
 80144e0:	617b      	str	r3, [r7, #20]
 80144e2:	697b      	ldr	r3, [r7, #20]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d1dc      	bne.n	80144a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d004      	beq.n	80144f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80144ee:	6938      	ldr	r0, [r7, #16]
 80144f0:	f7ff f8ae 	bl	8013650 <tcp_abort>
 80144f4:	e000      	b.n	80144f8 <tcp_kill_prio+0x8c>
    return;
 80144f6:	bf00      	nop
  }
}
 80144f8:	3718      	adds	r7, #24
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	200133f0 	.word	0x200133f0
 8014504:	200133e4 	.word	0x200133e4

08014508 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b086      	sub	sp, #24
 801450c:	af00      	add	r7, sp, #0
 801450e:	4603      	mov	r3, r0
 8014510:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014512:	79fb      	ldrb	r3, [r7, #7]
 8014514:	2b08      	cmp	r3, #8
 8014516:	d009      	beq.n	801452c <tcp_kill_state+0x24>
 8014518:	79fb      	ldrb	r3, [r7, #7]
 801451a:	2b09      	cmp	r3, #9
 801451c:	d006      	beq.n	801452c <tcp_kill_state+0x24>
 801451e:	4b1a      	ldr	r3, [pc, #104]	; (8014588 <tcp_kill_state+0x80>)
 8014520:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014524:	4919      	ldr	r1, [pc, #100]	; (801458c <tcp_kill_state+0x84>)
 8014526:	481a      	ldr	r0, [pc, #104]	; (8014590 <tcp_kill_state+0x88>)
 8014528:	f008 fdd0 	bl	801d0cc <iprintf>

  inactivity = 0;
 801452c:	2300      	movs	r3, #0
 801452e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014530:	2300      	movs	r3, #0
 8014532:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014534:	4b17      	ldr	r3, [pc, #92]	; (8014594 <tcp_kill_state+0x8c>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	617b      	str	r3, [r7, #20]
 801453a:	e017      	b.n	801456c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	7d1b      	ldrb	r3, [r3, #20]
 8014540:	79fa      	ldrb	r2, [r7, #7]
 8014542:	429a      	cmp	r2, r3
 8014544:	d10f      	bne.n	8014566 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014546:	4b14      	ldr	r3, [pc, #80]	; (8014598 <tcp_kill_state+0x90>)
 8014548:	681a      	ldr	r2, [r3, #0]
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	6a1b      	ldr	r3, [r3, #32]
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	68fa      	ldr	r2, [r7, #12]
 8014552:	429a      	cmp	r2, r3
 8014554:	d807      	bhi.n	8014566 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014556:	4b10      	ldr	r3, [pc, #64]	; (8014598 <tcp_kill_state+0x90>)
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	6a1b      	ldr	r3, [r3, #32]
 801455e:	1ad3      	subs	r3, r2, r3
 8014560:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	68db      	ldr	r3, [r3, #12]
 801456a:	617b      	str	r3, [r7, #20]
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d1e4      	bne.n	801453c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d003      	beq.n	8014580 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014578:	2100      	movs	r1, #0
 801457a:	6938      	ldr	r0, [r7, #16]
 801457c:	f7fe ffaa 	bl	80134d4 <tcp_abandon>
  }
}
 8014580:	bf00      	nop
 8014582:	3718      	adds	r7, #24
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	08020c38 	.word	0x08020c38
 801458c:	080211c4 	.word	0x080211c4
 8014590:	08020c7c 	.word	0x08020c7c
 8014594:	200133f0 	.word	0x200133f0
 8014598:	200133e4 	.word	0x200133e4

0801459c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80145a6:	2300      	movs	r3, #0
 80145a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80145aa:	4b12      	ldr	r3, [pc, #72]	; (80145f4 <tcp_kill_timewait+0x58>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	60fb      	str	r3, [r7, #12]
 80145b0:	e012      	b.n	80145d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80145b2:	4b11      	ldr	r3, [pc, #68]	; (80145f8 <tcp_kill_timewait+0x5c>)
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	6a1b      	ldr	r3, [r3, #32]
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d807      	bhi.n	80145d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80145c2:	4b0d      	ldr	r3, [pc, #52]	; (80145f8 <tcp_kill_timewait+0x5c>)
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	6a1b      	ldr	r3, [r3, #32]
 80145ca:	1ad3      	subs	r3, r2, r3
 80145cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	68db      	ldr	r3, [r3, #12]
 80145d6:	60fb      	str	r3, [r7, #12]
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d1e9      	bne.n	80145b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d002      	beq.n	80145ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80145e4:	68b8      	ldr	r0, [r7, #8]
 80145e6:	f7ff f833 	bl	8013650 <tcp_abort>
  }
}
 80145ea:	bf00      	nop
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	200133f4 	.word	0x200133f4
 80145f8:	200133e4 	.word	0x200133e4

080145fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b082      	sub	sp, #8
 8014600:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014602:	4b10      	ldr	r3, [pc, #64]	; (8014644 <tcp_handle_closepend+0x48>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014608:	e014      	b.n	8014634 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	68db      	ldr	r3, [r3, #12]
 801460e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	8b5b      	ldrh	r3, [r3, #26]
 8014614:	f003 0308 	and.w	r3, r3, #8
 8014618:	2b00      	cmp	r3, #0
 801461a:	d009      	beq.n	8014630 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	8b5b      	ldrh	r3, [r3, #26]
 8014620:	f023 0308 	bic.w	r3, r3, #8
 8014624:	b29a      	uxth	r2, r3
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7fe fe60 	bl	80132f0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d1e7      	bne.n	801460a <tcp_handle_closepend+0xe>
  }
}
 801463a:	bf00      	nop
 801463c:	bf00      	nop
 801463e:	3708      	adds	r7, #8
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}
 8014644:	200133f0 	.word	0x200133f0

08014648 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b084      	sub	sp, #16
 801464c:	af00      	add	r7, sp, #0
 801464e:	4603      	mov	r3, r0
 8014650:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014652:	2001      	movs	r0, #1
 8014654:	f7fd faf2 	bl	8011c3c <memp_malloc>
 8014658:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d126      	bne.n	80146ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014660:	f7ff ffcc 	bl	80145fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014664:	f7ff ff9a 	bl	801459c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014668:	2001      	movs	r0, #1
 801466a:	f7fd fae7 	bl	8011c3c <memp_malloc>
 801466e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d11b      	bne.n	80146ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014676:	2009      	movs	r0, #9
 8014678:	f7ff ff46 	bl	8014508 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801467c:	2001      	movs	r0, #1
 801467e:	f7fd fadd 	bl	8011c3c <memp_malloc>
 8014682:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d111      	bne.n	80146ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801468a:	2008      	movs	r0, #8
 801468c:	f7ff ff3c 	bl	8014508 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014690:	2001      	movs	r0, #1
 8014692:	f7fd fad3 	bl	8011c3c <memp_malloc>
 8014696:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d107      	bne.n	80146ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801469e:	79fb      	ldrb	r3, [r7, #7]
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7ff fee3 	bl	801446c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80146a6:	2001      	movs	r0, #1
 80146a8:	f7fd fac8 	bl	8011c3c <memp_malloc>
 80146ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d03f      	beq.n	8014734 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80146b4:	229c      	movs	r2, #156	; 0x9c
 80146b6:	2100      	movs	r1, #0
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f008 fe97 	bl	801d3ec <memset>
    pcb->prio = prio;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	79fa      	ldrb	r2, [r7, #7]
 80146c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80146ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80146d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	22ff      	movs	r2, #255	; 0xff
 80146e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80146ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2206      	movs	r2, #6
 80146f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2206      	movs	r2, #6
 80146f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014700:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	2201      	movs	r2, #1
 8014706:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801470a:	4b0d      	ldr	r3, [pc, #52]	; (8014740 <tcp_alloc+0xf8>)
 801470c:	681a      	ldr	r2, [r3, #0]
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014712:	4b0c      	ldr	r3, [pc, #48]	; (8014744 <tcp_alloc+0xfc>)
 8014714:	781a      	ldrb	r2, [r3, #0]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014720:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	4a08      	ldr	r2, [pc, #32]	; (8014748 <tcp_alloc+0x100>)
 8014728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	4a07      	ldr	r2, [pc, #28]	; (801474c <tcp_alloc+0x104>)
 8014730:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014734:	68fb      	ldr	r3, [r7, #12]
}
 8014736:	4618      	mov	r0, r3
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	200133e4 	.word	0x200133e4
 8014744:	200133fa 	.word	0x200133fa
 8014748:	08014401 	.word	0x08014401
 801474c:	006ddd00 	.word	0x006ddd00

08014750 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	4603      	mov	r3, r0
 8014758:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801475a:	2040      	movs	r0, #64	; 0x40
 801475c:	f7ff ff74 	bl	8014648 <tcp_alloc>
 8014760:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014762:	68fb      	ldr	r3, [r7, #12]
}
 8014764:	4618      	mov	r0, r3
 8014766:	3710      	adds	r7, #16
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d002      	beq.n	8014782 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	683a      	ldr	r2, [r7, #0]
 8014780:	611a      	str	r2, [r3, #16]
  }
}
 8014782:	bf00      	nop
 8014784:	370c      	adds	r7, #12
 8014786:	46bd      	mov	sp, r7
 8014788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478c:	4770      	bx	lr
	...

08014790 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d00e      	beq.n	80147be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	7d1b      	ldrb	r3, [r3, #20]
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d106      	bne.n	80147b6 <tcp_recv+0x26>
 80147a8:	4b07      	ldr	r3, [pc, #28]	; (80147c8 <tcp_recv+0x38>)
 80147aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80147ae:	4907      	ldr	r1, [pc, #28]	; (80147cc <tcp_recv+0x3c>)
 80147b0:	4807      	ldr	r0, [pc, #28]	; (80147d0 <tcp_recv+0x40>)
 80147b2:	f008 fc8b 	bl	801d0cc <iprintf>
    pcb->recv = recv;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	683a      	ldr	r2, [r7, #0]
 80147ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80147be:	bf00      	nop
 80147c0:	3708      	adds	r7, #8
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	08020c38 	.word	0x08020c38
 80147cc:	080211d4 	.word	0x080211d4
 80147d0:	08020c7c 	.word	0x08020c7c

080147d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d00e      	beq.n	8014802 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	7d1b      	ldrb	r3, [r3, #20]
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d106      	bne.n	80147fa <tcp_sent+0x26>
 80147ec:	4b07      	ldr	r3, [pc, #28]	; (801480c <tcp_sent+0x38>)
 80147ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80147f2:	4907      	ldr	r1, [pc, #28]	; (8014810 <tcp_sent+0x3c>)
 80147f4:	4807      	ldr	r0, [pc, #28]	; (8014814 <tcp_sent+0x40>)
 80147f6:	f008 fc69 	bl	801d0cc <iprintf>
    pcb->sent = sent;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	683a      	ldr	r2, [r7, #0]
 80147fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014802:	bf00      	nop
 8014804:	3708      	adds	r7, #8
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	08020c38 	.word	0x08020c38
 8014810:	080211fc 	.word	0x080211fc
 8014814:	08020c7c 	.word	0x08020c7c

08014818 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d00e      	beq.n	8014846 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	7d1b      	ldrb	r3, [r3, #20]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d106      	bne.n	801483e <tcp_err+0x26>
 8014830:	4b07      	ldr	r3, [pc, #28]	; (8014850 <tcp_err+0x38>)
 8014832:	f640 020d 	movw	r2, #2061	; 0x80d
 8014836:	4907      	ldr	r1, [pc, #28]	; (8014854 <tcp_err+0x3c>)
 8014838:	4807      	ldr	r0, [pc, #28]	; (8014858 <tcp_err+0x40>)
 801483a:	f008 fc47 	bl	801d0cc <iprintf>
    pcb->errf = err;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	683a      	ldr	r2, [r7, #0]
 8014842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014846:	bf00      	nop
 8014848:	3708      	adds	r7, #8
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}
 801484e:	bf00      	nop
 8014850:	08020c38 	.word	0x08020c38
 8014854:	08021224 	.word	0x08021224
 8014858:	08020c7c 	.word	0x08020c7c

0801485c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801485c:	b480      	push	{r7}
 801485e:	b085      	sub	sp, #20
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d008      	beq.n	801487e <tcp_accept+0x22>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	7d1b      	ldrb	r3, [r3, #20]
 8014870:	2b01      	cmp	r3, #1
 8014872:	d104      	bne.n	801487e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	683a      	ldr	r2, [r7, #0]
 801487c:	619a      	str	r2, [r3, #24]
  }
}
 801487e:	bf00      	nop
 8014880:	3714      	adds	r7, #20
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
	...

0801488c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	4613      	mov	r3, r2
 8014898:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d107      	bne.n	80148b0 <tcp_poll+0x24>
 80148a0:	4b0e      	ldr	r3, [pc, #56]	; (80148dc <tcp_poll+0x50>)
 80148a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80148a6:	490e      	ldr	r1, [pc, #56]	; (80148e0 <tcp_poll+0x54>)
 80148a8:	480e      	ldr	r0, [pc, #56]	; (80148e4 <tcp_poll+0x58>)
 80148aa:	f008 fc0f 	bl	801d0cc <iprintf>
 80148ae:	e011      	b.n	80148d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	7d1b      	ldrb	r3, [r3, #20]
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d106      	bne.n	80148c6 <tcp_poll+0x3a>
 80148b8:	4b08      	ldr	r3, [pc, #32]	; (80148dc <tcp_poll+0x50>)
 80148ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80148be:	490a      	ldr	r1, [pc, #40]	; (80148e8 <tcp_poll+0x5c>)
 80148c0:	4808      	ldr	r0, [pc, #32]	; (80148e4 <tcp_poll+0x58>)
 80148c2:	f008 fc03 	bl	801d0cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	68ba      	ldr	r2, [r7, #8]
 80148ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	79fa      	ldrb	r2, [r7, #7]
 80148d2:	775a      	strb	r2, [r3, #29]
}
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	08020c38 	.word	0x08020c38
 80148e0:	0802124c 	.word	0x0802124c
 80148e4:	08020c7c 	.word	0x08020c7c
 80148e8:	08021264 	.word	0x08021264

080148ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d107      	bne.n	801490a <tcp_pcb_purge+0x1e>
 80148fa:	4b21      	ldr	r3, [pc, #132]	; (8014980 <tcp_pcb_purge+0x94>)
 80148fc:	f640 0251 	movw	r2, #2129	; 0x851
 8014900:	4920      	ldr	r1, [pc, #128]	; (8014984 <tcp_pcb_purge+0x98>)
 8014902:	4821      	ldr	r0, [pc, #132]	; (8014988 <tcp_pcb_purge+0x9c>)
 8014904:	f008 fbe2 	bl	801d0cc <iprintf>
 8014908:	e037      	b.n	801497a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	7d1b      	ldrb	r3, [r3, #20]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d033      	beq.n	801497a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014916:	2b0a      	cmp	r3, #10
 8014918:	d02f      	beq.n	801497a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801491e:	2b01      	cmp	r3, #1
 8014920:	d02b      	beq.n	801497a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014926:	2b00      	cmp	r3, #0
 8014928:	d007      	beq.n	801493a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801492e:	4618      	mov	r0, r3
 8014930:	f7fe f89e 	bl	8012a70 <pbuf_free>
      pcb->refused_data = NULL;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2200      	movs	r2, #0
 8014938:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801493e:	2b00      	cmp	r3, #0
 8014940:	d002      	beq.n	8014948 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f000 f986 	bl	8014c54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801494e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014954:	4618      	mov	r0, r3
 8014956:	f7ff fcf9 	bl	801434c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801495e:	4618      	mov	r0, r3
 8014960:	f7ff fcf4 	bl	801434c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2200      	movs	r2, #0
 8014968:	66da      	str	r2, [r3, #108]	; 0x6c
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	2200      	movs	r2, #0
 8014976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	08020c38 	.word	0x08020c38
 8014984:	08021284 	.word	0x08021284
 8014988:	08020c7c 	.word	0x08020c7c

0801498c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d106      	bne.n	80149aa <tcp_pcb_remove+0x1e>
 801499c:	4b3e      	ldr	r3, [pc, #248]	; (8014a98 <tcp_pcb_remove+0x10c>)
 801499e:	f640 0283 	movw	r2, #2179	; 0x883
 80149a2:	493e      	ldr	r1, [pc, #248]	; (8014a9c <tcp_pcb_remove+0x110>)
 80149a4:	483e      	ldr	r0, [pc, #248]	; (8014aa0 <tcp_pcb_remove+0x114>)
 80149a6:	f008 fb91 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d106      	bne.n	80149be <tcp_pcb_remove+0x32>
 80149b0:	4b39      	ldr	r3, [pc, #228]	; (8014a98 <tcp_pcb_remove+0x10c>)
 80149b2:	f640 0284 	movw	r2, #2180	; 0x884
 80149b6:	493b      	ldr	r1, [pc, #236]	; (8014aa4 <tcp_pcb_remove+0x118>)
 80149b8:	4839      	ldr	r0, [pc, #228]	; (8014aa0 <tcp_pcb_remove+0x114>)
 80149ba:	f008 fb87 	bl	801d0cc <iprintf>

  TCP_RMV(pcblist, pcb);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	683a      	ldr	r2, [r7, #0]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d105      	bne.n	80149d4 <tcp_pcb_remove+0x48>
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	68da      	ldr	r2, [r3, #12]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	601a      	str	r2, [r3, #0]
 80149d2:	e013      	b.n	80149fc <tcp_pcb_remove+0x70>
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	60fb      	str	r3, [r7, #12]
 80149da:	e00c      	b.n	80149f6 <tcp_pcb_remove+0x6a>
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	683a      	ldr	r2, [r7, #0]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d104      	bne.n	80149f0 <tcp_pcb_remove+0x64>
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	68da      	ldr	r2, [r3, #12]
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	60da      	str	r2, [r3, #12]
 80149ee:	e005      	b.n	80149fc <tcp_pcb_remove+0x70>
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	60fb      	str	r3, [r7, #12]
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d1ef      	bne.n	80149dc <tcp_pcb_remove+0x50>
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	2200      	movs	r2, #0
 8014a00:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014a02:	6838      	ldr	r0, [r7, #0]
 8014a04:	f7ff ff72 	bl	80148ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	7d1b      	ldrb	r3, [r3, #20]
 8014a0c:	2b0a      	cmp	r3, #10
 8014a0e:	d013      	beq.n	8014a38 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d00f      	beq.n	8014a38 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	8b5b      	ldrh	r3, [r3, #26]
 8014a1c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d009      	beq.n	8014a38 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	8b5b      	ldrh	r3, [r3, #26]
 8014a28:	f043 0302 	orr.w	r3, r3, #2
 8014a2c:	b29a      	uxth	r2, r3
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014a32:	6838      	ldr	r0, [r7, #0]
 8014a34:	f003 fbc6 	bl	80181c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d020      	beq.n	8014a82 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d006      	beq.n	8014a56 <tcp_pcb_remove+0xca>
 8014a48:	4b13      	ldr	r3, [pc, #76]	; (8014a98 <tcp_pcb_remove+0x10c>)
 8014a4a:	f640 0293 	movw	r2, #2195	; 0x893
 8014a4e:	4916      	ldr	r1, [pc, #88]	; (8014aa8 <tcp_pcb_remove+0x11c>)
 8014a50:	4813      	ldr	r0, [pc, #76]	; (8014aa0 <tcp_pcb_remove+0x114>)
 8014a52:	f008 fb3b 	bl	801d0cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d006      	beq.n	8014a6c <tcp_pcb_remove+0xe0>
 8014a5e:	4b0e      	ldr	r3, [pc, #56]	; (8014a98 <tcp_pcb_remove+0x10c>)
 8014a60:	f640 0294 	movw	r2, #2196	; 0x894
 8014a64:	4911      	ldr	r1, [pc, #68]	; (8014aac <tcp_pcb_remove+0x120>)
 8014a66:	480e      	ldr	r0, [pc, #56]	; (8014aa0 <tcp_pcb_remove+0x114>)
 8014a68:	f008 fb30 	bl	801d0cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d006      	beq.n	8014a82 <tcp_pcb_remove+0xf6>
 8014a74:	4b08      	ldr	r3, [pc, #32]	; (8014a98 <tcp_pcb_remove+0x10c>)
 8014a76:	f640 0296 	movw	r2, #2198	; 0x896
 8014a7a:	490d      	ldr	r1, [pc, #52]	; (8014ab0 <tcp_pcb_remove+0x124>)
 8014a7c:	4808      	ldr	r0, [pc, #32]	; (8014aa0 <tcp_pcb_remove+0x114>)
 8014a7e:	f008 fb25 	bl	801d0cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	2200      	movs	r2, #0
 8014a86:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014a8e:	bf00      	nop
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	08020c38 	.word	0x08020c38
 8014a9c:	080212a0 	.word	0x080212a0
 8014aa0:	08020c7c 	.word	0x08020c7c
 8014aa4:	080212bc 	.word	0x080212bc
 8014aa8:	080212dc 	.word	0x080212dc
 8014aac:	080212f4 	.word	0x080212f4
 8014ab0:	08021310 	.word	0x08021310

08014ab4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d106      	bne.n	8014ad0 <tcp_next_iss+0x1c>
 8014ac2:	4b0a      	ldr	r3, [pc, #40]	; (8014aec <tcp_next_iss+0x38>)
 8014ac4:	f640 02af 	movw	r2, #2223	; 0x8af
 8014ac8:	4909      	ldr	r1, [pc, #36]	; (8014af0 <tcp_next_iss+0x3c>)
 8014aca:	480a      	ldr	r0, [pc, #40]	; (8014af4 <tcp_next_iss+0x40>)
 8014acc:	f008 fafe 	bl	801d0cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014ad0:	4b09      	ldr	r3, [pc, #36]	; (8014af8 <tcp_next_iss+0x44>)
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	4b09      	ldr	r3, [pc, #36]	; (8014afc <tcp_next_iss+0x48>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	4413      	add	r3, r2
 8014ada:	4a07      	ldr	r2, [pc, #28]	; (8014af8 <tcp_next_iss+0x44>)
 8014adc:	6013      	str	r3, [r2, #0]
  return iss;
 8014ade:	4b06      	ldr	r3, [pc, #24]	; (8014af8 <tcp_next_iss+0x44>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3708      	adds	r7, #8
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	08020c38 	.word	0x08020c38
 8014af0:	08021328 	.word	0x08021328
 8014af4:	08020c7c 	.word	0x08020c7c
 8014af8:	20000028 	.word	0x20000028
 8014afc:	200133e4 	.word	0x200133e4

08014b00 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b086      	sub	sp, #24
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	4603      	mov	r3, r0
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
 8014b0c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d106      	bne.n	8014b22 <tcp_eff_send_mss_netif+0x22>
 8014b14:	4b14      	ldr	r3, [pc, #80]	; (8014b68 <tcp_eff_send_mss_netif+0x68>)
 8014b16:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014b1a:	4914      	ldr	r1, [pc, #80]	; (8014b6c <tcp_eff_send_mss_netif+0x6c>)
 8014b1c:	4814      	ldr	r0, [pc, #80]	; (8014b70 <tcp_eff_send_mss_netif+0x70>)
 8014b1e:	f008 fad5 	bl	801d0cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d101      	bne.n	8014b2c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014b28:	89fb      	ldrh	r3, [r7, #14]
 8014b2a:	e019      	b.n	8014b60 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014b32:	8afb      	ldrh	r3, [r7, #22]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d012      	beq.n	8014b5e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014b38:	2328      	movs	r3, #40	; 0x28
 8014b3a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014b3c:	8afa      	ldrh	r2, [r7, #22]
 8014b3e:	8abb      	ldrh	r3, [r7, #20]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d904      	bls.n	8014b4e <tcp_eff_send_mss_netif+0x4e>
 8014b44:	8afa      	ldrh	r2, [r7, #22]
 8014b46:	8abb      	ldrh	r3, [r7, #20]
 8014b48:	1ad3      	subs	r3, r2, r3
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	e000      	b.n	8014b50 <tcp_eff_send_mss_netif+0x50>
 8014b4e:	2300      	movs	r3, #0
 8014b50:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014b52:	8a7a      	ldrh	r2, [r7, #18]
 8014b54:	89fb      	ldrh	r3, [r7, #14]
 8014b56:	4293      	cmp	r3, r2
 8014b58:	bf28      	it	cs
 8014b5a:	4613      	movcs	r3, r2
 8014b5c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014b5e:	89fb      	ldrh	r3, [r7, #14]
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3718      	adds	r7, #24
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	08020c38 	.word	0x08020c38
 8014b6c:	08021344 	.word	0x08021344
 8014b70:	08020c7c 	.word	0x08020c7c

08014b74 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d119      	bne.n	8014bbc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014b88:	4b10      	ldr	r3, [pc, #64]	; (8014bcc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014b8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014b8e:	4910      	ldr	r1, [pc, #64]	; (8014bd0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014b90:	4810      	ldr	r0, [pc, #64]	; (8014bd4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014b92:	f008 fa9b 	bl	801d0cc <iprintf>

  while (pcb != NULL) {
 8014b96:	e011      	b.n	8014bbc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d108      	bne.n	8014bb6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014baa:	68f8      	ldr	r0, [r7, #12]
 8014bac:	f7fe fd50 	bl	8013650 <tcp_abort>
      pcb = next;
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	60fb      	str	r3, [r7, #12]
 8014bb4:	e002      	b.n	8014bbc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d1ea      	bne.n	8014b98 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014bc2:	bf00      	nop
 8014bc4:	bf00      	nop
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	08020c38 	.word	0x08020c38
 8014bd0:	0802136c 	.word	0x0802136c
 8014bd4:	08020c7c 	.word	0x08020c7c

08014bd8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d02a      	beq.n	8014c3e <tcp_netif_ip_addr_changed+0x66>
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d026      	beq.n	8014c3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014bf0:	4b15      	ldr	r3, [pc, #84]	; (8014c48 <tcp_netif_ip_addr_changed+0x70>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f7ff ffbc 	bl	8014b74 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014bfc:	4b13      	ldr	r3, [pc, #76]	; (8014c4c <tcp_netif_ip_addr_changed+0x74>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4619      	mov	r1, r3
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7ff ffb6 	bl	8014b74 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d017      	beq.n	8014c3e <tcp_netif_ip_addr_changed+0x66>
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d013      	beq.n	8014c3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014c16:	4b0e      	ldr	r3, [pc, #56]	; (8014c50 <tcp_netif_ip_addr_changed+0x78>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	60fb      	str	r3, [r7, #12]
 8014c1c:	e00c      	b.n	8014c38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d103      	bne.n	8014c32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	68db      	ldr	r3, [r3, #12]
 8014c36:	60fb      	str	r3, [r7, #12]
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d1ef      	bne.n	8014c1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014c3e:	bf00      	nop
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	200133f0 	.word	0x200133f0
 8014c4c:	200133e8 	.word	0x200133e8
 8014c50:	200133ec 	.word	0x200133ec

08014c54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d007      	beq.n	8014c74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7ff fb6f 	bl	801434c <tcp_segs_free>
    pcb->ooseq = NULL;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2200      	movs	r2, #0
 8014c72:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014c7c:	b590      	push	{r4, r7, lr}
 8014c7e:	b08d      	sub	sp, #52	; 0x34
 8014c80:	af04      	add	r7, sp, #16
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d105      	bne.n	8014c98 <tcp_input+0x1c>
 8014c8c:	4b9b      	ldr	r3, [pc, #620]	; (8014efc <tcp_input+0x280>)
 8014c8e:	2283      	movs	r2, #131	; 0x83
 8014c90:	499b      	ldr	r1, [pc, #620]	; (8014f00 <tcp_input+0x284>)
 8014c92:	489c      	ldr	r0, [pc, #624]	; (8014f04 <tcp_input+0x288>)
 8014c94:	f008 fa1a 	bl	801d0cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	4a9a      	ldr	r2, [pc, #616]	; (8014f08 <tcp_input+0x28c>)
 8014c9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	895b      	ldrh	r3, [r3, #10]
 8014ca4:	2b13      	cmp	r3, #19
 8014ca6:	f240 83d1 	bls.w	801544c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014caa:	4b98      	ldr	r3, [pc, #608]	; (8014f0c <tcp_input+0x290>)
 8014cac:	695b      	ldr	r3, [r3, #20]
 8014cae:	4a97      	ldr	r2, [pc, #604]	; (8014f0c <tcp_input+0x290>)
 8014cb0:	6812      	ldr	r2, [r2, #0]
 8014cb2:	4611      	mov	r1, r2
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f006 f9e5 	bl	801b084 <ip4_addr_isbroadcast_u32>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	f040 83c7 	bne.w	8015450 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014cc2:	4b92      	ldr	r3, [pc, #584]	; (8014f0c <tcp_input+0x290>)
 8014cc4:	695b      	ldr	r3, [r3, #20]
 8014cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014cca:	2be0      	cmp	r3, #224	; 0xe0
 8014ccc:	f000 83c0 	beq.w	8015450 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014cd0:	4b8d      	ldr	r3, [pc, #564]	; (8014f08 <tcp_input+0x28c>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	899b      	ldrh	r3, [r3, #12]
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7fc fad7 	bl	801128c <lwip_htons>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	0b1b      	lsrs	r3, r3, #12
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014cea:	7cbb      	ldrb	r3, [r7, #18]
 8014cec:	2b13      	cmp	r3, #19
 8014cee:	f240 83b1 	bls.w	8015454 <tcp_input+0x7d8>
 8014cf2:	7cbb      	ldrb	r3, [r7, #18]
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	891b      	ldrh	r3, [r3, #8]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	f200 83aa 	bhi.w	8015454 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014d00:	7cbb      	ldrb	r3, [r7, #18]
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	3b14      	subs	r3, #20
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	4b81      	ldr	r3, [pc, #516]	; (8014f10 <tcp_input+0x294>)
 8014d0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014d0c:	4b81      	ldr	r3, [pc, #516]	; (8014f14 <tcp_input+0x298>)
 8014d0e:	2200      	movs	r2, #0
 8014d10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	895a      	ldrh	r2, [r3, #10]
 8014d16:	7cbb      	ldrb	r3, [r7, #18]
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d309      	bcc.n	8014d32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014d1e:	4b7c      	ldr	r3, [pc, #496]	; (8014f10 <tcp_input+0x294>)
 8014d20:	881a      	ldrh	r2, [r3, #0]
 8014d22:	4b7d      	ldr	r3, [pc, #500]	; (8014f18 <tcp_input+0x29c>)
 8014d24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014d26:	7cbb      	ldrb	r3, [r7, #18]
 8014d28:	4619      	mov	r1, r3
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f7fd fe1a 	bl	8012964 <pbuf_remove_header>
 8014d30:	e04e      	b.n	8014dd0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d105      	bne.n	8014d46 <tcp_input+0xca>
 8014d3a:	4b70      	ldr	r3, [pc, #448]	; (8014efc <tcp_input+0x280>)
 8014d3c:	22c2      	movs	r2, #194	; 0xc2
 8014d3e:	4977      	ldr	r1, [pc, #476]	; (8014f1c <tcp_input+0x2a0>)
 8014d40:	4870      	ldr	r0, [pc, #448]	; (8014f04 <tcp_input+0x288>)
 8014d42:	f008 f9c3 	bl	801d0cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014d46:	2114      	movs	r1, #20
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7fd fe0b 	bl	8012964 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	895a      	ldrh	r2, [r3, #10]
 8014d52:	4b71      	ldr	r3, [pc, #452]	; (8014f18 <tcp_input+0x29c>)
 8014d54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014d56:	4b6e      	ldr	r3, [pc, #440]	; (8014f10 <tcp_input+0x294>)
 8014d58:	881a      	ldrh	r2, [r3, #0]
 8014d5a:	4b6f      	ldr	r3, [pc, #444]	; (8014f18 <tcp_input+0x29c>)
 8014d5c:	881b      	ldrh	r3, [r3, #0]
 8014d5e:	1ad3      	subs	r3, r2, r3
 8014d60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014d62:	4b6d      	ldr	r3, [pc, #436]	; (8014f18 <tcp_input+0x29c>)
 8014d64:	881b      	ldrh	r3, [r3, #0]
 8014d66:	4619      	mov	r1, r3
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f7fd fdfb 	bl	8012964 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	895b      	ldrh	r3, [r3, #10]
 8014d74:	8a3a      	ldrh	r2, [r7, #16]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	f200 836e 	bhi.w	8015458 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	685b      	ldr	r3, [r3, #4]
 8014d82:	4a64      	ldr	r2, [pc, #400]	; (8014f14 <tcp_input+0x298>)
 8014d84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	8a3a      	ldrh	r2, [r7, #16]
 8014d8c:	4611      	mov	r1, r2
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fd fde8 	bl	8012964 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	891a      	ldrh	r2, [r3, #8]
 8014d98:	8a3b      	ldrh	r3, [r7, #16]
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	b29a      	uxth	r2, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	895b      	ldrh	r3, [r3, #10]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d005      	beq.n	8014db6 <tcp_input+0x13a>
 8014daa:	4b54      	ldr	r3, [pc, #336]	; (8014efc <tcp_input+0x280>)
 8014dac:	22df      	movs	r2, #223	; 0xdf
 8014dae:	495c      	ldr	r1, [pc, #368]	; (8014f20 <tcp_input+0x2a4>)
 8014db0:	4854      	ldr	r0, [pc, #336]	; (8014f04 <tcp_input+0x288>)
 8014db2:	f008 f98b 	bl	801d0cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	891a      	ldrh	r2, [r3, #8]
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	891b      	ldrh	r3, [r3, #8]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d005      	beq.n	8014dd0 <tcp_input+0x154>
 8014dc4:	4b4d      	ldr	r3, [pc, #308]	; (8014efc <tcp_input+0x280>)
 8014dc6:	22e0      	movs	r2, #224	; 0xe0
 8014dc8:	4956      	ldr	r1, [pc, #344]	; (8014f24 <tcp_input+0x2a8>)
 8014dca:	484e      	ldr	r0, [pc, #312]	; (8014f04 <tcp_input+0x288>)
 8014dcc:	f008 f97e 	bl	801d0cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014dd0:	4b4d      	ldr	r3, [pc, #308]	; (8014f08 <tcp_input+0x28c>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	4a4b      	ldr	r2, [pc, #300]	; (8014f08 <tcp_input+0x28c>)
 8014dda:	6814      	ldr	r4, [r2, #0]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7fc fa55 	bl	801128c <lwip_htons>
 8014de2:	4603      	mov	r3, r0
 8014de4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014de6:	4b48      	ldr	r3, [pc, #288]	; (8014f08 <tcp_input+0x28c>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	885b      	ldrh	r3, [r3, #2]
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	4a46      	ldr	r2, [pc, #280]	; (8014f08 <tcp_input+0x28c>)
 8014df0:	6814      	ldr	r4, [r2, #0]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fc fa4a 	bl	801128c <lwip_htons>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014dfc:	4b42      	ldr	r3, [pc, #264]	; (8014f08 <tcp_input+0x28c>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	4a41      	ldr	r2, [pc, #260]	; (8014f08 <tcp_input+0x28c>)
 8014e04:	6814      	ldr	r4, [r2, #0]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7fc fa55 	bl	80112b6 <lwip_htonl>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	6063      	str	r3, [r4, #4]
 8014e10:	6863      	ldr	r3, [r4, #4]
 8014e12:	4a45      	ldr	r2, [pc, #276]	; (8014f28 <tcp_input+0x2ac>)
 8014e14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014e16:	4b3c      	ldr	r3, [pc, #240]	; (8014f08 <tcp_input+0x28c>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	689b      	ldr	r3, [r3, #8]
 8014e1c:	4a3a      	ldr	r2, [pc, #232]	; (8014f08 <tcp_input+0x28c>)
 8014e1e:	6814      	ldr	r4, [r2, #0]
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7fc fa48 	bl	80112b6 <lwip_htonl>
 8014e26:	4603      	mov	r3, r0
 8014e28:	60a3      	str	r3, [r4, #8]
 8014e2a:	68a3      	ldr	r3, [r4, #8]
 8014e2c:	4a3f      	ldr	r2, [pc, #252]	; (8014f2c <tcp_input+0x2b0>)
 8014e2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014e30:	4b35      	ldr	r3, [pc, #212]	; (8014f08 <tcp_input+0x28c>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	89db      	ldrh	r3, [r3, #14]
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	4a33      	ldr	r2, [pc, #204]	; (8014f08 <tcp_input+0x28c>)
 8014e3a:	6814      	ldr	r4, [r2, #0]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fc fa25 	bl	801128c <lwip_htons>
 8014e42:	4603      	mov	r3, r0
 8014e44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014e46:	4b30      	ldr	r3, [pc, #192]	; (8014f08 <tcp_input+0x28c>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	899b      	ldrh	r3, [r3, #12]
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7fc fa1c 	bl	801128c <lwip_htons>
 8014e54:	4603      	mov	r3, r0
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014e5c:	b2da      	uxtb	r2, r3
 8014e5e:	4b34      	ldr	r3, [pc, #208]	; (8014f30 <tcp_input+0x2b4>)
 8014e60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	891a      	ldrh	r2, [r3, #8]
 8014e66:	4b33      	ldr	r3, [pc, #204]	; (8014f34 <tcp_input+0x2b8>)
 8014e68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014e6a:	4b31      	ldr	r3, [pc, #196]	; (8014f30 <tcp_input+0x2b4>)
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	f003 0303 	and.w	r3, r3, #3
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d00c      	beq.n	8014e90 <tcp_input+0x214>
    tcplen++;
 8014e76:	4b2f      	ldr	r3, [pc, #188]	; (8014f34 <tcp_input+0x2b8>)
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	4b2d      	ldr	r3, [pc, #180]	; (8014f34 <tcp_input+0x2b8>)
 8014e80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	891a      	ldrh	r2, [r3, #8]
 8014e86:	4b2b      	ldr	r3, [pc, #172]	; (8014f34 <tcp_input+0x2b8>)
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	f200 82e6 	bhi.w	801545c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014e90:	2300      	movs	r3, #0
 8014e92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014e94:	4b28      	ldr	r3, [pc, #160]	; (8014f38 <tcp_input+0x2bc>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	61fb      	str	r3, [r7, #28]
 8014e9a:	e09d      	b.n	8014fd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d105      	bne.n	8014eb0 <tcp_input+0x234>
 8014ea4:	4b15      	ldr	r3, [pc, #84]	; (8014efc <tcp_input+0x280>)
 8014ea6:	22fb      	movs	r2, #251	; 0xfb
 8014ea8:	4924      	ldr	r1, [pc, #144]	; (8014f3c <tcp_input+0x2c0>)
 8014eaa:	4816      	ldr	r0, [pc, #88]	; (8014f04 <tcp_input+0x288>)
 8014eac:	f008 f90e 	bl	801d0cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	7d1b      	ldrb	r3, [r3, #20]
 8014eb4:	2b0a      	cmp	r3, #10
 8014eb6:	d105      	bne.n	8014ec4 <tcp_input+0x248>
 8014eb8:	4b10      	ldr	r3, [pc, #64]	; (8014efc <tcp_input+0x280>)
 8014eba:	22fc      	movs	r2, #252	; 0xfc
 8014ebc:	4920      	ldr	r1, [pc, #128]	; (8014f40 <tcp_input+0x2c4>)
 8014ebe:	4811      	ldr	r0, [pc, #68]	; (8014f04 <tcp_input+0x288>)
 8014ec0:	f008 f904 	bl	801d0cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014ec4:	69fb      	ldr	r3, [r7, #28]
 8014ec6:	7d1b      	ldrb	r3, [r3, #20]
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d105      	bne.n	8014ed8 <tcp_input+0x25c>
 8014ecc:	4b0b      	ldr	r3, [pc, #44]	; (8014efc <tcp_input+0x280>)
 8014ece:	22fd      	movs	r2, #253	; 0xfd
 8014ed0:	491c      	ldr	r1, [pc, #112]	; (8014f44 <tcp_input+0x2c8>)
 8014ed2:	480c      	ldr	r0, [pc, #48]	; (8014f04 <tcp_input+0x288>)
 8014ed4:	f008 f8fa 	bl	801d0cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	7a1b      	ldrb	r3, [r3, #8]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d033      	beq.n	8014f48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014ee0:	69fb      	ldr	r3, [r7, #28]
 8014ee2:	7a1a      	ldrb	r2, [r3, #8]
 8014ee4:	4b09      	ldr	r3, [pc, #36]	; (8014f0c <tcp_input+0x290>)
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014eec:	3301      	adds	r3, #1
 8014eee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014ef0:	429a      	cmp	r2, r3
 8014ef2:	d029      	beq.n	8014f48 <tcp_input+0x2cc>
      prev = pcb;
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	61bb      	str	r3, [r7, #24]
      continue;
 8014ef8:	e06b      	b.n	8014fd2 <tcp_input+0x356>
 8014efa:	bf00      	nop
 8014efc:	080213a0 	.word	0x080213a0
 8014f00:	080213d4 	.word	0x080213d4
 8014f04:	080213ec 	.word	0x080213ec
 8014f08:	2001340c 	.word	0x2001340c
 8014f0c:	2000dad0 	.word	0x2000dad0
 8014f10:	20013410 	.word	0x20013410
 8014f14:	20013414 	.word	0x20013414
 8014f18:	20013412 	.word	0x20013412
 8014f1c:	08021414 	.word	0x08021414
 8014f20:	08021424 	.word	0x08021424
 8014f24:	08021430 	.word	0x08021430
 8014f28:	2001341c 	.word	0x2001341c
 8014f2c:	20013420 	.word	0x20013420
 8014f30:	20013428 	.word	0x20013428
 8014f34:	20013426 	.word	0x20013426
 8014f38:	200133f0 	.word	0x200133f0
 8014f3c:	08021450 	.word	0x08021450
 8014f40:	08021478 	.word	0x08021478
 8014f44:	080214a4 	.word	0x080214a4
    }

    if (pcb->remote_port == tcphdr->src &&
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	8b1a      	ldrh	r2, [r3, #24]
 8014f4c:	4b72      	ldr	r3, [pc, #456]	; (8015118 <tcp_input+0x49c>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	881b      	ldrh	r3, [r3, #0]
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d13a      	bne.n	8014fce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	8ada      	ldrh	r2, [r3, #22]
 8014f5c:	4b6e      	ldr	r3, [pc, #440]	; (8015118 <tcp_input+0x49c>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	885b      	ldrh	r3, [r3, #2]
 8014f62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d132      	bne.n	8014fce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014f68:	69fb      	ldr	r3, [r7, #28]
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	4b6b      	ldr	r3, [pc, #428]	; (801511c <tcp_input+0x4a0>)
 8014f6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d12c      	bne.n	8014fce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014f74:	69fb      	ldr	r3, [r7, #28]
 8014f76:	681a      	ldr	r2, [r3, #0]
 8014f78:	4b68      	ldr	r3, [pc, #416]	; (801511c <tcp_input+0x4a0>)
 8014f7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d126      	bne.n	8014fce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014f80:	69fb      	ldr	r3, [r7, #28]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	69fa      	ldr	r2, [r7, #28]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d106      	bne.n	8014f98 <tcp_input+0x31c>
 8014f8a:	4b65      	ldr	r3, [pc, #404]	; (8015120 <tcp_input+0x4a4>)
 8014f8c:	f240 120d 	movw	r2, #269	; 0x10d
 8014f90:	4964      	ldr	r1, [pc, #400]	; (8015124 <tcp_input+0x4a8>)
 8014f92:	4865      	ldr	r0, [pc, #404]	; (8015128 <tcp_input+0x4ac>)
 8014f94:	f008 f89a 	bl	801d0cc <iprintf>
      if (prev != NULL) {
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00a      	beq.n	8014fb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	68da      	ldr	r2, [r3, #12]
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014fa6:	4b61      	ldr	r3, [pc, #388]	; (801512c <tcp_input+0x4b0>)
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014fae:	4a5f      	ldr	r2, [pc, #380]	; (801512c <tcp_input+0x4b0>)
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	69fa      	ldr	r2, [r7, #28]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d111      	bne.n	8014fe2 <tcp_input+0x366>
 8014fbe:	4b58      	ldr	r3, [pc, #352]	; (8015120 <tcp_input+0x4a4>)
 8014fc0:	f240 1215 	movw	r2, #277	; 0x115
 8014fc4:	495a      	ldr	r1, [pc, #360]	; (8015130 <tcp_input+0x4b4>)
 8014fc6:	4858      	ldr	r0, [pc, #352]	; (8015128 <tcp_input+0x4ac>)
 8014fc8:	f008 f880 	bl	801d0cc <iprintf>
      break;
 8014fcc:	e009      	b.n	8014fe2 <tcp_input+0x366>
    }
    prev = pcb;
 8014fce:	69fb      	ldr	r3, [r7, #28]
 8014fd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fd2:	69fb      	ldr	r3, [r7, #28]
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	61fb      	str	r3, [r7, #28]
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f47f af5e 	bne.w	8014e9c <tcp_input+0x220>
 8014fe0:	e000      	b.n	8014fe4 <tcp_input+0x368>
      break;
 8014fe2:	bf00      	nop
  }

  if (pcb == NULL) {
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	f040 80aa 	bne.w	8015140 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fec:	4b51      	ldr	r3, [pc, #324]	; (8015134 <tcp_input+0x4b8>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	61fb      	str	r3, [r7, #28]
 8014ff2:	e03f      	b.n	8015074 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014ff4:	69fb      	ldr	r3, [r7, #28]
 8014ff6:	7d1b      	ldrb	r3, [r3, #20]
 8014ff8:	2b0a      	cmp	r3, #10
 8014ffa:	d006      	beq.n	801500a <tcp_input+0x38e>
 8014ffc:	4b48      	ldr	r3, [pc, #288]	; (8015120 <tcp_input+0x4a4>)
 8014ffe:	f240 121f 	movw	r2, #287	; 0x11f
 8015002:	494d      	ldr	r1, [pc, #308]	; (8015138 <tcp_input+0x4bc>)
 8015004:	4848      	ldr	r0, [pc, #288]	; (8015128 <tcp_input+0x4ac>)
 8015006:	f008 f861 	bl	801d0cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801500a:	69fb      	ldr	r3, [r7, #28]
 801500c:	7a1b      	ldrb	r3, [r3, #8]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d009      	beq.n	8015026 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	7a1a      	ldrb	r2, [r3, #8]
 8015016:	4b41      	ldr	r3, [pc, #260]	; (801511c <tcp_input+0x4a0>)
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801501e:	3301      	adds	r3, #1
 8015020:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015022:	429a      	cmp	r2, r3
 8015024:	d122      	bne.n	801506c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015026:	69fb      	ldr	r3, [r7, #28]
 8015028:	8b1a      	ldrh	r2, [r3, #24]
 801502a:	4b3b      	ldr	r3, [pc, #236]	; (8015118 <tcp_input+0x49c>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	881b      	ldrh	r3, [r3, #0]
 8015030:	b29b      	uxth	r3, r3
 8015032:	429a      	cmp	r2, r3
 8015034:	d11b      	bne.n	801506e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	8ada      	ldrh	r2, [r3, #22]
 801503a:	4b37      	ldr	r3, [pc, #220]	; (8015118 <tcp_input+0x49c>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	885b      	ldrh	r3, [r3, #2]
 8015040:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015042:	429a      	cmp	r2, r3
 8015044:	d113      	bne.n	801506e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015046:	69fb      	ldr	r3, [r7, #28]
 8015048:	685a      	ldr	r2, [r3, #4]
 801504a:	4b34      	ldr	r3, [pc, #208]	; (801511c <tcp_input+0x4a0>)
 801504c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801504e:	429a      	cmp	r2, r3
 8015050:	d10d      	bne.n	801506e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	681a      	ldr	r2, [r3, #0]
 8015056:	4b31      	ldr	r3, [pc, #196]	; (801511c <tcp_input+0x4a0>)
 8015058:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801505a:	429a      	cmp	r2, r3
 801505c:	d107      	bne.n	801506e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801505e:	69f8      	ldr	r0, [r7, #28]
 8015060:	f000 fb56 	bl	8015710 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7fd fd03 	bl	8012a70 <pbuf_free>
        return;
 801506a:	e1fd      	b.n	8015468 <tcp_input+0x7ec>
        continue;
 801506c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801506e:	69fb      	ldr	r3, [r7, #28]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	61fb      	str	r3, [r7, #28]
 8015074:	69fb      	ldr	r3, [r7, #28]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d1bc      	bne.n	8014ff4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801507a:	2300      	movs	r3, #0
 801507c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801507e:	4b2f      	ldr	r3, [pc, #188]	; (801513c <tcp_input+0x4c0>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	617b      	str	r3, [r7, #20]
 8015084:	e02a      	b.n	80150dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	7a1b      	ldrb	r3, [r3, #8]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d00c      	beq.n	80150a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	7a1a      	ldrb	r2, [r3, #8]
 8015092:	4b22      	ldr	r3, [pc, #136]	; (801511c <tcp_input+0x4a0>)
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801509a:	3301      	adds	r3, #1
 801509c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801509e:	429a      	cmp	r2, r3
 80150a0:	d002      	beq.n	80150a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	61bb      	str	r3, [r7, #24]
        continue;
 80150a6:	e016      	b.n	80150d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	8ada      	ldrh	r2, [r3, #22]
 80150ac:	4b1a      	ldr	r3, [pc, #104]	; (8015118 <tcp_input+0x49c>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	885b      	ldrh	r3, [r3, #2]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d10c      	bne.n	80150d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	4b17      	ldr	r3, [pc, #92]	; (801511c <tcp_input+0x4a0>)
 80150be:	695b      	ldr	r3, [r3, #20]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d00f      	beq.n	80150e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d00d      	beq.n	80150e6 <tcp_input+0x46a>
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d009      	beq.n	80150e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	617b      	str	r3, [r7, #20]
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d1d1      	bne.n	8015086 <tcp_input+0x40a>
 80150e2:	e000      	b.n	80150e6 <tcp_input+0x46a>
            break;
 80150e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d029      	beq.n	8015140 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80150ec:	69bb      	ldr	r3, [r7, #24]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d00a      	beq.n	8015108 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	68da      	ldr	r2, [r3, #12]
 80150f6:	69bb      	ldr	r3, [r7, #24]
 80150f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80150fa:	4b10      	ldr	r3, [pc, #64]	; (801513c <tcp_input+0x4c0>)
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015102:	4a0e      	ldr	r2, [pc, #56]	; (801513c <tcp_input+0x4c0>)
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015108:	6978      	ldr	r0, [r7, #20]
 801510a:	f000 fa03 	bl	8015514 <tcp_listen_input>
      }
      pbuf_free(p);
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f7fd fcae 	bl	8012a70 <pbuf_free>
      return;
 8015114:	e1a8      	b.n	8015468 <tcp_input+0x7ec>
 8015116:	bf00      	nop
 8015118:	2001340c 	.word	0x2001340c
 801511c:	2000dad0 	.word	0x2000dad0
 8015120:	080213a0 	.word	0x080213a0
 8015124:	080214cc 	.word	0x080214cc
 8015128:	080213ec 	.word	0x080213ec
 801512c:	200133f0 	.word	0x200133f0
 8015130:	080214f8 	.word	0x080214f8
 8015134:	200133f4 	.word	0x200133f4
 8015138:	08021524 	.word	0x08021524
 801513c:	200133ec 	.word	0x200133ec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015140:	69fb      	ldr	r3, [r7, #28]
 8015142:	2b00      	cmp	r3, #0
 8015144:	f000 8158 	beq.w	80153f8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015148:	4b95      	ldr	r3, [pc, #596]	; (80153a0 <tcp_input+0x724>)
 801514a:	2200      	movs	r2, #0
 801514c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	891a      	ldrh	r2, [r3, #8]
 8015152:	4b93      	ldr	r3, [pc, #588]	; (80153a0 <tcp_input+0x724>)
 8015154:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015156:	4a92      	ldr	r2, [pc, #584]	; (80153a0 <tcp_input+0x724>)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801515c:	4b91      	ldr	r3, [pc, #580]	; (80153a4 <tcp_input+0x728>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4a8f      	ldr	r2, [pc, #572]	; (80153a0 <tcp_input+0x724>)
 8015162:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015164:	4b90      	ldr	r3, [pc, #576]	; (80153a8 <tcp_input+0x72c>)
 8015166:	2200      	movs	r2, #0
 8015168:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801516a:	4b90      	ldr	r3, [pc, #576]	; (80153ac <tcp_input+0x730>)
 801516c:	2200      	movs	r2, #0
 801516e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015170:	4b8f      	ldr	r3, [pc, #572]	; (80153b0 <tcp_input+0x734>)
 8015172:	2200      	movs	r2, #0
 8015174:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015176:	4b8f      	ldr	r3, [pc, #572]	; (80153b4 <tcp_input+0x738>)
 8015178:	781b      	ldrb	r3, [r3, #0]
 801517a:	f003 0308 	and.w	r3, r3, #8
 801517e:	2b00      	cmp	r3, #0
 8015180:	d006      	beq.n	8015190 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	7b5b      	ldrb	r3, [r3, #13]
 8015186:	f043 0301 	orr.w	r3, r3, #1
 801518a:	b2da      	uxtb	r2, r3
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015194:	2b00      	cmp	r3, #0
 8015196:	d017      	beq.n	80151c8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015198:	69f8      	ldr	r0, [r7, #28]
 801519a:	f7ff f85b 	bl	8014254 <tcp_process_refused_data>
 801519e:	4603      	mov	r3, r0
 80151a0:	f113 0f0d 	cmn.w	r3, #13
 80151a4:	d007      	beq.n	80151b6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80151a6:	69fb      	ldr	r3, [r7, #28]
 80151a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00c      	beq.n	80151c8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80151ae:	4b82      	ldr	r3, [pc, #520]	; (80153b8 <tcp_input+0x73c>)
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d008      	beq.n	80151c8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	f040 80e3 	bne.w	8015386 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80151c0:	69f8      	ldr	r0, [r7, #28]
 80151c2:	f003 fe05 	bl	8018dd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80151c6:	e0de      	b.n	8015386 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80151c8:	4a7c      	ldr	r2, [pc, #496]	; (80153bc <tcp_input+0x740>)
 80151ca:	69fb      	ldr	r3, [r7, #28]
 80151cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80151ce:	69f8      	ldr	r0, [r7, #28]
 80151d0:	f000 fb18 	bl	8015804 <tcp_process>
 80151d4:	4603      	mov	r3, r0
 80151d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80151d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80151dc:	f113 0f0d 	cmn.w	r3, #13
 80151e0:	f000 80d3 	beq.w	801538a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80151e4:	4b71      	ldr	r3, [pc, #452]	; (80153ac <tcp_input+0x730>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	f003 0308 	and.w	r3, r3, #8
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d015      	beq.n	801521c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d008      	beq.n	801520c <tcp_input+0x590>
 80151fa:	69fb      	ldr	r3, [r7, #28]
 80151fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015200:	69fa      	ldr	r2, [r7, #28]
 8015202:	6912      	ldr	r2, [r2, #16]
 8015204:	f06f 010d 	mvn.w	r1, #13
 8015208:	4610      	mov	r0, r2
 801520a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801520c:	69f9      	ldr	r1, [r7, #28]
 801520e:	486c      	ldr	r0, [pc, #432]	; (80153c0 <tcp_input+0x744>)
 8015210:	f7ff fbbc 	bl	801498c <tcp_pcb_remove>
        tcp_free(pcb);
 8015214:	69f8      	ldr	r0, [r7, #28]
 8015216:	f7fd fed7 	bl	8012fc8 <tcp_free>
 801521a:	e0da      	b.n	80153d2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801521c:	2300      	movs	r3, #0
 801521e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015220:	4b63      	ldr	r3, [pc, #396]	; (80153b0 <tcp_input+0x734>)
 8015222:	881b      	ldrh	r3, [r3, #0]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d01d      	beq.n	8015264 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015228:	4b61      	ldr	r3, [pc, #388]	; (80153b0 <tcp_input+0x734>)
 801522a:	881b      	ldrh	r3, [r3, #0]
 801522c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015234:	2b00      	cmp	r3, #0
 8015236:	d00a      	beq.n	801524e <tcp_input+0x5d2>
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801523e:	69fa      	ldr	r2, [r7, #28]
 8015240:	6910      	ldr	r0, [r2, #16]
 8015242:	89fa      	ldrh	r2, [r7, #14]
 8015244:	69f9      	ldr	r1, [r7, #28]
 8015246:	4798      	blx	r3
 8015248:	4603      	mov	r3, r0
 801524a:	74fb      	strb	r3, [r7, #19]
 801524c:	e001      	b.n	8015252 <tcp_input+0x5d6>
 801524e:	2300      	movs	r3, #0
 8015250:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015252:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015256:	f113 0f0d 	cmn.w	r3, #13
 801525a:	f000 8098 	beq.w	801538e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801525e:	4b54      	ldr	r3, [pc, #336]	; (80153b0 <tcp_input+0x734>)
 8015260:	2200      	movs	r2, #0
 8015262:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015264:	69f8      	ldr	r0, [r7, #28]
 8015266:	f000 f915 	bl	8015494 <tcp_input_delayed_close>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	f040 8090 	bne.w	8015392 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015272:	4b4d      	ldr	r3, [pc, #308]	; (80153a8 <tcp_input+0x72c>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d041      	beq.n	80152fe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801527e:	2b00      	cmp	r3, #0
 8015280:	d006      	beq.n	8015290 <tcp_input+0x614>
 8015282:	4b50      	ldr	r3, [pc, #320]	; (80153c4 <tcp_input+0x748>)
 8015284:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015288:	494f      	ldr	r1, [pc, #316]	; (80153c8 <tcp_input+0x74c>)
 801528a:	4850      	ldr	r0, [pc, #320]	; (80153cc <tcp_input+0x750>)
 801528c:	f007 ff1e 	bl	801d0cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	8b5b      	ldrh	r3, [r3, #26]
 8015294:	f003 0310 	and.w	r3, r3, #16
 8015298:	2b00      	cmp	r3, #0
 801529a:	d008      	beq.n	80152ae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801529c:	4b42      	ldr	r3, [pc, #264]	; (80153a8 <tcp_input+0x72c>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7fd fbe5 	bl	8012a70 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80152a6:	69f8      	ldr	r0, [r7, #28]
 80152a8:	f7fe f9d2 	bl	8013650 <tcp_abort>
            goto aborted;
 80152ac:	e091      	b.n	80153d2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d00c      	beq.n	80152d2 <tcp_input+0x656>
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	6918      	ldr	r0, [r3, #16]
 80152c2:	4b39      	ldr	r3, [pc, #228]	; (80153a8 <tcp_input+0x72c>)
 80152c4:	681a      	ldr	r2, [r3, #0]
 80152c6:	2300      	movs	r3, #0
 80152c8:	69f9      	ldr	r1, [r7, #28]
 80152ca:	47a0      	blx	r4
 80152cc:	4603      	mov	r3, r0
 80152ce:	74fb      	strb	r3, [r7, #19]
 80152d0:	e008      	b.n	80152e4 <tcp_input+0x668>
 80152d2:	4b35      	ldr	r3, [pc, #212]	; (80153a8 <tcp_input+0x72c>)
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	2300      	movs	r3, #0
 80152d8:	69f9      	ldr	r1, [r7, #28]
 80152da:	2000      	movs	r0, #0
 80152dc:	f7ff f890 	bl	8014400 <tcp_recv_null>
 80152e0:	4603      	mov	r3, r0
 80152e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80152e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80152e8:	f113 0f0d 	cmn.w	r3, #13
 80152ec:	d053      	beq.n	8015396 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80152ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d003      	beq.n	80152fe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80152f6:	4b2c      	ldr	r3, [pc, #176]	; (80153a8 <tcp_input+0x72c>)
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	69fb      	ldr	r3, [r7, #28]
 80152fc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80152fe:	4b2b      	ldr	r3, [pc, #172]	; (80153ac <tcp_input+0x730>)
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	f003 0320 	and.w	r3, r3, #32
 8015306:	2b00      	cmp	r3, #0
 8015308:	d030      	beq.n	801536c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801530e:	2b00      	cmp	r3, #0
 8015310:	d009      	beq.n	8015326 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015316:	7b5a      	ldrb	r2, [r3, #13]
 8015318:	69fb      	ldr	r3, [r7, #28]
 801531a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801531c:	f042 0220 	orr.w	r2, r2, #32
 8015320:	b2d2      	uxtb	r2, r2
 8015322:	735a      	strb	r2, [r3, #13]
 8015324:	e022      	b.n	801536c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801532a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801532e:	d005      	beq.n	801533c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015334:	3301      	adds	r3, #1
 8015336:	b29a      	uxth	r2, r3
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015342:	2b00      	cmp	r3, #0
 8015344:	d00b      	beq.n	801535e <tcp_input+0x6e2>
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	6918      	ldr	r0, [r3, #16]
 8015350:	2300      	movs	r3, #0
 8015352:	2200      	movs	r2, #0
 8015354:	69f9      	ldr	r1, [r7, #28]
 8015356:	47a0      	blx	r4
 8015358:	4603      	mov	r3, r0
 801535a:	74fb      	strb	r3, [r7, #19]
 801535c:	e001      	b.n	8015362 <tcp_input+0x6e6>
 801535e:	2300      	movs	r3, #0
 8015360:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015362:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015366:	f113 0f0d 	cmn.w	r3, #13
 801536a:	d016      	beq.n	801539a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801536c:	4b13      	ldr	r3, [pc, #76]	; (80153bc <tcp_input+0x740>)
 801536e:	2200      	movs	r2, #0
 8015370:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015372:	69f8      	ldr	r0, [r7, #28]
 8015374:	f000 f88e 	bl	8015494 <tcp_input_delayed_close>
 8015378:	4603      	mov	r3, r0
 801537a:	2b00      	cmp	r3, #0
 801537c:	d128      	bne.n	80153d0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801537e:	69f8      	ldr	r0, [r7, #28]
 8015380:	f002 ff20 	bl	80181c4 <tcp_output>
 8015384:	e025      	b.n	80153d2 <tcp_input+0x756>
        goto aborted;
 8015386:	bf00      	nop
 8015388:	e023      	b.n	80153d2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801538a:	bf00      	nop
 801538c:	e021      	b.n	80153d2 <tcp_input+0x756>
              goto aborted;
 801538e:	bf00      	nop
 8015390:	e01f      	b.n	80153d2 <tcp_input+0x756>
          goto aborted;
 8015392:	bf00      	nop
 8015394:	e01d      	b.n	80153d2 <tcp_input+0x756>
            goto aborted;
 8015396:	bf00      	nop
 8015398:	e01b      	b.n	80153d2 <tcp_input+0x756>
              goto aborted;
 801539a:	bf00      	nop
 801539c:	e019      	b.n	80153d2 <tcp_input+0x756>
 801539e:	bf00      	nop
 80153a0:	200133fc 	.word	0x200133fc
 80153a4:	2001340c 	.word	0x2001340c
 80153a8:	2001342c 	.word	0x2001342c
 80153ac:	20013429 	.word	0x20013429
 80153b0:	20013424 	.word	0x20013424
 80153b4:	20013428 	.word	0x20013428
 80153b8:	20013426 	.word	0x20013426
 80153bc:	20013430 	.word	0x20013430
 80153c0:	200133f0 	.word	0x200133f0
 80153c4:	080213a0 	.word	0x080213a0
 80153c8:	08021554 	.word	0x08021554
 80153cc:	080213ec 	.word	0x080213ec
          goto aborted;
 80153d0:	bf00      	nop
    tcp_input_pcb = NULL;
 80153d2:	4b27      	ldr	r3, [pc, #156]	; (8015470 <tcp_input+0x7f4>)
 80153d4:	2200      	movs	r2, #0
 80153d6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80153d8:	4b26      	ldr	r3, [pc, #152]	; (8015474 <tcp_input+0x7f8>)
 80153da:	2200      	movs	r2, #0
 80153dc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80153de:	4b26      	ldr	r3, [pc, #152]	; (8015478 <tcp_input+0x7fc>)
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d03f      	beq.n	8015466 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80153e6:	4b24      	ldr	r3, [pc, #144]	; (8015478 <tcp_input+0x7fc>)
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fd fb40 	bl	8012a70 <pbuf_free>
      inseg.p = NULL;
 80153f0:	4b21      	ldr	r3, [pc, #132]	; (8015478 <tcp_input+0x7fc>)
 80153f2:	2200      	movs	r2, #0
 80153f4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80153f6:	e036      	b.n	8015466 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80153f8:	4b20      	ldr	r3, [pc, #128]	; (801547c <tcp_input+0x800>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	899b      	ldrh	r3, [r3, #12]
 80153fe:	b29b      	uxth	r3, r3
 8015400:	4618      	mov	r0, r3
 8015402:	f7fb ff43 	bl	801128c <lwip_htons>
 8015406:	4603      	mov	r3, r0
 8015408:	b2db      	uxtb	r3, r3
 801540a:	f003 0304 	and.w	r3, r3, #4
 801540e:	2b00      	cmp	r3, #0
 8015410:	d118      	bne.n	8015444 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015412:	4b1b      	ldr	r3, [pc, #108]	; (8015480 <tcp_input+0x804>)
 8015414:	6819      	ldr	r1, [r3, #0]
 8015416:	4b1b      	ldr	r3, [pc, #108]	; (8015484 <tcp_input+0x808>)
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	461a      	mov	r2, r3
 801541c:	4b1a      	ldr	r3, [pc, #104]	; (8015488 <tcp_input+0x80c>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015422:	4b16      	ldr	r3, [pc, #88]	; (801547c <tcp_input+0x800>)
 8015424:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015426:	885b      	ldrh	r3, [r3, #2]
 8015428:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801542a:	4a14      	ldr	r2, [pc, #80]	; (801547c <tcp_input+0x800>)
 801542c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801542e:	8812      	ldrh	r2, [r2, #0]
 8015430:	b292      	uxth	r2, r2
 8015432:	9202      	str	r2, [sp, #8]
 8015434:	9301      	str	r3, [sp, #4]
 8015436:	4b15      	ldr	r3, [pc, #84]	; (801548c <tcp_input+0x810>)
 8015438:	9300      	str	r3, [sp, #0]
 801543a:	4b15      	ldr	r3, [pc, #84]	; (8015490 <tcp_input+0x814>)
 801543c:	4602      	mov	r2, r0
 801543e:	2000      	movs	r0, #0
 8015440:	f003 fc74 	bl	8018d2c <tcp_rst>
    pbuf_free(p);
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7fd fb13 	bl	8012a70 <pbuf_free>
  return;
 801544a:	e00c      	b.n	8015466 <tcp_input+0x7ea>
    goto dropped;
 801544c:	bf00      	nop
 801544e:	e006      	b.n	801545e <tcp_input+0x7e2>
    goto dropped;
 8015450:	bf00      	nop
 8015452:	e004      	b.n	801545e <tcp_input+0x7e2>
    goto dropped;
 8015454:	bf00      	nop
 8015456:	e002      	b.n	801545e <tcp_input+0x7e2>
      goto dropped;
 8015458:	bf00      	nop
 801545a:	e000      	b.n	801545e <tcp_input+0x7e2>
      goto dropped;
 801545c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f7fd fb06 	bl	8012a70 <pbuf_free>
 8015464:	e000      	b.n	8015468 <tcp_input+0x7ec>
  return;
 8015466:	bf00      	nop
}
 8015468:	3724      	adds	r7, #36	; 0x24
 801546a:	46bd      	mov	sp, r7
 801546c:	bd90      	pop	{r4, r7, pc}
 801546e:	bf00      	nop
 8015470:	20013430 	.word	0x20013430
 8015474:	2001342c 	.word	0x2001342c
 8015478:	200133fc 	.word	0x200133fc
 801547c:	2001340c 	.word	0x2001340c
 8015480:	20013420 	.word	0x20013420
 8015484:	20013426 	.word	0x20013426
 8015488:	2001341c 	.word	0x2001341c
 801548c:	2000dae0 	.word	0x2000dae0
 8015490:	2000dae4 	.word	0x2000dae4

08015494 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d106      	bne.n	80154b0 <tcp_input_delayed_close+0x1c>
 80154a2:	4b17      	ldr	r3, [pc, #92]	; (8015500 <tcp_input_delayed_close+0x6c>)
 80154a4:	f240 225a 	movw	r2, #602	; 0x25a
 80154a8:	4916      	ldr	r1, [pc, #88]	; (8015504 <tcp_input_delayed_close+0x70>)
 80154aa:	4817      	ldr	r0, [pc, #92]	; (8015508 <tcp_input_delayed_close+0x74>)
 80154ac:	f007 fe0e 	bl	801d0cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80154b0:	4b16      	ldr	r3, [pc, #88]	; (801550c <tcp_input_delayed_close+0x78>)
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	f003 0310 	and.w	r3, r3, #16
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d01c      	beq.n	80154f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	8b5b      	ldrh	r3, [r3, #26]
 80154c0:	f003 0310 	and.w	r3, r3, #16
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d10d      	bne.n	80154e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d008      	beq.n	80154e4 <tcp_input_delayed_close+0x50>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80154d8:	687a      	ldr	r2, [r7, #4]
 80154da:	6912      	ldr	r2, [r2, #16]
 80154dc:	f06f 010e 	mvn.w	r1, #14
 80154e0:	4610      	mov	r0, r2
 80154e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80154e4:	6879      	ldr	r1, [r7, #4]
 80154e6:	480a      	ldr	r0, [pc, #40]	; (8015510 <tcp_input_delayed_close+0x7c>)
 80154e8:	f7ff fa50 	bl	801498c <tcp_pcb_remove>
    tcp_free(pcb);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7fd fd6b 	bl	8012fc8 <tcp_free>
    return 1;
 80154f2:	2301      	movs	r3, #1
 80154f4:	e000      	b.n	80154f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80154f6:	2300      	movs	r3, #0
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	3708      	adds	r7, #8
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	080213a0 	.word	0x080213a0
 8015504:	08021570 	.word	0x08021570
 8015508:	080213ec 	.word	0x080213ec
 801550c:	20013429 	.word	0x20013429
 8015510:	200133f0 	.word	0x200133f0

08015514 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015514:	b590      	push	{r4, r7, lr}
 8015516:	b08b      	sub	sp, #44	; 0x2c
 8015518:	af04      	add	r7, sp, #16
 801551a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801551c:	4b6f      	ldr	r3, [pc, #444]	; (80156dc <tcp_listen_input+0x1c8>)
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	f003 0304 	and.w	r3, r3, #4
 8015524:	2b00      	cmp	r3, #0
 8015526:	f040 80d2 	bne.w	80156ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d106      	bne.n	801553e <tcp_listen_input+0x2a>
 8015530:	4b6b      	ldr	r3, [pc, #428]	; (80156e0 <tcp_listen_input+0x1cc>)
 8015532:	f240 2281 	movw	r2, #641	; 0x281
 8015536:	496b      	ldr	r1, [pc, #428]	; (80156e4 <tcp_listen_input+0x1d0>)
 8015538:	486b      	ldr	r0, [pc, #428]	; (80156e8 <tcp_listen_input+0x1d4>)
 801553a:	f007 fdc7 	bl	801d0cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801553e:	4b67      	ldr	r3, [pc, #412]	; (80156dc <tcp_listen_input+0x1c8>)
 8015540:	781b      	ldrb	r3, [r3, #0]
 8015542:	f003 0310 	and.w	r3, r3, #16
 8015546:	2b00      	cmp	r3, #0
 8015548:	d019      	beq.n	801557e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801554a:	4b68      	ldr	r3, [pc, #416]	; (80156ec <tcp_listen_input+0x1d8>)
 801554c:	6819      	ldr	r1, [r3, #0]
 801554e:	4b68      	ldr	r3, [pc, #416]	; (80156f0 <tcp_listen_input+0x1dc>)
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	461a      	mov	r2, r3
 8015554:	4b67      	ldr	r3, [pc, #412]	; (80156f4 <tcp_listen_input+0x1e0>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801555a:	4b67      	ldr	r3, [pc, #412]	; (80156f8 <tcp_listen_input+0x1e4>)
 801555c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801555e:	885b      	ldrh	r3, [r3, #2]
 8015560:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015562:	4a65      	ldr	r2, [pc, #404]	; (80156f8 <tcp_listen_input+0x1e4>)
 8015564:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015566:	8812      	ldrh	r2, [r2, #0]
 8015568:	b292      	uxth	r2, r2
 801556a:	9202      	str	r2, [sp, #8]
 801556c:	9301      	str	r3, [sp, #4]
 801556e:	4b63      	ldr	r3, [pc, #396]	; (80156fc <tcp_listen_input+0x1e8>)
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	4b63      	ldr	r3, [pc, #396]	; (8015700 <tcp_listen_input+0x1ec>)
 8015574:	4602      	mov	r2, r0
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	f003 fbd8 	bl	8018d2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801557c:	e0a9      	b.n	80156d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801557e:	4b57      	ldr	r3, [pc, #348]	; (80156dc <tcp_listen_input+0x1c8>)
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	f003 0302 	and.w	r3, r3, #2
 8015586:	2b00      	cmp	r3, #0
 8015588:	f000 80a3 	beq.w	80156d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	7d5b      	ldrb	r3, [r3, #21]
 8015590:	4618      	mov	r0, r3
 8015592:	f7ff f859 	bl	8014648 <tcp_alloc>
 8015596:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d111      	bne.n	80155c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	699b      	ldr	r3, [r3, #24]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00a      	beq.n	80155bc <tcp_listen_input+0xa8>
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	699b      	ldr	r3, [r3, #24]
 80155aa:	687a      	ldr	r2, [r7, #4]
 80155ac:	6910      	ldr	r0, [r2, #16]
 80155ae:	f04f 32ff 	mov.w	r2, #4294967295
 80155b2:	2100      	movs	r1, #0
 80155b4:	4798      	blx	r3
 80155b6:	4603      	mov	r3, r0
 80155b8:	73bb      	strb	r3, [r7, #14]
      return;
 80155ba:	e08b      	b.n	80156d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80155bc:	23f0      	movs	r3, #240	; 0xf0
 80155be:	73bb      	strb	r3, [r7, #14]
      return;
 80155c0:	e088      	b.n	80156d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80155c2:	4b50      	ldr	r3, [pc, #320]	; (8015704 <tcp_listen_input+0x1f0>)
 80155c4:	695a      	ldr	r2, [r3, #20]
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80155ca:	4b4e      	ldr	r3, [pc, #312]	; (8015704 <tcp_listen_input+0x1f0>)
 80155cc:	691a      	ldr	r2, [r3, #16]
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	8ada      	ldrh	r2, [r3, #22]
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80155da:	4b47      	ldr	r3, [pc, #284]	; (80156f8 <tcp_listen_input+0x1e4>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	881b      	ldrh	r3, [r3, #0]
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	2203      	movs	r2, #3
 80155ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80155ec:	4b41      	ldr	r3, [pc, #260]	; (80156f4 <tcp_listen_input+0x1e0>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	1c5a      	adds	r2, r3, #1
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80155fe:	6978      	ldr	r0, [r7, #20]
 8015600:	f7ff fa58 	bl	8014ab4 <tcp_next_iss>
 8015604:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	693a      	ldr	r2, [r7, #16]
 801560a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	693a      	ldr	r2, [r7, #16]
 8015610:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	693a      	ldr	r2, [r7, #16]
 8015616:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	693a      	ldr	r2, [r7, #16]
 801561c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801561e:	4b35      	ldr	r3, [pc, #212]	; (80156f4 <tcp_listen_input+0x1e0>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	1e5a      	subs	r2, r3, #1
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	691a      	ldr	r2, [r3, #16]
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	7a5b      	ldrb	r3, [r3, #9]
 801563a:	f003 030c 	and.w	r3, r3, #12
 801563e:	b2da      	uxtb	r2, r3
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	7a1a      	ldrb	r2, [r3, #8]
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801564c:	4b2e      	ldr	r3, [pc, #184]	; (8015708 <tcp_listen_input+0x1f4>)
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	60da      	str	r2, [r3, #12]
 8015654:	4a2c      	ldr	r2, [pc, #176]	; (8015708 <tcp_listen_input+0x1f4>)
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	6013      	str	r3, [r2, #0]
 801565a:	f003 fd29 	bl	80190b0 <tcp_timer_needed>
 801565e:	4b2b      	ldr	r3, [pc, #172]	; (801570c <tcp_listen_input+0x1f8>)
 8015660:	2201      	movs	r2, #1
 8015662:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015664:	6978      	ldr	r0, [r7, #20]
 8015666:	f001 fd8f 	bl	8017188 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801566a:	4b23      	ldr	r3, [pc, #140]	; (80156f8 <tcp_listen_input+0x1e4>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	89db      	ldrh	r3, [r3, #14]
 8015670:	b29a      	uxth	r2, r3
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	3304      	adds	r3, #4
 801568c:	4618      	mov	r0, r3
 801568e:	f005 fa63 	bl	801ab58 <ip4_route>
 8015692:	4601      	mov	r1, r0
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	3304      	adds	r3, #4
 8015698:	461a      	mov	r2, r3
 801569a:	4620      	mov	r0, r4
 801569c:	f7ff fa30 	bl	8014b00 <tcp_eff_send_mss_netif>
 80156a0:	4603      	mov	r3, r0
 80156a2:	461a      	mov	r2, r3
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80156a8:	2112      	movs	r1, #18
 80156aa:	6978      	ldr	r0, [r7, #20]
 80156ac:	f002 fc9c 	bl	8017fe8 <tcp_enqueue_flags>
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80156b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d004      	beq.n	80156c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80156bc:	2100      	movs	r1, #0
 80156be:	6978      	ldr	r0, [r7, #20]
 80156c0:	f7fd ff08 	bl	80134d4 <tcp_abandon>
      return;
 80156c4:	e006      	b.n	80156d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80156c6:	6978      	ldr	r0, [r7, #20]
 80156c8:	f002 fd7c 	bl	80181c4 <tcp_output>
  return;
 80156cc:	e001      	b.n	80156d2 <tcp_listen_input+0x1be>
    return;
 80156ce:	bf00      	nop
 80156d0:	e000      	b.n	80156d4 <tcp_listen_input+0x1c0>
  return;
 80156d2:	bf00      	nop
}
 80156d4:	371c      	adds	r7, #28
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd90      	pop	{r4, r7, pc}
 80156da:	bf00      	nop
 80156dc:	20013428 	.word	0x20013428
 80156e0:	080213a0 	.word	0x080213a0
 80156e4:	08021598 	.word	0x08021598
 80156e8:	080213ec 	.word	0x080213ec
 80156ec:	20013420 	.word	0x20013420
 80156f0:	20013426 	.word	0x20013426
 80156f4:	2001341c 	.word	0x2001341c
 80156f8:	2001340c 	.word	0x2001340c
 80156fc:	2000dae0 	.word	0x2000dae0
 8015700:	2000dae4 	.word	0x2000dae4
 8015704:	2000dad0 	.word	0x2000dad0
 8015708:	200133f0 	.word	0x200133f0
 801570c:	200133f8 	.word	0x200133f8

08015710 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af04      	add	r7, sp, #16
 8015716:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015718:	4b2f      	ldr	r3, [pc, #188]	; (80157d8 <tcp_timewait_input+0xc8>)
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	f003 0304 	and.w	r3, r3, #4
 8015720:	2b00      	cmp	r3, #0
 8015722:	d153      	bne.n	80157cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d106      	bne.n	8015738 <tcp_timewait_input+0x28>
 801572a:	4b2c      	ldr	r3, [pc, #176]	; (80157dc <tcp_timewait_input+0xcc>)
 801572c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015730:	492b      	ldr	r1, [pc, #172]	; (80157e0 <tcp_timewait_input+0xd0>)
 8015732:	482c      	ldr	r0, [pc, #176]	; (80157e4 <tcp_timewait_input+0xd4>)
 8015734:	f007 fcca 	bl	801d0cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015738:	4b27      	ldr	r3, [pc, #156]	; (80157d8 <tcp_timewait_input+0xc8>)
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	f003 0302 	and.w	r3, r3, #2
 8015740:	2b00      	cmp	r3, #0
 8015742:	d02a      	beq.n	801579a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015744:	4b28      	ldr	r3, [pc, #160]	; (80157e8 <tcp_timewait_input+0xd8>)
 8015746:	681a      	ldr	r2, [r3, #0]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801574c:	1ad3      	subs	r3, r2, r3
 801574e:	2b00      	cmp	r3, #0
 8015750:	db2d      	blt.n	80157ae <tcp_timewait_input+0x9e>
 8015752:	4b25      	ldr	r3, [pc, #148]	; (80157e8 <tcp_timewait_input+0xd8>)
 8015754:	681a      	ldr	r2, [r3, #0]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801575a:	6879      	ldr	r1, [r7, #4]
 801575c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801575e:	440b      	add	r3, r1
 8015760:	1ad3      	subs	r3, r2, r3
 8015762:	2b00      	cmp	r3, #0
 8015764:	dc23      	bgt.n	80157ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015766:	4b21      	ldr	r3, [pc, #132]	; (80157ec <tcp_timewait_input+0xdc>)
 8015768:	6819      	ldr	r1, [r3, #0]
 801576a:	4b21      	ldr	r3, [pc, #132]	; (80157f0 <tcp_timewait_input+0xe0>)
 801576c:	881b      	ldrh	r3, [r3, #0]
 801576e:	461a      	mov	r2, r3
 8015770:	4b1d      	ldr	r3, [pc, #116]	; (80157e8 <tcp_timewait_input+0xd8>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015776:	4b1f      	ldr	r3, [pc, #124]	; (80157f4 <tcp_timewait_input+0xe4>)
 8015778:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801577a:	885b      	ldrh	r3, [r3, #2]
 801577c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801577e:	4a1d      	ldr	r2, [pc, #116]	; (80157f4 <tcp_timewait_input+0xe4>)
 8015780:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015782:	8812      	ldrh	r2, [r2, #0]
 8015784:	b292      	uxth	r2, r2
 8015786:	9202      	str	r2, [sp, #8]
 8015788:	9301      	str	r3, [sp, #4]
 801578a:	4b1b      	ldr	r3, [pc, #108]	; (80157f8 <tcp_timewait_input+0xe8>)
 801578c:	9300      	str	r3, [sp, #0]
 801578e:	4b1b      	ldr	r3, [pc, #108]	; (80157fc <tcp_timewait_input+0xec>)
 8015790:	4602      	mov	r2, r0
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f003 faca 	bl	8018d2c <tcp_rst>
      return;
 8015798:	e01b      	b.n	80157d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801579a:	4b0f      	ldr	r3, [pc, #60]	; (80157d8 <tcp_timewait_input+0xc8>)
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	f003 0301 	and.w	r3, r3, #1
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d003      	beq.n	80157ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80157a6:	4b16      	ldr	r3, [pc, #88]	; (8015800 <tcp_timewait_input+0xf0>)
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80157ae:	4b10      	ldr	r3, [pc, #64]	; (80157f0 <tcp_timewait_input+0xe0>)
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d00c      	beq.n	80157d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	8b5b      	ldrh	r3, [r3, #26]
 80157ba:	f043 0302 	orr.w	r3, r3, #2
 80157be:	b29a      	uxth	r2, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f002 fcfd 	bl	80181c4 <tcp_output>
  }
  return;
 80157ca:	e001      	b.n	80157d0 <tcp_timewait_input+0xc0>
    return;
 80157cc:	bf00      	nop
 80157ce:	e000      	b.n	80157d2 <tcp_timewait_input+0xc2>
  return;
 80157d0:	bf00      	nop
}
 80157d2:	3708      	adds	r7, #8
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}
 80157d8:	20013428 	.word	0x20013428
 80157dc:	080213a0 	.word	0x080213a0
 80157e0:	080215b8 	.word	0x080215b8
 80157e4:	080213ec 	.word	0x080213ec
 80157e8:	2001341c 	.word	0x2001341c
 80157ec:	20013420 	.word	0x20013420
 80157f0:	20013426 	.word	0x20013426
 80157f4:	2001340c 	.word	0x2001340c
 80157f8:	2000dae0 	.word	0x2000dae0
 80157fc:	2000dae4 	.word	0x2000dae4
 8015800:	200133e4 	.word	0x200133e4

08015804 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015804:	b590      	push	{r4, r7, lr}
 8015806:	b08d      	sub	sp, #52	; 0x34
 8015808:	af04      	add	r7, sp, #16
 801580a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801580c:	2300      	movs	r3, #0
 801580e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015810:	2300      	movs	r3, #0
 8015812:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d106      	bne.n	8015828 <tcp_process+0x24>
 801581a:	4b9d      	ldr	r3, [pc, #628]	; (8015a90 <tcp_process+0x28c>)
 801581c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015820:	499c      	ldr	r1, [pc, #624]	; (8015a94 <tcp_process+0x290>)
 8015822:	489d      	ldr	r0, [pc, #628]	; (8015a98 <tcp_process+0x294>)
 8015824:	f007 fc52 	bl	801d0cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015828:	4b9c      	ldr	r3, [pc, #624]	; (8015a9c <tcp_process+0x298>)
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	f003 0304 	and.w	r3, r3, #4
 8015830:	2b00      	cmp	r3, #0
 8015832:	d04e      	beq.n	80158d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	7d1b      	ldrb	r3, [r3, #20]
 8015838:	2b02      	cmp	r3, #2
 801583a:	d108      	bne.n	801584e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015840:	4b97      	ldr	r3, [pc, #604]	; (8015aa0 <tcp_process+0x29c>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	429a      	cmp	r2, r3
 8015846:	d123      	bne.n	8015890 <tcp_process+0x8c>
        acceptable = 1;
 8015848:	2301      	movs	r3, #1
 801584a:	76fb      	strb	r3, [r7, #27]
 801584c:	e020      	b.n	8015890 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015852:	4b94      	ldr	r3, [pc, #592]	; (8015aa4 <tcp_process+0x2a0>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	429a      	cmp	r2, r3
 8015858:	d102      	bne.n	8015860 <tcp_process+0x5c>
        acceptable = 1;
 801585a:	2301      	movs	r3, #1
 801585c:	76fb      	strb	r3, [r7, #27]
 801585e:	e017      	b.n	8015890 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015860:	4b90      	ldr	r3, [pc, #576]	; (8015aa4 <tcp_process+0x2a0>)
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015868:	1ad3      	subs	r3, r2, r3
 801586a:	2b00      	cmp	r3, #0
 801586c:	db10      	blt.n	8015890 <tcp_process+0x8c>
 801586e:	4b8d      	ldr	r3, [pc, #564]	; (8015aa4 <tcp_process+0x2a0>)
 8015870:	681a      	ldr	r2, [r3, #0]
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015876:	6879      	ldr	r1, [r7, #4]
 8015878:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801587a:	440b      	add	r3, r1
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	2b00      	cmp	r3, #0
 8015880:	dc06      	bgt.n	8015890 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	8b5b      	ldrh	r3, [r3, #26]
 8015886:	f043 0302 	orr.w	r3, r3, #2
 801588a:	b29a      	uxth	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015890:	7efb      	ldrb	r3, [r7, #27]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d01b      	beq.n	80158ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	7d1b      	ldrb	r3, [r3, #20]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d106      	bne.n	80158ac <tcp_process+0xa8>
 801589e:	4b7c      	ldr	r3, [pc, #496]	; (8015a90 <tcp_process+0x28c>)
 80158a0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80158a4:	4980      	ldr	r1, [pc, #512]	; (8015aa8 <tcp_process+0x2a4>)
 80158a6:	487c      	ldr	r0, [pc, #496]	; (8015a98 <tcp_process+0x294>)
 80158a8:	f007 fc10 	bl	801d0cc <iprintf>
      recv_flags |= TF_RESET;
 80158ac:	4b7f      	ldr	r3, [pc, #508]	; (8015aac <tcp_process+0x2a8>)
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	f043 0308 	orr.w	r3, r3, #8
 80158b4:	b2da      	uxtb	r2, r3
 80158b6:	4b7d      	ldr	r3, [pc, #500]	; (8015aac <tcp_process+0x2a8>)
 80158b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	8b5b      	ldrh	r3, [r3, #26]
 80158be:	f023 0301 	bic.w	r3, r3, #1
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80158c8:	f06f 030d 	mvn.w	r3, #13
 80158cc:	e37a      	b.n	8015fc4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80158ce:	2300      	movs	r3, #0
 80158d0:	e378      	b.n	8015fc4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80158d2:	4b72      	ldr	r3, [pc, #456]	; (8015a9c <tcp_process+0x298>)
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	f003 0302 	and.w	r3, r3, #2
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d010      	beq.n	8015900 <tcp_process+0xfc>
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	7d1b      	ldrb	r3, [r3, #20]
 80158e2:	2b02      	cmp	r3, #2
 80158e4:	d00c      	beq.n	8015900 <tcp_process+0xfc>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	7d1b      	ldrb	r3, [r3, #20]
 80158ea:	2b03      	cmp	r3, #3
 80158ec:	d008      	beq.n	8015900 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	8b5b      	ldrh	r3, [r3, #26]
 80158f2:	f043 0302 	orr.w	r3, r3, #2
 80158f6:	b29a      	uxth	r2, r3
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80158fc:	2300      	movs	r3, #0
 80158fe:	e361      	b.n	8015fc4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	8b5b      	ldrh	r3, [r3, #26]
 8015904:	f003 0310 	and.w	r3, r3, #16
 8015908:	2b00      	cmp	r3, #0
 801590a:	d103      	bne.n	8015914 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801590c:	4b68      	ldr	r3, [pc, #416]	; (8015ab0 <tcp_process+0x2ac>)
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2200      	movs	r2, #0
 8015918:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2200      	movs	r2, #0
 8015920:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f001 fc2f 	bl	8017188 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	7d1b      	ldrb	r3, [r3, #20]
 801592e:	3b02      	subs	r3, #2
 8015930:	2b07      	cmp	r3, #7
 8015932:	f200 8337 	bhi.w	8015fa4 <tcp_process+0x7a0>
 8015936:	a201      	add	r2, pc, #4	; (adr r2, 801593c <tcp_process+0x138>)
 8015938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801593c:	0801595d 	.word	0x0801595d
 8015940:	08015b8d 	.word	0x08015b8d
 8015944:	08015d05 	.word	0x08015d05
 8015948:	08015d2f 	.word	0x08015d2f
 801594c:	08015e53 	.word	0x08015e53
 8015950:	08015d05 	.word	0x08015d05
 8015954:	08015edf 	.word	0x08015edf
 8015958:	08015f6f 	.word	0x08015f6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801595c:	4b4f      	ldr	r3, [pc, #316]	; (8015a9c <tcp_process+0x298>)
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	f003 0310 	and.w	r3, r3, #16
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 80e4 	beq.w	8015b32 <tcp_process+0x32e>
 801596a:	4b4c      	ldr	r3, [pc, #304]	; (8015a9c <tcp_process+0x298>)
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	f003 0302 	and.w	r3, r3, #2
 8015972:	2b00      	cmp	r3, #0
 8015974:	f000 80dd 	beq.w	8015b32 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801597c:	1c5a      	adds	r2, r3, #1
 801597e:	4b48      	ldr	r3, [pc, #288]	; (8015aa0 <tcp_process+0x29c>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	429a      	cmp	r2, r3
 8015984:	f040 80d5 	bne.w	8015b32 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015988:	4b46      	ldr	r3, [pc, #280]	; (8015aa4 <tcp_process+0x2a0>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	1c5a      	adds	r2, r3, #1
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801599a:	4b41      	ldr	r3, [pc, #260]	; (8015aa0 <tcp_process+0x29c>)
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80159a2:	4b44      	ldr	r3, [pc, #272]	; (8015ab4 <tcp_process+0x2b0>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	89db      	ldrh	r3, [r3, #14]
 80159a8:	b29a      	uxth	r2, r3
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80159bc:	4b39      	ldr	r3, [pc, #228]	; (8015aa4 <tcp_process+0x2a0>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	1e5a      	subs	r2, r3, #1
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2204      	movs	r2, #4
 80159ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	3304      	adds	r3, #4
 80159d4:	4618      	mov	r0, r3
 80159d6:	f005 f8bf 	bl	801ab58 <ip4_route>
 80159da:	4601      	mov	r1, r0
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	3304      	adds	r3, #4
 80159e0:	461a      	mov	r2, r3
 80159e2:	4620      	mov	r0, r4
 80159e4:	f7ff f88c 	bl	8014b00 <tcp_eff_send_mss_netif>
 80159e8:	4603      	mov	r3, r0
 80159ea:	461a      	mov	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159f4:	009a      	lsls	r2, r3, #2
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	f241 111c 	movw	r1, #4380	; 0x111c
 8015a00:	428b      	cmp	r3, r1
 8015a02:	bf38      	it	cc
 8015a04:	460b      	movcc	r3, r1
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d204      	bcs.n	8015a14 <tcp_process+0x210>
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	b29b      	uxth	r3, r3
 8015a12:	e00d      	b.n	8015a30 <tcp_process+0x22c>
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a18:	005b      	lsls	r3, r3, #1
 8015a1a:	f241 121c 	movw	r2, #4380	; 0x111c
 8015a1e:	4293      	cmp	r3, r2
 8015a20:	d904      	bls.n	8015a2c <tcp_process+0x228>
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	e001      	b.n	8015a30 <tcp_process+0x22c>
 8015a2c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d106      	bne.n	8015a4e <tcp_process+0x24a>
 8015a40:	4b13      	ldr	r3, [pc, #76]	; (8015a90 <tcp_process+0x28c>)
 8015a42:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015a46:	491c      	ldr	r1, [pc, #112]	; (8015ab8 <tcp_process+0x2b4>)
 8015a48:	4813      	ldr	r0, [pc, #76]	; (8015a98 <tcp_process+0x294>)
 8015a4a:	f007 fb3f 	bl	801d0cc <iprintf>
        --pcb->snd_queuelen;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a54:	3b01      	subs	r3, #1
 8015a56:	b29a      	uxth	r2, r3
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a62:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d12a      	bne.n	8015ac0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a6e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d106      	bne.n	8015a84 <tcp_process+0x280>
 8015a76:	4b06      	ldr	r3, [pc, #24]	; (8015a90 <tcp_process+0x28c>)
 8015a78:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015a7c:	490f      	ldr	r1, [pc, #60]	; (8015abc <tcp_process+0x2b8>)
 8015a7e:	4806      	ldr	r0, [pc, #24]	; (8015a98 <tcp_process+0x294>)
 8015a80:	f007 fb24 	bl	801d0cc <iprintf>
          pcb->unsent = rseg->next;
 8015a84:	69fb      	ldr	r3, [r7, #28]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8015a8c:	e01c      	b.n	8015ac8 <tcp_process+0x2c4>
 8015a8e:	bf00      	nop
 8015a90:	080213a0 	.word	0x080213a0
 8015a94:	080215d8 	.word	0x080215d8
 8015a98:	080213ec 	.word	0x080213ec
 8015a9c:	20013428 	.word	0x20013428
 8015aa0:	20013420 	.word	0x20013420
 8015aa4:	2001341c 	.word	0x2001341c
 8015aa8:	080215f4 	.word	0x080215f4
 8015aac:	20013429 	.word	0x20013429
 8015ab0:	200133e4 	.word	0x200133e4
 8015ab4:	2001340c 	.word	0x2001340c
 8015ab8:	08021614 	.word	0x08021614
 8015abc:	0802162c 	.word	0x0802162c
        } else {
          pcb->unacked = rseg->next;
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015ac8:	69f8      	ldr	r0, [r7, #28]
 8015aca:	f7fe fc54 	bl	8014376 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d104      	bne.n	8015ae0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015adc:	861a      	strh	r2, [r3, #48]	; 0x30
 8015ade:	e006      	b.n	8015aee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d00a      	beq.n	8015b0e <tcp_process+0x30a>
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015afe:	687a      	ldr	r2, [r7, #4]
 8015b00:	6910      	ldr	r0, [r2, #16]
 8015b02:	2200      	movs	r2, #0
 8015b04:	6879      	ldr	r1, [r7, #4]
 8015b06:	4798      	blx	r3
 8015b08:	4603      	mov	r3, r0
 8015b0a:	76bb      	strb	r3, [r7, #26]
 8015b0c:	e001      	b.n	8015b12 <tcp_process+0x30e>
 8015b0e:	2300      	movs	r3, #0
 8015b10:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015b12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015b16:	f113 0f0d 	cmn.w	r3, #13
 8015b1a:	d102      	bne.n	8015b22 <tcp_process+0x31e>
          return ERR_ABRT;
 8015b1c:	f06f 030c 	mvn.w	r3, #12
 8015b20:	e250      	b.n	8015fc4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	8b5b      	ldrh	r3, [r3, #26]
 8015b26:	f043 0302 	orr.w	r3, r3, #2
 8015b2a:	b29a      	uxth	r2, r3
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015b30:	e23a      	b.n	8015fa8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015b32:	4b98      	ldr	r3, [pc, #608]	; (8015d94 <tcp_process+0x590>)
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	f003 0310 	and.w	r3, r3, #16
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	f000 8234 	beq.w	8015fa8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015b40:	4b95      	ldr	r3, [pc, #596]	; (8015d98 <tcp_process+0x594>)
 8015b42:	6819      	ldr	r1, [r3, #0]
 8015b44:	4b95      	ldr	r3, [pc, #596]	; (8015d9c <tcp_process+0x598>)
 8015b46:	881b      	ldrh	r3, [r3, #0]
 8015b48:	461a      	mov	r2, r3
 8015b4a:	4b95      	ldr	r3, [pc, #596]	; (8015da0 <tcp_process+0x59c>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015b50:	4b94      	ldr	r3, [pc, #592]	; (8015da4 <tcp_process+0x5a0>)
 8015b52:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015b54:	885b      	ldrh	r3, [r3, #2]
 8015b56:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015b58:	4a92      	ldr	r2, [pc, #584]	; (8015da4 <tcp_process+0x5a0>)
 8015b5a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015b5c:	8812      	ldrh	r2, [r2, #0]
 8015b5e:	b292      	uxth	r2, r2
 8015b60:	9202      	str	r2, [sp, #8]
 8015b62:	9301      	str	r3, [sp, #4]
 8015b64:	4b90      	ldr	r3, [pc, #576]	; (8015da8 <tcp_process+0x5a4>)
 8015b66:	9300      	str	r3, [sp, #0]
 8015b68:	4b90      	ldr	r3, [pc, #576]	; (8015dac <tcp_process+0x5a8>)
 8015b6a:	4602      	mov	r2, r0
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f003 f8dd 	bl	8018d2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015b78:	2b05      	cmp	r3, #5
 8015b7a:	f200 8215 	bhi.w	8015fa8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2200      	movs	r2, #0
 8015b82:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f002 fea9 	bl	80188dc <tcp_rexmit_rto>
      break;
 8015b8a:	e20d      	b.n	8015fa8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015b8c:	4b81      	ldr	r3, [pc, #516]	; (8015d94 <tcp_process+0x590>)
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	f003 0310 	and.w	r3, r3, #16
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	f000 80a1 	beq.w	8015cdc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015b9a:	4b7f      	ldr	r3, [pc, #508]	; (8015d98 <tcp_process+0x594>)
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	3b01      	subs	r3, #1
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	db7e      	blt.n	8015ca8 <tcp_process+0x4a4>
 8015baa:	4b7b      	ldr	r3, [pc, #492]	; (8015d98 <tcp_process+0x594>)
 8015bac:	681a      	ldr	r2, [r3, #0]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bb2:	1ad3      	subs	r3, r2, r3
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	dc77      	bgt.n	8015ca8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2204      	movs	r2, #4
 8015bbc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d102      	bne.n	8015bcc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015bc6:	23fa      	movs	r3, #250	; 0xfa
 8015bc8:	76bb      	strb	r3, [r7, #26]
 8015bca:	e01d      	b.n	8015c08 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015bd0:	699b      	ldr	r3, [r3, #24]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <tcp_process+0x3e0>
 8015bd6:	4b76      	ldr	r3, [pc, #472]	; (8015db0 <tcp_process+0x5ac>)
 8015bd8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015bdc:	4975      	ldr	r1, [pc, #468]	; (8015db4 <tcp_process+0x5b0>)
 8015bde:	4876      	ldr	r0, [pc, #472]	; (8015db8 <tcp_process+0x5b4>)
 8015be0:	f007 fa74 	bl	801d0cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015be8:	699b      	ldr	r3, [r3, #24]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d00a      	beq.n	8015c04 <tcp_process+0x400>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015bf2:	699b      	ldr	r3, [r3, #24]
 8015bf4:	687a      	ldr	r2, [r7, #4]
 8015bf6:	6910      	ldr	r0, [r2, #16]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	6879      	ldr	r1, [r7, #4]
 8015bfc:	4798      	blx	r3
 8015bfe:	4603      	mov	r3, r0
 8015c00:	76bb      	strb	r3, [r7, #26]
 8015c02:	e001      	b.n	8015c08 <tcp_process+0x404>
 8015c04:	23f0      	movs	r3, #240	; 0xf0
 8015c06:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015c08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d00a      	beq.n	8015c26 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015c10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015c14:	f113 0f0d 	cmn.w	r3, #13
 8015c18:	d002      	beq.n	8015c20 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f7fd fd18 	bl	8013650 <tcp_abort>
            }
            return ERR_ABRT;
 8015c20:	f06f 030c 	mvn.w	r3, #12
 8015c24:	e1ce      	b.n	8015fc4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 fae0 	bl	80161ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015c2c:	4b63      	ldr	r3, [pc, #396]	; (8015dbc <tcp_process+0x5b8>)
 8015c2e:	881b      	ldrh	r3, [r3, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d005      	beq.n	8015c40 <tcp_process+0x43c>
            recv_acked--;
 8015c34:	4b61      	ldr	r3, [pc, #388]	; (8015dbc <tcp_process+0x5b8>)
 8015c36:	881b      	ldrh	r3, [r3, #0]
 8015c38:	3b01      	subs	r3, #1
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	4b5f      	ldr	r3, [pc, #380]	; (8015dbc <tcp_process+0x5b8>)
 8015c3e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c44:	009a      	lsls	r2, r3, #2
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c4a:	005b      	lsls	r3, r3, #1
 8015c4c:	f241 111c 	movw	r1, #4380	; 0x111c
 8015c50:	428b      	cmp	r3, r1
 8015c52:	bf38      	it	cc
 8015c54:	460b      	movcc	r3, r1
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d204      	bcs.n	8015c64 <tcp_process+0x460>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	e00d      	b.n	8015c80 <tcp_process+0x47c>
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c68:	005b      	lsls	r3, r3, #1
 8015c6a:	f241 121c 	movw	r2, #4380	; 0x111c
 8015c6e:	4293      	cmp	r3, r2
 8015c70:	d904      	bls.n	8015c7c <tcp_process+0x478>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	b29b      	uxth	r3, r3
 8015c7a:	e001      	b.n	8015c80 <tcp_process+0x47c>
 8015c7c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015c86:	4b4e      	ldr	r3, [pc, #312]	; (8015dc0 <tcp_process+0x5bc>)
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	f003 0320 	and.w	r3, r3, #32
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d037      	beq.n	8015d02 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8b5b      	ldrh	r3, [r3, #26]
 8015c96:	f043 0302 	orr.w	r3, r3, #2
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	2207      	movs	r2, #7
 8015ca4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015ca6:	e02c      	b.n	8015d02 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ca8:	4b3b      	ldr	r3, [pc, #236]	; (8015d98 <tcp_process+0x594>)
 8015caa:	6819      	ldr	r1, [r3, #0]
 8015cac:	4b3b      	ldr	r3, [pc, #236]	; (8015d9c <tcp_process+0x598>)
 8015cae:	881b      	ldrh	r3, [r3, #0]
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	4b3b      	ldr	r3, [pc, #236]	; (8015da0 <tcp_process+0x59c>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015cb8:	4b3a      	ldr	r3, [pc, #232]	; (8015da4 <tcp_process+0x5a0>)
 8015cba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cbc:	885b      	ldrh	r3, [r3, #2]
 8015cbe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015cc0:	4a38      	ldr	r2, [pc, #224]	; (8015da4 <tcp_process+0x5a0>)
 8015cc2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cc4:	8812      	ldrh	r2, [r2, #0]
 8015cc6:	b292      	uxth	r2, r2
 8015cc8:	9202      	str	r2, [sp, #8]
 8015cca:	9301      	str	r3, [sp, #4]
 8015ccc:	4b36      	ldr	r3, [pc, #216]	; (8015da8 <tcp_process+0x5a4>)
 8015cce:	9300      	str	r3, [sp, #0]
 8015cd0:	4b36      	ldr	r3, [pc, #216]	; (8015dac <tcp_process+0x5a8>)
 8015cd2:	4602      	mov	r2, r0
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f003 f829 	bl	8018d2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015cda:	e167      	b.n	8015fac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015cdc:	4b2d      	ldr	r3, [pc, #180]	; (8015d94 <tcp_process+0x590>)
 8015cde:	781b      	ldrb	r3, [r3, #0]
 8015ce0:	f003 0302 	and.w	r3, r3, #2
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f000 8161 	beq.w	8015fac <tcp_process+0x7a8>
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cee:	1e5a      	subs	r2, r3, #1
 8015cf0:	4b2b      	ldr	r3, [pc, #172]	; (8015da0 <tcp_process+0x59c>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	f040 8159 	bne.w	8015fac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f002 fe10 	bl	8018920 <tcp_rexmit>
      break;
 8015d00:	e154      	b.n	8015fac <tcp_process+0x7a8>
 8015d02:	e153      	b.n	8015fac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f000 fa71 	bl	80161ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015d0a:	4b2d      	ldr	r3, [pc, #180]	; (8015dc0 <tcp_process+0x5bc>)
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	f003 0320 	and.w	r3, r3, #32
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	f000 814c 	beq.w	8015fb0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	8b5b      	ldrh	r3, [r3, #26]
 8015d1c:	f043 0302 	orr.w	r3, r3, #2
 8015d20:	b29a      	uxth	r2, r3
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2207      	movs	r2, #7
 8015d2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015d2c:	e140      	b.n	8015fb0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f000 fa5c 	bl	80161ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015d34:	4b22      	ldr	r3, [pc, #136]	; (8015dc0 <tcp_process+0x5bc>)
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	f003 0320 	and.w	r3, r3, #32
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d071      	beq.n	8015e24 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015d40:	4b14      	ldr	r3, [pc, #80]	; (8015d94 <tcp_process+0x590>)
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	f003 0310 	and.w	r3, r3, #16
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d060      	beq.n	8015e0e <tcp_process+0x60a>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015d50:	4b11      	ldr	r3, [pc, #68]	; (8015d98 <tcp_process+0x594>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d15a      	bne.n	8015e0e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d156      	bne.n	8015e0e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	8b5b      	ldrh	r3, [r3, #26]
 8015d64:	f043 0302 	orr.w	r3, r3, #2
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f7fe fdbc 	bl	80148ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015d74:	4b13      	ldr	r3, [pc, #76]	; (8015dc4 <tcp_process+0x5c0>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d105      	bne.n	8015d8a <tcp_process+0x586>
 8015d7e:	4b11      	ldr	r3, [pc, #68]	; (8015dc4 <tcp_process+0x5c0>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	4a0f      	ldr	r2, [pc, #60]	; (8015dc4 <tcp_process+0x5c0>)
 8015d86:	6013      	str	r3, [r2, #0]
 8015d88:	e02e      	b.n	8015de8 <tcp_process+0x5e4>
 8015d8a:	4b0e      	ldr	r3, [pc, #56]	; (8015dc4 <tcp_process+0x5c0>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	617b      	str	r3, [r7, #20]
 8015d90:	e027      	b.n	8015de2 <tcp_process+0x5de>
 8015d92:	bf00      	nop
 8015d94:	20013428 	.word	0x20013428
 8015d98:	20013420 	.word	0x20013420
 8015d9c:	20013426 	.word	0x20013426
 8015da0:	2001341c 	.word	0x2001341c
 8015da4:	2001340c 	.word	0x2001340c
 8015da8:	2000dae0 	.word	0x2000dae0
 8015dac:	2000dae4 	.word	0x2000dae4
 8015db0:	080213a0 	.word	0x080213a0
 8015db4:	08021640 	.word	0x08021640
 8015db8:	080213ec 	.word	0x080213ec
 8015dbc:	20013424 	.word	0x20013424
 8015dc0:	20013429 	.word	0x20013429
 8015dc4:	200133f0 	.word	0x200133f0
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	687a      	ldr	r2, [r7, #4]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d104      	bne.n	8015ddc <tcp_process+0x5d8>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	68da      	ldr	r2, [r3, #12]
 8015dd6:	697b      	ldr	r3, [r7, #20]
 8015dd8:	60da      	str	r2, [r3, #12]
 8015dda:	e005      	b.n	8015de8 <tcp_process+0x5e4>
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	617b      	str	r3, [r7, #20]
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d1ef      	bne.n	8015dc8 <tcp_process+0x5c4>
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	60da      	str	r2, [r3, #12]
 8015dee:	4b77      	ldr	r3, [pc, #476]	; (8015fcc <tcp_process+0x7c8>)
 8015df0:	2201      	movs	r2, #1
 8015df2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	220a      	movs	r2, #10
 8015df8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015dfa:	4b75      	ldr	r3, [pc, #468]	; (8015fd0 <tcp_process+0x7cc>)
 8015dfc:	681a      	ldr	r2, [r3, #0]
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	60da      	str	r2, [r3, #12]
 8015e02:	4a73      	ldr	r2, [pc, #460]	; (8015fd0 <tcp_process+0x7cc>)
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6013      	str	r3, [r2, #0]
 8015e08:	f003 f952 	bl	80190b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015e0c:	e0d2      	b.n	8015fb4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	8b5b      	ldrh	r3, [r3, #26]
 8015e12:	f043 0302 	orr.w	r3, r3, #2
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2208      	movs	r2, #8
 8015e20:	751a      	strb	r2, [r3, #20]
      break;
 8015e22:	e0c7      	b.n	8015fb4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015e24:	4b6b      	ldr	r3, [pc, #428]	; (8015fd4 <tcp_process+0x7d0>)
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	f003 0310 	and.w	r3, r3, #16
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	f000 80c1 	beq.w	8015fb4 <tcp_process+0x7b0>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015e36:	4b68      	ldr	r3, [pc, #416]	; (8015fd8 <tcp_process+0x7d4>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	f040 80ba 	bne.w	8015fb4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	f040 80b5 	bne.w	8015fb4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2206      	movs	r2, #6
 8015e4e:	751a      	strb	r2, [r3, #20]
      break;
 8015e50:	e0b0      	b.n	8015fb4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f000 f9ca 	bl	80161ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015e58:	4b60      	ldr	r3, [pc, #384]	; (8015fdc <tcp_process+0x7d8>)
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	f003 0320 	and.w	r3, r3, #32
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	f000 80a9 	beq.w	8015fb8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	8b5b      	ldrh	r3, [r3, #26]
 8015e6a:	f043 0302 	orr.w	r3, r3, #2
 8015e6e:	b29a      	uxth	r2, r3
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7fe fd39 	bl	80148ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015e7a:	4b59      	ldr	r3, [pc, #356]	; (8015fe0 <tcp_process+0x7dc>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d105      	bne.n	8015e90 <tcp_process+0x68c>
 8015e84:	4b56      	ldr	r3, [pc, #344]	; (8015fe0 <tcp_process+0x7dc>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	68db      	ldr	r3, [r3, #12]
 8015e8a:	4a55      	ldr	r2, [pc, #340]	; (8015fe0 <tcp_process+0x7dc>)
 8015e8c:	6013      	str	r3, [r2, #0]
 8015e8e:	e013      	b.n	8015eb8 <tcp_process+0x6b4>
 8015e90:	4b53      	ldr	r3, [pc, #332]	; (8015fe0 <tcp_process+0x7dc>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	613b      	str	r3, [r7, #16]
 8015e96:	e00c      	b.n	8015eb2 <tcp_process+0x6ae>
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d104      	bne.n	8015eac <tcp_process+0x6a8>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	68da      	ldr	r2, [r3, #12]
 8015ea6:	693b      	ldr	r3, [r7, #16]
 8015ea8:	60da      	str	r2, [r3, #12]
 8015eaa:	e005      	b.n	8015eb8 <tcp_process+0x6b4>
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	613b      	str	r3, [r7, #16]
 8015eb2:	693b      	ldr	r3, [r7, #16]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d1ef      	bne.n	8015e98 <tcp_process+0x694>
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	60da      	str	r2, [r3, #12]
 8015ebe:	4b43      	ldr	r3, [pc, #268]	; (8015fcc <tcp_process+0x7c8>)
 8015ec0:	2201      	movs	r2, #1
 8015ec2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	220a      	movs	r2, #10
 8015ec8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015eca:	4b41      	ldr	r3, [pc, #260]	; (8015fd0 <tcp_process+0x7cc>)
 8015ecc:	681a      	ldr	r2, [r3, #0]
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	60da      	str	r2, [r3, #12]
 8015ed2:	4a3f      	ldr	r2, [pc, #252]	; (8015fd0 <tcp_process+0x7cc>)
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6013      	str	r3, [r2, #0]
 8015ed8:	f003 f8ea 	bl	80190b0 <tcp_timer_needed>
      }
      break;
 8015edc:	e06c      	b.n	8015fb8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 f984 	bl	80161ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015ee4:	4b3b      	ldr	r3, [pc, #236]	; (8015fd4 <tcp_process+0x7d0>)
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	f003 0310 	and.w	r3, r3, #16
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d065      	beq.n	8015fbc <tcp_process+0x7b8>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015ef4:	4b38      	ldr	r3, [pc, #224]	; (8015fd8 <tcp_process+0x7d4>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	429a      	cmp	r2, r3
 8015efa:	d15f      	bne.n	8015fbc <tcp_process+0x7b8>
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d15b      	bne.n	8015fbc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f7fe fcf1 	bl	80148ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015f0a:	4b35      	ldr	r3, [pc, #212]	; (8015fe0 <tcp_process+0x7dc>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d105      	bne.n	8015f20 <tcp_process+0x71c>
 8015f14:	4b32      	ldr	r3, [pc, #200]	; (8015fe0 <tcp_process+0x7dc>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	68db      	ldr	r3, [r3, #12]
 8015f1a:	4a31      	ldr	r2, [pc, #196]	; (8015fe0 <tcp_process+0x7dc>)
 8015f1c:	6013      	str	r3, [r2, #0]
 8015f1e:	e013      	b.n	8015f48 <tcp_process+0x744>
 8015f20:	4b2f      	ldr	r3, [pc, #188]	; (8015fe0 <tcp_process+0x7dc>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	60fb      	str	r3, [r7, #12]
 8015f26:	e00c      	b.n	8015f42 <tcp_process+0x73e>
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d104      	bne.n	8015f3c <tcp_process+0x738>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	68da      	ldr	r2, [r3, #12]
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	60da      	str	r2, [r3, #12]
 8015f3a:	e005      	b.n	8015f48 <tcp_process+0x744>
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	68db      	ldr	r3, [r3, #12]
 8015f40:	60fb      	str	r3, [r7, #12]
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d1ef      	bne.n	8015f28 <tcp_process+0x724>
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	60da      	str	r2, [r3, #12]
 8015f4e:	4b1f      	ldr	r3, [pc, #124]	; (8015fcc <tcp_process+0x7c8>)
 8015f50:	2201      	movs	r2, #1
 8015f52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	220a      	movs	r2, #10
 8015f58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015f5a:	4b1d      	ldr	r3, [pc, #116]	; (8015fd0 <tcp_process+0x7cc>)
 8015f5c:	681a      	ldr	r2, [r3, #0]
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	60da      	str	r2, [r3, #12]
 8015f62:	4a1b      	ldr	r2, [pc, #108]	; (8015fd0 <tcp_process+0x7cc>)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6013      	str	r3, [r2, #0]
 8015f68:	f003 f8a2 	bl	80190b0 <tcp_timer_needed>
      }
      break;
 8015f6c:	e026      	b.n	8015fbc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f000 f93c 	bl	80161ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015f74:	4b17      	ldr	r3, [pc, #92]	; (8015fd4 <tcp_process+0x7d0>)
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	f003 0310 	and.w	r3, r3, #16
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d01f      	beq.n	8015fc0 <tcp_process+0x7bc>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f84:	4b14      	ldr	r3, [pc, #80]	; (8015fd8 <tcp_process+0x7d4>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	d119      	bne.n	8015fc0 <tcp_process+0x7bc>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d115      	bne.n	8015fc0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015f94:	4b11      	ldr	r3, [pc, #68]	; (8015fdc <tcp_process+0x7d8>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	f043 0310 	orr.w	r3, r3, #16
 8015f9c:	b2da      	uxtb	r2, r3
 8015f9e:	4b0f      	ldr	r3, [pc, #60]	; (8015fdc <tcp_process+0x7d8>)
 8015fa0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015fa2:	e00d      	b.n	8015fc0 <tcp_process+0x7bc>
    default:
      break;
 8015fa4:	bf00      	nop
 8015fa6:	e00c      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fa8:	bf00      	nop
 8015faa:	e00a      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fac:	bf00      	nop
 8015fae:	e008      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fb0:	bf00      	nop
 8015fb2:	e006      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fb4:	bf00      	nop
 8015fb6:	e004      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fb8:	bf00      	nop
 8015fba:	e002      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fbc:	bf00      	nop
 8015fbe:	e000      	b.n	8015fc2 <tcp_process+0x7be>
      break;
 8015fc0:	bf00      	nop
  }
  return ERR_OK;
 8015fc2:	2300      	movs	r3, #0
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3724      	adds	r7, #36	; 0x24
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd90      	pop	{r4, r7, pc}
 8015fcc:	200133f8 	.word	0x200133f8
 8015fd0:	200133f4 	.word	0x200133f4
 8015fd4:	20013428 	.word	0x20013428
 8015fd8:	20013420 	.word	0x20013420
 8015fdc:	20013429 	.word	0x20013429
 8015fe0:	200133f0 	.word	0x200133f0

08015fe4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015fe4:	b590      	push	{r4, r7, lr}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d106      	bne.n	8016002 <tcp_oos_insert_segment+0x1e>
 8015ff4:	4b3b      	ldr	r3, [pc, #236]	; (80160e4 <tcp_oos_insert_segment+0x100>)
 8015ff6:	f240 421f 	movw	r2, #1055	; 0x41f
 8015ffa:	493b      	ldr	r1, [pc, #236]	; (80160e8 <tcp_oos_insert_segment+0x104>)
 8015ffc:	483b      	ldr	r0, [pc, #236]	; (80160ec <tcp_oos_insert_segment+0x108>)
 8015ffe:	f007 f865 	bl	801d0cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	68db      	ldr	r3, [r3, #12]
 8016006:	899b      	ldrh	r3, [r3, #12]
 8016008:	b29b      	uxth	r3, r3
 801600a:	4618      	mov	r0, r3
 801600c:	f7fb f93e 	bl	801128c <lwip_htons>
 8016010:	4603      	mov	r3, r0
 8016012:	b2db      	uxtb	r3, r3
 8016014:	f003 0301 	and.w	r3, r3, #1
 8016018:	2b00      	cmp	r3, #0
 801601a:	d028      	beq.n	801606e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801601c:	6838      	ldr	r0, [r7, #0]
 801601e:	f7fe f995 	bl	801434c <tcp_segs_free>
    next = NULL;
 8016022:	2300      	movs	r3, #0
 8016024:	603b      	str	r3, [r7, #0]
 8016026:	e056      	b.n	80160d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	68db      	ldr	r3, [r3, #12]
 801602c:	899b      	ldrh	r3, [r3, #12]
 801602e:	b29b      	uxth	r3, r3
 8016030:	4618      	mov	r0, r3
 8016032:	f7fb f92b 	bl	801128c <lwip_htons>
 8016036:	4603      	mov	r3, r0
 8016038:	b2db      	uxtb	r3, r3
 801603a:	f003 0301 	and.w	r3, r3, #1
 801603e:	2b00      	cmp	r3, #0
 8016040:	d00d      	beq.n	801605e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	899b      	ldrh	r3, [r3, #12]
 8016048:	b29c      	uxth	r4, r3
 801604a:	2001      	movs	r0, #1
 801604c:	f7fb f91e 	bl	801128c <lwip_htons>
 8016050:	4603      	mov	r3, r0
 8016052:	461a      	mov	r2, r3
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	4322      	orrs	r2, r4
 801605a:	b292      	uxth	r2, r2
 801605c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7fe f984 	bl	8014376 <tcp_seg_free>
    while (next &&
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d00e      	beq.n	8016092 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	891b      	ldrh	r3, [r3, #8]
 8016078:	461a      	mov	r2, r3
 801607a:	4b1d      	ldr	r3, [pc, #116]	; (80160f0 <tcp_oos_insert_segment+0x10c>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	441a      	add	r2, r3
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	685b      	ldr	r3, [r3, #4]
 8016086:	6839      	ldr	r1, [r7, #0]
 8016088:	8909      	ldrh	r1, [r1, #8]
 801608a:	440b      	add	r3, r1
 801608c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801608e:	2b00      	cmp	r3, #0
 8016090:	daca      	bge.n	8016028 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d01e      	beq.n	80160d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	891b      	ldrh	r3, [r3, #8]
 801609c:	461a      	mov	r2, r3
 801609e:	4b14      	ldr	r3, [pc, #80]	; (80160f0 <tcp_oos_insert_segment+0x10c>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	441a      	add	r2, r3
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	68db      	ldr	r3, [r3, #12]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	dd12      	ble.n	80160d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	68db      	ldr	r3, [r3, #12]
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	b29a      	uxth	r2, r3
 80160b8:	4b0d      	ldr	r3, [pc, #52]	; (80160f0 <tcp_oos_insert_segment+0x10c>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	b29b      	uxth	r3, r3
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	685a      	ldr	r2, [r3, #4]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	891b      	ldrh	r3, [r3, #8]
 80160ce:	4619      	mov	r1, r3
 80160d0:	4610      	mov	r0, r2
 80160d2:	f7fc fb47 	bl	8012764 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	683a      	ldr	r2, [r7, #0]
 80160da:	601a      	str	r2, [r3, #0]
}
 80160dc:	bf00      	nop
 80160de:	3714      	adds	r7, #20
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd90      	pop	{r4, r7, pc}
 80160e4:	080213a0 	.word	0x080213a0
 80160e8:	08021660 	.word	0x08021660
 80160ec:	080213ec 	.word	0x080213ec
 80160f0:	2001341c 	.word	0x2001341c

080160f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80160f4:	b5b0      	push	{r4, r5, r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	60f8      	str	r0, [r7, #12]
 80160fc:	60b9      	str	r1, [r7, #8]
 80160fe:	607a      	str	r2, [r7, #4]
 8016100:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016102:	e03e      	b.n	8016182 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	4618      	mov	r0, r3
 8016114:	f7fc fd3a 	bl	8012b8c <pbuf_clen>
 8016118:	4603      	mov	r3, r0
 801611a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016122:	8a7a      	ldrh	r2, [r7, #18]
 8016124:	429a      	cmp	r2, r3
 8016126:	d906      	bls.n	8016136 <tcp_free_acked_segments+0x42>
 8016128:	4b2a      	ldr	r3, [pc, #168]	; (80161d4 <tcp_free_acked_segments+0xe0>)
 801612a:	f240 4257 	movw	r2, #1111	; 0x457
 801612e:	492a      	ldr	r1, [pc, #168]	; (80161d8 <tcp_free_acked_segments+0xe4>)
 8016130:	482a      	ldr	r0, [pc, #168]	; (80161dc <tcp_free_acked_segments+0xe8>)
 8016132:	f006 ffcb 	bl	801d0cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801613c:	8a7b      	ldrh	r3, [r7, #18]
 801613e:	1ad3      	subs	r3, r2, r3
 8016140:	b29a      	uxth	r2, r3
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	891a      	ldrh	r2, [r3, #8]
 801614c:	4b24      	ldr	r3, [pc, #144]	; (80161e0 <tcp_free_acked_segments+0xec>)
 801614e:	881b      	ldrh	r3, [r3, #0]
 8016150:	4413      	add	r3, r2
 8016152:	b29a      	uxth	r2, r3
 8016154:	4b22      	ldr	r3, [pc, #136]	; (80161e0 <tcp_free_acked_segments+0xec>)
 8016156:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016158:	6978      	ldr	r0, [r7, #20]
 801615a:	f7fe f90c 	bl	8014376 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016164:	2b00      	cmp	r3, #0
 8016166:	d00c      	beq.n	8016182 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d109      	bne.n	8016182 <tcp_free_acked_segments+0x8e>
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d106      	bne.n	8016182 <tcp_free_acked_segments+0x8e>
 8016174:	4b17      	ldr	r3, [pc, #92]	; (80161d4 <tcp_free_acked_segments+0xe0>)
 8016176:	f240 4261 	movw	r2, #1121	; 0x461
 801617a:	491a      	ldr	r1, [pc, #104]	; (80161e4 <tcp_free_acked_segments+0xf0>)
 801617c:	4817      	ldr	r0, [pc, #92]	; (80161dc <tcp_free_acked_segments+0xe8>)
 801617e:	f006 ffa5 	bl	801d0cc <iprintf>
  while (seg_list != NULL &&
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d020      	beq.n	80161ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	4618      	mov	r0, r3
 8016190:	f7fb f891 	bl	80112b6 <lwip_htonl>
 8016194:	4604      	mov	r4, r0
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	891b      	ldrh	r3, [r3, #8]
 801619a:	461d      	mov	r5, r3
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	899b      	ldrh	r3, [r3, #12]
 80161a2:	b29b      	uxth	r3, r3
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7fb f871 	bl	801128c <lwip_htons>
 80161aa:	4603      	mov	r3, r0
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	f003 0303 	and.w	r3, r3, #3
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d001      	beq.n	80161ba <tcp_free_acked_segments+0xc6>
 80161b6:	2301      	movs	r3, #1
 80161b8:	e000      	b.n	80161bc <tcp_free_acked_segments+0xc8>
 80161ba:	2300      	movs	r3, #0
 80161bc:	442b      	add	r3, r5
 80161be:	18e2      	adds	r2, r4, r3
 80161c0:	4b09      	ldr	r3, [pc, #36]	; (80161e8 <tcp_free_acked_segments+0xf4>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	dd9c      	ble.n	8016104 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80161ca:	68bb      	ldr	r3, [r7, #8]
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3718      	adds	r7, #24
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bdb0      	pop	{r4, r5, r7, pc}
 80161d4:	080213a0 	.word	0x080213a0
 80161d8:	08021688 	.word	0x08021688
 80161dc:	080213ec 	.word	0x080213ec
 80161e0:	20013424 	.word	0x20013424
 80161e4:	080216b0 	.word	0x080216b0
 80161e8:	20013420 	.word	0x20013420

080161ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80161ec:	b5b0      	push	{r4, r5, r7, lr}
 80161ee:	b094      	sub	sp, #80	; 0x50
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80161f4:	2300      	movs	r3, #0
 80161f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d106      	bne.n	801620c <tcp_receive+0x20>
 80161fe:	4b91      	ldr	r3, [pc, #580]	; (8016444 <tcp_receive+0x258>)
 8016200:	f240 427b 	movw	r2, #1147	; 0x47b
 8016204:	4990      	ldr	r1, [pc, #576]	; (8016448 <tcp_receive+0x25c>)
 8016206:	4891      	ldr	r0, [pc, #580]	; (801644c <tcp_receive+0x260>)
 8016208:	f006 ff60 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	7d1b      	ldrb	r3, [r3, #20]
 8016210:	2b03      	cmp	r3, #3
 8016212:	d806      	bhi.n	8016222 <tcp_receive+0x36>
 8016214:	4b8b      	ldr	r3, [pc, #556]	; (8016444 <tcp_receive+0x258>)
 8016216:	f240 427c 	movw	r2, #1148	; 0x47c
 801621a:	498d      	ldr	r1, [pc, #564]	; (8016450 <tcp_receive+0x264>)
 801621c:	488b      	ldr	r0, [pc, #556]	; (801644c <tcp_receive+0x260>)
 801621e:	f006 ff55 	bl	801d0cc <iprintf>

  if (flags & TCP_ACK) {
 8016222:	4b8c      	ldr	r3, [pc, #560]	; (8016454 <tcp_receive+0x268>)
 8016224:	781b      	ldrb	r3, [r3, #0]
 8016226:	f003 0310 	and.w	r3, r3, #16
 801622a:	2b00      	cmp	r3, #0
 801622c:	f000 8264 	beq.w	80166f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016236:	461a      	mov	r2, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801623c:	4413      	add	r3, r2
 801623e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016244:	4b84      	ldr	r3, [pc, #528]	; (8016458 <tcp_receive+0x26c>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	1ad3      	subs	r3, r2, r3
 801624a:	2b00      	cmp	r3, #0
 801624c:	db1b      	blt.n	8016286 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016252:	4b81      	ldr	r3, [pc, #516]	; (8016458 <tcp_receive+0x26c>)
 8016254:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016256:	429a      	cmp	r2, r3
 8016258:	d106      	bne.n	8016268 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801625e:	4b7f      	ldr	r3, [pc, #508]	; (801645c <tcp_receive+0x270>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	db0e      	blt.n	8016286 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801626c:	4b7b      	ldr	r3, [pc, #492]	; (801645c <tcp_receive+0x270>)
 801626e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016270:	429a      	cmp	r2, r3
 8016272:	d125      	bne.n	80162c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016274:	4b7a      	ldr	r3, [pc, #488]	; (8016460 <tcp_receive+0x274>)
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	89db      	ldrh	r3, [r3, #14]
 801627a:	b29a      	uxth	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016282:	429a      	cmp	r2, r3
 8016284:	d91c      	bls.n	80162c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016286:	4b76      	ldr	r3, [pc, #472]	; (8016460 <tcp_receive+0x274>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	89db      	ldrh	r3, [r3, #14]
 801628c:	b29a      	uxth	r2, r3
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d205      	bcs.n	80162b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80162b0:	4b69      	ldr	r3, [pc, #420]	; (8016458 <tcp_receive+0x26c>)
 80162b2:	681a      	ldr	r2, [r3, #0]
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80162b8:	4b68      	ldr	r3, [pc, #416]	; (801645c <tcp_receive+0x270>)
 80162ba:	681a      	ldr	r2, [r3, #0]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80162c0:	4b66      	ldr	r3, [pc, #408]	; (801645c <tcp_receive+0x270>)
 80162c2:	681a      	ldr	r2, [r3, #0]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162c8:	1ad3      	subs	r3, r2, r3
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	dc58      	bgt.n	8016380 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80162ce:	4b65      	ldr	r3, [pc, #404]	; (8016464 <tcp_receive+0x278>)
 80162d0:	881b      	ldrh	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d14b      	bne.n	801636e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80162e0:	4413      	add	r3, r2
 80162e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d142      	bne.n	801636e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	db3d      	blt.n	801636e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80162f6:	4b59      	ldr	r3, [pc, #356]	; (801645c <tcp_receive+0x270>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d137      	bne.n	801636e <tcp_receive+0x182>
              found_dupack = 1;
 80162fe:	2301      	movs	r3, #1
 8016300:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016308:	2bff      	cmp	r3, #255	; 0xff
 801630a:	d007      	beq.n	801631c <tcp_receive+0x130>
                ++pcb->dupacks;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016312:	3301      	adds	r3, #1
 8016314:	b2da      	uxtb	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016322:	2b03      	cmp	r3, #3
 8016324:	d91b      	bls.n	801635e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016330:	4413      	add	r3, r2
 8016332:	b29a      	uxth	r2, r3
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801633a:	429a      	cmp	r2, r3
 801633c:	d30a      	bcc.n	8016354 <tcp_receive+0x168>
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016348:	4413      	add	r3, r2
 801634a:	b29a      	uxth	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016352:	e004      	b.n	801635e <tcp_receive+0x172>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801635a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016364:	2b02      	cmp	r3, #2
 8016366:	d902      	bls.n	801636e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f002 fb45 	bl	80189f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801636e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016370:	2b00      	cmp	r3, #0
 8016372:	f040 8161 	bne.w	8016638 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2200      	movs	r2, #0
 801637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801637e:	e15b      	b.n	8016638 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016380:	4b36      	ldr	r3, [pc, #216]	; (801645c <tcp_receive+0x270>)
 8016382:	681a      	ldr	r2, [r3, #0]
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016388:	1ad3      	subs	r3, r2, r3
 801638a:	3b01      	subs	r3, #1
 801638c:	2b00      	cmp	r3, #0
 801638e:	f2c0 814e 	blt.w	801662e <tcp_receive+0x442>
 8016392:	4b32      	ldr	r3, [pc, #200]	; (801645c <tcp_receive+0x270>)
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801639a:	1ad3      	subs	r3, r2, r3
 801639c:	2b00      	cmp	r3, #0
 801639e:	f300 8146 	bgt.w	801662e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	8b5b      	ldrh	r3, [r3, #26]
 80163a6:	f003 0304 	and.w	r3, r3, #4
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d010      	beq.n	80163d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	8b5b      	ldrh	r3, [r3, #26]
 80163b2:	f023 0304 	bic.w	r3, r3, #4
 80163b6:	b29a      	uxth	r2, r3
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2200      	movs	r2, #0
 80163cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2200      	movs	r2, #0
 80163d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80163de:	10db      	asrs	r3, r3, #3
 80163e0:	b21b      	sxth	r3, r3
 80163e2:	b29a      	uxth	r2, r3
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	4413      	add	r3, r2
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	b21a      	sxth	r2, r3
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80163f8:	4b18      	ldr	r3, [pc, #96]	; (801645c <tcp_receive+0x270>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	b29a      	uxth	r2, r3
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016402:	b29b      	uxth	r3, r3
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2200      	movs	r2, #0
 801640c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016410:	4b12      	ldr	r3, [pc, #72]	; (801645c <tcp_receive+0x270>)
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	7d1b      	ldrb	r3, [r3, #20]
 801641c:	2b03      	cmp	r3, #3
 801641e:	f240 8097 	bls.w	8016550 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801642e:	429a      	cmp	r2, r3
 8016430:	d245      	bcs.n	80164be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	8b5b      	ldrh	r3, [r3, #26]
 8016436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801643a:	2b00      	cmp	r3, #0
 801643c:	d014      	beq.n	8016468 <tcp_receive+0x27c>
 801643e:	2301      	movs	r3, #1
 8016440:	e013      	b.n	801646a <tcp_receive+0x27e>
 8016442:	bf00      	nop
 8016444:	080213a0 	.word	0x080213a0
 8016448:	080216d0 	.word	0x080216d0
 801644c:	080213ec 	.word	0x080213ec
 8016450:	080216ec 	.word	0x080216ec
 8016454:	20013428 	.word	0x20013428
 8016458:	2001341c 	.word	0x2001341c
 801645c:	20013420 	.word	0x20013420
 8016460:	2001340c 	.word	0x2001340c
 8016464:	20013426 	.word	0x20013426
 8016468:	2302      	movs	r3, #2
 801646a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801646e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016472:	b29a      	uxth	r2, r3
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016478:	fb12 f303 	smulbb	r3, r2, r3
 801647c:	b29b      	uxth	r3, r3
 801647e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016480:	4293      	cmp	r3, r2
 8016482:	bf28      	it	cs
 8016484:	4613      	movcs	r3, r2
 8016486:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801648e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016490:	4413      	add	r3, r2
 8016492:	b29a      	uxth	r2, r3
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801649a:	429a      	cmp	r2, r3
 801649c:	d309      	bcc.n	80164b2 <tcp_receive+0x2c6>
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80164a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80164a6:	4413      	add	r3, r2
 80164a8:	b29a      	uxth	r2, r3
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80164b0:	e04e      	b.n	8016550 <tcp_receive+0x364>
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80164bc:	e048      	b.n	8016550 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80164c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80164c6:	4413      	add	r3, r2
 80164c8:	b29a      	uxth	r2, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d309      	bcc.n	80164e8 <tcp_receive+0x2fc>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80164da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80164dc:	4413      	add	r3, r2
 80164de:	b29a      	uxth	r2, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80164e6:	e004      	b.n	80164f2 <tcp_receive+0x306>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80164fe:	429a      	cmp	r2, r3
 8016500:	d326      	bcc.n	8016550 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801650e:	1ad3      	subs	r3, r2, r3
 8016510:	b29a      	uxth	r2, r3
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016522:	4413      	add	r3, r2
 8016524:	b29a      	uxth	r2, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801652c:	429a      	cmp	r2, r3
 801652e:	d30a      	bcc.n	8016546 <tcp_receive+0x35a>
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801653a:	4413      	add	r3, r2
 801653c:	b29a      	uxth	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016544:	e004      	b.n	8016550 <tcp_receive+0x364>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801654c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016558:	4a98      	ldr	r2, [pc, #608]	; (80167bc <tcp_receive+0x5d0>)
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f7ff fdca 	bl	80160f4 <tcp_free_acked_segments>
 8016560:	4602      	mov	r2, r0
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801656e:	4a94      	ldr	r2, [pc, #592]	; (80167c0 <tcp_receive+0x5d4>)
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f7ff fdbf 	bl	80160f4 <tcp_free_acked_segments>
 8016576:	4602      	mov	r2, r0
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016580:	2b00      	cmp	r3, #0
 8016582:	d104      	bne.n	801658e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801658a:	861a      	strh	r2, [r3, #48]	; 0x30
 801658c:	e002      	b.n	8016594 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2200      	movs	r2, #0
 8016592:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2200      	movs	r2, #0
 8016598:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d103      	bne.n	80165aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2200      	movs	r2, #0
 80165a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80165b0:	4b84      	ldr	r3, [pc, #528]	; (80167c4 <tcp_receive+0x5d8>)
 80165b2:	881b      	ldrh	r3, [r3, #0]
 80165b4:	4413      	add	r3, r2
 80165b6:	b29a      	uxth	r2, r3
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	8b5b      	ldrh	r3, [r3, #26]
 80165c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d035      	beq.n	8016636 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d118      	bne.n	8016604 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d00c      	beq.n	80165f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165e2:	68db      	ldr	r3, [r3, #12]
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7fa fe65 	bl	80112b6 <lwip_htonl>
 80165ec:	4603      	mov	r3, r0
 80165ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	dc20      	bgt.n	8016636 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	8b5b      	ldrh	r3, [r3, #26]
 80165f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80165fc:	b29a      	uxth	r2, r3
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016602:	e018      	b.n	8016636 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801660c:	68db      	ldr	r3, [r3, #12]
 801660e:	685b      	ldr	r3, [r3, #4]
 8016610:	4618      	mov	r0, r3
 8016612:	f7fa fe50 	bl	80112b6 <lwip_htonl>
 8016616:	4603      	mov	r3, r0
 8016618:	1ae3      	subs	r3, r4, r3
 801661a:	2b00      	cmp	r3, #0
 801661c:	dc0b      	bgt.n	8016636 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	8b5b      	ldrh	r3, [r3, #26]
 8016622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016626:	b29a      	uxth	r2, r3
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801662c:	e003      	b.n	8016636 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f002 fbce 	bl	8018dd0 <tcp_send_empty_ack>
 8016634:	e000      	b.n	8016638 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016636:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801663c:	2b00      	cmp	r3, #0
 801663e:	d05b      	beq.n	80166f8 <tcp_receive+0x50c>
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016644:	4b60      	ldr	r3, [pc, #384]	; (80167c8 <tcp_receive+0x5dc>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	1ad3      	subs	r3, r2, r3
 801664a:	2b00      	cmp	r3, #0
 801664c:	da54      	bge.n	80166f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801664e:	4b5f      	ldr	r3, [pc, #380]	; (80167cc <tcp_receive+0x5e0>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	b29a      	uxth	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016658:	b29b      	uxth	r3, r3
 801665a:	1ad3      	subs	r3, r2, r3
 801665c:	b29b      	uxth	r3, r3
 801665e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016662:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801666c:	10db      	asrs	r3, r3, #3
 801666e:	b21b      	sxth	r3, r3
 8016670:	b29b      	uxth	r3, r3
 8016672:	1ad3      	subs	r3, r2, r3
 8016674:	b29b      	uxth	r3, r3
 8016676:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016680:	b29a      	uxth	r2, r3
 8016682:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016686:	4413      	add	r3, r2
 8016688:	b29b      	uxth	r3, r3
 801668a:	b21a      	sxth	r2, r3
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016690:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016694:	2b00      	cmp	r3, #0
 8016696:	da05      	bge.n	80166a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016698:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801669c:	425b      	negs	r3, r3
 801669e:	b29b      	uxth	r3, r3
 80166a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80166a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80166ae:	109b      	asrs	r3, r3, #2
 80166b0:	b21b      	sxth	r3, r3
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	1ad3      	subs	r3, r2, r3
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80166c2:	b29a      	uxth	r2, r3
 80166c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80166c8:	4413      	add	r3, r2
 80166ca:	b29b      	uxth	r3, r3
 80166cc:	b21a      	sxth	r2, r3
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80166d8:	10db      	asrs	r3, r3, #3
 80166da:	b21b      	sxth	r3, r3
 80166dc:	b29a      	uxth	r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80166e4:	b29b      	uxth	r3, r3
 80166e6:	4413      	add	r3, r2
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	b21a      	sxth	r2, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80166f8:	4b35      	ldr	r3, [pc, #212]	; (80167d0 <tcp_receive+0x5e4>)
 80166fa:	881b      	ldrh	r3, [r3, #0]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	f000 84e2 	beq.w	80170c6 <tcp_receive+0xeda>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	7d1b      	ldrb	r3, [r3, #20]
 8016706:	2b06      	cmp	r3, #6
 8016708:	f200 84dd 	bhi.w	80170c6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016710:	4b30      	ldr	r3, [pc, #192]	; (80167d4 <tcp_receive+0x5e8>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	1ad3      	subs	r3, r2, r3
 8016716:	3b01      	subs	r3, #1
 8016718:	2b00      	cmp	r3, #0
 801671a:	f2c0 808f 	blt.w	801683c <tcp_receive+0x650>
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016722:	4b2b      	ldr	r3, [pc, #172]	; (80167d0 <tcp_receive+0x5e4>)
 8016724:	881b      	ldrh	r3, [r3, #0]
 8016726:	4619      	mov	r1, r3
 8016728:	4b2a      	ldr	r3, [pc, #168]	; (80167d4 <tcp_receive+0x5e8>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	440b      	add	r3, r1
 801672e:	1ad3      	subs	r3, r2, r3
 8016730:	3301      	adds	r3, #1
 8016732:	2b00      	cmp	r3, #0
 8016734:	f300 8082 	bgt.w	801683c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016738:	4b27      	ldr	r3, [pc, #156]	; (80167d8 <tcp_receive+0x5ec>)
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016742:	4b24      	ldr	r3, [pc, #144]	; (80167d4 <tcp_receive+0x5e8>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	1ad3      	subs	r3, r2, r3
 8016748:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801674a:	4b23      	ldr	r3, [pc, #140]	; (80167d8 <tcp_receive+0x5ec>)
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d106      	bne.n	8016760 <tcp_receive+0x574>
 8016752:	4b22      	ldr	r3, [pc, #136]	; (80167dc <tcp_receive+0x5f0>)
 8016754:	f240 5294 	movw	r2, #1428	; 0x594
 8016758:	4921      	ldr	r1, [pc, #132]	; (80167e0 <tcp_receive+0x5f4>)
 801675a:	4822      	ldr	r0, [pc, #136]	; (80167e4 <tcp_receive+0x5f8>)
 801675c:	f006 fcb6 	bl	801d0cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016762:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016766:	4293      	cmp	r3, r2
 8016768:	d906      	bls.n	8016778 <tcp_receive+0x58c>
 801676a:	4b1c      	ldr	r3, [pc, #112]	; (80167dc <tcp_receive+0x5f0>)
 801676c:	f240 5295 	movw	r2, #1429	; 0x595
 8016770:	491d      	ldr	r1, [pc, #116]	; (80167e8 <tcp_receive+0x5fc>)
 8016772:	481c      	ldr	r0, [pc, #112]	; (80167e4 <tcp_receive+0x5f8>)
 8016774:	f006 fcaa 	bl	801d0cc <iprintf>
      off = (u16_t)off32;
 8016778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801677e:	4b16      	ldr	r3, [pc, #88]	; (80167d8 <tcp_receive+0x5ec>)
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	891b      	ldrh	r3, [r3, #8]
 8016784:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016788:	429a      	cmp	r2, r3
 801678a:	d906      	bls.n	801679a <tcp_receive+0x5ae>
 801678c:	4b13      	ldr	r3, [pc, #76]	; (80167dc <tcp_receive+0x5f0>)
 801678e:	f240 5297 	movw	r2, #1431	; 0x597
 8016792:	4916      	ldr	r1, [pc, #88]	; (80167ec <tcp_receive+0x600>)
 8016794:	4813      	ldr	r0, [pc, #76]	; (80167e4 <tcp_receive+0x5f8>)
 8016796:	f006 fc99 	bl	801d0cc <iprintf>
      inseg.len -= off;
 801679a:	4b0f      	ldr	r3, [pc, #60]	; (80167d8 <tcp_receive+0x5ec>)
 801679c:	891a      	ldrh	r2, [r3, #8]
 801679e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80167a2:	1ad3      	subs	r3, r2, r3
 80167a4:	b29a      	uxth	r2, r3
 80167a6:	4b0c      	ldr	r3, [pc, #48]	; (80167d8 <tcp_receive+0x5ec>)
 80167a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80167aa:	4b0b      	ldr	r3, [pc, #44]	; (80167d8 <tcp_receive+0x5ec>)
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	891a      	ldrh	r2, [r3, #8]
 80167b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80167b4:	1ad3      	subs	r3, r2, r3
 80167b6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80167b8:	e02a      	b.n	8016810 <tcp_receive+0x624>
 80167ba:	bf00      	nop
 80167bc:	08021708 	.word	0x08021708
 80167c0:	08021710 	.word	0x08021710
 80167c4:	20013424 	.word	0x20013424
 80167c8:	20013420 	.word	0x20013420
 80167cc:	200133e4 	.word	0x200133e4
 80167d0:	20013426 	.word	0x20013426
 80167d4:	2001341c 	.word	0x2001341c
 80167d8:	200133fc 	.word	0x200133fc
 80167dc:	080213a0 	.word	0x080213a0
 80167e0:	08021718 	.word	0x08021718
 80167e4:	080213ec 	.word	0x080213ec
 80167e8:	08021728 	.word	0x08021728
 80167ec:	08021738 	.word	0x08021738
        off -= p->len;
 80167f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167f2:	895b      	ldrh	r3, [r3, #10]
 80167f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80167f8:	1ad3      	subs	r3, r2, r3
 80167fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80167fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016800:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016802:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016806:	2200      	movs	r2, #0
 8016808:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801680a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016812:	895b      	ldrh	r3, [r3, #10]
 8016814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016818:	429a      	cmp	r2, r3
 801681a:	d8e9      	bhi.n	80167f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801681c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016820:	4619      	mov	r1, r3
 8016822:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016824:	f7fc f89e 	bl	8012964 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801682c:	4a91      	ldr	r2, [pc, #580]	; (8016a74 <tcp_receive+0x888>)
 801682e:	6013      	str	r3, [r2, #0]
 8016830:	4b91      	ldr	r3, [pc, #580]	; (8016a78 <tcp_receive+0x88c>)
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	4a8f      	ldr	r2, [pc, #572]	; (8016a74 <tcp_receive+0x888>)
 8016836:	6812      	ldr	r2, [r2, #0]
 8016838:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801683a:	e00d      	b.n	8016858 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801683c:	4b8d      	ldr	r3, [pc, #564]	; (8016a74 <tcp_receive+0x888>)
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016844:	1ad3      	subs	r3, r2, r3
 8016846:	2b00      	cmp	r3, #0
 8016848:	da06      	bge.n	8016858 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	8b5b      	ldrh	r3, [r3, #26]
 801684e:	f043 0302 	orr.w	r3, r3, #2
 8016852:	b29a      	uxth	r2, r3
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016858:	4b86      	ldr	r3, [pc, #536]	; (8016a74 <tcp_receive+0x888>)
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016860:	1ad3      	subs	r3, r2, r3
 8016862:	2b00      	cmp	r3, #0
 8016864:	f2c0 842a 	blt.w	80170bc <tcp_receive+0xed0>
 8016868:	4b82      	ldr	r3, [pc, #520]	; (8016a74 <tcp_receive+0x888>)
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016870:	6879      	ldr	r1, [r7, #4]
 8016872:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016874:	440b      	add	r3, r1
 8016876:	1ad3      	subs	r3, r2, r3
 8016878:	3301      	adds	r3, #1
 801687a:	2b00      	cmp	r3, #0
 801687c:	f300 841e 	bgt.w	80170bc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016884:	4b7b      	ldr	r3, [pc, #492]	; (8016a74 <tcp_receive+0x888>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	429a      	cmp	r2, r3
 801688a:	f040 829a 	bne.w	8016dc2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801688e:	4b7a      	ldr	r3, [pc, #488]	; (8016a78 <tcp_receive+0x88c>)
 8016890:	891c      	ldrh	r4, [r3, #8]
 8016892:	4b79      	ldr	r3, [pc, #484]	; (8016a78 <tcp_receive+0x88c>)
 8016894:	68db      	ldr	r3, [r3, #12]
 8016896:	899b      	ldrh	r3, [r3, #12]
 8016898:	b29b      	uxth	r3, r3
 801689a:	4618      	mov	r0, r3
 801689c:	f7fa fcf6 	bl	801128c <lwip_htons>
 80168a0:	4603      	mov	r3, r0
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	f003 0303 	and.w	r3, r3, #3
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d001      	beq.n	80168b0 <tcp_receive+0x6c4>
 80168ac:	2301      	movs	r3, #1
 80168ae:	e000      	b.n	80168b2 <tcp_receive+0x6c6>
 80168b0:	2300      	movs	r3, #0
 80168b2:	4423      	add	r3, r4
 80168b4:	b29a      	uxth	r2, r3
 80168b6:	4b71      	ldr	r3, [pc, #452]	; (8016a7c <tcp_receive+0x890>)
 80168b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80168be:	4b6f      	ldr	r3, [pc, #444]	; (8016a7c <tcp_receive+0x890>)
 80168c0:	881b      	ldrh	r3, [r3, #0]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d275      	bcs.n	80169b2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80168c6:	4b6c      	ldr	r3, [pc, #432]	; (8016a78 <tcp_receive+0x88c>)
 80168c8:	68db      	ldr	r3, [r3, #12]
 80168ca:	899b      	ldrh	r3, [r3, #12]
 80168cc:	b29b      	uxth	r3, r3
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7fa fcdc 	bl	801128c <lwip_htons>
 80168d4:	4603      	mov	r3, r0
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	f003 0301 	and.w	r3, r3, #1
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d01f      	beq.n	8016920 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80168e0:	4b65      	ldr	r3, [pc, #404]	; (8016a78 <tcp_receive+0x88c>)
 80168e2:	68db      	ldr	r3, [r3, #12]
 80168e4:	899b      	ldrh	r3, [r3, #12]
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	b21b      	sxth	r3, r3
 80168ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80168ee:	b21c      	sxth	r4, r3
 80168f0:	4b61      	ldr	r3, [pc, #388]	; (8016a78 <tcp_receive+0x88c>)
 80168f2:	68db      	ldr	r3, [r3, #12]
 80168f4:	899b      	ldrh	r3, [r3, #12]
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7fa fcc7 	bl	801128c <lwip_htons>
 80168fe:	4603      	mov	r3, r0
 8016900:	b2db      	uxtb	r3, r3
 8016902:	b29b      	uxth	r3, r3
 8016904:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016908:	b29b      	uxth	r3, r3
 801690a:	4618      	mov	r0, r3
 801690c:	f7fa fcbe 	bl	801128c <lwip_htons>
 8016910:	4603      	mov	r3, r0
 8016912:	b21b      	sxth	r3, r3
 8016914:	4323      	orrs	r3, r4
 8016916:	b21a      	sxth	r2, r3
 8016918:	4b57      	ldr	r3, [pc, #348]	; (8016a78 <tcp_receive+0x88c>)
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	b292      	uxth	r2, r2
 801691e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016924:	4b54      	ldr	r3, [pc, #336]	; (8016a78 <tcp_receive+0x88c>)
 8016926:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016928:	4b53      	ldr	r3, [pc, #332]	; (8016a78 <tcp_receive+0x88c>)
 801692a:	68db      	ldr	r3, [r3, #12]
 801692c:	899b      	ldrh	r3, [r3, #12]
 801692e:	b29b      	uxth	r3, r3
 8016930:	4618      	mov	r0, r3
 8016932:	f7fa fcab 	bl	801128c <lwip_htons>
 8016936:	4603      	mov	r3, r0
 8016938:	b2db      	uxtb	r3, r3
 801693a:	f003 0302 	and.w	r3, r3, #2
 801693e:	2b00      	cmp	r3, #0
 8016940:	d005      	beq.n	801694e <tcp_receive+0x762>
            inseg.len -= 1;
 8016942:	4b4d      	ldr	r3, [pc, #308]	; (8016a78 <tcp_receive+0x88c>)
 8016944:	891b      	ldrh	r3, [r3, #8]
 8016946:	3b01      	subs	r3, #1
 8016948:	b29a      	uxth	r2, r3
 801694a:	4b4b      	ldr	r3, [pc, #300]	; (8016a78 <tcp_receive+0x88c>)
 801694c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801694e:	4b4a      	ldr	r3, [pc, #296]	; (8016a78 <tcp_receive+0x88c>)
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	4a49      	ldr	r2, [pc, #292]	; (8016a78 <tcp_receive+0x88c>)
 8016954:	8912      	ldrh	r2, [r2, #8]
 8016956:	4611      	mov	r1, r2
 8016958:	4618      	mov	r0, r3
 801695a:	f7fb ff03 	bl	8012764 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801695e:	4b46      	ldr	r3, [pc, #280]	; (8016a78 <tcp_receive+0x88c>)
 8016960:	891c      	ldrh	r4, [r3, #8]
 8016962:	4b45      	ldr	r3, [pc, #276]	; (8016a78 <tcp_receive+0x88c>)
 8016964:	68db      	ldr	r3, [r3, #12]
 8016966:	899b      	ldrh	r3, [r3, #12]
 8016968:	b29b      	uxth	r3, r3
 801696a:	4618      	mov	r0, r3
 801696c:	f7fa fc8e 	bl	801128c <lwip_htons>
 8016970:	4603      	mov	r3, r0
 8016972:	b2db      	uxtb	r3, r3
 8016974:	f003 0303 	and.w	r3, r3, #3
 8016978:	2b00      	cmp	r3, #0
 801697a:	d001      	beq.n	8016980 <tcp_receive+0x794>
 801697c:	2301      	movs	r3, #1
 801697e:	e000      	b.n	8016982 <tcp_receive+0x796>
 8016980:	2300      	movs	r3, #0
 8016982:	4423      	add	r3, r4
 8016984:	b29a      	uxth	r2, r3
 8016986:	4b3d      	ldr	r3, [pc, #244]	; (8016a7c <tcp_receive+0x890>)
 8016988:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801698a:	4b3c      	ldr	r3, [pc, #240]	; (8016a7c <tcp_receive+0x890>)
 801698c:	881b      	ldrh	r3, [r3, #0]
 801698e:	461a      	mov	r2, r3
 8016990:	4b38      	ldr	r3, [pc, #224]	; (8016a74 <tcp_receive+0x888>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	441a      	add	r2, r3
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801699a:	6879      	ldr	r1, [r7, #4]
 801699c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801699e:	440b      	add	r3, r1
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d006      	beq.n	80169b2 <tcp_receive+0x7c6>
 80169a4:	4b36      	ldr	r3, [pc, #216]	; (8016a80 <tcp_receive+0x894>)
 80169a6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80169aa:	4936      	ldr	r1, [pc, #216]	; (8016a84 <tcp_receive+0x898>)
 80169ac:	4836      	ldr	r0, [pc, #216]	; (8016a88 <tcp_receive+0x89c>)
 80169ae:	f006 fb8d 	bl	801d0cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	f000 80e7 	beq.w	8016b8a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80169bc:	4b2e      	ldr	r3, [pc, #184]	; (8016a78 <tcp_receive+0x88c>)
 80169be:	68db      	ldr	r3, [r3, #12]
 80169c0:	899b      	ldrh	r3, [r3, #12]
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7fa fc61 	bl	801128c <lwip_htons>
 80169ca:	4603      	mov	r3, r0
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	f003 0301 	and.w	r3, r3, #1
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d010      	beq.n	80169f8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80169d6:	e00a      	b.n	80169ee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80169e8:	68f8      	ldr	r0, [r7, #12]
 80169ea:	f7fd fcc4 	bl	8014376 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d1f0      	bne.n	80169d8 <tcp_receive+0x7ec>
 80169f6:	e0c8      	b.n	8016b8a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80169fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80169fe:	e052      	b.n	8016aa6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a02:	68db      	ldr	r3, [r3, #12]
 8016a04:	899b      	ldrh	r3, [r3, #12]
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7fa fc3f 	bl	801128c <lwip_htons>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	b2db      	uxtb	r3, r3
 8016a12:	f003 0301 	and.w	r3, r3, #1
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d03d      	beq.n	8016a96 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016a1a:	4b17      	ldr	r3, [pc, #92]	; (8016a78 <tcp_receive+0x88c>)
 8016a1c:	68db      	ldr	r3, [r3, #12]
 8016a1e:	899b      	ldrh	r3, [r3, #12]
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7fa fc32 	bl	801128c <lwip_htons>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	b2db      	uxtb	r3, r3
 8016a2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d130      	bne.n	8016a96 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016a34:	4b10      	ldr	r3, [pc, #64]	; (8016a78 <tcp_receive+0x88c>)
 8016a36:	68db      	ldr	r3, [r3, #12]
 8016a38:	899b      	ldrh	r3, [r3, #12]
 8016a3a:	b29c      	uxth	r4, r3
 8016a3c:	2001      	movs	r0, #1
 8016a3e:	f7fa fc25 	bl	801128c <lwip_htons>
 8016a42:	4603      	mov	r3, r0
 8016a44:	461a      	mov	r2, r3
 8016a46:	4b0c      	ldr	r3, [pc, #48]	; (8016a78 <tcp_receive+0x88c>)
 8016a48:	68db      	ldr	r3, [r3, #12]
 8016a4a:	4322      	orrs	r2, r4
 8016a4c:	b292      	uxth	r2, r2
 8016a4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016a50:	4b09      	ldr	r3, [pc, #36]	; (8016a78 <tcp_receive+0x88c>)
 8016a52:	891c      	ldrh	r4, [r3, #8]
 8016a54:	4b08      	ldr	r3, [pc, #32]	; (8016a78 <tcp_receive+0x88c>)
 8016a56:	68db      	ldr	r3, [r3, #12]
 8016a58:	899b      	ldrh	r3, [r3, #12]
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7fa fc15 	bl	801128c <lwip_htons>
 8016a62:	4603      	mov	r3, r0
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	f003 0303 	and.w	r3, r3, #3
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d00e      	beq.n	8016a8c <tcp_receive+0x8a0>
 8016a6e:	2301      	movs	r3, #1
 8016a70:	e00d      	b.n	8016a8e <tcp_receive+0x8a2>
 8016a72:	bf00      	nop
 8016a74:	2001341c 	.word	0x2001341c
 8016a78:	200133fc 	.word	0x200133fc
 8016a7c:	20013426 	.word	0x20013426
 8016a80:	080213a0 	.word	0x080213a0
 8016a84:	08021748 	.word	0x08021748
 8016a88:	080213ec 	.word	0x080213ec
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	4423      	add	r3, r4
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	4b98      	ldr	r3, [pc, #608]	; (8016cf4 <tcp_receive+0xb08>)
 8016a94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a98:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016aa0:	6938      	ldr	r0, [r7, #16]
 8016aa2:	f7fd fc68 	bl	8014376 <tcp_seg_free>
            while (next &&
 8016aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d00e      	beq.n	8016aca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016aac:	4b91      	ldr	r3, [pc, #580]	; (8016cf4 <tcp_receive+0xb08>)
 8016aae:	881b      	ldrh	r3, [r3, #0]
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	4b91      	ldr	r3, [pc, #580]	; (8016cf8 <tcp_receive+0xb0c>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	441a      	add	r2, r3
 8016ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aba:	68db      	ldr	r3, [r3, #12]
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016ac0:	8909      	ldrh	r1, [r1, #8]
 8016ac2:	440b      	add	r3, r1
 8016ac4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	da9a      	bge.n	8016a00 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d059      	beq.n	8016b84 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016ad0:	4b88      	ldr	r3, [pc, #544]	; (8016cf4 <tcp_receive+0xb08>)
 8016ad2:	881b      	ldrh	r3, [r3, #0]
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	4b88      	ldr	r3, [pc, #544]	; (8016cf8 <tcp_receive+0xb0c>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	441a      	add	r2, r3
 8016adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ade:	68db      	ldr	r3, [r3, #12]
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	dd4d      	ble.n	8016b84 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aea:	68db      	ldr	r3, [r3, #12]
 8016aec:	685b      	ldr	r3, [r3, #4]
 8016aee:	b29a      	uxth	r2, r3
 8016af0:	4b81      	ldr	r3, [pc, #516]	; (8016cf8 <tcp_receive+0xb0c>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	1ad3      	subs	r3, r2, r3
 8016af8:	b29a      	uxth	r2, r3
 8016afa:	4b80      	ldr	r3, [pc, #512]	; (8016cfc <tcp_receive+0xb10>)
 8016afc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016afe:	4b7f      	ldr	r3, [pc, #508]	; (8016cfc <tcp_receive+0xb10>)
 8016b00:	68db      	ldr	r3, [r3, #12]
 8016b02:	899b      	ldrh	r3, [r3, #12]
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fa fbc0 	bl	801128c <lwip_htons>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	b2db      	uxtb	r3, r3
 8016b10:	f003 0302 	and.w	r3, r3, #2
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d005      	beq.n	8016b24 <tcp_receive+0x938>
                inseg.len -= 1;
 8016b18:	4b78      	ldr	r3, [pc, #480]	; (8016cfc <tcp_receive+0xb10>)
 8016b1a:	891b      	ldrh	r3, [r3, #8]
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	4b76      	ldr	r3, [pc, #472]	; (8016cfc <tcp_receive+0xb10>)
 8016b22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016b24:	4b75      	ldr	r3, [pc, #468]	; (8016cfc <tcp_receive+0xb10>)
 8016b26:	685b      	ldr	r3, [r3, #4]
 8016b28:	4a74      	ldr	r2, [pc, #464]	; (8016cfc <tcp_receive+0xb10>)
 8016b2a:	8912      	ldrh	r2, [r2, #8]
 8016b2c:	4611      	mov	r1, r2
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7fb fe18 	bl	8012764 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016b34:	4b71      	ldr	r3, [pc, #452]	; (8016cfc <tcp_receive+0xb10>)
 8016b36:	891c      	ldrh	r4, [r3, #8]
 8016b38:	4b70      	ldr	r3, [pc, #448]	; (8016cfc <tcp_receive+0xb10>)
 8016b3a:	68db      	ldr	r3, [r3, #12]
 8016b3c:	899b      	ldrh	r3, [r3, #12]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7fa fba3 	bl	801128c <lwip_htons>
 8016b46:	4603      	mov	r3, r0
 8016b48:	b2db      	uxtb	r3, r3
 8016b4a:	f003 0303 	and.w	r3, r3, #3
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d001      	beq.n	8016b56 <tcp_receive+0x96a>
 8016b52:	2301      	movs	r3, #1
 8016b54:	e000      	b.n	8016b58 <tcp_receive+0x96c>
 8016b56:	2300      	movs	r3, #0
 8016b58:	4423      	add	r3, r4
 8016b5a:	b29a      	uxth	r2, r3
 8016b5c:	4b65      	ldr	r3, [pc, #404]	; (8016cf4 <tcp_receive+0xb08>)
 8016b5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016b60:	4b64      	ldr	r3, [pc, #400]	; (8016cf4 <tcp_receive+0xb08>)
 8016b62:	881b      	ldrh	r3, [r3, #0]
 8016b64:	461a      	mov	r2, r3
 8016b66:	4b64      	ldr	r3, [pc, #400]	; (8016cf8 <tcp_receive+0xb0c>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	441a      	add	r2, r3
 8016b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	685b      	ldr	r3, [r3, #4]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d006      	beq.n	8016b84 <tcp_receive+0x998>
 8016b76:	4b62      	ldr	r3, [pc, #392]	; (8016d00 <tcp_receive+0xb14>)
 8016b78:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016b7c:	4961      	ldr	r1, [pc, #388]	; (8016d04 <tcp_receive+0xb18>)
 8016b7e:	4862      	ldr	r0, [pc, #392]	; (8016d08 <tcp_receive+0xb1c>)
 8016b80:	f006 faa4 	bl	801d0cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016b88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016b8a:	4b5a      	ldr	r3, [pc, #360]	; (8016cf4 <tcp_receive+0xb08>)
 8016b8c:	881b      	ldrh	r3, [r3, #0]
 8016b8e:	461a      	mov	r2, r3
 8016b90:	4b59      	ldr	r3, [pc, #356]	; (8016cf8 <tcp_receive+0xb0c>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	441a      	add	r2, r3
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b9e:	4b55      	ldr	r3, [pc, #340]	; (8016cf4 <tcp_receive+0xb08>)
 8016ba0:	881b      	ldrh	r3, [r3, #0]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d206      	bcs.n	8016bb4 <tcp_receive+0x9c8>
 8016ba6:	4b56      	ldr	r3, [pc, #344]	; (8016d00 <tcp_receive+0xb14>)
 8016ba8:	f240 6207 	movw	r2, #1543	; 0x607
 8016bac:	4957      	ldr	r1, [pc, #348]	; (8016d0c <tcp_receive+0xb20>)
 8016bae:	4856      	ldr	r0, [pc, #344]	; (8016d08 <tcp_receive+0xb1c>)
 8016bb0:	f006 fa8c 	bl	801d0cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016bb8:	4b4e      	ldr	r3, [pc, #312]	; (8016cf4 <tcp_receive+0xb08>)
 8016bba:	881b      	ldrh	r3, [r3, #0]
 8016bbc:	1ad3      	subs	r3, r2, r3
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f7fc feb1 	bl	801392c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016bca:	4b4c      	ldr	r3, [pc, #304]	; (8016cfc <tcp_receive+0xb10>)
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	891b      	ldrh	r3, [r3, #8]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d006      	beq.n	8016be2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016bd4:	4b49      	ldr	r3, [pc, #292]	; (8016cfc <tcp_receive+0xb10>)
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	4a4d      	ldr	r2, [pc, #308]	; (8016d10 <tcp_receive+0xb24>)
 8016bda:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016bdc:	4b47      	ldr	r3, [pc, #284]	; (8016cfc <tcp_receive+0xb10>)
 8016bde:	2200      	movs	r2, #0
 8016be0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016be2:	4b46      	ldr	r3, [pc, #280]	; (8016cfc <tcp_receive+0xb10>)
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	899b      	ldrh	r3, [r3, #12]
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7fa fb4e 	bl	801128c <lwip_htons>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	f003 0301 	and.w	r3, r3, #1
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f000 80b8 	beq.w	8016d6e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016bfe:	4b45      	ldr	r3, [pc, #276]	; (8016d14 <tcp_receive+0xb28>)
 8016c00:	781b      	ldrb	r3, [r3, #0]
 8016c02:	f043 0320 	orr.w	r3, r3, #32
 8016c06:	b2da      	uxtb	r2, r3
 8016c08:	4b42      	ldr	r3, [pc, #264]	; (8016d14 <tcp_receive+0xb28>)
 8016c0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016c0c:	e0af      	b.n	8016d6e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c18:	68db      	ldr	r3, [r3, #12]
 8016c1a:	685b      	ldr	r3, [r3, #4]
 8016c1c:	4a36      	ldr	r2, [pc, #216]	; (8016cf8 <tcp_receive+0xb0c>)
 8016c1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	891b      	ldrh	r3, [r3, #8]
 8016c24:	461c      	mov	r4, r3
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	68db      	ldr	r3, [r3, #12]
 8016c2a:	899b      	ldrh	r3, [r3, #12]
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fa fb2c 	bl	801128c <lwip_htons>
 8016c34:	4603      	mov	r3, r0
 8016c36:	b2db      	uxtb	r3, r3
 8016c38:	f003 0303 	and.w	r3, r3, #3
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d001      	beq.n	8016c44 <tcp_receive+0xa58>
 8016c40:	2301      	movs	r3, #1
 8016c42:	e000      	b.n	8016c46 <tcp_receive+0xa5a>
 8016c44:	2300      	movs	r3, #0
 8016c46:	191a      	adds	r2, r3, r4
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c4c:	441a      	add	r2, r3
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c56:	461c      	mov	r4, r3
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	891b      	ldrh	r3, [r3, #8]
 8016c5c:	461d      	mov	r5, r3
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	68db      	ldr	r3, [r3, #12]
 8016c62:	899b      	ldrh	r3, [r3, #12]
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7fa fb10 	bl	801128c <lwip_htons>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	b2db      	uxtb	r3, r3
 8016c70:	f003 0303 	and.w	r3, r3, #3
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d001      	beq.n	8016c7c <tcp_receive+0xa90>
 8016c78:	2301      	movs	r3, #1
 8016c7a:	e000      	b.n	8016c7e <tcp_receive+0xa92>
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	442b      	add	r3, r5
 8016c80:	429c      	cmp	r4, r3
 8016c82:	d206      	bcs.n	8016c92 <tcp_receive+0xaa6>
 8016c84:	4b1e      	ldr	r3, [pc, #120]	; (8016d00 <tcp_receive+0xb14>)
 8016c86:	f240 622b 	movw	r2, #1579	; 0x62b
 8016c8a:	4923      	ldr	r1, [pc, #140]	; (8016d18 <tcp_receive+0xb2c>)
 8016c8c:	481e      	ldr	r0, [pc, #120]	; (8016d08 <tcp_receive+0xb1c>)
 8016c8e:	f006 fa1d 	bl	801d0cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	891b      	ldrh	r3, [r3, #8]
 8016c96:	461c      	mov	r4, r3
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	899b      	ldrh	r3, [r3, #12]
 8016c9e:	b29b      	uxth	r3, r3
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7fa faf3 	bl	801128c <lwip_htons>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	f003 0303 	and.w	r3, r3, #3
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d001      	beq.n	8016cb6 <tcp_receive+0xaca>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	e000      	b.n	8016cb8 <tcp_receive+0xacc>
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	1919      	adds	r1, r3, r4
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016cbe:	b28b      	uxth	r3, r1
 8016cc0:	1ad3      	subs	r3, r2, r3
 8016cc2:	b29a      	uxth	r2, r3
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f7fc fe2f 	bl	801392c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	891b      	ldrh	r3, [r3, #8]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d028      	beq.n	8016d2a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016cd8:	4b0d      	ldr	r3, [pc, #52]	; (8016d10 <tcp_receive+0xb24>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d01d      	beq.n	8016d1c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016ce0:	4b0b      	ldr	r3, [pc, #44]	; (8016d10 <tcp_receive+0xb24>)
 8016ce2:	681a      	ldr	r2, [r3, #0]
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	685b      	ldr	r3, [r3, #4]
 8016ce8:	4619      	mov	r1, r3
 8016cea:	4610      	mov	r0, r2
 8016cec:	f7fb ff8e 	bl	8012c0c <pbuf_cat>
 8016cf0:	e018      	b.n	8016d24 <tcp_receive+0xb38>
 8016cf2:	bf00      	nop
 8016cf4:	20013426 	.word	0x20013426
 8016cf8:	2001341c 	.word	0x2001341c
 8016cfc:	200133fc 	.word	0x200133fc
 8016d00:	080213a0 	.word	0x080213a0
 8016d04:	08021780 	.word	0x08021780
 8016d08:	080213ec 	.word	0x080213ec
 8016d0c:	080217bc 	.word	0x080217bc
 8016d10:	2001342c 	.word	0x2001342c
 8016d14:	20013429 	.word	0x20013429
 8016d18:	080217dc 	.word	0x080217dc
            } else {
              recv_data = cseg->p;
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	685b      	ldr	r3, [r3, #4]
 8016d20:	4a70      	ldr	r2, [pc, #448]	; (8016ee4 <tcp_receive+0xcf8>)
 8016d22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	2200      	movs	r2, #0
 8016d28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	899b      	ldrh	r3, [r3, #12]
 8016d30:	b29b      	uxth	r3, r3
 8016d32:	4618      	mov	r0, r3
 8016d34:	f7fa faaa 	bl	801128c <lwip_htons>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	b2db      	uxtb	r3, r3
 8016d3c:	f003 0301 	and.w	r3, r3, #1
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d00d      	beq.n	8016d60 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016d44:	4b68      	ldr	r3, [pc, #416]	; (8016ee8 <tcp_receive+0xcfc>)
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	f043 0320 	orr.w	r3, r3, #32
 8016d4c:	b2da      	uxtb	r2, r3
 8016d4e:	4b66      	ldr	r3, [pc, #408]	; (8016ee8 <tcp_receive+0xcfc>)
 8016d50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	7d1b      	ldrb	r3, [r3, #20]
 8016d56:	2b04      	cmp	r3, #4
 8016d58:	d102      	bne.n	8016d60 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2207      	movs	r2, #7
 8016d5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	681a      	ldr	r2, [r3, #0]
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016d68:	68b8      	ldr	r0, [r7, #8]
 8016d6a:	f7fd fb04 	bl	8014376 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d008      	beq.n	8016d88 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	685a      	ldr	r2, [r3, #4]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016d82:	429a      	cmp	r2, r3
 8016d84:	f43f af43 	beq.w	8016c0e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	8b5b      	ldrh	r3, [r3, #26]
 8016d8c:	f003 0301 	and.w	r3, r3, #1
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d00e      	beq.n	8016db2 <tcp_receive+0xbc6>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	8b5b      	ldrh	r3, [r3, #26]
 8016d98:	f023 0301 	bic.w	r3, r3, #1
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	835a      	strh	r2, [r3, #26]
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	8b5b      	ldrh	r3, [r3, #26]
 8016da6:	f043 0302 	orr.w	r3, r3, #2
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016db0:	e188      	b.n	80170c4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	8b5b      	ldrh	r3, [r3, #26]
 8016db6:	f043 0301 	orr.w	r3, r3, #1
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016dc0:	e180      	b.n	80170c4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d106      	bne.n	8016dd8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016dca:	4848      	ldr	r0, [pc, #288]	; (8016eec <tcp_receive+0xd00>)
 8016dcc:	f7fd faec 	bl	80143a8 <tcp_seg_copy>
 8016dd0:	4602      	mov	r2, r0
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	675a      	str	r2, [r3, #116]	; 0x74
 8016dd6:	e16d      	b.n	80170b4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8016de2:	e157      	b.n	8017094 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016de6:	68db      	ldr	r3, [r3, #12]
 8016de8:	685a      	ldr	r2, [r3, #4]
 8016dea:	4b41      	ldr	r3, [pc, #260]	; (8016ef0 <tcp_receive+0xd04>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d11d      	bne.n	8016e2e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016df2:	4b3e      	ldr	r3, [pc, #248]	; (8016eec <tcp_receive+0xd00>)
 8016df4:	891a      	ldrh	r2, [r3, #8]
 8016df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df8:	891b      	ldrh	r3, [r3, #8]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	f240 814f 	bls.w	801709e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016e00:	483a      	ldr	r0, [pc, #232]	; (8016eec <tcp_receive+0xd00>)
 8016e02:	f7fd fad1 	bl	80143a8 <tcp_seg_copy>
 8016e06:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	f000 8149 	beq.w	80170a2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d003      	beq.n	8016e1e <tcp_receive+0xc32>
                    prev->next = cseg;
 8016e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e18:	697a      	ldr	r2, [r7, #20]
 8016e1a:	601a      	str	r2, [r3, #0]
 8016e1c:	e002      	b.n	8016e24 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	697a      	ldr	r2, [r7, #20]
 8016e22:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016e24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016e26:	6978      	ldr	r0, [r7, #20]
 8016e28:	f7ff f8dc 	bl	8015fe4 <tcp_oos_insert_segment>
                }
                break;
 8016e2c:	e139      	b.n	80170a2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d117      	bne.n	8016e64 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016e34:	4b2e      	ldr	r3, [pc, #184]	; (8016ef0 <tcp_receive+0xd04>)
 8016e36:	681a      	ldr	r2, [r3, #0]
 8016e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	685b      	ldr	r3, [r3, #4]
 8016e3e:	1ad3      	subs	r3, r2, r3
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	da57      	bge.n	8016ef4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016e44:	4829      	ldr	r0, [pc, #164]	; (8016eec <tcp_receive+0xd00>)
 8016e46:	f7fd faaf 	bl	80143a8 <tcp_seg_copy>
 8016e4a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	f000 8129 	beq.w	80170a6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	69ba      	ldr	r2, [r7, #24]
 8016e58:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016e5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016e5c:	69b8      	ldr	r0, [r7, #24]
 8016e5e:	f7ff f8c1 	bl	8015fe4 <tcp_oos_insert_segment>
                  }
                  break;
 8016e62:	e120      	b.n	80170a6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016e64:	4b22      	ldr	r3, [pc, #136]	; (8016ef0 <tcp_receive+0xd04>)
 8016e66:	681a      	ldr	r2, [r3, #0]
 8016e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e6a:	68db      	ldr	r3, [r3, #12]
 8016e6c:	685b      	ldr	r3, [r3, #4]
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	3b01      	subs	r3, #1
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	db3e      	blt.n	8016ef4 <tcp_receive+0xd08>
 8016e76:	4b1e      	ldr	r3, [pc, #120]	; (8016ef0 <tcp_receive+0xd04>)
 8016e78:	681a      	ldr	r2, [r3, #0]
 8016e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7c:	68db      	ldr	r3, [r3, #12]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	1ad3      	subs	r3, r2, r3
 8016e82:	3301      	adds	r3, #1
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	dc35      	bgt.n	8016ef4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016e88:	4818      	ldr	r0, [pc, #96]	; (8016eec <tcp_receive+0xd00>)
 8016e8a:	f7fd fa8d 	bl	80143a8 <tcp_seg_copy>
 8016e8e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016e90:	69fb      	ldr	r3, [r7, #28]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	f000 8109 	beq.w	80170aa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e9a:	68db      	ldr	r3, [r3, #12]
 8016e9c:	685b      	ldr	r3, [r3, #4]
 8016e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ea0:	8912      	ldrh	r2, [r2, #8]
 8016ea2:	441a      	add	r2, r3
 8016ea4:	4b12      	ldr	r3, [pc, #72]	; (8016ef0 <tcp_receive+0xd04>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	1ad3      	subs	r3, r2, r3
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	dd12      	ble.n	8016ed4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016eae:	4b10      	ldr	r3, [pc, #64]	; (8016ef0 <tcp_receive+0xd04>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	b29a      	uxth	r2, r3
 8016eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	b29b      	uxth	r3, r3
 8016ebc:	1ad3      	subs	r3, r2, r3
 8016ebe:	b29a      	uxth	r2, r3
 8016ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ec2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ec6:	685a      	ldr	r2, [r3, #4]
 8016ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eca:	891b      	ldrh	r3, [r3, #8]
 8016ecc:	4619      	mov	r1, r3
 8016ece:	4610      	mov	r0, r2
 8016ed0:	f7fb fc48 	bl	8012764 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ed6:	69fa      	ldr	r2, [r7, #28]
 8016ed8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016edc:	69f8      	ldr	r0, [r7, #28]
 8016ede:	f7ff f881 	bl	8015fe4 <tcp_oos_insert_segment>
                  }
                  break;
 8016ee2:	e0e2      	b.n	80170aa <tcp_receive+0xebe>
 8016ee4:	2001342c 	.word	0x2001342c
 8016ee8:	20013429 	.word	0x20013429
 8016eec:	200133fc 	.word	0x200133fc
 8016ef0:	2001341c 	.word	0x2001341c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f040 80c6 	bne.w	801708e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016f02:	4b80      	ldr	r3, [pc, #512]	; (8017104 <tcp_receive+0xf18>)
 8016f04:	681a      	ldr	r2, [r3, #0]
 8016f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f08:	68db      	ldr	r3, [r3, #12]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	f340 80bd 	ble.w	801708e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f16:	68db      	ldr	r3, [r3, #12]
 8016f18:	899b      	ldrh	r3, [r3, #12]
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7fa f9b5 	bl	801128c <lwip_htons>
 8016f22:	4603      	mov	r3, r0
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	f003 0301 	and.w	r3, r3, #1
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	f040 80bf 	bne.w	80170ae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016f30:	4875      	ldr	r0, [pc, #468]	; (8017108 <tcp_receive+0xf1c>)
 8016f32:	f7fd fa39 	bl	80143a8 <tcp_seg_copy>
 8016f36:	4602      	mov	r2, r0
 8016f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	f000 80b6 	beq.w	80170b2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f48:	68db      	ldr	r3, [r3, #12]
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f4e:	8912      	ldrh	r2, [r2, #8]
 8016f50:	441a      	add	r2, r3
 8016f52:	4b6c      	ldr	r3, [pc, #432]	; (8017104 <tcp_receive+0xf18>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	1ad3      	subs	r3, r2, r3
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	dd12      	ble.n	8016f82 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016f5c:	4b69      	ldr	r3, [pc, #420]	; (8017104 <tcp_receive+0xf18>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	b29a      	uxth	r2, r3
 8016f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f64:	68db      	ldr	r3, [r3, #12]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	b29b      	uxth	r3, r3
 8016f6a:	1ad3      	subs	r3, r2, r3
 8016f6c:	b29a      	uxth	r2, r3
 8016f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f70:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f74:	685a      	ldr	r2, [r3, #4]
 8016f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f78:	891b      	ldrh	r3, [r3, #8]
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	4610      	mov	r0, r2
 8016f7e:	f7fb fbf1 	bl	8012764 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016f82:	4b62      	ldr	r3, [pc, #392]	; (801710c <tcp_receive+0xf20>)
 8016f84:	881b      	ldrh	r3, [r3, #0]
 8016f86:	461a      	mov	r2, r3
 8016f88:	4b5e      	ldr	r3, [pc, #376]	; (8017104 <tcp_receive+0xf18>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	441a      	add	r2, r3
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f92:	6879      	ldr	r1, [r7, #4]
 8016f94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016f96:	440b      	add	r3, r1
 8016f98:	1ad3      	subs	r3, r2, r3
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	f340 8089 	ble.w	80170b2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	68db      	ldr	r3, [r3, #12]
 8016fa6:	899b      	ldrh	r3, [r3, #12]
 8016fa8:	b29b      	uxth	r3, r3
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7fa f96e 	bl	801128c <lwip_htons>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	f003 0301 	and.w	r3, r3, #1
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d022      	beq.n	8017002 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	68db      	ldr	r3, [r3, #12]
 8016fc2:	899b      	ldrh	r3, [r3, #12]
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	b21b      	sxth	r3, r3
 8016fc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016fcc:	b21c      	sxth	r4, r3
 8016fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	899b      	ldrh	r3, [r3, #12]
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7fa f957 	bl	801128c <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fa f94e 	bl	801128c <lwip_htons>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	b21b      	sxth	r3, r3
 8016ff4:	4323      	orrs	r3, r4
 8016ff6:	b21a      	sxth	r2, r3
 8016ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	68db      	ldr	r3, [r3, #12]
 8016ffe:	b292      	uxth	r2, r2
 8017000:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017006:	b29a      	uxth	r2, r3
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801700c:	4413      	add	r3, r2
 801700e:	b299      	uxth	r1, r3
 8017010:	4b3c      	ldr	r3, [pc, #240]	; (8017104 <tcp_receive+0xf18>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	b29a      	uxth	r2, r3
 8017016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	1a8a      	subs	r2, r1, r2
 801701c:	b292      	uxth	r2, r2
 801701e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	685a      	ldr	r2, [r3, #4]
 8017026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	891b      	ldrh	r3, [r3, #8]
 801702c:	4619      	mov	r1, r3
 801702e:	4610      	mov	r0, r2
 8017030:	f7fb fb98 	bl	8012764 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	891c      	ldrh	r4, [r3, #8]
 801703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	899b      	ldrh	r3, [r3, #12]
 8017042:	b29b      	uxth	r3, r3
 8017044:	4618      	mov	r0, r3
 8017046:	f7fa f921 	bl	801128c <lwip_htons>
 801704a:	4603      	mov	r3, r0
 801704c:	b2db      	uxtb	r3, r3
 801704e:	f003 0303 	and.w	r3, r3, #3
 8017052:	2b00      	cmp	r3, #0
 8017054:	d001      	beq.n	801705a <tcp_receive+0xe6e>
 8017056:	2301      	movs	r3, #1
 8017058:	e000      	b.n	801705c <tcp_receive+0xe70>
 801705a:	2300      	movs	r3, #0
 801705c:	4423      	add	r3, r4
 801705e:	b29a      	uxth	r2, r3
 8017060:	4b2a      	ldr	r3, [pc, #168]	; (801710c <tcp_receive+0xf20>)
 8017062:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017064:	4b29      	ldr	r3, [pc, #164]	; (801710c <tcp_receive+0xf20>)
 8017066:	881b      	ldrh	r3, [r3, #0]
 8017068:	461a      	mov	r2, r3
 801706a:	4b26      	ldr	r3, [pc, #152]	; (8017104 <tcp_receive+0xf18>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	441a      	add	r2, r3
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017074:	6879      	ldr	r1, [r7, #4]
 8017076:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017078:	440b      	add	r3, r1
 801707a:	429a      	cmp	r2, r3
 801707c:	d019      	beq.n	80170b2 <tcp_receive+0xec6>
 801707e:	4b24      	ldr	r3, [pc, #144]	; (8017110 <tcp_receive+0xf24>)
 8017080:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017084:	4923      	ldr	r1, [pc, #140]	; (8017114 <tcp_receive+0xf28>)
 8017086:	4824      	ldr	r0, [pc, #144]	; (8017118 <tcp_receive+0xf2c>)
 8017088:	f006 f820 	bl	801d0cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801708c:	e011      	b.n	80170b2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	63bb      	str	r3, [r7, #56]	; 0x38
 8017094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017096:	2b00      	cmp	r3, #0
 8017098:	f47f aea4 	bne.w	8016de4 <tcp_receive+0xbf8>
 801709c:	e00a      	b.n	80170b4 <tcp_receive+0xec8>
                break;
 801709e:	bf00      	nop
 80170a0:	e008      	b.n	80170b4 <tcp_receive+0xec8>
                break;
 80170a2:	bf00      	nop
 80170a4:	e006      	b.n	80170b4 <tcp_receive+0xec8>
                  break;
 80170a6:	bf00      	nop
 80170a8:	e004      	b.n	80170b4 <tcp_receive+0xec8>
                  break;
 80170aa:	bf00      	nop
 80170ac:	e002      	b.n	80170b4 <tcp_receive+0xec8>
                  break;
 80170ae:	bf00      	nop
 80170b0:	e000      	b.n	80170b4 <tcp_receive+0xec8>
                break;
 80170b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f001 fe8b 	bl	8018dd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80170ba:	e003      	b.n	80170c4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f001 fe87 	bl	8018dd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80170c2:	e01a      	b.n	80170fa <tcp_receive+0xf0e>
 80170c4:	e019      	b.n	80170fa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80170c6:	4b0f      	ldr	r3, [pc, #60]	; (8017104 <tcp_receive+0xf18>)
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ce:	1ad3      	subs	r3, r2, r3
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	db0a      	blt.n	80170ea <tcp_receive+0xefe>
 80170d4:	4b0b      	ldr	r3, [pc, #44]	; (8017104 <tcp_receive+0xf18>)
 80170d6:	681a      	ldr	r2, [r3, #0]
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170dc:	6879      	ldr	r1, [r7, #4]
 80170de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80170e0:	440b      	add	r3, r1
 80170e2:	1ad3      	subs	r3, r2, r3
 80170e4:	3301      	adds	r3, #1
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	dd07      	ble.n	80170fa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	8b5b      	ldrh	r3, [r3, #26]
 80170ee:	f043 0302 	orr.w	r3, r3, #2
 80170f2:	b29a      	uxth	r2, r3
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80170f8:	e7ff      	b.n	80170fa <tcp_receive+0xf0e>
 80170fa:	bf00      	nop
 80170fc:	3750      	adds	r7, #80	; 0x50
 80170fe:	46bd      	mov	sp, r7
 8017100:	bdb0      	pop	{r4, r5, r7, pc}
 8017102:	bf00      	nop
 8017104:	2001341c 	.word	0x2001341c
 8017108:	200133fc 	.word	0x200133fc
 801710c:	20013426 	.word	0x20013426
 8017110:	080213a0 	.word	0x080213a0
 8017114:	08021748 	.word	0x08021748
 8017118:	080213ec 	.word	0x080213ec

0801711c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017122:	4b15      	ldr	r3, [pc, #84]	; (8017178 <tcp_get_next_optbyte+0x5c>)
 8017124:	881b      	ldrh	r3, [r3, #0]
 8017126:	1c5a      	adds	r2, r3, #1
 8017128:	b291      	uxth	r1, r2
 801712a:	4a13      	ldr	r2, [pc, #76]	; (8017178 <tcp_get_next_optbyte+0x5c>)
 801712c:	8011      	strh	r1, [r2, #0]
 801712e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017130:	4b12      	ldr	r3, [pc, #72]	; (801717c <tcp_get_next_optbyte+0x60>)
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d004      	beq.n	8017142 <tcp_get_next_optbyte+0x26>
 8017138:	4b11      	ldr	r3, [pc, #68]	; (8017180 <tcp_get_next_optbyte+0x64>)
 801713a:	881b      	ldrh	r3, [r3, #0]
 801713c:	88fa      	ldrh	r2, [r7, #6]
 801713e:	429a      	cmp	r2, r3
 8017140:	d208      	bcs.n	8017154 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017142:	4b10      	ldr	r3, [pc, #64]	; (8017184 <tcp_get_next_optbyte+0x68>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	3314      	adds	r3, #20
 8017148:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801714a:	88fb      	ldrh	r3, [r7, #6]
 801714c:	683a      	ldr	r2, [r7, #0]
 801714e:	4413      	add	r3, r2
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	e00b      	b.n	801716c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017154:	88fb      	ldrh	r3, [r7, #6]
 8017156:	b2da      	uxtb	r2, r3
 8017158:	4b09      	ldr	r3, [pc, #36]	; (8017180 <tcp_get_next_optbyte+0x64>)
 801715a:	881b      	ldrh	r3, [r3, #0]
 801715c:	b2db      	uxtb	r3, r3
 801715e:	1ad3      	subs	r3, r2, r3
 8017160:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017162:	4b06      	ldr	r3, [pc, #24]	; (801717c <tcp_get_next_optbyte+0x60>)
 8017164:	681a      	ldr	r2, [r3, #0]
 8017166:	797b      	ldrb	r3, [r7, #5]
 8017168:	4413      	add	r3, r2
 801716a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801716c:	4618      	mov	r0, r3
 801716e:	370c      	adds	r7, #12
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr
 8017178:	20013418 	.word	0x20013418
 801717c:	20013414 	.word	0x20013414
 8017180:	20013412 	.word	0x20013412
 8017184:	2001340c 	.word	0x2001340c

08017188 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b084      	sub	sp, #16
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d106      	bne.n	80171a4 <tcp_parseopt+0x1c>
 8017196:	4b32      	ldr	r3, [pc, #200]	; (8017260 <tcp_parseopt+0xd8>)
 8017198:	f240 727d 	movw	r2, #1917	; 0x77d
 801719c:	4931      	ldr	r1, [pc, #196]	; (8017264 <tcp_parseopt+0xdc>)
 801719e:	4832      	ldr	r0, [pc, #200]	; (8017268 <tcp_parseopt+0xe0>)
 80171a0:	f005 ff94 	bl	801d0cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80171a4:	4b31      	ldr	r3, [pc, #196]	; (801726c <tcp_parseopt+0xe4>)
 80171a6:	881b      	ldrh	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d055      	beq.n	8017258 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80171ac:	4b30      	ldr	r3, [pc, #192]	; (8017270 <tcp_parseopt+0xe8>)
 80171ae:	2200      	movs	r2, #0
 80171b0:	801a      	strh	r2, [r3, #0]
 80171b2:	e045      	b.n	8017240 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80171b4:	f7ff ffb2 	bl	801711c <tcp_get_next_optbyte>
 80171b8:	4603      	mov	r3, r0
 80171ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80171bc:	7bfb      	ldrb	r3, [r7, #15]
 80171be:	2b02      	cmp	r3, #2
 80171c0:	d006      	beq.n	80171d0 <tcp_parseopt+0x48>
 80171c2:	2b02      	cmp	r3, #2
 80171c4:	dc2b      	bgt.n	801721e <tcp_parseopt+0x96>
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d041      	beq.n	801724e <tcp_parseopt+0xc6>
 80171ca:	2b01      	cmp	r3, #1
 80171cc:	d127      	bne.n	801721e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80171ce:	e037      	b.n	8017240 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80171d0:	f7ff ffa4 	bl	801711c <tcp_get_next_optbyte>
 80171d4:	4603      	mov	r3, r0
 80171d6:	2b04      	cmp	r3, #4
 80171d8:	d13b      	bne.n	8017252 <tcp_parseopt+0xca>
 80171da:	4b25      	ldr	r3, [pc, #148]	; (8017270 <tcp_parseopt+0xe8>)
 80171dc:	881b      	ldrh	r3, [r3, #0]
 80171de:	3301      	adds	r3, #1
 80171e0:	4a22      	ldr	r2, [pc, #136]	; (801726c <tcp_parseopt+0xe4>)
 80171e2:	8812      	ldrh	r2, [r2, #0]
 80171e4:	4293      	cmp	r3, r2
 80171e6:	da34      	bge.n	8017252 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80171e8:	f7ff ff98 	bl	801711c <tcp_get_next_optbyte>
 80171ec:	4603      	mov	r3, r0
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	021b      	lsls	r3, r3, #8
 80171f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80171f4:	f7ff ff92 	bl	801711c <tcp_get_next_optbyte>
 80171f8:	4603      	mov	r3, r0
 80171fa:	b29a      	uxth	r2, r3
 80171fc:	89bb      	ldrh	r3, [r7, #12]
 80171fe:	4313      	orrs	r3, r2
 8017200:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017202:	89bb      	ldrh	r3, [r7, #12]
 8017204:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017208:	d804      	bhi.n	8017214 <tcp_parseopt+0x8c>
 801720a:	89bb      	ldrh	r3, [r7, #12]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d001      	beq.n	8017214 <tcp_parseopt+0x8c>
 8017210:	89ba      	ldrh	r2, [r7, #12]
 8017212:	e001      	b.n	8017218 <tcp_parseopt+0x90>
 8017214:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801721c:	e010      	b.n	8017240 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801721e:	f7ff ff7d 	bl	801711c <tcp_get_next_optbyte>
 8017222:	4603      	mov	r3, r0
 8017224:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017226:	7afb      	ldrb	r3, [r7, #11]
 8017228:	2b01      	cmp	r3, #1
 801722a:	d914      	bls.n	8017256 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801722c:	7afb      	ldrb	r3, [r7, #11]
 801722e:	b29a      	uxth	r2, r3
 8017230:	4b0f      	ldr	r3, [pc, #60]	; (8017270 <tcp_parseopt+0xe8>)
 8017232:	881b      	ldrh	r3, [r3, #0]
 8017234:	4413      	add	r3, r2
 8017236:	b29b      	uxth	r3, r3
 8017238:	3b02      	subs	r3, #2
 801723a:	b29a      	uxth	r2, r3
 801723c:	4b0c      	ldr	r3, [pc, #48]	; (8017270 <tcp_parseopt+0xe8>)
 801723e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017240:	4b0b      	ldr	r3, [pc, #44]	; (8017270 <tcp_parseopt+0xe8>)
 8017242:	881a      	ldrh	r2, [r3, #0]
 8017244:	4b09      	ldr	r3, [pc, #36]	; (801726c <tcp_parseopt+0xe4>)
 8017246:	881b      	ldrh	r3, [r3, #0]
 8017248:	429a      	cmp	r2, r3
 801724a:	d3b3      	bcc.n	80171b4 <tcp_parseopt+0x2c>
 801724c:	e004      	b.n	8017258 <tcp_parseopt+0xd0>
          return;
 801724e:	bf00      	nop
 8017250:	e002      	b.n	8017258 <tcp_parseopt+0xd0>
            return;
 8017252:	bf00      	nop
 8017254:	e000      	b.n	8017258 <tcp_parseopt+0xd0>
            return;
 8017256:	bf00      	nop
      }
    }
  }
}
 8017258:	3710      	adds	r7, #16
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}
 801725e:	bf00      	nop
 8017260:	080213a0 	.word	0x080213a0
 8017264:	08021804 	.word	0x08021804
 8017268:	080213ec 	.word	0x080213ec
 801726c:	20013410 	.word	0x20013410
 8017270:	20013418 	.word	0x20013418

08017274 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017274:	b480      	push	{r7}
 8017276:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017278:	4b05      	ldr	r3, [pc, #20]	; (8017290 <tcp_trigger_input_pcb_close+0x1c>)
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	f043 0310 	orr.w	r3, r3, #16
 8017280:	b2da      	uxtb	r2, r3
 8017282:	4b03      	ldr	r3, [pc, #12]	; (8017290 <tcp_trigger_input_pcb_close+0x1c>)
 8017284:	701a      	strb	r2, [r3, #0]
}
 8017286:	bf00      	nop
 8017288:	46bd      	mov	sp, r7
 801728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728e:	4770      	bx	lr
 8017290:	20013429 	.word	0x20013429

08017294 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b084      	sub	sp, #16
 8017298:	af00      	add	r7, sp, #0
 801729a:	60f8      	str	r0, [r7, #12]
 801729c:	60b9      	str	r1, [r7, #8]
 801729e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d00a      	beq.n	80172bc <tcp_route+0x28>
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	7a1b      	ldrb	r3, [r3, #8]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d006      	beq.n	80172bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	7a1b      	ldrb	r3, [r3, #8]
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7fb f84e 	bl	8012354 <netif_get_by_index>
 80172b8:	4603      	mov	r3, r0
 80172ba:	e003      	b.n	80172c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f003 fc4b 	bl	801ab58 <ip4_route>
 80172c2:	4603      	mov	r3, r0
  }
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	3710      	adds	r7, #16
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}

080172cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80172cc:	b590      	push	{r4, r7, lr}
 80172ce:	b087      	sub	sp, #28
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	603b      	str	r3, [r7, #0]
 80172d8:	4613      	mov	r3, r2
 80172da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d105      	bne.n	80172ee <tcp_create_segment+0x22>
 80172e2:	4b44      	ldr	r3, [pc, #272]	; (80173f4 <tcp_create_segment+0x128>)
 80172e4:	22a3      	movs	r2, #163	; 0xa3
 80172e6:	4944      	ldr	r1, [pc, #272]	; (80173f8 <tcp_create_segment+0x12c>)
 80172e8:	4844      	ldr	r0, [pc, #272]	; (80173fc <tcp_create_segment+0x130>)
 80172ea:	f005 feef 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d105      	bne.n	8017300 <tcp_create_segment+0x34>
 80172f4:	4b3f      	ldr	r3, [pc, #252]	; (80173f4 <tcp_create_segment+0x128>)
 80172f6:	22a4      	movs	r2, #164	; 0xa4
 80172f8:	4941      	ldr	r1, [pc, #260]	; (8017400 <tcp_create_segment+0x134>)
 80172fa:	4840      	ldr	r0, [pc, #256]	; (80173fc <tcp_create_segment+0x130>)
 80172fc:	f005 fee6 	bl	801d0cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017300:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	b2db      	uxtb	r3, r3
 8017308:	f003 0304 	and.w	r3, r3, #4
 801730c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801730e:	2003      	movs	r0, #3
 8017310:	f7fa fc94 	bl	8011c3c <memp_malloc>
 8017314:	6138      	str	r0, [r7, #16]
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d104      	bne.n	8017326 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801731c:	68b8      	ldr	r0, [r7, #8]
 801731e:	f7fb fba7 	bl	8012a70 <pbuf_free>
    return NULL;
 8017322:	2300      	movs	r3, #0
 8017324:	e061      	b.n	80173ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801732c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	2200      	movs	r2, #0
 8017332:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	68ba      	ldr	r2, [r7, #8]
 8017338:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	891a      	ldrh	r2, [r3, #8]
 801733e:	7dfb      	ldrb	r3, [r7, #23]
 8017340:	b29b      	uxth	r3, r3
 8017342:	429a      	cmp	r2, r3
 8017344:	d205      	bcs.n	8017352 <tcp_create_segment+0x86>
 8017346:	4b2b      	ldr	r3, [pc, #172]	; (80173f4 <tcp_create_segment+0x128>)
 8017348:	22b0      	movs	r2, #176	; 0xb0
 801734a:	492e      	ldr	r1, [pc, #184]	; (8017404 <tcp_create_segment+0x138>)
 801734c:	482b      	ldr	r0, [pc, #172]	; (80173fc <tcp_create_segment+0x130>)
 801734e:	f005 febd 	bl	801d0cc <iprintf>
  seg->len = p->tot_len - optlen;
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	891a      	ldrh	r2, [r3, #8]
 8017356:	7dfb      	ldrb	r3, [r7, #23]
 8017358:	b29b      	uxth	r3, r3
 801735a:	1ad3      	subs	r3, r2, r3
 801735c:	b29a      	uxth	r2, r3
 801735e:	693b      	ldr	r3, [r7, #16]
 8017360:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017362:	2114      	movs	r1, #20
 8017364:	68b8      	ldr	r0, [r7, #8]
 8017366:	f7fb faed 	bl	8012944 <pbuf_add_header>
 801736a:	4603      	mov	r3, r0
 801736c:	2b00      	cmp	r3, #0
 801736e:	d004      	beq.n	801737a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017370:	6938      	ldr	r0, [r7, #16]
 8017372:	f7fd f800 	bl	8014376 <tcp_seg_free>
    return NULL;
 8017376:	2300      	movs	r3, #0
 8017378:	e037      	b.n	80173ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801737a:	693b      	ldr	r3, [r7, #16]
 801737c:	685b      	ldr	r3, [r3, #4]
 801737e:	685a      	ldr	r2, [r3, #4]
 8017380:	693b      	ldr	r3, [r7, #16]
 8017382:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	8ada      	ldrh	r2, [r3, #22]
 8017388:	693b      	ldr	r3, [r7, #16]
 801738a:	68dc      	ldr	r4, [r3, #12]
 801738c:	4610      	mov	r0, r2
 801738e:	f7f9 ff7d 	bl	801128c <lwip_htons>
 8017392:	4603      	mov	r3, r0
 8017394:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	8b1a      	ldrh	r2, [r3, #24]
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	68dc      	ldr	r4, [r3, #12]
 801739e:	4610      	mov	r0, r2
 80173a0:	f7f9 ff74 	bl	801128c <lwip_htons>
 80173a4:	4603      	mov	r3, r0
 80173a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80173a8:	693b      	ldr	r3, [r7, #16]
 80173aa:	68dc      	ldr	r4, [r3, #12]
 80173ac:	6838      	ldr	r0, [r7, #0]
 80173ae:	f7f9 ff82 	bl	80112b6 <lwip_htonl>
 80173b2:	4603      	mov	r3, r0
 80173b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80173b6:	7dfb      	ldrb	r3, [r7, #23]
 80173b8:	089b      	lsrs	r3, r3, #2
 80173ba:	b2db      	uxtb	r3, r3
 80173bc:	b29b      	uxth	r3, r3
 80173be:	3305      	adds	r3, #5
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	031b      	lsls	r3, r3, #12
 80173c4:	b29a      	uxth	r2, r3
 80173c6:	79fb      	ldrb	r3, [r7, #7]
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	4313      	orrs	r3, r2
 80173cc:	b29a      	uxth	r2, r3
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	68dc      	ldr	r4, [r3, #12]
 80173d2:	4610      	mov	r0, r2
 80173d4:	f7f9 ff5a 	bl	801128c <lwip_htons>
 80173d8:	4603      	mov	r3, r0
 80173da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	68db      	ldr	r3, [r3, #12]
 80173e0:	2200      	movs	r2, #0
 80173e2:	749a      	strb	r2, [r3, #18]
 80173e4:	2200      	movs	r2, #0
 80173e6:	74da      	strb	r2, [r3, #19]
  return seg;
 80173e8:	693b      	ldr	r3, [r7, #16]
}
 80173ea:	4618      	mov	r0, r3
 80173ec:	371c      	adds	r7, #28
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd90      	pop	{r4, r7, pc}
 80173f2:	bf00      	nop
 80173f4:	08021820 	.word	0x08021820
 80173f8:	08021854 	.word	0x08021854
 80173fc:	08021874 	.word	0x08021874
 8017400:	0802189c 	.word	0x0802189c
 8017404:	080218c0 	.word	0x080218c0

08017408 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b086      	sub	sp, #24
 801740c:	af00      	add	r7, sp, #0
 801740e:	607b      	str	r3, [r7, #4]
 8017410:	4603      	mov	r3, r0
 8017412:	73fb      	strb	r3, [r7, #15]
 8017414:	460b      	mov	r3, r1
 8017416:	81bb      	strh	r3, [r7, #12]
 8017418:	4613      	mov	r3, r2
 801741a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801741c:	89bb      	ldrh	r3, [r7, #12]
 801741e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d105      	bne.n	8017432 <tcp_pbuf_prealloc+0x2a>
 8017426:	4b30      	ldr	r3, [pc, #192]	; (80174e8 <tcp_pbuf_prealloc+0xe0>)
 8017428:	22e8      	movs	r2, #232	; 0xe8
 801742a:	4930      	ldr	r1, [pc, #192]	; (80174ec <tcp_pbuf_prealloc+0xe4>)
 801742c:	4830      	ldr	r0, [pc, #192]	; (80174f0 <tcp_pbuf_prealloc+0xe8>)
 801742e:	f005 fe4d 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017432:	6a3b      	ldr	r3, [r7, #32]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d105      	bne.n	8017444 <tcp_pbuf_prealloc+0x3c>
 8017438:	4b2b      	ldr	r3, [pc, #172]	; (80174e8 <tcp_pbuf_prealloc+0xe0>)
 801743a:	22e9      	movs	r2, #233	; 0xe9
 801743c:	492d      	ldr	r1, [pc, #180]	; (80174f4 <tcp_pbuf_prealloc+0xec>)
 801743e:	482c      	ldr	r0, [pc, #176]	; (80174f0 <tcp_pbuf_prealloc+0xe8>)
 8017440:	f005 fe44 	bl	801d0cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017444:	89ba      	ldrh	r2, [r7, #12]
 8017446:	897b      	ldrh	r3, [r7, #10]
 8017448:	429a      	cmp	r2, r3
 801744a:	d221      	bcs.n	8017490 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801744c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017450:	f003 0302 	and.w	r3, r3, #2
 8017454:	2b00      	cmp	r3, #0
 8017456:	d111      	bne.n	801747c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017458:	6a3b      	ldr	r3, [r7, #32]
 801745a:	8b5b      	ldrh	r3, [r3, #26]
 801745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017460:	2b00      	cmp	r3, #0
 8017462:	d115      	bne.n	8017490 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017464:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017468:	2b00      	cmp	r3, #0
 801746a:	d007      	beq.n	801747c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801746c:	6a3b      	ldr	r3, [r7, #32]
 801746e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017470:	2b00      	cmp	r3, #0
 8017472:	d103      	bne.n	801747c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017474:	6a3b      	ldr	r3, [r7, #32]
 8017476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017478:	2b00      	cmp	r3, #0
 801747a:	d009      	beq.n	8017490 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801747c:	89bb      	ldrh	r3, [r7, #12]
 801747e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8017482:	f023 0203 	bic.w	r2, r3, #3
 8017486:	897b      	ldrh	r3, [r7, #10]
 8017488:	4293      	cmp	r3, r2
 801748a:	bf28      	it	cs
 801748c:	4613      	movcs	r3, r2
 801748e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017490:	8af9      	ldrh	r1, [r7, #22]
 8017492:	7bfb      	ldrb	r3, [r7, #15]
 8017494:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017498:	4618      	mov	r0, r3
 801749a:	f7fb f805 	bl	80124a8 <pbuf_alloc>
 801749e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80174a0:	693b      	ldr	r3, [r7, #16]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d101      	bne.n	80174aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80174a6:	2300      	movs	r3, #0
 80174a8:	e019      	b.n	80174de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d006      	beq.n	80174c0 <tcp_pbuf_prealloc+0xb8>
 80174b2:	4b0d      	ldr	r3, [pc, #52]	; (80174e8 <tcp_pbuf_prealloc+0xe0>)
 80174b4:	f240 120b 	movw	r2, #267	; 0x10b
 80174b8:	490f      	ldr	r1, [pc, #60]	; (80174f8 <tcp_pbuf_prealloc+0xf0>)
 80174ba:	480d      	ldr	r0, [pc, #52]	; (80174f0 <tcp_pbuf_prealloc+0xe8>)
 80174bc:	f005 fe06 	bl	801d0cc <iprintf>
  *oversize = p->len - length;
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	895a      	ldrh	r2, [r3, #10]
 80174c4:	89bb      	ldrh	r3, [r7, #12]
 80174c6:	1ad3      	subs	r3, r2, r3
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	89ba      	ldrh	r2, [r7, #12]
 80174d2:	811a      	strh	r2, [r3, #8]
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	891a      	ldrh	r2, [r3, #8]
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	815a      	strh	r2, [r3, #10]
  return p;
 80174dc:	693b      	ldr	r3, [r7, #16]
}
 80174de:	4618      	mov	r0, r3
 80174e0:	3718      	adds	r7, #24
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	08021820 	.word	0x08021820
 80174ec:	080218d8 	.word	0x080218d8
 80174f0:	08021874 	.word	0x08021874
 80174f4:	080218fc 	.word	0x080218fc
 80174f8:	0802191c 	.word	0x0802191c

080174fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	460b      	mov	r3, r1
 8017506:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d106      	bne.n	801751c <tcp_write_checks+0x20>
 801750e:	4b33      	ldr	r3, [pc, #204]	; (80175dc <tcp_write_checks+0xe0>)
 8017510:	f240 1233 	movw	r2, #307	; 0x133
 8017514:	4932      	ldr	r1, [pc, #200]	; (80175e0 <tcp_write_checks+0xe4>)
 8017516:	4833      	ldr	r0, [pc, #204]	; (80175e4 <tcp_write_checks+0xe8>)
 8017518:	f005 fdd8 	bl	801d0cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	7d1b      	ldrb	r3, [r3, #20]
 8017520:	2b04      	cmp	r3, #4
 8017522:	d00e      	beq.n	8017542 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017528:	2b07      	cmp	r3, #7
 801752a:	d00a      	beq.n	8017542 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017530:	2b02      	cmp	r3, #2
 8017532:	d006      	beq.n	8017542 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017538:	2b03      	cmp	r3, #3
 801753a:	d002      	beq.n	8017542 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801753c:	f06f 030a 	mvn.w	r3, #10
 8017540:	e048      	b.n	80175d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017542:	887b      	ldrh	r3, [r7, #2]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d101      	bne.n	801754c <tcp_write_checks+0x50>
    return ERR_OK;
 8017548:	2300      	movs	r3, #0
 801754a:	e043      	b.n	80175d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017552:	887a      	ldrh	r2, [r7, #2]
 8017554:	429a      	cmp	r2, r3
 8017556:	d909      	bls.n	801756c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	8b5b      	ldrh	r3, [r3, #26]
 801755c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017560:	b29a      	uxth	r2, r3
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017566:	f04f 33ff 	mov.w	r3, #4294967295
 801756a:	e033      	b.n	80175d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017572:	2b08      	cmp	r3, #8
 8017574:	d909      	bls.n	801758a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	8b5b      	ldrh	r3, [r3, #26]
 801757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801757e:	b29a      	uxth	r2, r3
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017584:	f04f 33ff 	mov.w	r3, #4294967295
 8017588:	e024      	b.n	80175d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017590:	2b00      	cmp	r3, #0
 8017592:	d00f      	beq.n	80175b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017598:	2b00      	cmp	r3, #0
 801759a:	d11a      	bne.n	80175d2 <tcp_write_checks+0xd6>
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d116      	bne.n	80175d2 <tcp_write_checks+0xd6>
 80175a4:	4b0d      	ldr	r3, [pc, #52]	; (80175dc <tcp_write_checks+0xe0>)
 80175a6:	f240 1255 	movw	r2, #341	; 0x155
 80175aa:	490f      	ldr	r1, [pc, #60]	; (80175e8 <tcp_write_checks+0xec>)
 80175ac:	480d      	ldr	r0, [pc, #52]	; (80175e4 <tcp_write_checks+0xe8>)
 80175ae:	f005 fd8d 	bl	801d0cc <iprintf>
 80175b2:	e00e      	b.n	80175d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d103      	bne.n	80175c4 <tcp_write_checks+0xc8>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d006      	beq.n	80175d2 <tcp_write_checks+0xd6>
 80175c4:	4b05      	ldr	r3, [pc, #20]	; (80175dc <tcp_write_checks+0xe0>)
 80175c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80175ca:	4908      	ldr	r1, [pc, #32]	; (80175ec <tcp_write_checks+0xf0>)
 80175cc:	4805      	ldr	r0, [pc, #20]	; (80175e4 <tcp_write_checks+0xe8>)
 80175ce:	f005 fd7d 	bl	801d0cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80175d2:	2300      	movs	r3, #0
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3708      	adds	r7, #8
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	08021820 	.word	0x08021820
 80175e0:	08021930 	.word	0x08021930
 80175e4:	08021874 	.word	0x08021874
 80175e8:	08021950 	.word	0x08021950
 80175ec:	0802198c 	.word	0x0802198c

080175f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80175f0:	b590      	push	{r4, r7, lr}
 80175f2:	b09b      	sub	sp, #108	; 0x6c
 80175f4:	af04      	add	r7, sp, #16
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	4611      	mov	r1, r2
 80175fc:	461a      	mov	r2, r3
 80175fe:	460b      	mov	r3, r1
 8017600:	80fb      	strh	r3, [r7, #6]
 8017602:	4613      	mov	r3, r2
 8017604:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017606:	2300      	movs	r3, #0
 8017608:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801760a:	2300      	movs	r3, #0
 801760c:	653b      	str	r3, [r7, #80]	; 0x50
 801760e:	2300      	movs	r3, #0
 8017610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017612:	2300      	movs	r3, #0
 8017614:	64bb      	str	r3, [r7, #72]	; 0x48
 8017616:	2300      	movs	r3, #0
 8017618:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801761a:	2300      	movs	r3, #0
 801761c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017620:	2300      	movs	r3, #0
 8017622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017626:	2300      	movs	r3, #0
 8017628:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801762a:	2300      	movs	r3, #0
 801762c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801762e:	2300      	movs	r3, #0
 8017630:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d109      	bne.n	801764c <tcp_write+0x5c>
 8017638:	4ba4      	ldr	r3, [pc, #656]	; (80178cc <tcp_write+0x2dc>)
 801763a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801763e:	49a4      	ldr	r1, [pc, #656]	; (80178d0 <tcp_write+0x2e0>)
 8017640:	48a4      	ldr	r0, [pc, #656]	; (80178d4 <tcp_write+0x2e4>)
 8017642:	f005 fd43 	bl	801d0cc <iprintf>
 8017646:	f06f 030f 	mvn.w	r3, #15
 801764a:	e32a      	b.n	8017ca2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017652:	085b      	lsrs	r3, r3, #1
 8017654:	b29a      	uxth	r2, r3
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801765a:	4293      	cmp	r3, r2
 801765c:	bf28      	it	cs
 801765e:	4613      	movcs	r3, r2
 8017660:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017664:	2b00      	cmp	r3, #0
 8017666:	d102      	bne.n	801766e <tcp_write+0x7e>
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801766c:	e000      	b.n	8017670 <tcp_write+0x80>
 801766e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017670:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d109      	bne.n	801768c <tcp_write+0x9c>
 8017678:	4b94      	ldr	r3, [pc, #592]	; (80178cc <tcp_write+0x2dc>)
 801767a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801767e:	4996      	ldr	r1, [pc, #600]	; (80178d8 <tcp_write+0x2e8>)
 8017680:	4894      	ldr	r0, [pc, #592]	; (80178d4 <tcp_write+0x2e4>)
 8017682:	f005 fd23 	bl	801d0cc <iprintf>
 8017686:	f06f 030f 	mvn.w	r3, #15
 801768a:	e30a      	b.n	8017ca2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801768c:	88fb      	ldrh	r3, [r7, #6]
 801768e:	4619      	mov	r1, r3
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7ff ff33 	bl	80174fc <tcp_write_checks>
 8017696:	4603      	mov	r3, r0
 8017698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801769c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d002      	beq.n	80176aa <tcp_write+0xba>
    return err;
 80176a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80176a8:	e2fb      	b.n	8017ca2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80176b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80176b4:	2300      	movs	r3, #0
 80176b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176be:	2b00      	cmp	r3, #0
 80176c0:	f000 80f6 	beq.w	80178b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176c8:	653b      	str	r3, [r7, #80]	; 0x50
 80176ca:	e002      	b.n	80176d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80176cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80176d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d1f8      	bne.n	80176cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80176da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176dc:	7a9b      	ldrb	r3, [r3, #10]
 80176de:	009b      	lsls	r3, r3, #2
 80176e0:	b29b      	uxth	r3, r3
 80176e2:	f003 0304 	and.w	r3, r3, #4
 80176e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80176e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80176ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176ec:	891b      	ldrh	r3, [r3, #8]
 80176ee:	4619      	mov	r1, r3
 80176f0:	8c3b      	ldrh	r3, [r7, #32]
 80176f2:	440b      	add	r3, r1
 80176f4:	429a      	cmp	r2, r3
 80176f6:	da06      	bge.n	8017706 <tcp_write+0x116>
 80176f8:	4b74      	ldr	r3, [pc, #464]	; (80178cc <tcp_write+0x2dc>)
 80176fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80176fe:	4977      	ldr	r1, [pc, #476]	; (80178dc <tcp_write+0x2ec>)
 8017700:	4874      	ldr	r0, [pc, #464]	; (80178d4 <tcp_write+0x2e4>)
 8017702:	f005 fce3 	bl	801d0cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017708:	891a      	ldrh	r2, [r3, #8]
 801770a:	8c3b      	ldrh	r3, [r7, #32]
 801770c:	4413      	add	r3, r2
 801770e:	b29b      	uxth	r3, r3
 8017710:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017712:	1ad3      	subs	r3, r2, r3
 8017714:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801771c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801771e:	8a7b      	ldrh	r3, [r7, #18]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d026      	beq.n	8017772 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017724:	8a7b      	ldrh	r3, [r7, #18]
 8017726:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017728:	429a      	cmp	r2, r3
 801772a:	d206      	bcs.n	801773a <tcp_write+0x14a>
 801772c:	4b67      	ldr	r3, [pc, #412]	; (80178cc <tcp_write+0x2dc>)
 801772e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017732:	496b      	ldr	r1, [pc, #428]	; (80178e0 <tcp_write+0x2f0>)
 8017734:	4867      	ldr	r0, [pc, #412]	; (80178d4 <tcp_write+0x2e4>)
 8017736:	f005 fcc9 	bl	801d0cc <iprintf>
      seg = last_unsent;
 801773a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801773c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801773e:	8a7b      	ldrh	r3, [r7, #18]
 8017740:	88fa      	ldrh	r2, [r7, #6]
 8017742:	4293      	cmp	r3, r2
 8017744:	bf28      	it	cs
 8017746:	4613      	movcs	r3, r2
 8017748:	b29b      	uxth	r3, r3
 801774a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801774c:	4293      	cmp	r3, r2
 801774e:	bf28      	it	cs
 8017750:	4613      	movcs	r3, r2
 8017752:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017754:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017758:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801775a:	4413      	add	r3, r2
 801775c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017760:	8a7a      	ldrh	r2, [r7, #18]
 8017762:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017764:	1ad3      	subs	r3, r2, r3
 8017766:	b29b      	uxth	r3, r3
 8017768:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801776a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801776c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801776e:	1ad3      	subs	r3, r2, r3
 8017770:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017772:	8a7b      	ldrh	r3, [r7, #18]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d00b      	beq.n	8017790 <tcp_write+0x1a0>
 8017778:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801777c:	88fb      	ldrh	r3, [r7, #6]
 801777e:	429a      	cmp	r2, r3
 8017780:	d006      	beq.n	8017790 <tcp_write+0x1a0>
 8017782:	4b52      	ldr	r3, [pc, #328]	; (80178cc <tcp_write+0x2dc>)
 8017784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017788:	4956      	ldr	r1, [pc, #344]	; (80178e4 <tcp_write+0x2f4>)
 801778a:	4852      	ldr	r0, [pc, #328]	; (80178d4 <tcp_write+0x2e4>)
 801778c:	f005 fc9e 	bl	801d0cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017790:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017794:	88fb      	ldrh	r3, [r7, #6]
 8017796:	429a      	cmp	r2, r3
 8017798:	f080 8167 	bcs.w	8017a6a <tcp_write+0x47a>
 801779c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801779e:	2b00      	cmp	r3, #0
 80177a0:	f000 8163 	beq.w	8017a6a <tcp_write+0x47a>
 80177a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177a6:	891b      	ldrh	r3, [r3, #8]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f000 815e 	beq.w	8017a6a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80177ae:	88fa      	ldrh	r2, [r7, #6]
 80177b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80177b4:	1ad2      	subs	r2, r2, r3
 80177b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80177b8:	4293      	cmp	r3, r2
 80177ba:	bfa8      	it	ge
 80177bc:	4613      	movge	r3, r2
 80177be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80177c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80177c4:	797b      	ldrb	r3, [r7, #5]
 80177c6:	f003 0301 	and.w	r3, r3, #1
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d027      	beq.n	801781e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80177ce:	f107 0012 	add.w	r0, r7, #18
 80177d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80177d4:	8bf9      	ldrh	r1, [r7, #30]
 80177d6:	2301      	movs	r3, #1
 80177d8:	9302      	str	r3, [sp, #8]
 80177da:	797b      	ldrb	r3, [r7, #5]
 80177dc:	9301      	str	r3, [sp, #4]
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	4603      	mov	r3, r0
 80177e4:	2000      	movs	r0, #0
 80177e6:	f7ff fe0f 	bl	8017408 <tcp_pbuf_prealloc>
 80177ea:	6578      	str	r0, [r7, #84]	; 0x54
 80177ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	f000 8225 	beq.w	8017c3e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80177f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177f6:	6858      	ldr	r0, [r3, #4]
 80177f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80177fc:	68ba      	ldr	r2, [r7, #8]
 80177fe:	4413      	add	r3, r2
 8017800:	8bfa      	ldrh	r2, [r7, #30]
 8017802:	4619      	mov	r1, r3
 8017804:	f005 fee3 	bl	801d5ce <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017808:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801780a:	f7fb f9bf 	bl	8012b8c <pbuf_clen>
 801780e:	4603      	mov	r3, r0
 8017810:	461a      	mov	r2, r3
 8017812:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017816:	4413      	add	r3, r2
 8017818:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801781c:	e041      	b.n	80178a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801781e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	637b      	str	r3, [r7, #52]	; 0x34
 8017824:	e002      	b.n	801782c <tcp_write+0x23c>
 8017826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	637b      	str	r3, [r7, #52]	; 0x34
 801782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1f8      	bne.n	8017826 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017836:	7b1b      	ldrb	r3, [r3, #12]
 8017838:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801783c:	2b00      	cmp	r3, #0
 801783e:	d115      	bne.n	801786c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017842:	685b      	ldr	r3, [r3, #4]
 8017844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017846:	8952      	ldrh	r2, [r2, #10]
 8017848:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801784a:	68ba      	ldr	r2, [r7, #8]
 801784c:	429a      	cmp	r2, r3
 801784e:	d10d      	bne.n	801786c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017854:	2b00      	cmp	r3, #0
 8017856:	d006      	beq.n	8017866 <tcp_write+0x276>
 8017858:	4b1c      	ldr	r3, [pc, #112]	; (80178cc <tcp_write+0x2dc>)
 801785a:	f240 2231 	movw	r2, #561	; 0x231
 801785e:	4922      	ldr	r1, [pc, #136]	; (80178e8 <tcp_write+0x2f8>)
 8017860:	481c      	ldr	r0, [pc, #112]	; (80178d4 <tcp_write+0x2e4>)
 8017862:	f005 fc33 	bl	801d0cc <iprintf>
          extendlen = seglen;
 8017866:	8bfb      	ldrh	r3, [r7, #30]
 8017868:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801786a:	e01a      	b.n	80178a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801786c:	8bfb      	ldrh	r3, [r7, #30]
 801786e:	2201      	movs	r2, #1
 8017870:	4619      	mov	r1, r3
 8017872:	2000      	movs	r0, #0
 8017874:	f7fa fe18 	bl	80124a8 <pbuf_alloc>
 8017878:	6578      	str	r0, [r7, #84]	; 0x54
 801787a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801787c:	2b00      	cmp	r3, #0
 801787e:	f000 81e0 	beq.w	8017c42 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017882:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017886:	68ba      	ldr	r2, [r7, #8]
 8017888:	441a      	add	r2, r3
 801788a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801788c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801788e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017890:	f7fb f97c 	bl	8012b8c <pbuf_clen>
 8017894:	4603      	mov	r3, r0
 8017896:	461a      	mov	r2, r3
 8017898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801789c:	4413      	add	r3, r2
 801789e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80178a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80178a6:	8bfb      	ldrh	r3, [r7, #30]
 80178a8:	4413      	add	r3, r2
 80178aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80178ae:	e0dc      	b.n	8017a6a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	f000 80d7 	beq.w	8017a6a <tcp_write+0x47a>
 80178bc:	4b03      	ldr	r3, [pc, #12]	; (80178cc <tcp_write+0x2dc>)
 80178be:	f240 224a 	movw	r2, #586	; 0x24a
 80178c2:	490a      	ldr	r1, [pc, #40]	; (80178ec <tcp_write+0x2fc>)
 80178c4:	4803      	ldr	r0, [pc, #12]	; (80178d4 <tcp_write+0x2e4>)
 80178c6:	f005 fc01 	bl	801d0cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80178ca:	e0ce      	b.n	8017a6a <tcp_write+0x47a>
 80178cc:	08021820 	.word	0x08021820
 80178d0:	080219c0 	.word	0x080219c0
 80178d4:	08021874 	.word	0x08021874
 80178d8:	080219d8 	.word	0x080219d8
 80178dc:	08021a0c 	.word	0x08021a0c
 80178e0:	08021a24 	.word	0x08021a24
 80178e4:	08021a44 	.word	0x08021a44
 80178e8:	08021a64 	.word	0x08021a64
 80178ec:	08021a90 	.word	0x08021a90
    struct pbuf *p;
    u16_t left = len - pos;
 80178f0:	88fa      	ldrh	r2, [r7, #6]
 80178f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80178f6:	1ad3      	subs	r3, r2, r3
 80178f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80178fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80178fe:	b29b      	uxth	r3, r3
 8017900:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017902:	1ad3      	subs	r3, r2, r3
 8017904:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017906:	8b7a      	ldrh	r2, [r7, #26]
 8017908:	8bbb      	ldrh	r3, [r7, #28]
 801790a:	4293      	cmp	r3, r2
 801790c:	bf28      	it	cs
 801790e:	4613      	movcs	r3, r2
 8017910:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017912:	797b      	ldrb	r3, [r7, #5]
 8017914:	f003 0301 	and.w	r3, r3, #1
 8017918:	2b00      	cmp	r3, #0
 801791a:	d036      	beq.n	801798a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801791c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017920:	b29a      	uxth	r2, r3
 8017922:	8b3b      	ldrh	r3, [r7, #24]
 8017924:	4413      	add	r3, r2
 8017926:	b299      	uxth	r1, r3
 8017928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801792a:	2b00      	cmp	r3, #0
 801792c:	bf0c      	ite	eq
 801792e:	2301      	moveq	r3, #1
 8017930:	2300      	movne	r3, #0
 8017932:	b2db      	uxtb	r3, r3
 8017934:	f107 0012 	add.w	r0, r7, #18
 8017938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801793a:	9302      	str	r3, [sp, #8]
 801793c:	797b      	ldrb	r3, [r7, #5]
 801793e:	9301      	str	r3, [sp, #4]
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	4603      	mov	r3, r0
 8017946:	2036      	movs	r0, #54	; 0x36
 8017948:	f7ff fd5e 	bl	8017408 <tcp_pbuf_prealloc>
 801794c:	6338      	str	r0, [r7, #48]	; 0x30
 801794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017950:	2b00      	cmp	r3, #0
 8017952:	f000 8178 	beq.w	8017c46 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017958:	895b      	ldrh	r3, [r3, #10]
 801795a:	8b3a      	ldrh	r2, [r7, #24]
 801795c:	429a      	cmp	r2, r3
 801795e:	d906      	bls.n	801796e <tcp_write+0x37e>
 8017960:	4b8c      	ldr	r3, [pc, #560]	; (8017b94 <tcp_write+0x5a4>)
 8017962:	f240 2266 	movw	r2, #614	; 0x266
 8017966:	498c      	ldr	r1, [pc, #560]	; (8017b98 <tcp_write+0x5a8>)
 8017968:	488c      	ldr	r0, [pc, #560]	; (8017b9c <tcp_write+0x5ac>)
 801796a:	f005 fbaf 	bl	801d0cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017970:	685a      	ldr	r2, [r3, #4]
 8017972:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017976:	18d0      	adds	r0, r2, r3
 8017978:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801797c:	68ba      	ldr	r2, [r7, #8]
 801797e:	4413      	add	r3, r2
 8017980:	8b3a      	ldrh	r2, [r7, #24]
 8017982:	4619      	mov	r1, r3
 8017984:	f005 fe23 	bl	801d5ce <memcpy>
 8017988:	e02f      	b.n	80179ea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801798a:	8a7b      	ldrh	r3, [r7, #18]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d006      	beq.n	801799e <tcp_write+0x3ae>
 8017990:	4b80      	ldr	r3, [pc, #512]	; (8017b94 <tcp_write+0x5a4>)
 8017992:	f240 2271 	movw	r2, #625	; 0x271
 8017996:	4982      	ldr	r1, [pc, #520]	; (8017ba0 <tcp_write+0x5b0>)
 8017998:	4880      	ldr	r0, [pc, #512]	; (8017b9c <tcp_write+0x5ac>)
 801799a:	f005 fb97 	bl	801d0cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801799e:	8b3b      	ldrh	r3, [r7, #24]
 80179a0:	2201      	movs	r2, #1
 80179a2:	4619      	mov	r1, r3
 80179a4:	2036      	movs	r0, #54	; 0x36
 80179a6:	f7fa fd7f 	bl	80124a8 <pbuf_alloc>
 80179aa:	6178      	str	r0, [r7, #20]
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	f000 814b 	beq.w	8017c4a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80179b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179b8:	68ba      	ldr	r2, [r7, #8]
 80179ba:	441a      	add	r2, r3
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80179c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80179c4:	b29b      	uxth	r3, r3
 80179c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179ca:	4619      	mov	r1, r3
 80179cc:	2036      	movs	r0, #54	; 0x36
 80179ce:	f7fa fd6b 	bl	80124a8 <pbuf_alloc>
 80179d2:	6338      	str	r0, [r7, #48]	; 0x30
 80179d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d103      	bne.n	80179e2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80179da:	6978      	ldr	r0, [r7, #20]
 80179dc:	f7fb f848 	bl	8012a70 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80179e0:	e136      	b.n	8017c50 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80179e2:	6979      	ldr	r1, [r7, #20]
 80179e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179e6:	f7fb f911 	bl	8012c0c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80179ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179ec:	f7fb f8ce 	bl	8012b8c <pbuf_clen>
 80179f0:	4603      	mov	r3, r0
 80179f2:	461a      	mov	r2, r3
 80179f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80179f8:	4413      	add	r3, r2
 80179fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80179fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017a02:	2b09      	cmp	r3, #9
 8017a04:	d903      	bls.n	8017a0e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a08:	f7fb f832 	bl	8012a70 <pbuf_free>
      goto memerr;
 8017a0c:	e120      	b.n	8017c50 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017a12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a16:	441a      	add	r2, r3
 8017a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a1c:	9300      	str	r3, [sp, #0]
 8017a1e:	4613      	mov	r3, r2
 8017a20:	2200      	movs	r2, #0
 8017a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017a24:	68f8      	ldr	r0, [r7, #12]
 8017a26:	f7ff fc51 	bl	80172cc <tcp_create_segment>
 8017a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f000 810d 	beq.w	8017c4e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d102      	bne.n	8017a40 <tcp_write+0x450>
      queue = seg;
 8017a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8017a3e:	e00c      	b.n	8017a5a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d106      	bne.n	8017a54 <tcp_write+0x464>
 8017a46:	4b53      	ldr	r3, [pc, #332]	; (8017b94 <tcp_write+0x5a4>)
 8017a48:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017a4c:	4955      	ldr	r1, [pc, #340]	; (8017ba4 <tcp_write+0x5b4>)
 8017a4e:	4853      	ldr	r0, [pc, #332]	; (8017b9c <tcp_write+0x5ac>)
 8017a50:	f005 fb3c 	bl	801d0cc <iprintf>
      prev_seg->next = seg;
 8017a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017a58:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a5c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017a5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a62:	8b3b      	ldrh	r3, [r7, #24]
 8017a64:	4413      	add	r3, r2
 8017a66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017a6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a6e:	88fb      	ldrh	r3, [r7, #6]
 8017a70:	429a      	cmp	r2, r3
 8017a72:	f4ff af3d 	bcc.w	80178f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017a76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d02c      	beq.n	8017ad6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a7e:	685b      	ldr	r3, [r3, #4]
 8017a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a82:	e01e      	b.n	8017ac2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a86:	891a      	ldrh	r2, [r3, #8]
 8017a88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017a8a:	4413      	add	r3, r2
 8017a8c:	b29a      	uxth	r2, r3
 8017a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a90:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d110      	bne.n	8017abc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a9c:	685b      	ldr	r3, [r3, #4]
 8017a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017aa0:	8952      	ldrh	r2, [r2, #10]
 8017aa2:	4413      	add	r3, r2
 8017aa4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017aa6:	68b9      	ldr	r1, [r7, #8]
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f005 fd90 	bl	801d5ce <memcpy>
        p->len += oversize_used;
 8017aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ab0:	895a      	ldrh	r2, [r3, #10]
 8017ab2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ab4:	4413      	add	r3, r2
 8017ab6:	b29a      	uxth	r2, r3
 8017ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d1dd      	bne.n	8017a84 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017aca:	891a      	ldrh	r2, [r3, #8]
 8017acc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ace:	4413      	add	r3, r2
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ad4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017ad6:	8a7a      	ldrh	r2, [r7, #18]
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d018      	beq.n	8017b16 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d106      	bne.n	8017af8 <tcp_write+0x508>
 8017aea:	4b2a      	ldr	r3, [pc, #168]	; (8017b94 <tcp_write+0x5a4>)
 8017aec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017af0:	492d      	ldr	r1, [pc, #180]	; (8017ba8 <tcp_write+0x5b8>)
 8017af2:	482a      	ldr	r0, [pc, #168]	; (8017b9c <tcp_write+0x5ac>)
 8017af4:	f005 faea 	bl	801d0cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017afe:	4618      	mov	r0, r3
 8017b00:	f7fb f884 	bl	8012c0c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b06:	891a      	ldrh	r2, [r3, #8]
 8017b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b0a:	891b      	ldrh	r3, [r3, #8]
 8017b0c:	4413      	add	r3, r2
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b12:	811a      	strh	r2, [r3, #8]
 8017b14:	e037      	b.n	8017b86 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017b16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d034      	beq.n	8017b86 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d003      	beq.n	8017b2a <tcp_write+0x53a>
 8017b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b24:	685b      	ldr	r3, [r3, #4]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d106      	bne.n	8017b38 <tcp_write+0x548>
 8017b2a:	4b1a      	ldr	r3, [pc, #104]	; (8017b94 <tcp_write+0x5a4>)
 8017b2c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017b30:	491e      	ldr	r1, [pc, #120]	; (8017bac <tcp_write+0x5bc>)
 8017b32:	481a      	ldr	r0, [pc, #104]	; (8017b9c <tcp_write+0x5ac>)
 8017b34:	f005 faca 	bl	801d0cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b3e:	e009      	b.n	8017b54 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b42:	891a      	ldrh	r2, [r3, #8]
 8017b44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b46:	4413      	add	r3, r2
 8017b48:	b29a      	uxth	r2, r3
 8017b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d1f1      	bne.n	8017b40 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b5e:	891a      	ldrh	r2, [r3, #8]
 8017b60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b62:	4413      	add	r3, r2
 8017b64:	b29a      	uxth	r2, r3
 8017b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b68:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b6c:	895a      	ldrh	r2, [r3, #10]
 8017b6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b70:	4413      	add	r3, r2
 8017b72:	b29a      	uxth	r2, r3
 8017b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b76:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b7a:	891a      	ldrh	r2, [r3, #8]
 8017b7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b7e:	4413      	add	r3, r2
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b84:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d111      	bne.n	8017bb0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b90:	66da      	str	r2, [r3, #108]	; 0x6c
 8017b92:	e010      	b.n	8017bb6 <tcp_write+0x5c6>
 8017b94:	08021820 	.word	0x08021820
 8017b98:	08021ac0 	.word	0x08021ac0
 8017b9c:	08021874 	.word	0x08021874
 8017ba0:	08021b00 	.word	0x08021b00
 8017ba4:	08021b10 	.word	0x08021b10
 8017ba8:	08021b24 	.word	0x08021b24
 8017bac:	08021b5c 	.word	0x08021b5c
  } else {
    last_unsent->next = queue;
 8017bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017bb4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017bba:	88fb      	ldrh	r3, [r7, #6]
 8017bbc:	441a      	add	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017bc8:	88fb      	ldrh	r3, [r7, #6]
 8017bca:	1ad3      	subs	r3, r2, r3
 8017bcc:	b29a      	uxth	r2, r3
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017bda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d00e      	beq.n	8017c06 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d10a      	bne.n	8017c06 <tcp_write+0x616>
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d106      	bne.n	8017c06 <tcp_write+0x616>
 8017bf8:	4b2c      	ldr	r3, [pc, #176]	; (8017cac <tcp_write+0x6bc>)
 8017bfa:	f240 3212 	movw	r2, #786	; 0x312
 8017bfe:	492c      	ldr	r1, [pc, #176]	; (8017cb0 <tcp_write+0x6c0>)
 8017c00:	482c      	ldr	r0, [pc, #176]	; (8017cb4 <tcp_write+0x6c4>)
 8017c02:	f005 fa63 	bl	801d0cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d016      	beq.n	8017c3a <tcp_write+0x64a>
 8017c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c0e:	68db      	ldr	r3, [r3, #12]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d012      	beq.n	8017c3a <tcp_write+0x64a>
 8017c14:	797b      	ldrb	r3, [r7, #5]
 8017c16:	f003 0302 	and.w	r3, r3, #2
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d10d      	bne.n	8017c3a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c20:	68db      	ldr	r3, [r3, #12]
 8017c22:	899b      	ldrh	r3, [r3, #12]
 8017c24:	b29c      	uxth	r4, r3
 8017c26:	2008      	movs	r0, #8
 8017c28:	f7f9 fb30 	bl	801128c <lwip_htons>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	461a      	mov	r2, r3
 8017c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c32:	68db      	ldr	r3, [r3, #12]
 8017c34:	4322      	orrs	r2, r4
 8017c36:	b292      	uxth	r2, r2
 8017c38:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	e031      	b.n	8017ca2 <tcp_write+0x6b2>
          goto memerr;
 8017c3e:	bf00      	nop
 8017c40:	e006      	b.n	8017c50 <tcp_write+0x660>
            goto memerr;
 8017c42:	bf00      	nop
 8017c44:	e004      	b.n	8017c50 <tcp_write+0x660>
        goto memerr;
 8017c46:	bf00      	nop
 8017c48:	e002      	b.n	8017c50 <tcp_write+0x660>
        goto memerr;
 8017c4a:	bf00      	nop
 8017c4c:	e000      	b.n	8017c50 <tcp_write+0x660>
      goto memerr;
 8017c4e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	8b5b      	ldrh	r3, [r3, #26]
 8017c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c58:	b29a      	uxth	r2, r3
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d002      	beq.n	8017c6a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017c64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017c66:	f7fa ff03 	bl	8012a70 <pbuf_free>
  }
  if (queue != NULL) {
 8017c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d002      	beq.n	8017c76 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017c70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017c72:	f7fc fb6b 	bl	801434c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d00e      	beq.n	8017c9e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d10a      	bne.n	8017c9e <tcp_write+0x6ae>
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d106      	bne.n	8017c9e <tcp_write+0x6ae>
 8017c90:	4b06      	ldr	r3, [pc, #24]	; (8017cac <tcp_write+0x6bc>)
 8017c92:	f240 3227 	movw	r2, #807	; 0x327
 8017c96:	4906      	ldr	r1, [pc, #24]	; (8017cb0 <tcp_write+0x6c0>)
 8017c98:	4806      	ldr	r0, [pc, #24]	; (8017cb4 <tcp_write+0x6c4>)
 8017c9a:	f005 fa17 	bl	801d0cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	375c      	adds	r7, #92	; 0x5c
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd90      	pop	{r4, r7, pc}
 8017caa:	bf00      	nop
 8017cac:	08021820 	.word	0x08021820
 8017cb0:	08021b94 	.word	0x08021b94
 8017cb4:	08021874 	.word	0x08021874

08017cb8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017cb8:	b590      	push	{r4, r7, lr}
 8017cba:	b08b      	sub	sp, #44	; 0x2c
 8017cbc:	af02      	add	r7, sp, #8
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	460b      	mov	r3, r1
 8017cc2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	61fb      	str	r3, [r7, #28]
 8017cc8:	2300      	movs	r3, #0
 8017cca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d106      	bne.n	8017ce4 <tcp_split_unsent_seg+0x2c>
 8017cd6:	4b95      	ldr	r3, [pc, #596]	; (8017f2c <tcp_split_unsent_seg+0x274>)
 8017cd8:	f240 324b 	movw	r2, #843	; 0x34b
 8017cdc:	4994      	ldr	r1, [pc, #592]	; (8017f30 <tcp_split_unsent_seg+0x278>)
 8017cde:	4895      	ldr	r0, [pc, #596]	; (8017f34 <tcp_split_unsent_seg+0x27c>)
 8017ce0:	f005 f9f4 	bl	801d0cc <iprintf>

  useg = pcb->unsent;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ce8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017cea:	697b      	ldr	r3, [r7, #20]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d102      	bne.n	8017cf6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8017cf4:	e116      	b.n	8017f24 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017cf6:	887b      	ldrh	r3, [r7, #2]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d109      	bne.n	8017d10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017cfc:	4b8b      	ldr	r3, [pc, #556]	; (8017f2c <tcp_split_unsent_seg+0x274>)
 8017cfe:	f240 3253 	movw	r2, #851	; 0x353
 8017d02:	498d      	ldr	r1, [pc, #564]	; (8017f38 <tcp_split_unsent_seg+0x280>)
 8017d04:	488b      	ldr	r0, [pc, #556]	; (8017f34 <tcp_split_unsent_seg+0x27c>)
 8017d06:	f005 f9e1 	bl	801d0cc <iprintf>
    return ERR_VAL;
 8017d0a:	f06f 0305 	mvn.w	r3, #5
 8017d0e:	e109      	b.n	8017f24 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	891b      	ldrh	r3, [r3, #8]
 8017d14:	887a      	ldrh	r2, [r7, #2]
 8017d16:	429a      	cmp	r2, r3
 8017d18:	d301      	bcc.n	8017d1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	e102      	b.n	8017f24 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d22:	887a      	ldrh	r2, [r7, #2]
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d906      	bls.n	8017d36 <tcp_split_unsent_seg+0x7e>
 8017d28:	4b80      	ldr	r3, [pc, #512]	; (8017f2c <tcp_split_unsent_seg+0x274>)
 8017d2a:	f240 325b 	movw	r2, #859	; 0x35b
 8017d2e:	4983      	ldr	r1, [pc, #524]	; (8017f3c <tcp_split_unsent_seg+0x284>)
 8017d30:	4880      	ldr	r0, [pc, #512]	; (8017f34 <tcp_split_unsent_seg+0x27c>)
 8017d32:	f005 f9cb 	bl	801d0cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	891b      	ldrh	r3, [r3, #8]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d106      	bne.n	8017d4c <tcp_split_unsent_seg+0x94>
 8017d3e:	4b7b      	ldr	r3, [pc, #492]	; (8017f2c <tcp_split_unsent_seg+0x274>)
 8017d40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017d44:	497e      	ldr	r1, [pc, #504]	; (8017f40 <tcp_split_unsent_seg+0x288>)
 8017d46:	487b      	ldr	r0, [pc, #492]	; (8017f34 <tcp_split_unsent_seg+0x27c>)
 8017d48:	f005 f9c0 	bl	801d0cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	7a9b      	ldrb	r3, [r3, #10]
 8017d50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017d52:	7bfb      	ldrb	r3, [r7, #15]
 8017d54:	009b      	lsls	r3, r3, #2
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	f003 0304 	and.w	r3, r3, #4
 8017d5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	891a      	ldrh	r2, [r3, #8]
 8017d62:	887b      	ldrh	r3, [r7, #2]
 8017d64:	1ad3      	subs	r3, r2, r3
 8017d66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017d68:	7bbb      	ldrb	r3, [r7, #14]
 8017d6a:	b29a      	uxth	r2, r3
 8017d6c:	89bb      	ldrh	r3, [r7, #12]
 8017d6e:	4413      	add	r3, r2
 8017d70:	b29b      	uxth	r3, r3
 8017d72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d76:	4619      	mov	r1, r3
 8017d78:	2036      	movs	r0, #54	; 0x36
 8017d7a:	f7fa fb95 	bl	80124a8 <pbuf_alloc>
 8017d7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	f000 80b7 	beq.w	8017ef6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	891a      	ldrh	r2, [r3, #8]
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	891b      	ldrh	r3, [r3, #8]
 8017d92:	1ad3      	subs	r3, r2, r3
 8017d94:	b29a      	uxth	r2, r3
 8017d96:	887b      	ldrh	r3, [r7, #2]
 8017d98:	4413      	add	r3, r2
 8017d9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017d9c:	697b      	ldr	r3, [r7, #20]
 8017d9e:	6858      	ldr	r0, [r3, #4]
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	685a      	ldr	r2, [r3, #4]
 8017da4:	7bbb      	ldrb	r3, [r7, #14]
 8017da6:	18d1      	adds	r1, r2, r3
 8017da8:	897b      	ldrh	r3, [r7, #10]
 8017daa:	89ba      	ldrh	r2, [r7, #12]
 8017dac:	f7fb f856 	bl	8012e5c <pbuf_copy_partial>
 8017db0:	4603      	mov	r3, r0
 8017db2:	461a      	mov	r2, r3
 8017db4:	89bb      	ldrh	r3, [r7, #12]
 8017db6:	4293      	cmp	r3, r2
 8017db8:	f040 809f 	bne.w	8017efa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	68db      	ldr	r3, [r3, #12]
 8017dc0:	899b      	ldrh	r3, [r3, #12]
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7f9 fa61 	bl	801128c <lwip_htons>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	b2db      	uxtb	r3, r3
 8017dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dd2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017dd8:	7efb      	ldrb	r3, [r7, #27]
 8017dda:	f003 0308 	and.w	r3, r3, #8
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d007      	beq.n	8017df2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017de2:	7efb      	ldrb	r3, [r7, #27]
 8017de4:	f023 0308 	bic.w	r3, r3, #8
 8017de8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017dea:	7ebb      	ldrb	r3, [r7, #26]
 8017dec:	f043 0308 	orr.w	r3, r3, #8
 8017df0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017df2:	7efb      	ldrb	r3, [r7, #27]
 8017df4:	f003 0301 	and.w	r3, r3, #1
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d007      	beq.n	8017e0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017dfc:	7efb      	ldrb	r3, [r7, #27]
 8017dfe:	f023 0301 	bic.w	r3, r3, #1
 8017e02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017e04:	7ebb      	ldrb	r3, [r7, #26]
 8017e06:	f043 0301 	orr.w	r3, r3, #1
 8017e0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017e0c:	697b      	ldr	r3, [r7, #20]
 8017e0e:	68db      	ldr	r3, [r3, #12]
 8017e10:	685b      	ldr	r3, [r3, #4]
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7f9 fa4f 	bl	80112b6 <lwip_htonl>
 8017e18:	4602      	mov	r2, r0
 8017e1a:	887b      	ldrh	r3, [r7, #2]
 8017e1c:	18d1      	adds	r1, r2, r3
 8017e1e:	7eba      	ldrb	r2, [r7, #26]
 8017e20:	7bfb      	ldrb	r3, [r7, #15]
 8017e22:	9300      	str	r3, [sp, #0]
 8017e24:	460b      	mov	r3, r1
 8017e26:	6939      	ldr	r1, [r7, #16]
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7ff fa4f 	bl	80172cc <tcp_create_segment>
 8017e2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017e30:	69fb      	ldr	r3, [r7, #28]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d063      	beq.n	8017efe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7fa fea6 	bl	8012b8c <pbuf_clen>
 8017e40:	4603      	mov	r3, r0
 8017e42:	461a      	mov	r2, r3
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e4a:	1a9b      	subs	r3, r3, r2
 8017e4c:	b29a      	uxth	r2, r3
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	6858      	ldr	r0, [r3, #4]
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	685b      	ldr	r3, [r3, #4]
 8017e5c:	891a      	ldrh	r2, [r3, #8]
 8017e5e:	89bb      	ldrh	r3, [r7, #12]
 8017e60:	1ad3      	subs	r3, r2, r3
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	4619      	mov	r1, r3
 8017e66:	f7fa fc7d 	bl	8012764 <pbuf_realloc>
  useg->len -= remainder;
 8017e6a:	697b      	ldr	r3, [r7, #20]
 8017e6c:	891a      	ldrh	r2, [r3, #8]
 8017e6e:	89bb      	ldrh	r3, [r7, #12]
 8017e70:	1ad3      	subs	r3, r2, r3
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	68db      	ldr	r3, [r3, #12]
 8017e7c:	899b      	ldrh	r3, [r3, #12]
 8017e7e:	b29c      	uxth	r4, r3
 8017e80:	7efb      	ldrb	r3, [r7, #27]
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7f9 fa01 	bl	801128c <lwip_htons>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	461a      	mov	r2, r3
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	68db      	ldr	r3, [r3, #12]
 8017e92:	4322      	orrs	r2, r4
 8017e94:	b292      	uxth	r2, r2
 8017e96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7fa fe75 	bl	8012b8c <pbuf_clen>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	461a      	mov	r2, r3
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017eac:	4413      	add	r3, r2
 8017eae:	b29a      	uxth	r2, r3
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017eb6:	69fb      	ldr	r3, [r7, #28]
 8017eb8:	685b      	ldr	r3, [r3, #4]
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f7fa fe66 	bl	8012b8c <pbuf_clen>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	461a      	mov	r2, r3
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017eca:	4413      	add	r3, r2
 8017ecc:	b29a      	uxth	r2, r3
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017ed4:	697b      	ldr	r3, [r7, #20]
 8017ed6:	681a      	ldr	r2, [r3, #0]
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	69fa      	ldr	r2, [r7, #28]
 8017ee0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017ee2:	69fb      	ldr	r3, [r7, #28]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d103      	bne.n	8017ef2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	2200      	movs	r2, #0
 8017eee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	e016      	b.n	8017f24 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017ef6:	bf00      	nop
 8017ef8:	e002      	b.n	8017f00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017efa:	bf00      	nop
 8017efc:	e000      	b.n	8017f00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017efe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017f00:	69fb      	ldr	r3, [r7, #28]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d006      	beq.n	8017f14 <tcp_split_unsent_seg+0x25c>
 8017f06:	4b09      	ldr	r3, [pc, #36]	; (8017f2c <tcp_split_unsent_seg+0x274>)
 8017f08:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017f0c:	490d      	ldr	r1, [pc, #52]	; (8017f44 <tcp_split_unsent_seg+0x28c>)
 8017f0e:	4809      	ldr	r0, [pc, #36]	; (8017f34 <tcp_split_unsent_seg+0x27c>)
 8017f10:	f005 f8dc 	bl	801d0cc <iprintf>
  if (p != NULL) {
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d002      	beq.n	8017f20 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017f1a:	6938      	ldr	r0, [r7, #16]
 8017f1c:	f7fa fda8 	bl	8012a70 <pbuf_free>
  }

  return ERR_MEM;
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f24:	4618      	mov	r0, r3
 8017f26:	3724      	adds	r7, #36	; 0x24
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd90      	pop	{r4, r7, pc}
 8017f2c:	08021820 	.word	0x08021820
 8017f30:	08021bb4 	.word	0x08021bb4
 8017f34:	08021874 	.word	0x08021874
 8017f38:	08021bd8 	.word	0x08021bd8
 8017f3c:	08021bfc 	.word	0x08021bfc
 8017f40:	08021c0c 	.word	0x08021c0c
 8017f44:	08021c1c 	.word	0x08021c1c

08017f48 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017f48:	b590      	push	{r4, r7, lr}
 8017f4a:	b085      	sub	sp, #20
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d106      	bne.n	8017f64 <tcp_send_fin+0x1c>
 8017f56:	4b21      	ldr	r3, [pc, #132]	; (8017fdc <tcp_send_fin+0x94>)
 8017f58:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017f5c:	4920      	ldr	r1, [pc, #128]	; (8017fe0 <tcp_send_fin+0x98>)
 8017f5e:	4821      	ldr	r0, [pc, #132]	; (8017fe4 <tcp_send_fin+0x9c>)
 8017f60:	f005 f8b4 	bl	801d0cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d02e      	beq.n	8017fca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f70:	60fb      	str	r3, [r7, #12]
 8017f72:	e002      	b.n	8017f7a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d1f8      	bne.n	8017f74 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	68db      	ldr	r3, [r3, #12]
 8017f86:	899b      	ldrh	r3, [r3, #12]
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7f9 f97e 	bl	801128c <lwip_htons>
 8017f90:	4603      	mov	r3, r0
 8017f92:	b2db      	uxtb	r3, r3
 8017f94:	f003 0307 	and.w	r3, r3, #7
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d116      	bne.n	8017fca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	899b      	ldrh	r3, [r3, #12]
 8017fa2:	b29c      	uxth	r4, r3
 8017fa4:	2001      	movs	r0, #1
 8017fa6:	f7f9 f971 	bl	801128c <lwip_htons>
 8017faa:	4603      	mov	r3, r0
 8017fac:	461a      	mov	r2, r3
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	68db      	ldr	r3, [r3, #12]
 8017fb2:	4322      	orrs	r2, r4
 8017fb4:	b292      	uxth	r2, r2
 8017fb6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	8b5b      	ldrh	r3, [r3, #26]
 8017fbc:	f043 0320 	orr.w	r3, r3, #32
 8017fc0:	b29a      	uxth	r2, r3
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	e004      	b.n	8017fd4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017fca:	2101      	movs	r1, #1
 8017fcc:	6878      	ldr	r0, [r7, #4]
 8017fce:	f000 f80b 	bl	8017fe8 <tcp_enqueue_flags>
 8017fd2:	4603      	mov	r3, r0
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3714      	adds	r7, #20
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd90      	pop	{r4, r7, pc}
 8017fdc:	08021820 	.word	0x08021820
 8017fe0:	08021c28 	.word	0x08021c28
 8017fe4:	08021874 	.word	0x08021874

08017fe8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b08a      	sub	sp, #40	; 0x28
 8017fec:	af02      	add	r7, sp, #8
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	460b      	mov	r3, r1
 8017ff2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017ffc:	78fb      	ldrb	r3, [r7, #3]
 8017ffe:	f003 0303 	and.w	r3, r3, #3
 8018002:	2b00      	cmp	r3, #0
 8018004:	d106      	bne.n	8018014 <tcp_enqueue_flags+0x2c>
 8018006:	4b67      	ldr	r3, [pc, #412]	; (80181a4 <tcp_enqueue_flags+0x1bc>)
 8018008:	f240 4211 	movw	r2, #1041	; 0x411
 801800c:	4966      	ldr	r1, [pc, #408]	; (80181a8 <tcp_enqueue_flags+0x1c0>)
 801800e:	4867      	ldr	r0, [pc, #412]	; (80181ac <tcp_enqueue_flags+0x1c4>)
 8018010:	f005 f85c 	bl	801d0cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d106      	bne.n	8018028 <tcp_enqueue_flags+0x40>
 801801a:	4b62      	ldr	r3, [pc, #392]	; (80181a4 <tcp_enqueue_flags+0x1bc>)
 801801c:	f240 4213 	movw	r2, #1043	; 0x413
 8018020:	4963      	ldr	r1, [pc, #396]	; (80181b0 <tcp_enqueue_flags+0x1c8>)
 8018022:	4862      	ldr	r0, [pc, #392]	; (80181ac <tcp_enqueue_flags+0x1c4>)
 8018024:	f005 f852 	bl	801d0cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018028:	78fb      	ldrb	r3, [r7, #3]
 801802a:	f003 0302 	and.w	r3, r3, #2
 801802e:	2b00      	cmp	r3, #0
 8018030:	d001      	beq.n	8018036 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018032:	2301      	movs	r3, #1
 8018034:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018036:	7ffb      	ldrb	r3, [r7, #31]
 8018038:	009b      	lsls	r3, r3, #2
 801803a:	b2db      	uxtb	r3, r3
 801803c:	f003 0304 	and.w	r3, r3, #4
 8018040:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018042:	7dfb      	ldrb	r3, [r7, #23]
 8018044:	b29b      	uxth	r3, r3
 8018046:	f44f 7220 	mov.w	r2, #640	; 0x280
 801804a:	4619      	mov	r1, r3
 801804c:	2036      	movs	r0, #54	; 0x36
 801804e:	f7fa fa2b 	bl	80124a8 <pbuf_alloc>
 8018052:	6138      	str	r0, [r7, #16]
 8018054:	693b      	ldr	r3, [r7, #16]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d109      	bne.n	801806e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	8b5b      	ldrh	r3, [r3, #26]
 801805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018062:	b29a      	uxth	r2, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018068:	f04f 33ff 	mov.w	r3, #4294967295
 801806c:	e095      	b.n	801819a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	895a      	ldrh	r2, [r3, #10]
 8018072:	7dfb      	ldrb	r3, [r7, #23]
 8018074:	b29b      	uxth	r3, r3
 8018076:	429a      	cmp	r2, r3
 8018078:	d206      	bcs.n	8018088 <tcp_enqueue_flags+0xa0>
 801807a:	4b4a      	ldr	r3, [pc, #296]	; (80181a4 <tcp_enqueue_flags+0x1bc>)
 801807c:	f240 4239 	movw	r2, #1081	; 0x439
 8018080:	494c      	ldr	r1, [pc, #304]	; (80181b4 <tcp_enqueue_flags+0x1cc>)
 8018082:	484a      	ldr	r0, [pc, #296]	; (80181ac <tcp_enqueue_flags+0x1c4>)
 8018084:	f005 f822 	bl	801d0cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801808c:	78fa      	ldrb	r2, [r7, #3]
 801808e:	7ffb      	ldrb	r3, [r7, #31]
 8018090:	9300      	str	r3, [sp, #0]
 8018092:	460b      	mov	r3, r1
 8018094:	6939      	ldr	r1, [r7, #16]
 8018096:	6878      	ldr	r0, [r7, #4]
 8018098:	f7ff f918 	bl	80172cc <tcp_create_segment>
 801809c:	60f8      	str	r0, [r7, #12]
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d109      	bne.n	80180b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	8b5b      	ldrh	r3, [r3, #26]
 80180a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180ac:	b29a      	uxth	r2, r3
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80180b2:	f04f 33ff 	mov.w	r3, #4294967295
 80180b6:	e070      	b.n	801819a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	68db      	ldr	r3, [r3, #12]
 80180bc:	f003 0303 	and.w	r3, r3, #3
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d006      	beq.n	80180d2 <tcp_enqueue_flags+0xea>
 80180c4:	4b37      	ldr	r3, [pc, #220]	; (80181a4 <tcp_enqueue_flags+0x1bc>)
 80180c6:	f240 4242 	movw	r2, #1090	; 0x442
 80180ca:	493b      	ldr	r1, [pc, #236]	; (80181b8 <tcp_enqueue_flags+0x1d0>)
 80180cc:	4837      	ldr	r0, [pc, #220]	; (80181ac <tcp_enqueue_flags+0x1c4>)
 80180ce:	f004 fffd 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	891b      	ldrh	r3, [r3, #8]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d006      	beq.n	80180e8 <tcp_enqueue_flags+0x100>
 80180da:	4b32      	ldr	r3, [pc, #200]	; (80181a4 <tcp_enqueue_flags+0x1bc>)
 80180dc:	f240 4243 	movw	r2, #1091	; 0x443
 80180e0:	4936      	ldr	r1, [pc, #216]	; (80181bc <tcp_enqueue_flags+0x1d4>)
 80180e2:	4832      	ldr	r0, [pc, #200]	; (80181ac <tcp_enqueue_flags+0x1c4>)
 80180e4:	f004 fff2 	bl	801d0cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d103      	bne.n	80180f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	68fa      	ldr	r2, [r7, #12]
 80180f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80180f6:	e00d      	b.n	8018114 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180fc:	61bb      	str	r3, [r7, #24]
 80180fe:	e002      	b.n	8018106 <tcp_enqueue_flags+0x11e>
 8018100:	69bb      	ldr	r3, [r7, #24]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	61bb      	str	r3, [r7, #24]
 8018106:	69bb      	ldr	r3, [r7, #24]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d1f8      	bne.n	8018100 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801810e:	69bb      	ldr	r3, [r7, #24]
 8018110:	68fa      	ldr	r2, [r7, #12]
 8018112:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2200      	movs	r2, #0
 8018118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801811c:	78fb      	ldrb	r3, [r7, #3]
 801811e:	f003 0302 	and.w	r3, r3, #2
 8018122:	2b00      	cmp	r3, #0
 8018124:	d104      	bne.n	8018130 <tcp_enqueue_flags+0x148>
 8018126:	78fb      	ldrb	r3, [r7, #3]
 8018128:	f003 0301 	and.w	r3, r3, #1
 801812c:	2b00      	cmp	r3, #0
 801812e:	d004      	beq.n	801813a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018134:	1c5a      	adds	r2, r3, #1
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801813a:	78fb      	ldrb	r3, [r7, #3]
 801813c:	f003 0301 	and.w	r3, r3, #1
 8018140:	2b00      	cmp	r3, #0
 8018142:	d006      	beq.n	8018152 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	8b5b      	ldrh	r3, [r3, #26]
 8018148:	f043 0320 	orr.w	r3, r3, #32
 801814c:	b29a      	uxth	r2, r3
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	4618      	mov	r0, r3
 8018158:	f7fa fd18 	bl	8012b8c <pbuf_clen>
 801815c:	4603      	mov	r3, r0
 801815e:	461a      	mov	r2, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018166:	4413      	add	r3, r2
 8018168:	b29a      	uxth	r2, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018176:	2b00      	cmp	r3, #0
 8018178:	d00e      	beq.n	8018198 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801817e:	2b00      	cmp	r3, #0
 8018180:	d10a      	bne.n	8018198 <tcp_enqueue_flags+0x1b0>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018186:	2b00      	cmp	r3, #0
 8018188:	d106      	bne.n	8018198 <tcp_enqueue_flags+0x1b0>
 801818a:	4b06      	ldr	r3, [pc, #24]	; (80181a4 <tcp_enqueue_flags+0x1bc>)
 801818c:	f240 4265 	movw	r2, #1125	; 0x465
 8018190:	490b      	ldr	r1, [pc, #44]	; (80181c0 <tcp_enqueue_flags+0x1d8>)
 8018192:	4806      	ldr	r0, [pc, #24]	; (80181ac <tcp_enqueue_flags+0x1c4>)
 8018194:	f004 ff9a 	bl	801d0cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018198:	2300      	movs	r3, #0
}
 801819a:	4618      	mov	r0, r3
 801819c:	3720      	adds	r7, #32
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}
 80181a2:	bf00      	nop
 80181a4:	08021820 	.word	0x08021820
 80181a8:	08021c44 	.word	0x08021c44
 80181ac:	08021874 	.word	0x08021874
 80181b0:	08021c9c 	.word	0x08021c9c
 80181b4:	08021cbc 	.word	0x08021cbc
 80181b8:	08021cf8 	.word	0x08021cf8
 80181bc:	08021d10 	.word	0x08021d10
 80181c0:	08021d3c 	.word	0x08021d3c

080181c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80181c4:	b5b0      	push	{r4, r5, r7, lr}
 80181c6:	b08a      	sub	sp, #40	; 0x28
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d106      	bne.n	80181e0 <tcp_output+0x1c>
 80181d2:	4b8a      	ldr	r3, [pc, #552]	; (80183fc <tcp_output+0x238>)
 80181d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80181d8:	4989      	ldr	r1, [pc, #548]	; (8018400 <tcp_output+0x23c>)
 80181da:	488a      	ldr	r0, [pc, #552]	; (8018404 <tcp_output+0x240>)
 80181dc:	f004 ff76 	bl	801d0cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	7d1b      	ldrb	r3, [r3, #20]
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d106      	bne.n	80181f6 <tcp_output+0x32>
 80181e8:	4b84      	ldr	r3, [pc, #528]	; (80183fc <tcp_output+0x238>)
 80181ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80181ee:	4986      	ldr	r1, [pc, #536]	; (8018408 <tcp_output+0x244>)
 80181f0:	4884      	ldr	r0, [pc, #528]	; (8018404 <tcp_output+0x240>)
 80181f2:	f004 ff6b 	bl	801d0cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80181f6:	4b85      	ldr	r3, [pc, #532]	; (801840c <tcp_output+0x248>)
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d101      	bne.n	8018204 <tcp_output+0x40>
    return ERR_OK;
 8018200:	2300      	movs	r3, #0
 8018202:	e1ce      	b.n	80185a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018210:	4293      	cmp	r3, r2
 8018212:	bf28      	it	cs
 8018214:	4613      	movcs	r3, r2
 8018216:	b29b      	uxth	r3, r3
 8018218:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801821e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018222:	2b00      	cmp	r3, #0
 8018224:	d10b      	bne.n	801823e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	8b5b      	ldrh	r3, [r3, #26]
 801822a:	f003 0302 	and.w	r3, r3, #2
 801822e:	2b00      	cmp	r3, #0
 8018230:	f000 81aa 	beq.w	8018588 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018234:	6878      	ldr	r0, [r7, #4]
 8018236:	f000 fdcb 	bl	8018dd0 <tcp_send_empty_ack>
 801823a:	4603      	mov	r3, r0
 801823c:	e1b1      	b.n	80185a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801823e:	6879      	ldr	r1, [r7, #4]
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	3304      	adds	r3, #4
 8018244:	461a      	mov	r2, r3
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f7ff f824 	bl	8017294 <tcp_route>
 801824c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801824e:	697b      	ldr	r3, [r7, #20]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d102      	bne.n	801825a <tcp_output+0x96>
    return ERR_RTE;
 8018254:	f06f 0303 	mvn.w	r3, #3
 8018258:	e1a3      	b.n	80185a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d003      	beq.n	8018268 <tcp_output+0xa4>
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d111      	bne.n	801828c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018268:	697b      	ldr	r3, [r7, #20]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d002      	beq.n	8018274 <tcp_output+0xb0>
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	3304      	adds	r3, #4
 8018272:	e000      	b.n	8018276 <tcp_output+0xb2>
 8018274:	2300      	movs	r3, #0
 8018276:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018278:	693b      	ldr	r3, [r7, #16]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d102      	bne.n	8018284 <tcp_output+0xc0>
      return ERR_RTE;
 801827e:	f06f 0303 	mvn.w	r3, #3
 8018282:	e18e      	b.n	80185a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018284:	693b      	ldr	r3, [r7, #16]
 8018286:	681a      	ldr	r2, [r3, #0]
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	685b      	ldr	r3, [r3, #4]
 8018292:	4618      	mov	r0, r3
 8018294:	f7f9 f80f 	bl	80112b6 <lwip_htonl>
 8018298:	4602      	mov	r2, r0
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801829e:	1ad3      	subs	r3, r2, r3
 80182a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182a2:	8912      	ldrh	r2, [r2, #8]
 80182a4:	4413      	add	r3, r2
 80182a6:	69ba      	ldr	r2, [r7, #24]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d227      	bcs.n	80182fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80182b2:	461a      	mov	r2, r3
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	4293      	cmp	r3, r2
 80182b8:	d114      	bne.n	80182e4 <tcp_output+0x120>
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d110      	bne.n	80182e4 <tcp_output+0x120>
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d10b      	bne.n	80182e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2200      	movs	r2, #0
 80182d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2201      	movs	r2, #1
 80182d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2200      	movs	r2, #0
 80182e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	8b5b      	ldrh	r3, [r3, #26]
 80182e8:	f003 0302 	and.w	r3, r3, #2
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	f000 814d 	beq.w	801858c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80182f2:	6878      	ldr	r0, [r7, #4]
 80182f4:	f000 fd6c 	bl	8018dd0 <tcp_send_empty_ack>
 80182f8:	4603      	mov	r3, r0
 80182fa:	e152      	b.n	80185a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2200      	movs	r2, #0
 8018300:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018308:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801830a:	6a3b      	ldr	r3, [r7, #32]
 801830c:	2b00      	cmp	r3, #0
 801830e:	f000 811c 	beq.w	801854a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018312:	e002      	b.n	801831a <tcp_output+0x156>
 8018314:	6a3b      	ldr	r3, [r7, #32]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	623b      	str	r3, [r7, #32]
 801831a:	6a3b      	ldr	r3, [r7, #32]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d1f8      	bne.n	8018314 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018322:	e112      	b.n	801854a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018326:	68db      	ldr	r3, [r3, #12]
 8018328:	899b      	ldrh	r3, [r3, #12]
 801832a:	b29b      	uxth	r3, r3
 801832c:	4618      	mov	r0, r3
 801832e:	f7f8 ffad 	bl	801128c <lwip_htons>
 8018332:	4603      	mov	r3, r0
 8018334:	b2db      	uxtb	r3, r3
 8018336:	f003 0304 	and.w	r3, r3, #4
 801833a:	2b00      	cmp	r3, #0
 801833c:	d006      	beq.n	801834c <tcp_output+0x188>
 801833e:	4b2f      	ldr	r3, [pc, #188]	; (80183fc <tcp_output+0x238>)
 8018340:	f240 5236 	movw	r2, #1334	; 0x536
 8018344:	4932      	ldr	r1, [pc, #200]	; (8018410 <tcp_output+0x24c>)
 8018346:	482f      	ldr	r0, [pc, #188]	; (8018404 <tcp_output+0x240>)
 8018348:	f004 fec0 	bl	801d0cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018350:	2b00      	cmp	r3, #0
 8018352:	d01f      	beq.n	8018394 <tcp_output+0x1d0>
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	8b5b      	ldrh	r3, [r3, #26]
 8018358:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801835c:	2b00      	cmp	r3, #0
 801835e:	d119      	bne.n	8018394 <tcp_output+0x1d0>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018364:	2b00      	cmp	r3, #0
 8018366:	d00b      	beq.n	8018380 <tcp_output+0x1bc>
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d110      	bne.n	8018394 <tcp_output+0x1d0>
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018376:	891a      	ldrh	r2, [r3, #8]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801837c:	429a      	cmp	r2, r3
 801837e:	d209      	bcs.n	8018394 <tcp_output+0x1d0>
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018386:	2b00      	cmp	r3, #0
 8018388:	d004      	beq.n	8018394 <tcp_output+0x1d0>
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018390:	2b08      	cmp	r3, #8
 8018392:	d901      	bls.n	8018398 <tcp_output+0x1d4>
 8018394:	2301      	movs	r3, #1
 8018396:	e000      	b.n	801839a <tcp_output+0x1d6>
 8018398:	2300      	movs	r3, #0
 801839a:	2b00      	cmp	r3, #0
 801839c:	d106      	bne.n	80183ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	8b5b      	ldrh	r3, [r3, #26]
 80183a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	f000 80e4 	beq.w	8018574 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	7d1b      	ldrb	r3, [r3, #20]
 80183b0:	2b02      	cmp	r3, #2
 80183b2:	d00d      	beq.n	80183d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80183b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	899b      	ldrh	r3, [r3, #12]
 80183ba:	b29c      	uxth	r4, r3
 80183bc:	2010      	movs	r0, #16
 80183be:	f7f8 ff65 	bl	801128c <lwip_htons>
 80183c2:	4603      	mov	r3, r0
 80183c4:	461a      	mov	r2, r3
 80183c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c8:	68db      	ldr	r3, [r3, #12]
 80183ca:	4322      	orrs	r2, r4
 80183cc:	b292      	uxth	r2, r2
 80183ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80183d0:	697a      	ldr	r2, [r7, #20]
 80183d2:	6879      	ldr	r1, [r7, #4]
 80183d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183d6:	f000 f909 	bl	80185ec <tcp_output_segment>
 80183da:	4603      	mov	r3, r0
 80183dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80183de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d016      	beq.n	8018414 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	8b5b      	ldrh	r3, [r3, #26]
 80183ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183ee:	b29a      	uxth	r2, r3
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	835a      	strh	r2, [r3, #26]
      return err;
 80183f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183f8:	e0d3      	b.n	80185a2 <tcp_output+0x3de>
 80183fa:	bf00      	nop
 80183fc:	08021820 	.word	0x08021820
 8018400:	08021d64 	.word	0x08021d64
 8018404:	08021874 	.word	0x08021874
 8018408:	08021d7c 	.word	0x08021d7c
 801840c:	20013430 	.word	0x20013430
 8018410:	08021da4 	.word	0x08021da4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018416:	681a      	ldr	r2, [r3, #0]
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	7d1b      	ldrb	r3, [r3, #20]
 8018420:	2b02      	cmp	r3, #2
 8018422:	d006      	beq.n	8018432 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	8b5b      	ldrh	r3, [r3, #26]
 8018428:	f023 0303 	bic.w	r3, r3, #3
 801842c:	b29a      	uxth	r2, r3
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018434:	68db      	ldr	r3, [r3, #12]
 8018436:	685b      	ldr	r3, [r3, #4]
 8018438:	4618      	mov	r0, r3
 801843a:	f7f8 ff3c 	bl	80112b6 <lwip_htonl>
 801843e:	4604      	mov	r4, r0
 8018440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018442:	891b      	ldrh	r3, [r3, #8]
 8018444:	461d      	mov	r5, r3
 8018446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018448:	68db      	ldr	r3, [r3, #12]
 801844a:	899b      	ldrh	r3, [r3, #12]
 801844c:	b29b      	uxth	r3, r3
 801844e:	4618      	mov	r0, r3
 8018450:	f7f8 ff1c 	bl	801128c <lwip_htons>
 8018454:	4603      	mov	r3, r0
 8018456:	b2db      	uxtb	r3, r3
 8018458:	f003 0303 	and.w	r3, r3, #3
 801845c:	2b00      	cmp	r3, #0
 801845e:	d001      	beq.n	8018464 <tcp_output+0x2a0>
 8018460:	2301      	movs	r3, #1
 8018462:	e000      	b.n	8018466 <tcp_output+0x2a2>
 8018464:	2300      	movs	r3, #0
 8018466:	442b      	add	r3, r5
 8018468:	4423      	add	r3, r4
 801846a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	1ad3      	subs	r3, r2, r3
 8018474:	2b00      	cmp	r3, #0
 8018476:	da02      	bge.n	801847e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	68ba      	ldr	r2, [r7, #8]
 801847c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018480:	891b      	ldrh	r3, [r3, #8]
 8018482:	461c      	mov	r4, r3
 8018484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018486:	68db      	ldr	r3, [r3, #12]
 8018488:	899b      	ldrh	r3, [r3, #12]
 801848a:	b29b      	uxth	r3, r3
 801848c:	4618      	mov	r0, r3
 801848e:	f7f8 fefd 	bl	801128c <lwip_htons>
 8018492:	4603      	mov	r3, r0
 8018494:	b2db      	uxtb	r3, r3
 8018496:	f003 0303 	and.w	r3, r3, #3
 801849a:	2b00      	cmp	r3, #0
 801849c:	d001      	beq.n	80184a2 <tcp_output+0x2de>
 801849e:	2301      	movs	r3, #1
 80184a0:	e000      	b.n	80184a4 <tcp_output+0x2e0>
 80184a2:	2300      	movs	r3, #0
 80184a4:	4423      	add	r3, r4
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d049      	beq.n	801853e <tcp_output+0x37a>
      seg->next = NULL;
 80184aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ac:	2200      	movs	r2, #0
 80184ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d105      	bne.n	80184c4 <tcp_output+0x300>
        pcb->unacked = seg;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80184be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c0:	623b      	str	r3, [r7, #32]
 80184c2:	e03f      	b.n	8018544 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80184c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c6:	68db      	ldr	r3, [r3, #12]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7f8 fef3 	bl	80112b6 <lwip_htonl>
 80184d0:	4604      	mov	r4, r0
 80184d2:	6a3b      	ldr	r3, [r7, #32]
 80184d4:	68db      	ldr	r3, [r3, #12]
 80184d6:	685b      	ldr	r3, [r3, #4]
 80184d8:	4618      	mov	r0, r3
 80184da:	f7f8 feec 	bl	80112b6 <lwip_htonl>
 80184de:	4603      	mov	r3, r0
 80184e0:	1ae3      	subs	r3, r4, r3
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	da24      	bge.n	8018530 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	3370      	adds	r3, #112	; 0x70
 80184ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80184ec:	e002      	b.n	80184f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80184ee:	69fb      	ldr	r3, [r7, #28]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80184f4:	69fb      	ldr	r3, [r7, #28]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d011      	beq.n	8018520 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80184fc:	69fb      	ldr	r3, [r7, #28]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	68db      	ldr	r3, [r3, #12]
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	4618      	mov	r0, r3
 8018506:	f7f8 fed6 	bl	80112b6 <lwip_htonl>
 801850a:	4604      	mov	r4, r0
 801850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801850e:	68db      	ldr	r3, [r3, #12]
 8018510:	685b      	ldr	r3, [r3, #4]
 8018512:	4618      	mov	r0, r3
 8018514:	f7f8 fecf 	bl	80112b6 <lwip_htonl>
 8018518:	4603      	mov	r3, r0
 801851a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801851c:	2b00      	cmp	r3, #0
 801851e:	dbe6      	blt.n	80184ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018520:	69fb      	ldr	r3, [r7, #28]
 8018522:	681a      	ldr	r2, [r3, #0]
 8018524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018526:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018528:	69fb      	ldr	r3, [r7, #28]
 801852a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801852c:	601a      	str	r2, [r3, #0]
 801852e:	e009      	b.n	8018544 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018530:	6a3b      	ldr	r3, [r7, #32]
 8018532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018534:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018536:	6a3b      	ldr	r3, [r7, #32]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	623b      	str	r3, [r7, #32]
 801853c:	e002      	b.n	8018544 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801853e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018540:	f7fb ff19 	bl	8014376 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018548:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854c:	2b00      	cmp	r3, #0
 801854e:	d012      	beq.n	8018576 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	4618      	mov	r0, r3
 8018558:	f7f8 fead 	bl	80112b6 <lwip_htonl>
 801855c:	4602      	mov	r2, r0
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018562:	1ad3      	subs	r3, r2, r3
 8018564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018566:	8912      	ldrh	r2, [r2, #8]
 8018568:	4413      	add	r3, r2
  while (seg != NULL &&
 801856a:	69ba      	ldr	r2, [r7, #24]
 801856c:	429a      	cmp	r2, r3
 801856e:	f4bf aed9 	bcs.w	8018324 <tcp_output+0x160>
 8018572:	e000      	b.n	8018576 <tcp_output+0x3b2>
      break;
 8018574:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801857a:	2b00      	cmp	r3, #0
 801857c:	d108      	bne.n	8018590 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	2200      	movs	r2, #0
 8018582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018586:	e004      	b.n	8018592 <tcp_output+0x3ce>
    goto output_done;
 8018588:	bf00      	nop
 801858a:	e002      	b.n	8018592 <tcp_output+0x3ce>
    goto output_done;
 801858c:	bf00      	nop
 801858e:	e000      	b.n	8018592 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018590:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	8b5b      	ldrh	r3, [r3, #26]
 8018596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801859a:	b29a      	uxth	r2, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80185a0:	2300      	movs	r3, #0
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	3728      	adds	r7, #40	; 0x28
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bdb0      	pop	{r4, r5, r7, pc}
 80185aa:	bf00      	nop

080185ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b082      	sub	sp, #8
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d106      	bne.n	80185c8 <tcp_output_segment_busy+0x1c>
 80185ba:	4b09      	ldr	r3, [pc, #36]	; (80185e0 <tcp_output_segment_busy+0x34>)
 80185bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80185c0:	4908      	ldr	r1, [pc, #32]	; (80185e4 <tcp_output_segment_busy+0x38>)
 80185c2:	4809      	ldr	r0, [pc, #36]	; (80185e8 <tcp_output_segment_busy+0x3c>)
 80185c4:	f004 fd82 	bl	801d0cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	685b      	ldr	r3, [r3, #4]
 80185cc:	7b9b      	ldrb	r3, [r3, #14]
 80185ce:	2b01      	cmp	r3, #1
 80185d0:	d001      	beq.n	80185d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80185d2:	2301      	movs	r3, #1
 80185d4:	e000      	b.n	80185d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80185d6:	2300      	movs	r3, #0
}
 80185d8:	4618      	mov	r0, r3
 80185da:	3708      	adds	r7, #8
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}
 80185e0:	08021820 	.word	0x08021820
 80185e4:	08021dbc 	.word	0x08021dbc
 80185e8:	08021874 	.word	0x08021874

080185ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80185ec:	b5b0      	push	{r4, r5, r7, lr}
 80185ee:	b08c      	sub	sp, #48	; 0x30
 80185f0:	af04      	add	r7, sp, #16
 80185f2:	60f8      	str	r0, [r7, #12]
 80185f4:	60b9      	str	r1, [r7, #8]
 80185f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d106      	bne.n	801860c <tcp_output_segment+0x20>
 80185fe:	4b64      	ldr	r3, [pc, #400]	; (8018790 <tcp_output_segment+0x1a4>)
 8018600:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018604:	4963      	ldr	r1, [pc, #396]	; (8018794 <tcp_output_segment+0x1a8>)
 8018606:	4864      	ldr	r0, [pc, #400]	; (8018798 <tcp_output_segment+0x1ac>)
 8018608:	f004 fd60 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d106      	bne.n	8018620 <tcp_output_segment+0x34>
 8018612:	4b5f      	ldr	r3, [pc, #380]	; (8018790 <tcp_output_segment+0x1a4>)
 8018614:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018618:	4960      	ldr	r1, [pc, #384]	; (801879c <tcp_output_segment+0x1b0>)
 801861a:	485f      	ldr	r0, [pc, #380]	; (8018798 <tcp_output_segment+0x1ac>)
 801861c:	f004 fd56 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d106      	bne.n	8018634 <tcp_output_segment+0x48>
 8018626:	4b5a      	ldr	r3, [pc, #360]	; (8018790 <tcp_output_segment+0x1a4>)
 8018628:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801862c:	495c      	ldr	r1, [pc, #368]	; (80187a0 <tcp_output_segment+0x1b4>)
 801862e:	485a      	ldr	r0, [pc, #360]	; (8018798 <tcp_output_segment+0x1ac>)
 8018630:	f004 fd4c 	bl	801d0cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018634:	68f8      	ldr	r0, [r7, #12]
 8018636:	f7ff ffb9 	bl	80185ac <tcp_output_segment_busy>
 801863a:	4603      	mov	r3, r0
 801863c:	2b00      	cmp	r3, #0
 801863e:	d001      	beq.n	8018644 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018640:	2300      	movs	r3, #0
 8018642:	e0a1      	b.n	8018788 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018644:	68bb      	ldr	r3, [r7, #8]
 8018646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	68dc      	ldr	r4, [r3, #12]
 801864c:	4610      	mov	r0, r2
 801864e:	f7f8 fe32 	bl	80112b6 <lwip_htonl>
 8018652:	4603      	mov	r3, r0
 8018654:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	68dc      	ldr	r4, [r3, #12]
 801865e:	4610      	mov	r0, r2
 8018660:	f7f8 fe14 	bl	801128c <lwip_htons>
 8018664:	4603      	mov	r3, r0
 8018666:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018668:	68bb      	ldr	r3, [r7, #8]
 801866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801866c:	68ba      	ldr	r2, [r7, #8]
 801866e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018670:	441a      	add	r2, r3
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	68db      	ldr	r3, [r3, #12]
 801867a:	3314      	adds	r3, #20
 801867c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	7a9b      	ldrb	r3, [r3, #10]
 8018682:	f003 0301 	and.w	r3, r3, #1
 8018686:	2b00      	cmp	r3, #0
 8018688:	d015      	beq.n	80186b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	3304      	adds	r3, #4
 801868e:	461a      	mov	r2, r3
 8018690:	6879      	ldr	r1, [r7, #4]
 8018692:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018696:	f7fc fa33 	bl	8014b00 <tcp_eff_send_mss_netif>
 801869a:	4603      	mov	r3, r0
 801869c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801869e:	8b7b      	ldrh	r3, [r7, #26]
 80186a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80186a4:	4618      	mov	r0, r3
 80186a6:	f7f8 fe06 	bl	80112b6 <lwip_htonl>
 80186aa:	4602      	mov	r2, r0
 80186ac:	69fb      	ldr	r3, [r7, #28]
 80186ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80186b0:	69fb      	ldr	r3, [r7, #28]
 80186b2:	3304      	adds	r3, #4
 80186b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80186bc:	2b00      	cmp	r3, #0
 80186be:	da02      	bge.n	80186c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80186c0:	68bb      	ldr	r3, [r7, #8]
 80186c2:	2200      	movs	r2, #0
 80186c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80186c6:	68bb      	ldr	r3, [r7, #8]
 80186c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d10c      	bne.n	80186e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80186ce:	4b35      	ldr	r3, [pc, #212]	; (80187a4 <tcp_output_segment+0x1b8>)
 80186d0:	681a      	ldr	r2, [r3, #0]
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	68db      	ldr	r3, [r3, #12]
 80186da:	685b      	ldr	r3, [r3, #4]
 80186dc:	4618      	mov	r0, r3
 80186de:	f7f8 fdea 	bl	80112b6 <lwip_htonl>
 80186e2:	4602      	mov	r2, r0
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	68da      	ldr	r2, [r3, #12]
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	685b      	ldr	r3, [r3, #4]
 80186f2:	1ad3      	subs	r3, r2, r3
 80186f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	8959      	ldrh	r1, [r3, #10]
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	685b      	ldr	r3, [r3, #4]
 8018700:	8b3a      	ldrh	r2, [r7, #24]
 8018702:	1a8a      	subs	r2, r1, r2
 8018704:	b292      	uxth	r2, r2
 8018706:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	685b      	ldr	r3, [r3, #4]
 801870c:	8919      	ldrh	r1, [r3, #8]
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	685b      	ldr	r3, [r3, #4]
 8018712:	8b3a      	ldrh	r2, [r7, #24]
 8018714:	1a8a      	subs	r2, r1, r2
 8018716:	b292      	uxth	r2, r2
 8018718:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	685b      	ldr	r3, [r3, #4]
 801871e:	68fa      	ldr	r2, [r7, #12]
 8018720:	68d2      	ldr	r2, [r2, #12]
 8018722:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	68db      	ldr	r3, [r3, #12]
 8018728:	2200      	movs	r2, #0
 801872a:	741a      	strb	r2, [r3, #16]
 801872c:	2200      	movs	r2, #0
 801872e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	68da      	ldr	r2, [r3, #12]
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	7a9b      	ldrb	r3, [r3, #10]
 8018738:	f003 0301 	and.w	r3, r3, #1
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <tcp_output_segment+0x158>
 8018740:	2318      	movs	r3, #24
 8018742:	e000      	b.n	8018746 <tcp_output_segment+0x15a>
 8018744:	2314      	movs	r3, #20
 8018746:	4413      	add	r3, r2
 8018748:	69fa      	ldr	r2, [r7, #28]
 801874a:	429a      	cmp	r2, r3
 801874c:	d006      	beq.n	801875c <tcp_output_segment+0x170>
 801874e:	4b10      	ldr	r3, [pc, #64]	; (8018790 <tcp_output_segment+0x1a4>)
 8018750:	f240 621c 	movw	r2, #1564	; 0x61c
 8018754:	4914      	ldr	r1, [pc, #80]	; (80187a8 <tcp_output_segment+0x1bc>)
 8018756:	4810      	ldr	r0, [pc, #64]	; (8018798 <tcp_output_segment+0x1ac>)
 8018758:	f004 fcb8 	bl	801d0cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	6858      	ldr	r0, [r3, #4]
 8018760:	68b9      	ldr	r1, [r7, #8]
 8018762:	68bb      	ldr	r3, [r7, #8]
 8018764:	1d1c      	adds	r4, r3, #4
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	7add      	ldrb	r5, [r3, #11]
 801876a:	68bb      	ldr	r3, [r7, #8]
 801876c:	7a9b      	ldrb	r3, [r3, #10]
 801876e:	687a      	ldr	r2, [r7, #4]
 8018770:	9202      	str	r2, [sp, #8]
 8018772:	2206      	movs	r2, #6
 8018774:	9201      	str	r2, [sp, #4]
 8018776:	9300      	str	r3, [sp, #0]
 8018778:	462b      	mov	r3, r5
 801877a:	4622      	mov	r2, r4
 801877c:	f002 fbaa 	bl	801aed4 <ip4_output_if>
 8018780:	4603      	mov	r3, r0
 8018782:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018784:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018788:	4618      	mov	r0, r3
 801878a:	3720      	adds	r7, #32
 801878c:	46bd      	mov	sp, r7
 801878e:	bdb0      	pop	{r4, r5, r7, pc}
 8018790:	08021820 	.word	0x08021820
 8018794:	08021de4 	.word	0x08021de4
 8018798:	08021874 	.word	0x08021874
 801879c:	08021e04 	.word	0x08021e04
 80187a0:	08021e24 	.word	0x08021e24
 80187a4:	200133e4 	.word	0x200133e4
 80187a8:	08021e48 	.word	0x08021e48

080187ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80187ac:	b5b0      	push	{r4, r5, r7, lr}
 80187ae:	b084      	sub	sp, #16
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d106      	bne.n	80187c8 <tcp_rexmit_rto_prepare+0x1c>
 80187ba:	4b31      	ldr	r3, [pc, #196]	; (8018880 <tcp_rexmit_rto_prepare+0xd4>)
 80187bc:	f240 6263 	movw	r2, #1635	; 0x663
 80187c0:	4930      	ldr	r1, [pc, #192]	; (8018884 <tcp_rexmit_rto_prepare+0xd8>)
 80187c2:	4831      	ldr	r0, [pc, #196]	; (8018888 <tcp_rexmit_rto_prepare+0xdc>)
 80187c4:	f004 fc82 	bl	801d0cc <iprintf>

  if (pcb->unacked == NULL) {
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d102      	bne.n	80187d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80187d0:	f06f 0305 	mvn.w	r3, #5
 80187d4:	e050      	b.n	8018878 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187da:	60fb      	str	r3, [r7, #12]
 80187dc:	e00b      	b.n	80187f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80187de:	68f8      	ldr	r0, [r7, #12]
 80187e0:	f7ff fee4 	bl	80185ac <tcp_output_segment_busy>
 80187e4:	4603      	mov	r3, r0
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d002      	beq.n	80187f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80187ea:	f06f 0305 	mvn.w	r3, #5
 80187ee:	e043      	b.n	8018878 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	60fb      	str	r3, [r7, #12]
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d1ef      	bne.n	80187de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80187fe:	68f8      	ldr	r0, [r7, #12]
 8018800:	f7ff fed4 	bl	80185ac <tcp_output_segment_busy>
 8018804:	4603      	mov	r3, r0
 8018806:	2b00      	cmp	r3, #0
 8018808:	d002      	beq.n	8018810 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801880a:	f06f 0305 	mvn.w	r3, #5
 801880e:	e033      	b.n	8018878 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2200      	movs	r2, #0
 8018824:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	8b5b      	ldrh	r3, [r3, #26]
 801882a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801882e:	b29a      	uxth	r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	68db      	ldr	r3, [r3, #12]
 8018838:	685b      	ldr	r3, [r3, #4]
 801883a:	4618      	mov	r0, r3
 801883c:	f7f8 fd3b 	bl	80112b6 <lwip_htonl>
 8018840:	4604      	mov	r4, r0
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	891b      	ldrh	r3, [r3, #8]
 8018846:	461d      	mov	r5, r3
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	68db      	ldr	r3, [r3, #12]
 801884c:	899b      	ldrh	r3, [r3, #12]
 801884e:	b29b      	uxth	r3, r3
 8018850:	4618      	mov	r0, r3
 8018852:	f7f8 fd1b 	bl	801128c <lwip_htons>
 8018856:	4603      	mov	r3, r0
 8018858:	b2db      	uxtb	r3, r3
 801885a:	f003 0303 	and.w	r3, r3, #3
 801885e:	2b00      	cmp	r3, #0
 8018860:	d001      	beq.n	8018866 <tcp_rexmit_rto_prepare+0xba>
 8018862:	2301      	movs	r3, #1
 8018864:	e000      	b.n	8018868 <tcp_rexmit_rto_prepare+0xbc>
 8018866:	2300      	movs	r3, #0
 8018868:	442b      	add	r3, r5
 801886a:	18e2      	adds	r2, r4, r3
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2200      	movs	r2, #0
 8018874:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018876:	2300      	movs	r3, #0
}
 8018878:	4618      	mov	r0, r3
 801887a:	3710      	adds	r7, #16
 801887c:	46bd      	mov	sp, r7
 801887e:	bdb0      	pop	{r4, r5, r7, pc}
 8018880:	08021820 	.word	0x08021820
 8018884:	08021e5c 	.word	0x08021e5c
 8018888:	08021874 	.word	0x08021874

0801888c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d106      	bne.n	80188a8 <tcp_rexmit_rto_commit+0x1c>
 801889a:	4b0d      	ldr	r3, [pc, #52]	; (80188d0 <tcp_rexmit_rto_commit+0x44>)
 801889c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80188a0:	490c      	ldr	r1, [pc, #48]	; (80188d4 <tcp_rexmit_rto_commit+0x48>)
 80188a2:	480d      	ldr	r0, [pc, #52]	; (80188d8 <tcp_rexmit_rto_commit+0x4c>)
 80188a4:	f004 fc12 	bl	801d0cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80188ae:	2bff      	cmp	r3, #255	; 0xff
 80188b0:	d007      	beq.n	80188c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80188b8:	3301      	adds	r3, #1
 80188ba:	b2da      	uxtb	r2, r3
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f7ff fc7e 	bl	80181c4 <tcp_output>
}
 80188c8:	bf00      	nop
 80188ca:	3708      	adds	r7, #8
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bd80      	pop	{r7, pc}
 80188d0:	08021820 	.word	0x08021820
 80188d4:	08021e80 	.word	0x08021e80
 80188d8:	08021874 	.word	0x08021874

080188dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b082      	sub	sp, #8
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d106      	bne.n	80188f8 <tcp_rexmit_rto+0x1c>
 80188ea:	4b0a      	ldr	r3, [pc, #40]	; (8018914 <tcp_rexmit_rto+0x38>)
 80188ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80188f0:	4909      	ldr	r1, [pc, #36]	; (8018918 <tcp_rexmit_rto+0x3c>)
 80188f2:	480a      	ldr	r0, [pc, #40]	; (801891c <tcp_rexmit_rto+0x40>)
 80188f4:	f004 fbea 	bl	801d0cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f7ff ff57 	bl	80187ac <tcp_rexmit_rto_prepare>
 80188fe:	4603      	mov	r3, r0
 8018900:	2b00      	cmp	r3, #0
 8018902:	d102      	bne.n	801890a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	f7ff ffc1 	bl	801888c <tcp_rexmit_rto_commit>
  }
}
 801890a:	bf00      	nop
 801890c:	3708      	adds	r7, #8
 801890e:	46bd      	mov	sp, r7
 8018910:	bd80      	pop	{r7, pc}
 8018912:	bf00      	nop
 8018914:	08021820 	.word	0x08021820
 8018918:	08021ea4 	.word	0x08021ea4
 801891c:	08021874 	.word	0x08021874

08018920 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018920:	b590      	push	{r4, r7, lr}
 8018922:	b085      	sub	sp, #20
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d106      	bne.n	801893c <tcp_rexmit+0x1c>
 801892e:	4b2f      	ldr	r3, [pc, #188]	; (80189ec <tcp_rexmit+0xcc>)
 8018930:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018934:	492e      	ldr	r1, [pc, #184]	; (80189f0 <tcp_rexmit+0xd0>)
 8018936:	482f      	ldr	r0, [pc, #188]	; (80189f4 <tcp_rexmit+0xd4>)
 8018938:	f004 fbc8 	bl	801d0cc <iprintf>

  if (pcb->unacked == NULL) {
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018940:	2b00      	cmp	r3, #0
 8018942:	d102      	bne.n	801894a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018944:	f06f 0305 	mvn.w	r3, #5
 8018948:	e04c      	b.n	80189e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801894e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018950:	68b8      	ldr	r0, [r7, #8]
 8018952:	f7ff fe2b 	bl	80185ac <tcp_output_segment_busy>
 8018956:	4603      	mov	r3, r0
 8018958:	2b00      	cmp	r3, #0
 801895a:	d002      	beq.n	8018962 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801895c:	f06f 0305 	mvn.w	r3, #5
 8018960:	e040      	b.n	80189e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	681a      	ldr	r2, [r3, #0]
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	336c      	adds	r3, #108	; 0x6c
 801896e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018970:	e002      	b.n	8018978 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d011      	beq.n	80189a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	68db      	ldr	r3, [r3, #12]
 8018986:	685b      	ldr	r3, [r3, #4]
 8018988:	4618      	mov	r0, r3
 801898a:	f7f8 fc94 	bl	80112b6 <lwip_htonl>
 801898e:	4604      	mov	r4, r0
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	4618      	mov	r0, r3
 8018998:	f7f8 fc8d 	bl	80112b6 <lwip_htonl>
 801899c:	4603      	mov	r3, r0
 801899e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	dbe6      	blt.n	8018972 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	68ba      	ldr	r2, [r7, #8]
 80189b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d103      	bne.n	80189c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2200      	movs	r2, #0
 80189be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80189c8:	2bff      	cmp	r3, #255	; 0xff
 80189ca:	d007      	beq.n	80189dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80189d2:	3301      	adds	r3, #1
 80189d4:	b2da      	uxtb	r2, r3
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2200      	movs	r2, #0
 80189e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80189e2:	2300      	movs	r3, #0
}
 80189e4:	4618      	mov	r0, r3
 80189e6:	3714      	adds	r7, #20
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd90      	pop	{r4, r7, pc}
 80189ec:	08021820 	.word	0x08021820
 80189f0:	08021ec0 	.word	0x08021ec0
 80189f4:	08021874 	.word	0x08021874

080189f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d106      	bne.n	8018a14 <tcp_rexmit_fast+0x1c>
 8018a06:	4b2a      	ldr	r3, [pc, #168]	; (8018ab0 <tcp_rexmit_fast+0xb8>)
 8018a08:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018a0c:	4929      	ldr	r1, [pc, #164]	; (8018ab4 <tcp_rexmit_fast+0xbc>)
 8018a0e:	482a      	ldr	r0, [pc, #168]	; (8018ab8 <tcp_rexmit_fast+0xc0>)
 8018a10:	f004 fb5c 	bl	801d0cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d044      	beq.n	8018aa6 <tcp_rexmit_fast+0xae>
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	8b5b      	ldrh	r3, [r3, #26]
 8018a20:	f003 0304 	and.w	r3, r3, #4
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d13e      	bne.n	8018aa6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f7ff ff79 	bl	8018920 <tcp_rexmit>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d138      	bne.n	8018aa6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018a40:	4293      	cmp	r3, r2
 8018a42:	bf28      	it	cs
 8018a44:	4613      	movcs	r3, r2
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	0fda      	lsrs	r2, r3, #31
 8018a4a:	4413      	add	r3, r2
 8018a4c:	105b      	asrs	r3, r3, #1
 8018a4e:	b29a      	uxth	r2, r3
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018a5c:	461a      	mov	r2, r3
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a62:	005b      	lsls	r3, r3, #1
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d206      	bcs.n	8018a76 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a6c:	005b      	lsls	r3, r3, #1
 8018a6e:	b29a      	uxth	r2, r3
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a80:	4619      	mov	r1, r3
 8018a82:	0049      	lsls	r1, r1, #1
 8018a84:	440b      	add	r3, r1
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	4413      	add	r3, r2
 8018a8a:	b29a      	uxth	r2, r3
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	8b5b      	ldrh	r3, [r3, #26]
 8018a96:	f043 0304 	orr.w	r3, r3, #4
 8018a9a:	b29a      	uxth	r2, r3
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018aa6:	bf00      	nop
 8018aa8:	3708      	adds	r7, #8
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}
 8018aae:	bf00      	nop
 8018ab0:	08021820 	.word	0x08021820
 8018ab4:	08021ed8 	.word	0x08021ed8
 8018ab8:	08021874 	.word	0x08021874

08018abc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b086      	sub	sp, #24
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	607b      	str	r3, [r7, #4]
 8018ac6:	460b      	mov	r3, r1
 8018ac8:	817b      	strh	r3, [r7, #10]
 8018aca:	4613      	mov	r3, r2
 8018acc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018ace:	897a      	ldrh	r2, [r7, #10]
 8018ad0:	893b      	ldrh	r3, [r7, #8]
 8018ad2:	4413      	add	r3, r2
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	3314      	adds	r3, #20
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ade:	4619      	mov	r1, r3
 8018ae0:	2022      	movs	r0, #34	; 0x22
 8018ae2:	f7f9 fce1 	bl	80124a8 <pbuf_alloc>
 8018ae6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d04d      	beq.n	8018b8a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018aee:	897b      	ldrh	r3, [r7, #10]
 8018af0:	3313      	adds	r3, #19
 8018af2:	697a      	ldr	r2, [r7, #20]
 8018af4:	8952      	ldrh	r2, [r2, #10]
 8018af6:	4293      	cmp	r3, r2
 8018af8:	db06      	blt.n	8018b08 <tcp_output_alloc_header_common+0x4c>
 8018afa:	4b26      	ldr	r3, [pc, #152]	; (8018b94 <tcp_output_alloc_header_common+0xd8>)
 8018afc:	f240 7223 	movw	r2, #1827	; 0x723
 8018b00:	4925      	ldr	r1, [pc, #148]	; (8018b98 <tcp_output_alloc_header_common+0xdc>)
 8018b02:	4826      	ldr	r0, [pc, #152]	; (8018b9c <tcp_output_alloc_header_common+0xe0>)
 8018b04:	f004 fae2 	bl	801d0cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	685b      	ldr	r3, [r3, #4]
 8018b0c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018b0e:	8c3b      	ldrh	r3, [r7, #32]
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7f8 fbbb 	bl	801128c <lwip_htons>
 8018b16:	4603      	mov	r3, r0
 8018b18:	461a      	mov	r2, r3
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7f8 fbb3 	bl	801128c <lwip_htons>
 8018b26:	4603      	mov	r3, r0
 8018b28:	461a      	mov	r2, r3
 8018b2a:	693b      	ldr	r3, [r7, #16]
 8018b2c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018b2e:	693b      	ldr	r3, [r7, #16]
 8018b30:	687a      	ldr	r2, [r7, #4]
 8018b32:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018b34:	68f8      	ldr	r0, [r7, #12]
 8018b36:	f7f8 fbbe 	bl	80112b6 <lwip_htonl>
 8018b3a:	4602      	mov	r2, r0
 8018b3c:	693b      	ldr	r3, [r7, #16]
 8018b3e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018b40:	897b      	ldrh	r3, [r7, #10]
 8018b42:	089b      	lsrs	r3, r3, #2
 8018b44:	b29b      	uxth	r3, r3
 8018b46:	3305      	adds	r3, #5
 8018b48:	b29b      	uxth	r3, r3
 8018b4a:	031b      	lsls	r3, r3, #12
 8018b4c:	b29a      	uxth	r2, r3
 8018b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018b52:	b29b      	uxth	r3, r3
 8018b54:	4313      	orrs	r3, r2
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7f8 fb97 	bl	801128c <lwip_htons>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	461a      	mov	r2, r3
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018b66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7f8 fb8f 	bl	801128c <lwip_htons>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	461a      	mov	r2, r3
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018b76:	693b      	ldr	r3, [r7, #16]
 8018b78:	2200      	movs	r2, #0
 8018b7a:	741a      	strb	r2, [r3, #16]
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018b80:	693b      	ldr	r3, [r7, #16]
 8018b82:	2200      	movs	r2, #0
 8018b84:	749a      	strb	r2, [r3, #18]
 8018b86:	2200      	movs	r2, #0
 8018b88:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018b8a:	697b      	ldr	r3, [r7, #20]
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	3718      	adds	r7, #24
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	08021820 	.word	0x08021820
 8018b98:	08021ef8 	.word	0x08021ef8
 8018b9c:	08021874 	.word	0x08021874

08018ba0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018ba0:	b5b0      	push	{r4, r5, r7, lr}
 8018ba2:	b08a      	sub	sp, #40	; 0x28
 8018ba4:	af04      	add	r7, sp, #16
 8018ba6:	60f8      	str	r0, [r7, #12]
 8018ba8:	607b      	str	r3, [r7, #4]
 8018baa:	460b      	mov	r3, r1
 8018bac:	817b      	strh	r3, [r7, #10]
 8018bae:	4613      	mov	r3, r2
 8018bb0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d106      	bne.n	8018bc6 <tcp_output_alloc_header+0x26>
 8018bb8:	4b15      	ldr	r3, [pc, #84]	; (8018c10 <tcp_output_alloc_header+0x70>)
 8018bba:	f240 7242 	movw	r2, #1858	; 0x742
 8018bbe:	4915      	ldr	r1, [pc, #84]	; (8018c14 <tcp_output_alloc_header+0x74>)
 8018bc0:	4815      	ldr	r0, [pc, #84]	; (8018c18 <tcp_output_alloc_header+0x78>)
 8018bc2:	f004 fa83 	bl	801d0cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	8adb      	ldrh	r3, [r3, #22]
 8018bce:	68fa      	ldr	r2, [r7, #12]
 8018bd0:	8b12      	ldrh	r2, [r2, #24]
 8018bd2:	68f9      	ldr	r1, [r7, #12]
 8018bd4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018bd6:	893d      	ldrh	r5, [r7, #8]
 8018bd8:	897c      	ldrh	r4, [r7, #10]
 8018bda:	9103      	str	r1, [sp, #12]
 8018bdc:	2110      	movs	r1, #16
 8018bde:	9102      	str	r1, [sp, #8]
 8018be0:	9201      	str	r2, [sp, #4]
 8018be2:	9300      	str	r3, [sp, #0]
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	462a      	mov	r2, r5
 8018be8:	4621      	mov	r1, r4
 8018bea:	f7ff ff67 	bl	8018abc <tcp_output_alloc_header_common>
 8018bee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018bf0:	697b      	ldr	r3, [r7, #20]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d006      	beq.n	8018c04 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bfa:	68fa      	ldr	r2, [r7, #12]
 8018bfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018bfe:	441a      	add	r2, r3
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018c04:	697b      	ldr	r3, [r7, #20]
}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3718      	adds	r7, #24
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	08021820 	.word	0x08021820
 8018c14:	08021f28 	.word	0x08021f28
 8018c18:	08021874 	.word	0x08021874

08018c1c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b088      	sub	sp, #32
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	60f8      	str	r0, [r7, #12]
 8018c24:	60b9      	str	r1, [r7, #8]
 8018c26:	4611      	mov	r1, r2
 8018c28:	461a      	mov	r2, r3
 8018c2a:	460b      	mov	r3, r1
 8018c2c:	71fb      	strb	r3, [r7, #7]
 8018c2e:	4613      	mov	r3, r2
 8018c30:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018c32:	2300      	movs	r3, #0
 8018c34:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d106      	bne.n	8018c4a <tcp_output_fill_options+0x2e>
 8018c3c:	4b12      	ldr	r3, [pc, #72]	; (8018c88 <tcp_output_fill_options+0x6c>)
 8018c3e:	f240 7256 	movw	r2, #1878	; 0x756
 8018c42:	4912      	ldr	r1, [pc, #72]	; (8018c8c <tcp_output_fill_options+0x70>)
 8018c44:	4812      	ldr	r0, [pc, #72]	; (8018c90 <tcp_output_fill_options+0x74>)
 8018c46:	f004 fa41 	bl	801d0cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018c4a:	68bb      	ldr	r3, [r7, #8]
 8018c4c:	685b      	ldr	r3, [r3, #4]
 8018c4e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018c50:	69bb      	ldr	r3, [r7, #24]
 8018c52:	3314      	adds	r3, #20
 8018c54:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018c56:	8bfb      	ldrh	r3, [r7, #30]
 8018c58:	009b      	lsls	r3, r3, #2
 8018c5a:	461a      	mov	r2, r3
 8018c5c:	79fb      	ldrb	r3, [r7, #7]
 8018c5e:	009b      	lsls	r3, r3, #2
 8018c60:	f003 0304 	and.w	r3, r3, #4
 8018c64:	4413      	add	r3, r2
 8018c66:	3314      	adds	r3, #20
 8018c68:	69ba      	ldr	r2, [r7, #24]
 8018c6a:	4413      	add	r3, r2
 8018c6c:	697a      	ldr	r2, [r7, #20]
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d006      	beq.n	8018c80 <tcp_output_fill_options+0x64>
 8018c72:	4b05      	ldr	r3, [pc, #20]	; (8018c88 <tcp_output_fill_options+0x6c>)
 8018c74:	f240 7275 	movw	r2, #1909	; 0x775
 8018c78:	4906      	ldr	r1, [pc, #24]	; (8018c94 <tcp_output_fill_options+0x78>)
 8018c7a:	4805      	ldr	r0, [pc, #20]	; (8018c90 <tcp_output_fill_options+0x74>)
 8018c7c:	f004 fa26 	bl	801d0cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018c80:	bf00      	nop
 8018c82:	3720      	adds	r7, #32
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}
 8018c88:	08021820 	.word	0x08021820
 8018c8c:	08021f50 	.word	0x08021f50
 8018c90:	08021874 	.word	0x08021874
 8018c94:	08021e48 	.word	0x08021e48

08018c98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b08a      	sub	sp, #40	; 0x28
 8018c9c:	af04      	add	r7, sp, #16
 8018c9e:	60f8      	str	r0, [r7, #12]
 8018ca0:	60b9      	str	r1, [r7, #8]
 8018ca2:	607a      	str	r2, [r7, #4]
 8018ca4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d106      	bne.n	8018cba <tcp_output_control_segment+0x22>
 8018cac:	4b1c      	ldr	r3, [pc, #112]	; (8018d20 <tcp_output_control_segment+0x88>)
 8018cae:	f240 7287 	movw	r2, #1927	; 0x787
 8018cb2:	491c      	ldr	r1, [pc, #112]	; (8018d24 <tcp_output_control_segment+0x8c>)
 8018cb4:	481c      	ldr	r0, [pc, #112]	; (8018d28 <tcp_output_control_segment+0x90>)
 8018cb6:	f004 fa09 	bl	801d0cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018cba:	683a      	ldr	r2, [r7, #0]
 8018cbc:	6879      	ldr	r1, [r7, #4]
 8018cbe:	68f8      	ldr	r0, [r7, #12]
 8018cc0:	f7fe fae8 	bl	8017294 <tcp_route>
 8018cc4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d102      	bne.n	8018cd2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018ccc:	23fc      	movs	r3, #252	; 0xfc
 8018cce:	75fb      	strb	r3, [r7, #23]
 8018cd0:	e01c      	b.n	8018d0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d006      	beq.n	8018ce6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	7adb      	ldrb	r3, [r3, #11]
 8018cdc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	7a9b      	ldrb	r3, [r3, #10]
 8018ce2:	757b      	strb	r3, [r7, #21]
 8018ce4:	e003      	b.n	8018cee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018ce6:	23ff      	movs	r3, #255	; 0xff
 8018ce8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018cee:	7dba      	ldrb	r2, [r7, #22]
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	9302      	str	r3, [sp, #8]
 8018cf4:	2306      	movs	r3, #6
 8018cf6:	9301      	str	r3, [sp, #4]
 8018cf8:	7d7b      	ldrb	r3, [r7, #21]
 8018cfa:	9300      	str	r3, [sp, #0]
 8018cfc:	4613      	mov	r3, r2
 8018cfe:	683a      	ldr	r2, [r7, #0]
 8018d00:	6879      	ldr	r1, [r7, #4]
 8018d02:	68b8      	ldr	r0, [r7, #8]
 8018d04:	f002 f8e6 	bl	801aed4 <ip4_output_if>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018d0c:	68b8      	ldr	r0, [r7, #8]
 8018d0e:	f7f9 feaf 	bl	8012a70 <pbuf_free>
  return err;
 8018d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	3718      	adds	r7, #24
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	08021820 	.word	0x08021820
 8018d24:	08021f78 	.word	0x08021f78
 8018d28:	08021874 	.word	0x08021874

08018d2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018d2c:	b590      	push	{r4, r7, lr}
 8018d2e:	b08b      	sub	sp, #44	; 0x2c
 8018d30:	af04      	add	r7, sp, #16
 8018d32:	60f8      	str	r0, [r7, #12]
 8018d34:	60b9      	str	r1, [r7, #8]
 8018d36:	607a      	str	r2, [r7, #4]
 8018d38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d106      	bne.n	8018d4e <tcp_rst+0x22>
 8018d40:	4b1f      	ldr	r3, [pc, #124]	; (8018dc0 <tcp_rst+0x94>)
 8018d42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018d46:	491f      	ldr	r1, [pc, #124]	; (8018dc4 <tcp_rst+0x98>)
 8018d48:	481f      	ldr	r0, [pc, #124]	; (8018dc8 <tcp_rst+0x9c>)
 8018d4a:	f004 f9bf 	bl	801d0cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d106      	bne.n	8018d62 <tcp_rst+0x36>
 8018d54:	4b1a      	ldr	r3, [pc, #104]	; (8018dc0 <tcp_rst+0x94>)
 8018d56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018d5a:	491c      	ldr	r1, [pc, #112]	; (8018dcc <tcp_rst+0xa0>)
 8018d5c:	481a      	ldr	r0, [pc, #104]	; (8018dc8 <tcp_rst+0x9c>)
 8018d5e:	f004 f9b5 	bl	801d0cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018d62:	2300      	movs	r3, #0
 8018d64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018d66:	f246 0308 	movw	r3, #24584	; 0x6008
 8018d6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018d6c:	7dfb      	ldrb	r3, [r7, #23]
 8018d6e:	b29c      	uxth	r4, r3
 8018d70:	68b8      	ldr	r0, [r7, #8]
 8018d72:	f7f8 faa0 	bl	80112b6 <lwip_htonl>
 8018d76:	4602      	mov	r2, r0
 8018d78:	8abb      	ldrh	r3, [r7, #20]
 8018d7a:	9303      	str	r3, [sp, #12]
 8018d7c:	2314      	movs	r3, #20
 8018d7e:	9302      	str	r3, [sp, #8]
 8018d80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018d82:	9301      	str	r3, [sp, #4]
 8018d84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018d86:	9300      	str	r3, [sp, #0]
 8018d88:	4613      	mov	r3, r2
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	4621      	mov	r1, r4
 8018d8e:	6878      	ldr	r0, [r7, #4]
 8018d90:	f7ff fe94 	bl	8018abc <tcp_output_alloc_header_common>
 8018d94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d00c      	beq.n	8018db6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018d9c:	7dfb      	ldrb	r3, [r7, #23]
 8018d9e:	2200      	movs	r2, #0
 8018da0:	6939      	ldr	r1, [r7, #16]
 8018da2:	68f8      	ldr	r0, [r7, #12]
 8018da4:	f7ff ff3a 	bl	8018c1c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018daa:	683a      	ldr	r2, [r7, #0]
 8018dac:	6939      	ldr	r1, [r7, #16]
 8018dae:	68f8      	ldr	r0, [r7, #12]
 8018db0:	f7ff ff72 	bl	8018c98 <tcp_output_control_segment>
 8018db4:	e000      	b.n	8018db8 <tcp_rst+0x8c>
    return;
 8018db6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018db8:	371c      	adds	r7, #28
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd90      	pop	{r4, r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	08021820 	.word	0x08021820
 8018dc4:	08021fa4 	.word	0x08021fa4
 8018dc8:	08021874 	.word	0x08021874
 8018dcc:	08021fc0 	.word	0x08021fc0

08018dd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018dd0:	b590      	push	{r4, r7, lr}
 8018dd2:	b087      	sub	sp, #28
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d106      	bne.n	8018df4 <tcp_send_empty_ack+0x24>
 8018de6:	4b28      	ldr	r3, [pc, #160]	; (8018e88 <tcp_send_empty_ack+0xb8>)
 8018de8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018dec:	4927      	ldr	r1, [pc, #156]	; (8018e8c <tcp_send_empty_ack+0xbc>)
 8018dee:	4828      	ldr	r0, [pc, #160]	; (8018e90 <tcp_send_empty_ack+0xc0>)
 8018df0:	f004 f96c 	bl	801d0cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018df4:	7dfb      	ldrb	r3, [r7, #23]
 8018df6:	009b      	lsls	r3, r3, #2
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	f003 0304 	and.w	r3, r3, #4
 8018dfe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018e00:	7d7b      	ldrb	r3, [r7, #21]
 8018e02:	b29c      	uxth	r4, r3
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7f8 fa54 	bl	80112b6 <lwip_htonl>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	2200      	movs	r2, #0
 8018e12:	4621      	mov	r1, r4
 8018e14:	6878      	ldr	r0, [r7, #4]
 8018e16:	f7ff fec3 	bl	8018ba0 <tcp_output_alloc_header>
 8018e1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018e1c:	693b      	ldr	r3, [r7, #16]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d109      	bne.n	8018e36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	8b5b      	ldrh	r3, [r3, #26]
 8018e26:	f043 0303 	orr.w	r3, r3, #3
 8018e2a:	b29a      	uxth	r2, r3
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018e30:	f06f 0301 	mvn.w	r3, #1
 8018e34:	e023      	b.n	8018e7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018e36:	7dbb      	ldrb	r3, [r7, #22]
 8018e38:	7dfa      	ldrb	r2, [r7, #23]
 8018e3a:	6939      	ldr	r1, [r7, #16]
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f7ff feed 	bl	8018c1c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	3304      	adds	r3, #4
 8018e48:	6939      	ldr	r1, [r7, #16]
 8018e4a:	6878      	ldr	r0, [r7, #4]
 8018e4c:	f7ff ff24 	bl	8018c98 <tcp_output_control_segment>
 8018e50:	4603      	mov	r3, r0
 8018e52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d007      	beq.n	8018e6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	8b5b      	ldrh	r3, [r3, #26]
 8018e60:	f043 0303 	orr.w	r3, r3, #3
 8018e64:	b29a      	uxth	r2, r3
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	835a      	strh	r2, [r3, #26]
 8018e6a:	e006      	b.n	8018e7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	8b5b      	ldrh	r3, [r3, #26]
 8018e70:	f023 0303 	bic.w	r3, r3, #3
 8018e74:	b29a      	uxth	r2, r3
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	371c      	adds	r7, #28
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd90      	pop	{r4, r7, pc}
 8018e86:	bf00      	nop
 8018e88:	08021820 	.word	0x08021820
 8018e8c:	08021fdc 	.word	0x08021fdc
 8018e90:	08021874 	.word	0x08021874

08018e94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018e94:	b590      	push	{r4, r7, lr}
 8018e96:	b087      	sub	sp, #28
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d106      	bne.n	8018eb4 <tcp_keepalive+0x20>
 8018ea6:	4b18      	ldr	r3, [pc, #96]	; (8018f08 <tcp_keepalive+0x74>)
 8018ea8:	f640 0224 	movw	r2, #2084	; 0x824
 8018eac:	4917      	ldr	r1, [pc, #92]	; (8018f0c <tcp_keepalive+0x78>)
 8018eae:	4818      	ldr	r0, [pc, #96]	; (8018f10 <tcp_keepalive+0x7c>)
 8018eb0:	f004 f90c 	bl	801d0cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018eb4:	7dfb      	ldrb	r3, [r7, #23]
 8018eb6:	b29c      	uxth	r4, r3
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ebc:	3b01      	subs	r3, #1
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7f8 f9f9 	bl	80112b6 <lwip_htonl>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	4621      	mov	r1, r4
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	f7ff fe68 	bl	8018ba0 <tcp_output_alloc_header>
 8018ed0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018ed2:	693b      	ldr	r3, [r7, #16]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d102      	bne.n	8018ede <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8018edc:	e010      	b.n	8018f00 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018ede:	7dfb      	ldrb	r3, [r7, #23]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	6939      	ldr	r1, [r7, #16]
 8018ee4:	6878      	ldr	r0, [r7, #4]
 8018ee6:	f7ff fe99 	bl	8018c1c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018eea:	687a      	ldr	r2, [r7, #4]
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	3304      	adds	r3, #4
 8018ef0:	6939      	ldr	r1, [r7, #16]
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f7ff fed0 	bl	8018c98 <tcp_output_control_segment>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018f00:	4618      	mov	r0, r3
 8018f02:	371c      	adds	r7, #28
 8018f04:	46bd      	mov	sp, r7
 8018f06:	bd90      	pop	{r4, r7, pc}
 8018f08:	08021820 	.word	0x08021820
 8018f0c:	08021ffc 	.word	0x08021ffc
 8018f10:	08021874 	.word	0x08021874

08018f14 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018f14:	b590      	push	{r4, r7, lr}
 8018f16:	b08b      	sub	sp, #44	; 0x2c
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d106      	bne.n	8018f36 <tcp_zero_window_probe+0x22>
 8018f28:	4b4c      	ldr	r3, [pc, #304]	; (801905c <tcp_zero_window_probe+0x148>)
 8018f2a:	f640 024f 	movw	r2, #2127	; 0x84f
 8018f2e:	494c      	ldr	r1, [pc, #304]	; (8019060 <tcp_zero_window_probe+0x14c>)
 8018f30:	484c      	ldr	r0, [pc, #304]	; (8019064 <tcp_zero_window_probe+0x150>)
 8018f32:	f004 f8cb 	bl	801d0cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f3a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018f3c:	6a3b      	ldr	r3, [r7, #32]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d101      	bne.n	8018f46 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018f42:	2300      	movs	r3, #0
 8018f44:	e086      	b.n	8019054 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018f4c:	2bff      	cmp	r3, #255	; 0xff
 8018f4e:	d007      	beq.n	8018f60 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018f56:	3301      	adds	r3, #1
 8018f58:	b2da      	uxtb	r2, r3
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018f60:	6a3b      	ldr	r3, [r7, #32]
 8018f62:	68db      	ldr	r3, [r3, #12]
 8018f64:	899b      	ldrh	r3, [r3, #12]
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f7f8 f98f 	bl	801128c <lwip_htons>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	b2db      	uxtb	r3, r3
 8018f72:	f003 0301 	and.w	r3, r3, #1
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d005      	beq.n	8018f86 <tcp_zero_window_probe+0x72>
 8018f7a:	6a3b      	ldr	r3, [r7, #32]
 8018f7c:	891b      	ldrh	r3, [r3, #8]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d101      	bne.n	8018f86 <tcp_zero_window_probe+0x72>
 8018f82:	2301      	movs	r3, #1
 8018f84:	e000      	b.n	8018f88 <tcp_zero_window_probe+0x74>
 8018f86:	2300      	movs	r3, #0
 8018f88:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018f8a:	7ffb      	ldrb	r3, [r7, #31]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	bf0c      	ite	eq
 8018f90:	2301      	moveq	r3, #1
 8018f92:	2300      	movne	r3, #0
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f9c:	b299      	uxth	r1, r3
 8018f9e:	6a3b      	ldr	r3, [r7, #32]
 8018fa0:	68db      	ldr	r3, [r3, #12]
 8018fa2:	685b      	ldr	r3, [r3, #4]
 8018fa4:	8bba      	ldrh	r2, [r7, #28]
 8018fa6:	6878      	ldr	r0, [r7, #4]
 8018fa8:	f7ff fdfa 	bl	8018ba0 <tcp_output_alloc_header>
 8018fac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018fae:	69bb      	ldr	r3, [r7, #24]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d102      	bne.n	8018fba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8018fb8:	e04c      	b.n	8019054 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018fba:	69bb      	ldr	r3, [r7, #24]
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018fc0:	7ffb      	ldrb	r3, [r7, #31]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d011      	beq.n	8018fea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	899b      	ldrh	r3, [r3, #12]
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	b21b      	sxth	r3, r3
 8018fce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018fd2:	b21c      	sxth	r4, r3
 8018fd4:	2011      	movs	r0, #17
 8018fd6:	f7f8 f959 	bl	801128c <lwip_htons>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	b21b      	sxth	r3, r3
 8018fde:	4323      	orrs	r3, r4
 8018fe0:	b21b      	sxth	r3, r3
 8018fe2:	b29a      	uxth	r2, r3
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	819a      	strh	r2, [r3, #12]
 8018fe8:	e010      	b.n	801900c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018fea:	69bb      	ldr	r3, [r7, #24]
 8018fec:	685b      	ldr	r3, [r3, #4]
 8018fee:	3314      	adds	r3, #20
 8018ff0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018ff2:	6a3b      	ldr	r3, [r7, #32]
 8018ff4:	6858      	ldr	r0, [r3, #4]
 8018ff6:	6a3b      	ldr	r3, [r7, #32]
 8018ff8:	685b      	ldr	r3, [r3, #4]
 8018ffa:	891a      	ldrh	r2, [r3, #8]
 8018ffc:	6a3b      	ldr	r3, [r7, #32]
 8018ffe:	891b      	ldrh	r3, [r3, #8]
 8019000:	1ad3      	subs	r3, r2, r3
 8019002:	b29b      	uxth	r3, r3
 8019004:	2201      	movs	r2, #1
 8019006:	6939      	ldr	r1, [r7, #16]
 8019008:	f7f9 ff28 	bl	8012e5c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801900c:	6a3b      	ldr	r3, [r7, #32]
 801900e:	68db      	ldr	r3, [r3, #12]
 8019010:	685b      	ldr	r3, [r3, #4]
 8019012:	4618      	mov	r0, r3
 8019014:	f7f8 f94f 	bl	80112b6 <lwip_htonl>
 8019018:	4603      	mov	r3, r0
 801901a:	3301      	adds	r3, #1
 801901c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	1ad3      	subs	r3, r2, r3
 8019026:	2b00      	cmp	r3, #0
 8019028:	da02      	bge.n	8019030 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	68fa      	ldr	r2, [r7, #12]
 801902e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019034:	2200      	movs	r2, #0
 8019036:	69b9      	ldr	r1, [r7, #24]
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7ff fdef 	bl	8018c1c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801903e:	687a      	ldr	r2, [r7, #4]
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	3304      	adds	r3, #4
 8019044:	69b9      	ldr	r1, [r7, #24]
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f7ff fe26 	bl	8018c98 <tcp_output_control_segment>
 801904c:	4603      	mov	r3, r0
 801904e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019050:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019054:	4618      	mov	r0, r3
 8019056:	372c      	adds	r7, #44	; 0x2c
 8019058:	46bd      	mov	sp, r7
 801905a:	bd90      	pop	{r4, r7, pc}
 801905c:	08021820 	.word	0x08021820
 8019060:	08022018 	.word	0x08022018
 8019064:	08021874 	.word	0x08021874

08019068 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019070:	f7f9 ffe2 	bl	8013038 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019074:	4b0a      	ldr	r3, [pc, #40]	; (80190a0 <tcpip_tcp_timer+0x38>)
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d103      	bne.n	8019084 <tcpip_tcp_timer+0x1c>
 801907c:	4b09      	ldr	r3, [pc, #36]	; (80190a4 <tcpip_tcp_timer+0x3c>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d005      	beq.n	8019090 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019084:	2200      	movs	r2, #0
 8019086:	4908      	ldr	r1, [pc, #32]	; (80190a8 <tcpip_tcp_timer+0x40>)
 8019088:	20fa      	movs	r0, #250	; 0xfa
 801908a:	f000 f8f3 	bl	8019274 <sys_timeout>
 801908e:	e003      	b.n	8019098 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019090:	4b06      	ldr	r3, [pc, #24]	; (80190ac <tcpip_tcp_timer+0x44>)
 8019092:	2200      	movs	r2, #0
 8019094:	601a      	str	r2, [r3, #0]
  }
}
 8019096:	bf00      	nop
 8019098:	bf00      	nop
 801909a:	3708      	adds	r7, #8
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}
 80190a0:	200133f0 	.word	0x200133f0
 80190a4:	200133f4 	.word	0x200133f4
 80190a8:	08019069 	.word	0x08019069
 80190ac:	2001343c 	.word	0x2001343c

080190b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80190b4:	4b0a      	ldr	r3, [pc, #40]	; (80190e0 <tcp_timer_needed+0x30>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d10f      	bne.n	80190dc <tcp_timer_needed+0x2c>
 80190bc:	4b09      	ldr	r3, [pc, #36]	; (80190e4 <tcp_timer_needed+0x34>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d103      	bne.n	80190cc <tcp_timer_needed+0x1c>
 80190c4:	4b08      	ldr	r3, [pc, #32]	; (80190e8 <tcp_timer_needed+0x38>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d007      	beq.n	80190dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80190cc:	4b04      	ldr	r3, [pc, #16]	; (80190e0 <tcp_timer_needed+0x30>)
 80190ce:	2201      	movs	r2, #1
 80190d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80190d2:	2200      	movs	r2, #0
 80190d4:	4905      	ldr	r1, [pc, #20]	; (80190ec <tcp_timer_needed+0x3c>)
 80190d6:	20fa      	movs	r0, #250	; 0xfa
 80190d8:	f000 f8cc 	bl	8019274 <sys_timeout>
  }
}
 80190dc:	bf00      	nop
 80190de:	bd80      	pop	{r7, pc}
 80190e0:	2001343c 	.word	0x2001343c
 80190e4:	200133f0 	.word	0x200133f0
 80190e8:	200133f4 	.word	0x200133f4
 80190ec:	08019069 	.word	0x08019069

080190f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b086      	sub	sp, #24
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	60f8      	str	r0, [r7, #12]
 80190f8:	60b9      	str	r1, [r7, #8]
 80190fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80190fc:	200a      	movs	r0, #10
 80190fe:	f7f8 fd9d 	bl	8011c3c <memp_malloc>
 8019102:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019104:	693b      	ldr	r3, [r7, #16]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d109      	bne.n	801911e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801910a:	693b      	ldr	r3, [r7, #16]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d151      	bne.n	80191b4 <sys_timeout_abs+0xc4>
 8019110:	4b2a      	ldr	r3, [pc, #168]	; (80191bc <sys_timeout_abs+0xcc>)
 8019112:	22be      	movs	r2, #190	; 0xbe
 8019114:	492a      	ldr	r1, [pc, #168]	; (80191c0 <sys_timeout_abs+0xd0>)
 8019116:	482b      	ldr	r0, [pc, #172]	; (80191c4 <sys_timeout_abs+0xd4>)
 8019118:	f003 ffd8 	bl	801d0cc <iprintf>
    return;
 801911c:	e04a      	b.n	80191b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801911e:	693b      	ldr	r3, [r7, #16]
 8019120:	2200      	movs	r2, #0
 8019122:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	68ba      	ldr	r2, [r7, #8]
 8019128:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	687a      	ldr	r2, [r7, #4]
 801912e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019130:	693b      	ldr	r3, [r7, #16]
 8019132:	68fa      	ldr	r2, [r7, #12]
 8019134:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019136:	4b24      	ldr	r3, [pc, #144]	; (80191c8 <sys_timeout_abs+0xd8>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d103      	bne.n	8019146 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801913e:	4a22      	ldr	r2, [pc, #136]	; (80191c8 <sys_timeout_abs+0xd8>)
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	6013      	str	r3, [r2, #0]
    return;
 8019144:	e037      	b.n	80191b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	685a      	ldr	r2, [r3, #4]
 801914a:	4b1f      	ldr	r3, [pc, #124]	; (80191c8 <sys_timeout_abs+0xd8>)
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	1ad3      	subs	r3, r2, r3
 8019152:	0fdb      	lsrs	r3, r3, #31
 8019154:	f003 0301 	and.w	r3, r3, #1
 8019158:	b2db      	uxtb	r3, r3
 801915a:	2b00      	cmp	r3, #0
 801915c:	d007      	beq.n	801916e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801915e:	4b1a      	ldr	r3, [pc, #104]	; (80191c8 <sys_timeout_abs+0xd8>)
 8019160:	681a      	ldr	r2, [r3, #0]
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019166:	4a18      	ldr	r2, [pc, #96]	; (80191c8 <sys_timeout_abs+0xd8>)
 8019168:	693b      	ldr	r3, [r7, #16]
 801916a:	6013      	str	r3, [r2, #0]
 801916c:	e023      	b.n	80191b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801916e:	4b16      	ldr	r3, [pc, #88]	; (80191c8 <sys_timeout_abs+0xd8>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	617b      	str	r3, [r7, #20]
 8019174:	e01a      	b.n	80191ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d00b      	beq.n	8019196 <sys_timeout_abs+0xa6>
 801917e:	693b      	ldr	r3, [r7, #16]
 8019180:	685a      	ldr	r2, [r3, #4]
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	1ad3      	subs	r3, r2, r3
 801918a:	0fdb      	lsrs	r3, r3, #31
 801918c:	f003 0301 	and.w	r3, r3, #1
 8019190:	b2db      	uxtb	r3, r3
 8019192:	2b00      	cmp	r3, #0
 8019194:	d007      	beq.n	80191a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019196:	697b      	ldr	r3, [r7, #20]
 8019198:	681a      	ldr	r2, [r3, #0]
 801919a:	693b      	ldr	r3, [r7, #16]
 801919c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	693a      	ldr	r2, [r7, #16]
 80191a2:	601a      	str	r2, [r3, #0]
        break;
 80191a4:	e007      	b.n	80191b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	617b      	str	r3, [r7, #20]
 80191ac:	697b      	ldr	r3, [r7, #20]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d1e1      	bne.n	8019176 <sys_timeout_abs+0x86>
 80191b2:	e000      	b.n	80191b6 <sys_timeout_abs+0xc6>
    return;
 80191b4:	bf00      	nop
      }
    }
  }
}
 80191b6:	3718      	adds	r7, #24
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	0802203c 	.word	0x0802203c
 80191c0:	08022070 	.word	0x08022070
 80191c4:	080220b0 	.word	0x080220b0
 80191c8:	20013434 	.word	0x20013434

080191cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80191cc:	b580      	push	{r7, lr}
 80191ce:	b086      	sub	sp, #24
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80191d8:	697b      	ldr	r3, [r7, #20]
 80191da:	685b      	ldr	r3, [r3, #4]
 80191dc:	4798      	blx	r3

  now = sys_now();
 80191de:	f7f2 fadd 	bl	800b79c <sys_now>
 80191e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80191e4:	697b      	ldr	r3, [r7, #20]
 80191e6:	681a      	ldr	r2, [r3, #0]
 80191e8:	4b0f      	ldr	r3, [pc, #60]	; (8019228 <lwip_cyclic_timer+0x5c>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	4413      	add	r3, r2
 80191ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80191f0:	68fa      	ldr	r2, [r7, #12]
 80191f2:	693b      	ldr	r3, [r7, #16]
 80191f4:	1ad3      	subs	r3, r2, r3
 80191f6:	0fdb      	lsrs	r3, r3, #31
 80191f8:	f003 0301 	and.w	r3, r3, #1
 80191fc:	b2db      	uxtb	r3, r3
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d009      	beq.n	8019216 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019202:	697b      	ldr	r3, [r7, #20]
 8019204:	681a      	ldr	r2, [r3, #0]
 8019206:	693b      	ldr	r3, [r7, #16]
 8019208:	4413      	add	r3, r2
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	4907      	ldr	r1, [pc, #28]	; (801922c <lwip_cyclic_timer+0x60>)
 801920e:	4618      	mov	r0, r3
 8019210:	f7ff ff6e 	bl	80190f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019214:	e004      	b.n	8019220 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019216:	687a      	ldr	r2, [r7, #4]
 8019218:	4904      	ldr	r1, [pc, #16]	; (801922c <lwip_cyclic_timer+0x60>)
 801921a:	68f8      	ldr	r0, [r7, #12]
 801921c:	f7ff ff68 	bl	80190f0 <sys_timeout_abs>
}
 8019220:	bf00      	nop
 8019222:	3718      	adds	r7, #24
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}
 8019228:	20013438 	.word	0x20013438
 801922c:	080191cd 	.word	0x080191cd

08019230 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b082      	sub	sp, #8
 8019234:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019236:	2301      	movs	r3, #1
 8019238:	607b      	str	r3, [r7, #4]
 801923a:	e00e      	b.n	801925a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801923c:	4a0b      	ldr	r2, [pc, #44]	; (801926c <sys_timeouts_init+0x3c>)
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	00db      	lsls	r3, r3, #3
 8019248:	4a08      	ldr	r2, [pc, #32]	; (801926c <sys_timeouts_init+0x3c>)
 801924a:	4413      	add	r3, r2
 801924c:	461a      	mov	r2, r3
 801924e:	4908      	ldr	r1, [pc, #32]	; (8019270 <sys_timeouts_init+0x40>)
 8019250:	f000 f810 	bl	8019274 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	3301      	adds	r3, #1
 8019258:	607b      	str	r3, [r7, #4]
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	2b02      	cmp	r3, #2
 801925e:	d9ed      	bls.n	801923c <sys_timeouts_init+0xc>
  }
}
 8019260:	bf00      	nop
 8019262:	bf00      	nop
 8019264:	3708      	adds	r7, #8
 8019266:	46bd      	mov	sp, r7
 8019268:	bd80      	pop	{r7, pc}
 801926a:	bf00      	nop
 801926c:	080245a8 	.word	0x080245a8
 8019270:	080191cd 	.word	0x080191cd

08019274 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b086      	sub	sp, #24
 8019278:	af00      	add	r7, sp, #0
 801927a:	60f8      	str	r0, [r7, #12]
 801927c:	60b9      	str	r1, [r7, #8]
 801927e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019286:	d306      	bcc.n	8019296 <sys_timeout+0x22>
 8019288:	4b0a      	ldr	r3, [pc, #40]	; (80192b4 <sys_timeout+0x40>)
 801928a:	f240 1229 	movw	r2, #297	; 0x129
 801928e:	490a      	ldr	r1, [pc, #40]	; (80192b8 <sys_timeout+0x44>)
 8019290:	480a      	ldr	r0, [pc, #40]	; (80192bc <sys_timeout+0x48>)
 8019292:	f003 ff1b 	bl	801d0cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019296:	f7f2 fa81 	bl	800b79c <sys_now>
 801929a:	4602      	mov	r2, r0
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	4413      	add	r3, r2
 80192a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80192a2:	687a      	ldr	r2, [r7, #4]
 80192a4:	68b9      	ldr	r1, [r7, #8]
 80192a6:	6978      	ldr	r0, [r7, #20]
 80192a8:	f7ff ff22 	bl	80190f0 <sys_timeout_abs>
#endif
}
 80192ac:	bf00      	nop
 80192ae:	3718      	adds	r7, #24
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	0802203c 	.word	0x0802203c
 80192b8:	080220d8 	.word	0x080220d8
 80192bc:	080220b0 	.word	0x080220b0

080192c0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b084      	sub	sp, #16
 80192c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80192c6:	f7f2 fa69 	bl	800b79c <sys_now>
 80192ca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80192cc:	4b17      	ldr	r3, [pc, #92]	; (801932c <sys_check_timeouts+0x6c>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d022      	beq.n	801931e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80192d8:	68bb      	ldr	r3, [r7, #8]
 80192da:	685b      	ldr	r3, [r3, #4]
 80192dc:	68fa      	ldr	r2, [r7, #12]
 80192de:	1ad3      	subs	r3, r2, r3
 80192e0:	0fdb      	lsrs	r3, r3, #31
 80192e2:	f003 0301 	and.w	r3, r3, #1
 80192e6:	b2db      	uxtb	r3, r3
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d11a      	bne.n	8019322 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80192ec:	68bb      	ldr	r3, [r7, #8]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	4a0e      	ldr	r2, [pc, #56]	; (801932c <sys_check_timeouts+0x6c>)
 80192f2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80192f4:	68bb      	ldr	r3, [r7, #8]
 80192f6:	689b      	ldr	r3, [r3, #8]
 80192f8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80192fa:	68bb      	ldr	r3, [r7, #8]
 80192fc:	68db      	ldr	r3, [r3, #12]
 80192fe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019300:	68bb      	ldr	r3, [r7, #8]
 8019302:	685b      	ldr	r3, [r3, #4]
 8019304:	4a0a      	ldr	r2, [pc, #40]	; (8019330 <sys_check_timeouts+0x70>)
 8019306:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019308:	68b9      	ldr	r1, [r7, #8]
 801930a:	200a      	movs	r0, #10
 801930c:	f7f8 fd0c 	bl	8011d28 <memp_free>
    if (handler != NULL) {
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d0da      	beq.n	80192cc <sys_check_timeouts+0xc>
      handler(arg);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	6838      	ldr	r0, [r7, #0]
 801931a:	4798      	blx	r3
  do {
 801931c:	e7d6      	b.n	80192cc <sys_check_timeouts+0xc>
      return;
 801931e:	bf00      	nop
 8019320:	e000      	b.n	8019324 <sys_check_timeouts+0x64>
      return;
 8019322:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019324:	3710      	adds	r7, #16
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
 801932a:	bf00      	nop
 801932c:	20013434 	.word	0x20013434
 8019330:	20013438 	.word	0x20013438

08019334 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b082      	sub	sp, #8
 8019338:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801933a:	4b16      	ldr	r3, [pc, #88]	; (8019394 <sys_timeouts_sleeptime+0x60>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d102      	bne.n	8019348 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019342:	f04f 33ff 	mov.w	r3, #4294967295
 8019346:	e020      	b.n	801938a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019348:	f7f2 fa28 	bl	800b79c <sys_now>
 801934c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801934e:	4b11      	ldr	r3, [pc, #68]	; (8019394 <sys_timeouts_sleeptime+0x60>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	685a      	ldr	r2, [r3, #4]
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	1ad3      	subs	r3, r2, r3
 8019358:	0fdb      	lsrs	r3, r3, #31
 801935a:	f003 0301 	and.w	r3, r3, #1
 801935e:	b2db      	uxtb	r3, r3
 8019360:	2b00      	cmp	r3, #0
 8019362:	d001      	beq.n	8019368 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019364:	2300      	movs	r3, #0
 8019366:	e010      	b.n	801938a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019368:	4b0a      	ldr	r3, [pc, #40]	; (8019394 <sys_timeouts_sleeptime+0x60>)
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	685a      	ldr	r2, [r3, #4]
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	2b00      	cmp	r3, #0
 8019378:	da06      	bge.n	8019388 <sys_timeouts_sleeptime+0x54>
 801937a:	4b07      	ldr	r3, [pc, #28]	; (8019398 <sys_timeouts_sleeptime+0x64>)
 801937c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019380:	4906      	ldr	r1, [pc, #24]	; (801939c <sys_timeouts_sleeptime+0x68>)
 8019382:	4807      	ldr	r0, [pc, #28]	; (80193a0 <sys_timeouts_sleeptime+0x6c>)
 8019384:	f003 fea2 	bl	801d0cc <iprintf>
    return ret;
 8019388:	683b      	ldr	r3, [r7, #0]
  }
}
 801938a:	4618      	mov	r0, r3
 801938c:	3708      	adds	r7, #8
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}
 8019392:	bf00      	nop
 8019394:	20013434 	.word	0x20013434
 8019398:	0802203c 	.word	0x0802203c
 801939c:	08022110 	.word	0x08022110
 80193a0:	080220b0 	.word	0x080220b0

080193a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80193a4:	b580      	push	{r7, lr}
 80193a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80193a8:	f003 f89c 	bl	801c4e4 <rand>
 80193ac:	4603      	mov	r3, r0
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80193b4:	b29b      	uxth	r3, r3
 80193b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80193ba:	b29a      	uxth	r2, r3
 80193bc:	4b01      	ldr	r3, [pc, #4]	; (80193c4 <udp_init+0x20>)
 80193be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80193c0:	bf00      	nop
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	2000002c 	.word	0x2000002c

080193c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80193c8:	b480      	push	{r7}
 80193ca:	b083      	sub	sp, #12
 80193cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80193ce:	2300      	movs	r3, #0
 80193d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80193d2:	4b17      	ldr	r3, [pc, #92]	; (8019430 <udp_new_port+0x68>)
 80193d4:	881b      	ldrh	r3, [r3, #0]
 80193d6:	1c5a      	adds	r2, r3, #1
 80193d8:	b291      	uxth	r1, r2
 80193da:	4a15      	ldr	r2, [pc, #84]	; (8019430 <udp_new_port+0x68>)
 80193dc:	8011      	strh	r1, [r2, #0]
 80193de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193e2:	4293      	cmp	r3, r2
 80193e4:	d103      	bne.n	80193ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80193e6:	4b12      	ldr	r3, [pc, #72]	; (8019430 <udp_new_port+0x68>)
 80193e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80193ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80193ee:	4b11      	ldr	r3, [pc, #68]	; (8019434 <udp_new_port+0x6c>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	603b      	str	r3, [r7, #0]
 80193f4:	e011      	b.n	801941a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	8a5a      	ldrh	r2, [r3, #18]
 80193fa:	4b0d      	ldr	r3, [pc, #52]	; (8019430 <udp_new_port+0x68>)
 80193fc:	881b      	ldrh	r3, [r3, #0]
 80193fe:	429a      	cmp	r2, r3
 8019400:	d108      	bne.n	8019414 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019402:	88fb      	ldrh	r3, [r7, #6]
 8019404:	3301      	adds	r3, #1
 8019406:	80fb      	strh	r3, [r7, #6]
 8019408:	88fb      	ldrh	r3, [r7, #6]
 801940a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801940e:	d3e0      	bcc.n	80193d2 <udp_new_port+0xa>
        return 0;
 8019410:	2300      	movs	r3, #0
 8019412:	e007      	b.n	8019424 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	68db      	ldr	r3, [r3, #12]
 8019418:	603b      	str	r3, [r7, #0]
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d1ea      	bne.n	80193f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019420:	4b03      	ldr	r3, [pc, #12]	; (8019430 <udp_new_port+0x68>)
 8019422:	881b      	ldrh	r3, [r3, #0]
}
 8019424:	4618      	mov	r0, r3
 8019426:	370c      	adds	r7, #12
 8019428:	46bd      	mov	sp, r7
 801942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942e:	4770      	bx	lr
 8019430:	2000002c 	.word	0x2000002c
 8019434:	20013440 	.word	0x20013440

08019438 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b084      	sub	sp, #16
 801943c:	af00      	add	r7, sp, #0
 801943e:	60f8      	str	r0, [r7, #12]
 8019440:	60b9      	str	r1, [r7, #8]
 8019442:	4613      	mov	r3, r2
 8019444:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d105      	bne.n	8019458 <udp_input_local_match+0x20>
 801944c:	4b27      	ldr	r3, [pc, #156]	; (80194ec <udp_input_local_match+0xb4>)
 801944e:	2287      	movs	r2, #135	; 0x87
 8019450:	4927      	ldr	r1, [pc, #156]	; (80194f0 <udp_input_local_match+0xb8>)
 8019452:	4828      	ldr	r0, [pc, #160]	; (80194f4 <udp_input_local_match+0xbc>)
 8019454:	f003 fe3a 	bl	801d0cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019458:	68bb      	ldr	r3, [r7, #8]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d105      	bne.n	801946a <udp_input_local_match+0x32>
 801945e:	4b23      	ldr	r3, [pc, #140]	; (80194ec <udp_input_local_match+0xb4>)
 8019460:	2288      	movs	r2, #136	; 0x88
 8019462:	4925      	ldr	r1, [pc, #148]	; (80194f8 <udp_input_local_match+0xc0>)
 8019464:	4823      	ldr	r0, [pc, #140]	; (80194f4 <udp_input_local_match+0xbc>)
 8019466:	f003 fe31 	bl	801d0cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	7a1b      	ldrb	r3, [r3, #8]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d00b      	beq.n	801948a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	7a1a      	ldrb	r2, [r3, #8]
 8019476:	4b21      	ldr	r3, [pc, #132]	; (80194fc <udp_input_local_match+0xc4>)
 8019478:	685b      	ldr	r3, [r3, #4]
 801947a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801947e:	3301      	adds	r3, #1
 8019480:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019482:	429a      	cmp	r2, r3
 8019484:	d001      	beq.n	801948a <udp_input_local_match+0x52>
    return 0;
 8019486:	2300      	movs	r3, #0
 8019488:	e02b      	b.n	80194e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801948a:	79fb      	ldrb	r3, [r7, #7]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d018      	beq.n	80194c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d013      	beq.n	80194be <udp_input_local_match+0x86>
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d00f      	beq.n	80194be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801949e:	4b17      	ldr	r3, [pc, #92]	; (80194fc <udp_input_local_match+0xc4>)
 80194a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80194a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194a6:	d00a      	beq.n	80194be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	681a      	ldr	r2, [r3, #0]
 80194ac:	4b13      	ldr	r3, [pc, #76]	; (80194fc <udp_input_local_match+0xc4>)
 80194ae:	695b      	ldr	r3, [r3, #20]
 80194b0:	405a      	eors	r2, r3
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	3308      	adds	r3, #8
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d110      	bne.n	80194e0 <udp_input_local_match+0xa8>
          return 1;
 80194be:	2301      	movs	r3, #1
 80194c0:	e00f      	b.n	80194e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d009      	beq.n	80194dc <udp_input_local_match+0xa4>
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d005      	beq.n	80194dc <udp_input_local_match+0xa4>
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	681a      	ldr	r2, [r3, #0]
 80194d4:	4b09      	ldr	r3, [pc, #36]	; (80194fc <udp_input_local_match+0xc4>)
 80194d6:	695b      	ldr	r3, [r3, #20]
 80194d8:	429a      	cmp	r2, r3
 80194da:	d101      	bne.n	80194e0 <udp_input_local_match+0xa8>
        return 1;
 80194dc:	2301      	movs	r3, #1
 80194de:	e000      	b.n	80194e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80194e0:	2300      	movs	r3, #0
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	3710      	adds	r7, #16
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}
 80194ea:	bf00      	nop
 80194ec:	08022124 	.word	0x08022124
 80194f0:	08022154 	.word	0x08022154
 80194f4:	08022178 	.word	0x08022178
 80194f8:	080221a0 	.word	0x080221a0
 80194fc:	2000dad0 	.word	0x2000dad0

08019500 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019500:	b590      	push	{r4, r7, lr}
 8019502:	b08d      	sub	sp, #52	; 0x34
 8019504:	af02      	add	r7, sp, #8
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801950a:	2300      	movs	r3, #0
 801950c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d105      	bne.n	8019520 <udp_input+0x20>
 8019514:	4b7c      	ldr	r3, [pc, #496]	; (8019708 <udp_input+0x208>)
 8019516:	22cf      	movs	r2, #207	; 0xcf
 8019518:	497c      	ldr	r1, [pc, #496]	; (801970c <udp_input+0x20c>)
 801951a:	487d      	ldr	r0, [pc, #500]	; (8019710 <udp_input+0x210>)
 801951c:	f003 fdd6 	bl	801d0cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d105      	bne.n	8019532 <udp_input+0x32>
 8019526:	4b78      	ldr	r3, [pc, #480]	; (8019708 <udp_input+0x208>)
 8019528:	22d0      	movs	r2, #208	; 0xd0
 801952a:	497a      	ldr	r1, [pc, #488]	; (8019714 <udp_input+0x214>)
 801952c:	4878      	ldr	r0, [pc, #480]	; (8019710 <udp_input+0x210>)
 801952e:	f003 fdcd 	bl	801d0cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	895b      	ldrh	r3, [r3, #10]
 8019536:	2b07      	cmp	r3, #7
 8019538:	d803      	bhi.n	8019542 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801953a:	6878      	ldr	r0, [r7, #4]
 801953c:	f7f9 fa98 	bl	8012a70 <pbuf_free>
    goto end;
 8019540:	e0de      	b.n	8019700 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	685b      	ldr	r3, [r3, #4]
 8019546:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019548:	4b73      	ldr	r3, [pc, #460]	; (8019718 <udp_input+0x218>)
 801954a:	695b      	ldr	r3, [r3, #20]
 801954c:	4a72      	ldr	r2, [pc, #456]	; (8019718 <udp_input+0x218>)
 801954e:	6812      	ldr	r2, [r2, #0]
 8019550:	4611      	mov	r1, r2
 8019552:	4618      	mov	r0, r3
 8019554:	f001 fd96 	bl	801b084 <ip4_addr_isbroadcast_u32>
 8019558:	4603      	mov	r3, r0
 801955a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	b29b      	uxth	r3, r3
 8019562:	4618      	mov	r0, r3
 8019564:	f7f7 fe92 	bl	801128c <lwip_htons>
 8019568:	4603      	mov	r3, r0
 801956a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801956c:	697b      	ldr	r3, [r7, #20]
 801956e:	885b      	ldrh	r3, [r3, #2]
 8019570:	b29b      	uxth	r3, r3
 8019572:	4618      	mov	r0, r3
 8019574:	f7f7 fe8a 	bl	801128c <lwip_htons>
 8019578:	4603      	mov	r3, r0
 801957a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801957c:	2300      	movs	r3, #0
 801957e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019580:	2300      	movs	r3, #0
 8019582:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019584:	2300      	movs	r3, #0
 8019586:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019588:	4b64      	ldr	r3, [pc, #400]	; (801971c <udp_input+0x21c>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	627b      	str	r3, [r7, #36]	; 0x24
 801958e:	e054      	b.n	801963a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019592:	8a5b      	ldrh	r3, [r3, #18]
 8019594:	89fa      	ldrh	r2, [r7, #14]
 8019596:	429a      	cmp	r2, r3
 8019598:	d14a      	bne.n	8019630 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801959a:	7cfb      	ldrb	r3, [r7, #19]
 801959c:	461a      	mov	r2, r3
 801959e:	6839      	ldr	r1, [r7, #0]
 80195a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80195a2:	f7ff ff49 	bl	8019438 <udp_input_local_match>
 80195a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d041      	beq.n	8019630 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80195ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ae:	7c1b      	ldrb	r3, [r3, #16]
 80195b0:	f003 0304 	and.w	r3, r3, #4
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d11d      	bne.n	80195f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80195b8:	69fb      	ldr	r3, [r7, #28]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d102      	bne.n	80195c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80195be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c0:	61fb      	str	r3, [r7, #28]
 80195c2:	e017      	b.n	80195f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80195c4:	7cfb      	ldrb	r3, [r7, #19]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d014      	beq.n	80195f4 <udp_input+0xf4>
 80195ca:	4b53      	ldr	r3, [pc, #332]	; (8019718 <udp_input+0x218>)
 80195cc:	695b      	ldr	r3, [r3, #20]
 80195ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195d2:	d10f      	bne.n	80195f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80195d4:	69fb      	ldr	r3, [r7, #28]
 80195d6:	681a      	ldr	r2, [r3, #0]
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	3304      	adds	r3, #4
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	429a      	cmp	r2, r3
 80195e0:	d008      	beq.n	80195f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80195e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e4:	681a      	ldr	r2, [r3, #0]
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	3304      	adds	r3, #4
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d101      	bne.n	80195f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80195f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80195f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f6:	8a9b      	ldrh	r3, [r3, #20]
 80195f8:	8a3a      	ldrh	r2, [r7, #16]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d118      	bne.n	8019630 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80195fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019600:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019602:	2b00      	cmp	r3, #0
 8019604:	d005      	beq.n	8019612 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019608:	685a      	ldr	r2, [r3, #4]
 801960a:	4b43      	ldr	r3, [pc, #268]	; (8019718 <udp_input+0x218>)
 801960c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801960e:	429a      	cmp	r2, r3
 8019610:	d10e      	bne.n	8019630 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019612:	6a3b      	ldr	r3, [r7, #32]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d014      	beq.n	8019642 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801961a:	68da      	ldr	r2, [r3, #12]
 801961c:	6a3b      	ldr	r3, [r7, #32]
 801961e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019620:	4b3e      	ldr	r3, [pc, #248]	; (801971c <udp_input+0x21c>)
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019626:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019628:	4a3c      	ldr	r2, [pc, #240]	; (801971c <udp_input+0x21c>)
 801962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801962c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801962e:	e008      	b.n	8019642 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019632:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019636:	68db      	ldr	r3, [r3, #12]
 8019638:	627b      	str	r3, [r7, #36]	; 0x24
 801963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963c:	2b00      	cmp	r3, #0
 801963e:	d1a7      	bne.n	8019590 <udp_input+0x90>
 8019640:	e000      	b.n	8019644 <udp_input+0x144>
        break;
 8019642:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019646:	2b00      	cmp	r3, #0
 8019648:	d101      	bne.n	801964e <udp_input+0x14e>
    pcb = uncon_pcb;
 801964a:	69fb      	ldr	r3, [r7, #28]
 801964c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019650:	2b00      	cmp	r3, #0
 8019652:	d002      	beq.n	801965a <udp_input+0x15a>
    for_us = 1;
 8019654:	2301      	movs	r3, #1
 8019656:	76fb      	strb	r3, [r7, #27]
 8019658:	e00a      	b.n	8019670 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801965a:	683b      	ldr	r3, [r7, #0]
 801965c:	3304      	adds	r3, #4
 801965e:	681a      	ldr	r2, [r3, #0]
 8019660:	4b2d      	ldr	r3, [pc, #180]	; (8019718 <udp_input+0x218>)
 8019662:	695b      	ldr	r3, [r3, #20]
 8019664:	429a      	cmp	r2, r3
 8019666:	bf0c      	ite	eq
 8019668:	2301      	moveq	r3, #1
 801966a:	2300      	movne	r3, #0
 801966c:	b2db      	uxtb	r3, r3
 801966e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019670:	7efb      	ldrb	r3, [r7, #27]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d041      	beq.n	80196fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019676:	2108      	movs	r1, #8
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f7f9 f973 	bl	8012964 <pbuf_remove_header>
 801967e:	4603      	mov	r3, r0
 8019680:	2b00      	cmp	r3, #0
 8019682:	d00a      	beq.n	801969a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019684:	4b20      	ldr	r3, [pc, #128]	; (8019708 <udp_input+0x208>)
 8019686:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801968a:	4925      	ldr	r1, [pc, #148]	; (8019720 <udp_input+0x220>)
 801968c:	4820      	ldr	r0, [pc, #128]	; (8019710 <udp_input+0x210>)
 801968e:	f003 fd1d 	bl	801d0cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019692:	6878      	ldr	r0, [r7, #4]
 8019694:	f7f9 f9ec 	bl	8012a70 <pbuf_free>
      goto end;
 8019698:	e032      	b.n	8019700 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801969c:	2b00      	cmp	r3, #0
 801969e:	d012      	beq.n	80196c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80196a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196a2:	699b      	ldr	r3, [r3, #24]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d00a      	beq.n	80196be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80196a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196aa:	699c      	ldr	r4, [r3, #24]
 80196ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ae:	69d8      	ldr	r0, [r3, #28]
 80196b0:	8a3b      	ldrh	r3, [r7, #16]
 80196b2:	9300      	str	r3, [sp, #0]
 80196b4:	4b1b      	ldr	r3, [pc, #108]	; (8019724 <udp_input+0x224>)
 80196b6:	687a      	ldr	r2, [r7, #4]
 80196b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80196ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80196bc:	e021      	b.n	8019702 <udp_input+0x202>
        pbuf_free(p);
 80196be:	6878      	ldr	r0, [r7, #4]
 80196c0:	f7f9 f9d6 	bl	8012a70 <pbuf_free>
        goto end;
 80196c4:	e01c      	b.n	8019700 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80196c6:	7cfb      	ldrb	r3, [r7, #19]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d112      	bne.n	80196f2 <udp_input+0x1f2>
 80196cc:	4b12      	ldr	r3, [pc, #72]	; (8019718 <udp_input+0x218>)
 80196ce:	695b      	ldr	r3, [r3, #20]
 80196d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80196d4:	2be0      	cmp	r3, #224	; 0xe0
 80196d6:	d00c      	beq.n	80196f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80196d8:	4b0f      	ldr	r3, [pc, #60]	; (8019718 <udp_input+0x218>)
 80196da:	899b      	ldrh	r3, [r3, #12]
 80196dc:	3308      	adds	r3, #8
 80196de:	b29b      	uxth	r3, r3
 80196e0:	b21b      	sxth	r3, r3
 80196e2:	4619      	mov	r1, r3
 80196e4:	6878      	ldr	r0, [r7, #4]
 80196e6:	f7f9 f9b0 	bl	8012a4a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80196ea:	2103      	movs	r1, #3
 80196ec:	6878      	ldr	r0, [r7, #4]
 80196ee:	f001 f9a9 	bl	801aa44 <icmp_dest_unreach>
      pbuf_free(p);
 80196f2:	6878      	ldr	r0, [r7, #4]
 80196f4:	f7f9 f9bc 	bl	8012a70 <pbuf_free>
  return;
 80196f8:	e003      	b.n	8019702 <udp_input+0x202>
    pbuf_free(p);
 80196fa:	6878      	ldr	r0, [r7, #4]
 80196fc:	f7f9 f9b8 	bl	8012a70 <pbuf_free>
  return;
 8019700:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019702:	372c      	adds	r7, #44	; 0x2c
 8019704:	46bd      	mov	sp, r7
 8019706:	bd90      	pop	{r4, r7, pc}
 8019708:	08022124 	.word	0x08022124
 801970c:	080221c8 	.word	0x080221c8
 8019710:	08022178 	.word	0x08022178
 8019714:	080221e0 	.word	0x080221e0
 8019718:	2000dad0 	.word	0x2000dad0
 801971c:	20013440 	.word	0x20013440
 8019720:	080221fc 	.word	0x080221fc
 8019724:	2000dae0 	.word	0x2000dae0

08019728 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b086      	sub	sp, #24
 801972c:	af00      	add	r7, sp, #0
 801972e:	60f8      	str	r0, [r7, #12]
 8019730:	60b9      	str	r1, [r7, #8]
 8019732:	4613      	mov	r3, r2
 8019734:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019736:	68bb      	ldr	r3, [r7, #8]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d101      	bne.n	8019740 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801973c:	4b39      	ldr	r3, [pc, #228]	; (8019824 <udp_bind+0xfc>)
 801973e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d109      	bne.n	801975a <udp_bind+0x32>
 8019746:	4b38      	ldr	r3, [pc, #224]	; (8019828 <udp_bind+0x100>)
 8019748:	f240 32b7 	movw	r2, #951	; 0x3b7
 801974c:	4937      	ldr	r1, [pc, #220]	; (801982c <udp_bind+0x104>)
 801974e:	4838      	ldr	r0, [pc, #224]	; (8019830 <udp_bind+0x108>)
 8019750:	f003 fcbc 	bl	801d0cc <iprintf>
 8019754:	f06f 030f 	mvn.w	r3, #15
 8019758:	e060      	b.n	801981c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801975a:	2300      	movs	r3, #0
 801975c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801975e:	4b35      	ldr	r3, [pc, #212]	; (8019834 <udp_bind+0x10c>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	617b      	str	r3, [r7, #20]
 8019764:	e009      	b.n	801977a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019766:	68fa      	ldr	r2, [r7, #12]
 8019768:	697b      	ldr	r3, [r7, #20]
 801976a:	429a      	cmp	r2, r3
 801976c:	d102      	bne.n	8019774 <udp_bind+0x4c>
      rebind = 1;
 801976e:	2301      	movs	r3, #1
 8019770:	74fb      	strb	r3, [r7, #19]
      break;
 8019772:	e005      	b.n	8019780 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	68db      	ldr	r3, [r3, #12]
 8019778:	617b      	str	r3, [r7, #20]
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d1f2      	bne.n	8019766 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019780:	88fb      	ldrh	r3, [r7, #6]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d109      	bne.n	801979a <udp_bind+0x72>
    port = udp_new_port();
 8019786:	f7ff fe1f 	bl	80193c8 <udp_new_port>
 801978a:	4603      	mov	r3, r0
 801978c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801978e:	88fb      	ldrh	r3, [r7, #6]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d12c      	bne.n	80197ee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019794:	f06f 0307 	mvn.w	r3, #7
 8019798:	e040      	b.n	801981c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801979a:	4b26      	ldr	r3, [pc, #152]	; (8019834 <udp_bind+0x10c>)
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	617b      	str	r3, [r7, #20]
 80197a0:	e022      	b.n	80197e8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80197a2:	68fa      	ldr	r2, [r7, #12]
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	429a      	cmp	r2, r3
 80197a8:	d01b      	beq.n	80197e2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80197aa:	697b      	ldr	r3, [r7, #20]
 80197ac:	8a5b      	ldrh	r3, [r3, #18]
 80197ae:	88fa      	ldrh	r2, [r7, #6]
 80197b0:	429a      	cmp	r2, r3
 80197b2:	d116      	bne.n	80197e2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	681a      	ldr	r2, [r3, #0]
 80197b8:	68bb      	ldr	r3, [r7, #8]
 80197ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80197bc:	429a      	cmp	r2, r3
 80197be:	d00d      	beq.n	80197dc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80197c0:	68bb      	ldr	r3, [r7, #8]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d00a      	beq.n	80197dc <udp_bind+0xb4>
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d006      	beq.n	80197dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80197ce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d003      	beq.n	80197dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d102      	bne.n	80197e2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80197dc:	f06f 0307 	mvn.w	r3, #7
 80197e0:	e01c      	b.n	801981c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80197e2:	697b      	ldr	r3, [r7, #20]
 80197e4:	68db      	ldr	r3, [r3, #12]
 80197e6:	617b      	str	r3, [r7, #20]
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d1d9      	bne.n	80197a2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d002      	beq.n	80197fa <udp_bind+0xd2>
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	e000      	b.n	80197fc <udp_bind+0xd4>
 80197fa:	2300      	movs	r3, #0
 80197fc:	68fa      	ldr	r2, [r7, #12]
 80197fe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	88fa      	ldrh	r2, [r7, #6]
 8019804:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019806:	7cfb      	ldrb	r3, [r7, #19]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d106      	bne.n	801981a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801980c:	4b09      	ldr	r3, [pc, #36]	; (8019834 <udp_bind+0x10c>)
 801980e:	681a      	ldr	r2, [r3, #0]
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019814:	4a07      	ldr	r2, [pc, #28]	; (8019834 <udp_bind+0x10c>)
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801981a:	2300      	movs	r3, #0
}
 801981c:	4618      	mov	r0, r3
 801981e:	3718      	adds	r7, #24
 8019820:	46bd      	mov	sp, r7
 8019822:	bd80      	pop	{r7, pc}
 8019824:	080245c0 	.word	0x080245c0
 8019828:	08022124 	.word	0x08022124
 801982c:	080223ec 	.word	0x080223ec
 8019830:	08022178 	.word	0x08022178
 8019834:	20013440 	.word	0x20013440

08019838 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b084      	sub	sp, #16
 801983c:	af00      	add	r7, sp, #0
 801983e:	60f8      	str	r0, [r7, #12]
 8019840:	60b9      	str	r1, [r7, #8]
 8019842:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d107      	bne.n	801985a <udp_recv+0x22>
 801984a:	4b08      	ldr	r3, [pc, #32]	; (801986c <udp_recv+0x34>)
 801984c:	f240 428a 	movw	r2, #1162	; 0x48a
 8019850:	4907      	ldr	r1, [pc, #28]	; (8019870 <udp_recv+0x38>)
 8019852:	4808      	ldr	r0, [pc, #32]	; (8019874 <udp_recv+0x3c>)
 8019854:	f003 fc3a 	bl	801d0cc <iprintf>
 8019858:	e005      	b.n	8019866 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	68ba      	ldr	r2, [r7, #8]
 801985e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	61da      	str	r2, [r3, #28]
}
 8019866:	3710      	adds	r7, #16
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}
 801986c:	08022124 	.word	0x08022124
 8019870:	08022458 	.word	0x08022458
 8019874:	08022178 	.word	0x08022178

08019878 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b084      	sub	sp, #16
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d107      	bne.n	8019896 <udp_remove+0x1e>
 8019886:	4b19      	ldr	r3, [pc, #100]	; (80198ec <udp_remove+0x74>)
 8019888:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801988c:	4918      	ldr	r1, [pc, #96]	; (80198f0 <udp_remove+0x78>)
 801988e:	4819      	ldr	r0, [pc, #100]	; (80198f4 <udp_remove+0x7c>)
 8019890:	f003 fc1c 	bl	801d0cc <iprintf>
 8019894:	e026      	b.n	80198e4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019896:	4b18      	ldr	r3, [pc, #96]	; (80198f8 <udp_remove+0x80>)
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	687a      	ldr	r2, [r7, #4]
 801989c:	429a      	cmp	r2, r3
 801989e:	d105      	bne.n	80198ac <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80198a0:	4b15      	ldr	r3, [pc, #84]	; (80198f8 <udp_remove+0x80>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	68db      	ldr	r3, [r3, #12]
 80198a6:	4a14      	ldr	r2, [pc, #80]	; (80198f8 <udp_remove+0x80>)
 80198a8:	6013      	str	r3, [r2, #0]
 80198aa:	e017      	b.n	80198dc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80198ac:	4b12      	ldr	r3, [pc, #72]	; (80198f8 <udp_remove+0x80>)
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	60fb      	str	r3, [r7, #12]
 80198b2:	e010      	b.n	80198d6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	68db      	ldr	r3, [r3, #12]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d009      	beq.n	80198d0 <udp_remove+0x58>
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	68db      	ldr	r3, [r3, #12]
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	429a      	cmp	r2, r3
 80198c4:	d104      	bne.n	80198d0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	68da      	ldr	r2, [r3, #12]
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	60da      	str	r2, [r3, #12]
        break;
 80198ce:	e005      	b.n	80198dc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	68db      	ldr	r3, [r3, #12]
 80198d4:	60fb      	str	r3, [r7, #12]
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d1eb      	bne.n	80198b4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80198dc:	6879      	ldr	r1, [r7, #4]
 80198de:	2000      	movs	r0, #0
 80198e0:	f7f8 fa22 	bl	8011d28 <memp_free>
}
 80198e4:	3710      	adds	r7, #16
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	bf00      	nop
 80198ec:	08022124 	.word	0x08022124
 80198f0:	08022470 	.word	0x08022470
 80198f4:	08022178 	.word	0x08022178
 80198f8:	20013440 	.word	0x20013440

080198fc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b082      	sub	sp, #8
 8019900:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019902:	2000      	movs	r0, #0
 8019904:	f7f8 f99a 	bl	8011c3c <memp_malloc>
 8019908:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d007      	beq.n	8019920 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019910:	2220      	movs	r2, #32
 8019912:	2100      	movs	r1, #0
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f003 fd69 	bl	801d3ec <memset>
    pcb->ttl = UDP_TTL;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	22ff      	movs	r2, #255	; 0xff
 801991e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019920:	687b      	ldr	r3, [r7, #4]
}
 8019922:	4618      	mov	r0, r3
 8019924:	3708      	adds	r7, #8
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}

0801992a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801992a:	b580      	push	{r7, lr}
 801992c:	b084      	sub	sp, #16
 801992e:	af00      	add	r7, sp, #0
 8019930:	4603      	mov	r3, r0
 8019932:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019934:	f7ff ffe2 	bl	80198fc <udp_new>
 8019938:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801993a:	68fb      	ldr	r3, [r7, #12]
}
 801993c:	4618      	mov	r0, r3
 801993e:	3710      	adds	r7, #16
 8019940:	46bd      	mov	sp, r7
 8019942:	bd80      	pop	{r7, pc}

08019944 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019944:	b480      	push	{r7}
 8019946:	b085      	sub	sp, #20
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d01e      	beq.n	8019992 <udp_netif_ip_addr_changed+0x4e>
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d01a      	beq.n	8019992 <udp_netif_ip_addr_changed+0x4e>
 801995c:	683b      	ldr	r3, [r7, #0]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d017      	beq.n	8019992 <udp_netif_ip_addr_changed+0x4e>
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d013      	beq.n	8019992 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801996a:	4b0d      	ldr	r3, [pc, #52]	; (80199a0 <udp_netif_ip_addr_changed+0x5c>)
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	60fb      	str	r3, [r7, #12]
 8019970:	e00c      	b.n	801998c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	681a      	ldr	r2, [r3, #0]
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	429a      	cmp	r2, r3
 801997c:	d103      	bne.n	8019986 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801997e:	683b      	ldr	r3, [r7, #0]
 8019980:	681a      	ldr	r2, [r3, #0]
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	68db      	ldr	r3, [r3, #12]
 801998a:	60fb      	str	r3, [r7, #12]
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d1ef      	bne.n	8019972 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019992:	bf00      	nop
 8019994:	3714      	adds	r7, #20
 8019996:	46bd      	mov	sp, r7
 8019998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999c:	4770      	bx	lr
 801999e:	bf00      	nop
 80199a0:	20013440 	.word	0x20013440

080199a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80199ac:	4915      	ldr	r1, [pc, #84]	; (8019a04 <etharp_free_entry+0x60>)
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	4613      	mov	r3, r2
 80199b2:	005b      	lsls	r3, r3, #1
 80199b4:	4413      	add	r3, r2
 80199b6:	00db      	lsls	r3, r3, #3
 80199b8:	440b      	add	r3, r1
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d013      	beq.n	80199e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80199c0:	4910      	ldr	r1, [pc, #64]	; (8019a04 <etharp_free_entry+0x60>)
 80199c2:	687a      	ldr	r2, [r7, #4]
 80199c4:	4613      	mov	r3, r2
 80199c6:	005b      	lsls	r3, r3, #1
 80199c8:	4413      	add	r3, r2
 80199ca:	00db      	lsls	r3, r3, #3
 80199cc:	440b      	add	r3, r1
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7f9 f84d 	bl	8012a70 <pbuf_free>
    arp_table[i].q = NULL;
 80199d6:	490b      	ldr	r1, [pc, #44]	; (8019a04 <etharp_free_entry+0x60>)
 80199d8:	687a      	ldr	r2, [r7, #4]
 80199da:	4613      	mov	r3, r2
 80199dc:	005b      	lsls	r3, r3, #1
 80199de:	4413      	add	r3, r2
 80199e0:	00db      	lsls	r3, r3, #3
 80199e2:	440b      	add	r3, r1
 80199e4:	2200      	movs	r2, #0
 80199e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80199e8:	4906      	ldr	r1, [pc, #24]	; (8019a04 <etharp_free_entry+0x60>)
 80199ea:	687a      	ldr	r2, [r7, #4]
 80199ec:	4613      	mov	r3, r2
 80199ee:	005b      	lsls	r3, r3, #1
 80199f0:	4413      	add	r3, r2
 80199f2:	00db      	lsls	r3, r3, #3
 80199f4:	440b      	add	r3, r1
 80199f6:	3314      	adds	r3, #20
 80199f8:	2200      	movs	r2, #0
 80199fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80199fc:	bf00      	nop
 80199fe:	3708      	adds	r7, #8
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bd80      	pop	{r7, pc}
 8019a04:	20013444 	.word	0x20013444

08019a08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b082      	sub	sp, #8
 8019a0c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019a0e:	2300      	movs	r3, #0
 8019a10:	607b      	str	r3, [r7, #4]
 8019a12:	e096      	b.n	8019b42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019a14:	494f      	ldr	r1, [pc, #316]	; (8019b54 <etharp_tmr+0x14c>)
 8019a16:	687a      	ldr	r2, [r7, #4]
 8019a18:	4613      	mov	r3, r2
 8019a1a:	005b      	lsls	r3, r3, #1
 8019a1c:	4413      	add	r3, r2
 8019a1e:	00db      	lsls	r3, r3, #3
 8019a20:	440b      	add	r3, r1
 8019a22:	3314      	adds	r3, #20
 8019a24:	781b      	ldrb	r3, [r3, #0]
 8019a26:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019a28:	78fb      	ldrb	r3, [r7, #3]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	f000 8086 	beq.w	8019b3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019a30:	4948      	ldr	r1, [pc, #288]	; (8019b54 <etharp_tmr+0x14c>)
 8019a32:	687a      	ldr	r2, [r7, #4]
 8019a34:	4613      	mov	r3, r2
 8019a36:	005b      	lsls	r3, r3, #1
 8019a38:	4413      	add	r3, r2
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	440b      	add	r3, r1
 8019a3e:	3312      	adds	r3, #18
 8019a40:	881b      	ldrh	r3, [r3, #0]
 8019a42:	3301      	adds	r3, #1
 8019a44:	b298      	uxth	r0, r3
 8019a46:	4943      	ldr	r1, [pc, #268]	; (8019b54 <etharp_tmr+0x14c>)
 8019a48:	687a      	ldr	r2, [r7, #4]
 8019a4a:	4613      	mov	r3, r2
 8019a4c:	005b      	lsls	r3, r3, #1
 8019a4e:	4413      	add	r3, r2
 8019a50:	00db      	lsls	r3, r3, #3
 8019a52:	440b      	add	r3, r1
 8019a54:	3312      	adds	r3, #18
 8019a56:	4602      	mov	r2, r0
 8019a58:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019a5a:	493e      	ldr	r1, [pc, #248]	; (8019b54 <etharp_tmr+0x14c>)
 8019a5c:	687a      	ldr	r2, [r7, #4]
 8019a5e:	4613      	mov	r3, r2
 8019a60:	005b      	lsls	r3, r3, #1
 8019a62:	4413      	add	r3, r2
 8019a64:	00db      	lsls	r3, r3, #3
 8019a66:	440b      	add	r3, r1
 8019a68:	3312      	adds	r3, #18
 8019a6a:	881b      	ldrh	r3, [r3, #0]
 8019a6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019a70:	d215      	bcs.n	8019a9e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019a72:	4938      	ldr	r1, [pc, #224]	; (8019b54 <etharp_tmr+0x14c>)
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	4613      	mov	r3, r2
 8019a78:	005b      	lsls	r3, r3, #1
 8019a7a:	4413      	add	r3, r2
 8019a7c:	00db      	lsls	r3, r3, #3
 8019a7e:	440b      	add	r3, r1
 8019a80:	3314      	adds	r3, #20
 8019a82:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019a84:	2b01      	cmp	r3, #1
 8019a86:	d10e      	bne.n	8019aa6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019a88:	4932      	ldr	r1, [pc, #200]	; (8019b54 <etharp_tmr+0x14c>)
 8019a8a:	687a      	ldr	r2, [r7, #4]
 8019a8c:	4613      	mov	r3, r2
 8019a8e:	005b      	lsls	r3, r3, #1
 8019a90:	4413      	add	r3, r2
 8019a92:	00db      	lsls	r3, r3, #3
 8019a94:	440b      	add	r3, r1
 8019a96:	3312      	adds	r3, #18
 8019a98:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019a9a:	2b04      	cmp	r3, #4
 8019a9c:	d903      	bls.n	8019aa6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f7ff ff80 	bl	80199a4 <etharp_free_entry>
 8019aa4:	e04a      	b.n	8019b3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019aa6:	492b      	ldr	r1, [pc, #172]	; (8019b54 <etharp_tmr+0x14c>)
 8019aa8:	687a      	ldr	r2, [r7, #4]
 8019aaa:	4613      	mov	r3, r2
 8019aac:	005b      	lsls	r3, r3, #1
 8019aae:	4413      	add	r3, r2
 8019ab0:	00db      	lsls	r3, r3, #3
 8019ab2:	440b      	add	r3, r1
 8019ab4:	3314      	adds	r3, #20
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	2b03      	cmp	r3, #3
 8019aba:	d10a      	bne.n	8019ad2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019abc:	4925      	ldr	r1, [pc, #148]	; (8019b54 <etharp_tmr+0x14c>)
 8019abe:	687a      	ldr	r2, [r7, #4]
 8019ac0:	4613      	mov	r3, r2
 8019ac2:	005b      	lsls	r3, r3, #1
 8019ac4:	4413      	add	r3, r2
 8019ac6:	00db      	lsls	r3, r3, #3
 8019ac8:	440b      	add	r3, r1
 8019aca:	3314      	adds	r3, #20
 8019acc:	2204      	movs	r2, #4
 8019ace:	701a      	strb	r2, [r3, #0]
 8019ad0:	e034      	b.n	8019b3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019ad2:	4920      	ldr	r1, [pc, #128]	; (8019b54 <etharp_tmr+0x14c>)
 8019ad4:	687a      	ldr	r2, [r7, #4]
 8019ad6:	4613      	mov	r3, r2
 8019ad8:	005b      	lsls	r3, r3, #1
 8019ada:	4413      	add	r3, r2
 8019adc:	00db      	lsls	r3, r3, #3
 8019ade:	440b      	add	r3, r1
 8019ae0:	3314      	adds	r3, #20
 8019ae2:	781b      	ldrb	r3, [r3, #0]
 8019ae4:	2b04      	cmp	r3, #4
 8019ae6:	d10a      	bne.n	8019afe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019ae8:	491a      	ldr	r1, [pc, #104]	; (8019b54 <etharp_tmr+0x14c>)
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	4613      	mov	r3, r2
 8019aee:	005b      	lsls	r3, r3, #1
 8019af0:	4413      	add	r3, r2
 8019af2:	00db      	lsls	r3, r3, #3
 8019af4:	440b      	add	r3, r1
 8019af6:	3314      	adds	r3, #20
 8019af8:	2202      	movs	r2, #2
 8019afa:	701a      	strb	r2, [r3, #0]
 8019afc:	e01e      	b.n	8019b3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019afe:	4915      	ldr	r1, [pc, #84]	; (8019b54 <etharp_tmr+0x14c>)
 8019b00:	687a      	ldr	r2, [r7, #4]
 8019b02:	4613      	mov	r3, r2
 8019b04:	005b      	lsls	r3, r3, #1
 8019b06:	4413      	add	r3, r2
 8019b08:	00db      	lsls	r3, r3, #3
 8019b0a:	440b      	add	r3, r1
 8019b0c:	3314      	adds	r3, #20
 8019b0e:	781b      	ldrb	r3, [r3, #0]
 8019b10:	2b01      	cmp	r3, #1
 8019b12:	d113      	bne.n	8019b3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019b14:	490f      	ldr	r1, [pc, #60]	; (8019b54 <etharp_tmr+0x14c>)
 8019b16:	687a      	ldr	r2, [r7, #4]
 8019b18:	4613      	mov	r3, r2
 8019b1a:	005b      	lsls	r3, r3, #1
 8019b1c:	4413      	add	r3, r2
 8019b1e:	00db      	lsls	r3, r3, #3
 8019b20:	440b      	add	r3, r1
 8019b22:	3308      	adds	r3, #8
 8019b24:	6818      	ldr	r0, [r3, #0]
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	4613      	mov	r3, r2
 8019b2a:	005b      	lsls	r3, r3, #1
 8019b2c:	4413      	add	r3, r2
 8019b2e:	00db      	lsls	r3, r3, #3
 8019b30:	4a08      	ldr	r2, [pc, #32]	; (8019b54 <etharp_tmr+0x14c>)
 8019b32:	4413      	add	r3, r2
 8019b34:	3304      	adds	r3, #4
 8019b36:	4619      	mov	r1, r3
 8019b38:	f000 fe6e 	bl	801a818 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	3301      	adds	r3, #1
 8019b40:	607b      	str	r3, [r7, #4]
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	2b09      	cmp	r3, #9
 8019b46:	f77f af65 	ble.w	8019a14 <etharp_tmr+0xc>
      }
    }
  }
}
 8019b4a:	bf00      	nop
 8019b4c:	bf00      	nop
 8019b4e:	3708      	adds	r7, #8
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	20013444 	.word	0x20013444

08019b58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b08a      	sub	sp, #40	; 0x28
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	460b      	mov	r3, r1
 8019b62:	607a      	str	r2, [r7, #4]
 8019b64:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019b66:	230a      	movs	r3, #10
 8019b68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019b6a:	230a      	movs	r3, #10
 8019b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019b6e:	230a      	movs	r3, #10
 8019b70:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019b72:	2300      	movs	r3, #0
 8019b74:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019b76:	230a      	movs	r3, #10
 8019b78:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	83bb      	strh	r3, [r7, #28]
 8019b7e:	2300      	movs	r3, #0
 8019b80:	837b      	strh	r3, [r7, #26]
 8019b82:	2300      	movs	r3, #0
 8019b84:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019b86:	2300      	movs	r3, #0
 8019b88:	843b      	strh	r3, [r7, #32]
 8019b8a:	e0ae      	b.n	8019cea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019b8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b90:	49a6      	ldr	r1, [pc, #664]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019b92:	4613      	mov	r3, r2
 8019b94:	005b      	lsls	r3, r3, #1
 8019b96:	4413      	add	r3, r2
 8019b98:	00db      	lsls	r3, r3, #3
 8019b9a:	440b      	add	r3, r1
 8019b9c:	3314      	adds	r3, #20
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019ba2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019ba6:	2b0a      	cmp	r3, #10
 8019ba8:	d105      	bne.n	8019bb6 <etharp_find_entry+0x5e>
 8019baa:	7dfb      	ldrb	r3, [r7, #23]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d102      	bne.n	8019bb6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019bb0:	8c3b      	ldrh	r3, [r7, #32]
 8019bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8019bb4:	e095      	b.n	8019ce2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019bb6:	7dfb      	ldrb	r3, [r7, #23]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	f000 8092 	beq.w	8019ce2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019bbe:	7dfb      	ldrb	r3, [r7, #23]
 8019bc0:	2b01      	cmp	r3, #1
 8019bc2:	d009      	beq.n	8019bd8 <etharp_find_entry+0x80>
 8019bc4:	7dfb      	ldrb	r3, [r7, #23]
 8019bc6:	2b01      	cmp	r3, #1
 8019bc8:	d806      	bhi.n	8019bd8 <etharp_find_entry+0x80>
 8019bca:	4b99      	ldr	r3, [pc, #612]	; (8019e30 <etharp_find_entry+0x2d8>)
 8019bcc:	f240 1223 	movw	r2, #291	; 0x123
 8019bd0:	4998      	ldr	r1, [pc, #608]	; (8019e34 <etharp_find_entry+0x2dc>)
 8019bd2:	4899      	ldr	r0, [pc, #612]	; (8019e38 <etharp_find_entry+0x2e0>)
 8019bd4:	f003 fa7a 	bl	801d0cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d020      	beq.n	8019c20 <etharp_find_entry+0xc8>
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	6819      	ldr	r1, [r3, #0]
 8019be2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019be6:	4891      	ldr	r0, [pc, #580]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019be8:	4613      	mov	r3, r2
 8019bea:	005b      	lsls	r3, r3, #1
 8019bec:	4413      	add	r3, r2
 8019bee:	00db      	lsls	r3, r3, #3
 8019bf0:	4403      	add	r3, r0
 8019bf2:	3304      	adds	r3, #4
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	4299      	cmp	r1, r3
 8019bf8:	d112      	bne.n	8019c20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d00c      	beq.n	8019c1a <etharp_find_entry+0xc2>
 8019c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c04:	4989      	ldr	r1, [pc, #548]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019c06:	4613      	mov	r3, r2
 8019c08:	005b      	lsls	r3, r3, #1
 8019c0a:	4413      	add	r3, r2
 8019c0c:	00db      	lsls	r3, r3, #3
 8019c0e:	440b      	add	r3, r1
 8019c10:	3308      	adds	r3, #8
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	687a      	ldr	r2, [r7, #4]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d102      	bne.n	8019c20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019c1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c1e:	e100      	b.n	8019e22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019c20:	7dfb      	ldrb	r3, [r7, #23]
 8019c22:	2b01      	cmp	r3, #1
 8019c24:	d140      	bne.n	8019ca8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c2a:	4980      	ldr	r1, [pc, #512]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019c2c:	4613      	mov	r3, r2
 8019c2e:	005b      	lsls	r3, r3, #1
 8019c30:	4413      	add	r3, r2
 8019c32:	00db      	lsls	r3, r3, #3
 8019c34:	440b      	add	r3, r1
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d01a      	beq.n	8019c72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019c3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c40:	497a      	ldr	r1, [pc, #488]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019c42:	4613      	mov	r3, r2
 8019c44:	005b      	lsls	r3, r3, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	00db      	lsls	r3, r3, #3
 8019c4a:	440b      	add	r3, r1
 8019c4c:	3312      	adds	r3, #18
 8019c4e:	881b      	ldrh	r3, [r3, #0]
 8019c50:	8bba      	ldrh	r2, [r7, #28]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	d845      	bhi.n	8019ce2 <etharp_find_entry+0x18a>
            old_queue = i;
 8019c56:	8c3b      	ldrh	r3, [r7, #32]
 8019c58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c5e:	4973      	ldr	r1, [pc, #460]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019c60:	4613      	mov	r3, r2
 8019c62:	005b      	lsls	r3, r3, #1
 8019c64:	4413      	add	r3, r2
 8019c66:	00db      	lsls	r3, r3, #3
 8019c68:	440b      	add	r3, r1
 8019c6a:	3312      	adds	r3, #18
 8019c6c:	881b      	ldrh	r3, [r3, #0]
 8019c6e:	83bb      	strh	r3, [r7, #28]
 8019c70:	e037      	b.n	8019ce2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c76:	496d      	ldr	r1, [pc, #436]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019c78:	4613      	mov	r3, r2
 8019c7a:	005b      	lsls	r3, r3, #1
 8019c7c:	4413      	add	r3, r2
 8019c7e:	00db      	lsls	r3, r3, #3
 8019c80:	440b      	add	r3, r1
 8019c82:	3312      	adds	r3, #18
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	8b7a      	ldrh	r2, [r7, #26]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d82a      	bhi.n	8019ce2 <etharp_find_entry+0x18a>
            old_pending = i;
 8019c8c:	8c3b      	ldrh	r3, [r7, #32]
 8019c8e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c94:	4965      	ldr	r1, [pc, #404]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019c96:	4613      	mov	r3, r2
 8019c98:	005b      	lsls	r3, r3, #1
 8019c9a:	4413      	add	r3, r2
 8019c9c:	00db      	lsls	r3, r3, #3
 8019c9e:	440b      	add	r3, r1
 8019ca0:	3312      	adds	r3, #18
 8019ca2:	881b      	ldrh	r3, [r3, #0]
 8019ca4:	837b      	strh	r3, [r7, #26]
 8019ca6:	e01c      	b.n	8019ce2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019ca8:	7dfb      	ldrb	r3, [r7, #23]
 8019caa:	2b01      	cmp	r3, #1
 8019cac:	d919      	bls.n	8019ce2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cb2:	495e      	ldr	r1, [pc, #376]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019cb4:	4613      	mov	r3, r2
 8019cb6:	005b      	lsls	r3, r3, #1
 8019cb8:	4413      	add	r3, r2
 8019cba:	00db      	lsls	r3, r3, #3
 8019cbc:	440b      	add	r3, r1
 8019cbe:	3312      	adds	r3, #18
 8019cc0:	881b      	ldrh	r3, [r3, #0]
 8019cc2:	8b3a      	ldrh	r2, [r7, #24]
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d80c      	bhi.n	8019ce2 <etharp_find_entry+0x18a>
            old_stable = i;
 8019cc8:	8c3b      	ldrh	r3, [r7, #32]
 8019cca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019ccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cd0:	4956      	ldr	r1, [pc, #344]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	4413      	add	r3, r2
 8019cd8:	00db      	lsls	r3, r3, #3
 8019cda:	440b      	add	r3, r1
 8019cdc:	3312      	adds	r3, #18
 8019cde:	881b      	ldrh	r3, [r3, #0]
 8019ce0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019ce2:	8c3b      	ldrh	r3, [r7, #32]
 8019ce4:	3301      	adds	r3, #1
 8019ce6:	b29b      	uxth	r3, r3
 8019ce8:	843b      	strh	r3, [r7, #32]
 8019cea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019cee:	2b09      	cmp	r3, #9
 8019cf0:	f77f af4c 	ble.w	8019b8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019cf4:	7afb      	ldrb	r3, [r7, #11]
 8019cf6:	f003 0302 	and.w	r3, r3, #2
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d108      	bne.n	8019d10 <etharp_find_entry+0x1b8>
 8019cfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019d02:	2b0a      	cmp	r3, #10
 8019d04:	d107      	bne.n	8019d16 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019d06:	7afb      	ldrb	r3, [r7, #11]
 8019d08:	f003 0301 	and.w	r3, r3, #1
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d102      	bne.n	8019d16 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019d10:	f04f 33ff 	mov.w	r3, #4294967295
 8019d14:	e085      	b.n	8019e22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019d16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019d1a:	2b09      	cmp	r3, #9
 8019d1c:	dc02      	bgt.n	8019d24 <etharp_find_entry+0x1cc>
    i = empty;
 8019d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019d20:	843b      	strh	r3, [r7, #32]
 8019d22:	e039      	b.n	8019d98 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019d24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019d28:	2b09      	cmp	r3, #9
 8019d2a:	dc14      	bgt.n	8019d56 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019d2e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019d30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d34:	493d      	ldr	r1, [pc, #244]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019d36:	4613      	mov	r3, r2
 8019d38:	005b      	lsls	r3, r3, #1
 8019d3a:	4413      	add	r3, r2
 8019d3c:	00db      	lsls	r3, r3, #3
 8019d3e:	440b      	add	r3, r1
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d018      	beq.n	8019d78 <etharp_find_entry+0x220>
 8019d46:	4b3a      	ldr	r3, [pc, #232]	; (8019e30 <etharp_find_entry+0x2d8>)
 8019d48:	f240 126d 	movw	r2, #365	; 0x16d
 8019d4c:	493b      	ldr	r1, [pc, #236]	; (8019e3c <etharp_find_entry+0x2e4>)
 8019d4e:	483a      	ldr	r0, [pc, #232]	; (8019e38 <etharp_find_entry+0x2e0>)
 8019d50:	f003 f9bc 	bl	801d0cc <iprintf>
 8019d54:	e010      	b.n	8019d78 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019d56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019d5a:	2b09      	cmp	r3, #9
 8019d5c:	dc02      	bgt.n	8019d64 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019d60:	843b      	strh	r3, [r7, #32]
 8019d62:	e009      	b.n	8019d78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019d64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019d68:	2b09      	cmp	r3, #9
 8019d6a:	dc02      	bgt.n	8019d72 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019d6c:	8bfb      	ldrh	r3, [r7, #30]
 8019d6e:	843b      	strh	r3, [r7, #32]
 8019d70:	e002      	b.n	8019d78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019d72:	f04f 33ff 	mov.w	r3, #4294967295
 8019d76:	e054      	b.n	8019e22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019d78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d7c:	2b09      	cmp	r3, #9
 8019d7e:	dd06      	ble.n	8019d8e <etharp_find_entry+0x236>
 8019d80:	4b2b      	ldr	r3, [pc, #172]	; (8019e30 <etharp_find_entry+0x2d8>)
 8019d82:	f240 127f 	movw	r2, #383	; 0x17f
 8019d86:	492e      	ldr	r1, [pc, #184]	; (8019e40 <etharp_find_entry+0x2e8>)
 8019d88:	482b      	ldr	r0, [pc, #172]	; (8019e38 <etharp_find_entry+0x2e0>)
 8019d8a:	f003 f99f 	bl	801d0cc <iprintf>
    etharp_free_entry(i);
 8019d8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d92:	4618      	mov	r0, r3
 8019d94:	f7ff fe06 	bl	80199a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019d98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d9c:	2b09      	cmp	r3, #9
 8019d9e:	dd06      	ble.n	8019dae <etharp_find_entry+0x256>
 8019da0:	4b23      	ldr	r3, [pc, #140]	; (8019e30 <etharp_find_entry+0x2d8>)
 8019da2:	f240 1283 	movw	r2, #387	; 0x183
 8019da6:	4926      	ldr	r1, [pc, #152]	; (8019e40 <etharp_find_entry+0x2e8>)
 8019da8:	4823      	ldr	r0, [pc, #140]	; (8019e38 <etharp_find_entry+0x2e0>)
 8019daa:	f003 f98f 	bl	801d0cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019dae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019db2:	491e      	ldr	r1, [pc, #120]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019db4:	4613      	mov	r3, r2
 8019db6:	005b      	lsls	r3, r3, #1
 8019db8:	4413      	add	r3, r2
 8019dba:	00db      	lsls	r3, r3, #3
 8019dbc:	440b      	add	r3, r1
 8019dbe:	3314      	adds	r3, #20
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d006      	beq.n	8019dd4 <etharp_find_entry+0x27c>
 8019dc6:	4b1a      	ldr	r3, [pc, #104]	; (8019e30 <etharp_find_entry+0x2d8>)
 8019dc8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019dcc:	491d      	ldr	r1, [pc, #116]	; (8019e44 <etharp_find_entry+0x2ec>)
 8019dce:	481a      	ldr	r0, [pc, #104]	; (8019e38 <etharp_find_entry+0x2e0>)
 8019dd0:	f003 f97c 	bl	801d0cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d00b      	beq.n	8019df2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019dda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	6819      	ldr	r1, [r3, #0]
 8019de2:	4812      	ldr	r0, [pc, #72]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019de4:	4613      	mov	r3, r2
 8019de6:	005b      	lsls	r3, r3, #1
 8019de8:	4413      	add	r3, r2
 8019dea:	00db      	lsls	r3, r3, #3
 8019dec:	4403      	add	r3, r0
 8019dee:	3304      	adds	r3, #4
 8019df0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019df6:	490d      	ldr	r1, [pc, #52]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019df8:	4613      	mov	r3, r2
 8019dfa:	005b      	lsls	r3, r3, #1
 8019dfc:	4413      	add	r3, r2
 8019dfe:	00db      	lsls	r3, r3, #3
 8019e00:	440b      	add	r3, r1
 8019e02:	3312      	adds	r3, #18
 8019e04:	2200      	movs	r2, #0
 8019e06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019e08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019e0c:	4907      	ldr	r1, [pc, #28]	; (8019e2c <etharp_find_entry+0x2d4>)
 8019e0e:	4613      	mov	r3, r2
 8019e10:	005b      	lsls	r3, r3, #1
 8019e12:	4413      	add	r3, r2
 8019e14:	00db      	lsls	r3, r3, #3
 8019e16:	440b      	add	r3, r1
 8019e18:	3308      	adds	r3, #8
 8019e1a:	687a      	ldr	r2, [r7, #4]
 8019e1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019e1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3728      	adds	r7, #40	; 0x28
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	20013444 	.word	0x20013444
 8019e30:	08022488 	.word	0x08022488
 8019e34:	080224c0 	.word	0x080224c0
 8019e38:	08022500 	.word	0x08022500
 8019e3c:	08022528 	.word	0x08022528
 8019e40:	08022540 	.word	0x08022540
 8019e44:	08022554 	.word	0x08022554

08019e48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b088      	sub	sp, #32
 8019e4c:	af02      	add	r7, sp, #8
 8019e4e:	60f8      	str	r0, [r7, #12]
 8019e50:	60b9      	str	r1, [r7, #8]
 8019e52:	607a      	str	r2, [r7, #4]
 8019e54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019e5c:	2b06      	cmp	r3, #6
 8019e5e:	d006      	beq.n	8019e6e <etharp_update_arp_entry+0x26>
 8019e60:	4b48      	ldr	r3, [pc, #288]	; (8019f84 <etharp_update_arp_entry+0x13c>)
 8019e62:	f240 12a9 	movw	r2, #425	; 0x1a9
 8019e66:	4948      	ldr	r1, [pc, #288]	; (8019f88 <etharp_update_arp_entry+0x140>)
 8019e68:	4848      	ldr	r0, [pc, #288]	; (8019f8c <etharp_update_arp_entry+0x144>)
 8019e6a:	f003 f92f 	bl	801d0cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d012      	beq.n	8019e9a <etharp_update_arp_entry+0x52>
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d00e      	beq.n	8019e9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e7c:	68bb      	ldr	r3, [r7, #8]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	68f9      	ldr	r1, [r7, #12]
 8019e82:	4618      	mov	r0, r3
 8019e84:	f001 f8fe 	bl	801b084 <ip4_addr_isbroadcast_u32>
 8019e88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d105      	bne.n	8019e9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e96:	2be0      	cmp	r3, #224	; 0xe0
 8019e98:	d102      	bne.n	8019ea0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019e9a:	f06f 030f 	mvn.w	r3, #15
 8019e9e:	e06c      	b.n	8019f7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019ea0:	78fb      	ldrb	r3, [r7, #3]
 8019ea2:	68fa      	ldr	r2, [r7, #12]
 8019ea4:	4619      	mov	r1, r3
 8019ea6:	68b8      	ldr	r0, [r7, #8]
 8019ea8:	f7ff fe56 	bl	8019b58 <etharp_find_entry>
 8019eac:	4603      	mov	r3, r0
 8019eae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019eb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	da02      	bge.n	8019ebe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019eb8:	8afb      	ldrh	r3, [r7, #22]
 8019eba:	b25b      	sxtb	r3, r3
 8019ebc:	e05d      	b.n	8019f7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019ebe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019ec2:	4933      	ldr	r1, [pc, #204]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019ec4:	4613      	mov	r3, r2
 8019ec6:	005b      	lsls	r3, r3, #1
 8019ec8:	4413      	add	r3, r2
 8019eca:	00db      	lsls	r3, r3, #3
 8019ecc:	440b      	add	r3, r1
 8019ece:	3314      	adds	r3, #20
 8019ed0:	2202      	movs	r2, #2
 8019ed2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019ed4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019ed8:	492d      	ldr	r1, [pc, #180]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019eda:	4613      	mov	r3, r2
 8019edc:	005b      	lsls	r3, r3, #1
 8019ede:	4413      	add	r3, r2
 8019ee0:	00db      	lsls	r3, r3, #3
 8019ee2:	440b      	add	r3, r1
 8019ee4:	3308      	adds	r3, #8
 8019ee6:	68fa      	ldr	r2, [r7, #12]
 8019ee8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019eea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019eee:	4613      	mov	r3, r2
 8019ef0:	005b      	lsls	r3, r3, #1
 8019ef2:	4413      	add	r3, r2
 8019ef4:	00db      	lsls	r3, r3, #3
 8019ef6:	3308      	adds	r3, #8
 8019ef8:	4a25      	ldr	r2, [pc, #148]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019efa:	4413      	add	r3, r2
 8019efc:	3304      	adds	r3, #4
 8019efe:	2206      	movs	r2, #6
 8019f00:	6879      	ldr	r1, [r7, #4]
 8019f02:	4618      	mov	r0, r3
 8019f04:	f003 fb63 	bl	801d5ce <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019f08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f0c:	4920      	ldr	r1, [pc, #128]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019f0e:	4613      	mov	r3, r2
 8019f10:	005b      	lsls	r3, r3, #1
 8019f12:	4413      	add	r3, r2
 8019f14:	00db      	lsls	r3, r3, #3
 8019f16:	440b      	add	r3, r1
 8019f18:	3312      	adds	r3, #18
 8019f1a:	2200      	movs	r2, #0
 8019f1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019f1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f22:	491b      	ldr	r1, [pc, #108]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019f24:	4613      	mov	r3, r2
 8019f26:	005b      	lsls	r3, r3, #1
 8019f28:	4413      	add	r3, r2
 8019f2a:	00db      	lsls	r3, r3, #3
 8019f2c:	440b      	add	r3, r1
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d021      	beq.n	8019f78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019f34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f38:	4915      	ldr	r1, [pc, #84]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019f3a:	4613      	mov	r3, r2
 8019f3c:	005b      	lsls	r3, r3, #1
 8019f3e:	4413      	add	r3, r2
 8019f40:	00db      	lsls	r3, r3, #3
 8019f42:	440b      	add	r3, r1
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019f48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f4c:	4910      	ldr	r1, [pc, #64]	; (8019f90 <etharp_update_arp_entry+0x148>)
 8019f4e:	4613      	mov	r3, r2
 8019f50:	005b      	lsls	r3, r3, #1
 8019f52:	4413      	add	r3, r2
 8019f54:	00db      	lsls	r3, r3, #3
 8019f56:	440b      	add	r3, r1
 8019f58:	2200      	movs	r2, #0
 8019f5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f66:	9300      	str	r3, [sp, #0]
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	6939      	ldr	r1, [r7, #16]
 8019f6c:	68f8      	ldr	r0, [r7, #12]
 8019f6e:	f001 ff97 	bl	801bea0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019f72:	6938      	ldr	r0, [r7, #16]
 8019f74:	f7f8 fd7c 	bl	8012a70 <pbuf_free>
  }
  return ERR_OK;
 8019f78:	2300      	movs	r3, #0
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	3718      	adds	r7, #24
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	bd80      	pop	{r7, pc}
 8019f82:	bf00      	nop
 8019f84:	08022488 	.word	0x08022488
 8019f88:	08022580 	.word	0x08022580
 8019f8c:	08022500 	.word	0x08022500
 8019f90:	20013444 	.word	0x20013444

08019f94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b084      	sub	sp, #16
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	60fb      	str	r3, [r7, #12]
 8019fa0:	e01e      	b.n	8019fe0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019fa2:	4913      	ldr	r1, [pc, #76]	; (8019ff0 <etharp_cleanup_netif+0x5c>)
 8019fa4:	68fa      	ldr	r2, [r7, #12]
 8019fa6:	4613      	mov	r3, r2
 8019fa8:	005b      	lsls	r3, r3, #1
 8019faa:	4413      	add	r3, r2
 8019fac:	00db      	lsls	r3, r3, #3
 8019fae:	440b      	add	r3, r1
 8019fb0:	3314      	adds	r3, #20
 8019fb2:	781b      	ldrb	r3, [r3, #0]
 8019fb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019fb6:	7afb      	ldrb	r3, [r7, #11]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d00e      	beq.n	8019fda <etharp_cleanup_netif+0x46>
 8019fbc:	490c      	ldr	r1, [pc, #48]	; (8019ff0 <etharp_cleanup_netif+0x5c>)
 8019fbe:	68fa      	ldr	r2, [r7, #12]
 8019fc0:	4613      	mov	r3, r2
 8019fc2:	005b      	lsls	r3, r3, #1
 8019fc4:	4413      	add	r3, r2
 8019fc6:	00db      	lsls	r3, r3, #3
 8019fc8:	440b      	add	r3, r1
 8019fca:	3308      	adds	r3, #8
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	687a      	ldr	r2, [r7, #4]
 8019fd0:	429a      	cmp	r2, r3
 8019fd2:	d102      	bne.n	8019fda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019fd4:	68f8      	ldr	r0, [r7, #12]
 8019fd6:	f7ff fce5 	bl	80199a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	3301      	adds	r3, #1
 8019fde:	60fb      	str	r3, [r7, #12]
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	2b09      	cmp	r3, #9
 8019fe4:	dddd      	ble.n	8019fa2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019fe6:	bf00      	nop
 8019fe8:	bf00      	nop
 8019fea:	3710      	adds	r7, #16
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	20013444 	.word	0x20013444

08019ff4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019ff4:	b5b0      	push	{r4, r5, r7, lr}
 8019ff6:	b08a      	sub	sp, #40	; 0x28
 8019ff8:	af04      	add	r7, sp, #16
 8019ffa:	6078      	str	r0, [r7, #4]
 8019ffc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	2b00      	cmp	r3, #0
 801a002:	d107      	bne.n	801a014 <etharp_input+0x20>
 801a004:	4b3d      	ldr	r3, [pc, #244]	; (801a0fc <etharp_input+0x108>)
 801a006:	f240 228a 	movw	r2, #650	; 0x28a
 801a00a:	493d      	ldr	r1, [pc, #244]	; (801a100 <etharp_input+0x10c>)
 801a00c:	483d      	ldr	r0, [pc, #244]	; (801a104 <etharp_input+0x110>)
 801a00e:	f003 f85d 	bl	801d0cc <iprintf>
 801a012:	e06f      	b.n	801a0f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	685b      	ldr	r3, [r3, #4]
 801a018:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	881b      	ldrh	r3, [r3, #0]
 801a01e:	b29b      	uxth	r3, r3
 801a020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a024:	d10c      	bne.n	801a040 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a026:	693b      	ldr	r3, [r7, #16]
 801a028:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a02a:	2b06      	cmp	r3, #6
 801a02c:	d108      	bne.n	801a040 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a032:	2b04      	cmp	r3, #4
 801a034:	d104      	bne.n	801a040 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a036:	693b      	ldr	r3, [r7, #16]
 801a038:	885b      	ldrh	r3, [r3, #2]
 801a03a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a03c:	2b08      	cmp	r3, #8
 801a03e:	d003      	beq.n	801a048 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a040:	6878      	ldr	r0, [r7, #4]
 801a042:	f7f8 fd15 	bl	8012a70 <pbuf_free>
    return;
 801a046:	e055      	b.n	801a0f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a048:	693b      	ldr	r3, [r7, #16]
 801a04a:	330e      	adds	r3, #14
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a050:	693b      	ldr	r3, [r7, #16]
 801a052:	3318      	adds	r3, #24
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	3304      	adds	r3, #4
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d102      	bne.n	801a068 <etharp_input+0x74>
    for_us = 0;
 801a062:	2300      	movs	r3, #0
 801a064:	75fb      	strb	r3, [r7, #23]
 801a066:	e009      	b.n	801a07c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a068:	68ba      	ldr	r2, [r7, #8]
 801a06a:	683b      	ldr	r3, [r7, #0]
 801a06c:	3304      	adds	r3, #4
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	429a      	cmp	r2, r3
 801a072:	bf0c      	ite	eq
 801a074:	2301      	moveq	r3, #1
 801a076:	2300      	movne	r3, #0
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a07c:	693b      	ldr	r3, [r7, #16]
 801a07e:	f103 0208 	add.w	r2, r3, #8
 801a082:	7dfb      	ldrb	r3, [r7, #23]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d001      	beq.n	801a08c <etharp_input+0x98>
 801a088:	2301      	movs	r3, #1
 801a08a:	e000      	b.n	801a08e <etharp_input+0x9a>
 801a08c:	2302      	movs	r3, #2
 801a08e:	f107 010c 	add.w	r1, r7, #12
 801a092:	6838      	ldr	r0, [r7, #0]
 801a094:	f7ff fed8 	bl	8019e48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a098:	693b      	ldr	r3, [r7, #16]
 801a09a:	88db      	ldrh	r3, [r3, #6]
 801a09c:	b29b      	uxth	r3, r3
 801a09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a0a2:	d003      	beq.n	801a0ac <etharp_input+0xb8>
 801a0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0a8:	d01e      	beq.n	801a0e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a0aa:	e020      	b.n	801a0ee <etharp_input+0xfa>
      if (for_us) {
 801a0ac:	7dfb      	ldrb	r3, [r7, #23]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d01c      	beq.n	801a0ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a0b8:	693b      	ldr	r3, [r7, #16]
 801a0ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a0be:	683b      	ldr	r3, [r7, #0]
 801a0c0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a0c8:	693a      	ldr	r2, [r7, #16]
 801a0ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a0cc:	2102      	movs	r1, #2
 801a0ce:	9103      	str	r1, [sp, #12]
 801a0d0:	f107 010c 	add.w	r1, r7, #12
 801a0d4:	9102      	str	r1, [sp, #8]
 801a0d6:	9201      	str	r2, [sp, #4]
 801a0d8:	9300      	str	r3, [sp, #0]
 801a0da:	462b      	mov	r3, r5
 801a0dc:	4622      	mov	r2, r4
 801a0de:	4601      	mov	r1, r0
 801a0e0:	6838      	ldr	r0, [r7, #0]
 801a0e2:	f000 faeb 	bl	801a6bc <etharp_raw>
      break;
 801a0e6:	e001      	b.n	801a0ec <etharp_input+0xf8>
      break;
 801a0e8:	bf00      	nop
 801a0ea:	e000      	b.n	801a0ee <etharp_input+0xfa>
      break;
 801a0ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	f7f8 fcbe 	bl	8012a70 <pbuf_free>
}
 801a0f4:	3718      	adds	r7, #24
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bdb0      	pop	{r4, r5, r7, pc}
 801a0fa:	bf00      	nop
 801a0fc:	08022488 	.word	0x08022488
 801a100:	080225d8 	.word	0x080225d8
 801a104:	08022500 	.word	0x08022500

0801a108 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b086      	sub	sp, #24
 801a10c:	af02      	add	r7, sp, #8
 801a10e:	60f8      	str	r0, [r7, #12]
 801a110:	60b9      	str	r1, [r7, #8]
 801a112:	4613      	mov	r3, r2
 801a114:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a116:	79fa      	ldrb	r2, [r7, #7]
 801a118:	4944      	ldr	r1, [pc, #272]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a11a:	4613      	mov	r3, r2
 801a11c:	005b      	lsls	r3, r3, #1
 801a11e:	4413      	add	r3, r2
 801a120:	00db      	lsls	r3, r3, #3
 801a122:	440b      	add	r3, r1
 801a124:	3314      	adds	r3, #20
 801a126:	781b      	ldrb	r3, [r3, #0]
 801a128:	2b01      	cmp	r3, #1
 801a12a:	d806      	bhi.n	801a13a <etharp_output_to_arp_index+0x32>
 801a12c:	4b40      	ldr	r3, [pc, #256]	; (801a230 <etharp_output_to_arp_index+0x128>)
 801a12e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a132:	4940      	ldr	r1, [pc, #256]	; (801a234 <etharp_output_to_arp_index+0x12c>)
 801a134:	4840      	ldr	r0, [pc, #256]	; (801a238 <etharp_output_to_arp_index+0x130>)
 801a136:	f002 ffc9 	bl	801d0cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a13a:	79fa      	ldrb	r2, [r7, #7]
 801a13c:	493b      	ldr	r1, [pc, #236]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a13e:	4613      	mov	r3, r2
 801a140:	005b      	lsls	r3, r3, #1
 801a142:	4413      	add	r3, r2
 801a144:	00db      	lsls	r3, r3, #3
 801a146:	440b      	add	r3, r1
 801a148:	3314      	adds	r3, #20
 801a14a:	781b      	ldrb	r3, [r3, #0]
 801a14c:	2b02      	cmp	r3, #2
 801a14e:	d153      	bne.n	801a1f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a150:	79fa      	ldrb	r2, [r7, #7]
 801a152:	4936      	ldr	r1, [pc, #216]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a154:	4613      	mov	r3, r2
 801a156:	005b      	lsls	r3, r3, #1
 801a158:	4413      	add	r3, r2
 801a15a:	00db      	lsls	r3, r3, #3
 801a15c:	440b      	add	r3, r1
 801a15e:	3312      	adds	r3, #18
 801a160:	881b      	ldrh	r3, [r3, #0]
 801a162:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a166:	d919      	bls.n	801a19c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a168:	79fa      	ldrb	r2, [r7, #7]
 801a16a:	4613      	mov	r3, r2
 801a16c:	005b      	lsls	r3, r3, #1
 801a16e:	4413      	add	r3, r2
 801a170:	00db      	lsls	r3, r3, #3
 801a172:	4a2e      	ldr	r2, [pc, #184]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a174:	4413      	add	r3, r2
 801a176:	3304      	adds	r3, #4
 801a178:	4619      	mov	r1, r3
 801a17a:	68f8      	ldr	r0, [r7, #12]
 801a17c:	f000 fb4c 	bl	801a818 <etharp_request>
 801a180:	4603      	mov	r3, r0
 801a182:	2b00      	cmp	r3, #0
 801a184:	d138      	bne.n	801a1f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a186:	79fa      	ldrb	r2, [r7, #7]
 801a188:	4928      	ldr	r1, [pc, #160]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a18a:	4613      	mov	r3, r2
 801a18c:	005b      	lsls	r3, r3, #1
 801a18e:	4413      	add	r3, r2
 801a190:	00db      	lsls	r3, r3, #3
 801a192:	440b      	add	r3, r1
 801a194:	3314      	adds	r3, #20
 801a196:	2203      	movs	r2, #3
 801a198:	701a      	strb	r2, [r3, #0]
 801a19a:	e02d      	b.n	801a1f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a19c:	79fa      	ldrb	r2, [r7, #7]
 801a19e:	4923      	ldr	r1, [pc, #140]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	005b      	lsls	r3, r3, #1
 801a1a4:	4413      	add	r3, r2
 801a1a6:	00db      	lsls	r3, r3, #3
 801a1a8:	440b      	add	r3, r1
 801a1aa:	3312      	adds	r3, #18
 801a1ac:	881b      	ldrh	r3, [r3, #0]
 801a1ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a1b2:	d321      	bcc.n	801a1f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a1b4:	79fa      	ldrb	r2, [r7, #7]
 801a1b6:	4613      	mov	r3, r2
 801a1b8:	005b      	lsls	r3, r3, #1
 801a1ba:	4413      	add	r3, r2
 801a1bc:	00db      	lsls	r3, r3, #3
 801a1be:	4a1b      	ldr	r2, [pc, #108]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a1c0:	4413      	add	r3, r2
 801a1c2:	1d19      	adds	r1, r3, #4
 801a1c4:	79fa      	ldrb	r2, [r7, #7]
 801a1c6:	4613      	mov	r3, r2
 801a1c8:	005b      	lsls	r3, r3, #1
 801a1ca:	4413      	add	r3, r2
 801a1cc:	00db      	lsls	r3, r3, #3
 801a1ce:	3308      	adds	r3, #8
 801a1d0:	4a16      	ldr	r2, [pc, #88]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a1d2:	4413      	add	r3, r2
 801a1d4:	3304      	adds	r3, #4
 801a1d6:	461a      	mov	r2, r3
 801a1d8:	68f8      	ldr	r0, [r7, #12]
 801a1da:	f000 fafb 	bl	801a7d4 <etharp_request_dst>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d109      	bne.n	801a1f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a1e4:	79fa      	ldrb	r2, [r7, #7]
 801a1e6:	4911      	ldr	r1, [pc, #68]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a1e8:	4613      	mov	r3, r2
 801a1ea:	005b      	lsls	r3, r3, #1
 801a1ec:	4413      	add	r3, r2
 801a1ee:	00db      	lsls	r3, r3, #3
 801a1f0:	440b      	add	r3, r1
 801a1f2:	3314      	adds	r3, #20
 801a1f4:	2203      	movs	r2, #3
 801a1f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a1fe:	79fa      	ldrb	r2, [r7, #7]
 801a200:	4613      	mov	r3, r2
 801a202:	005b      	lsls	r3, r3, #1
 801a204:	4413      	add	r3, r2
 801a206:	00db      	lsls	r3, r3, #3
 801a208:	3308      	adds	r3, #8
 801a20a:	4a08      	ldr	r2, [pc, #32]	; (801a22c <etharp_output_to_arp_index+0x124>)
 801a20c:	4413      	add	r3, r2
 801a20e:	3304      	adds	r3, #4
 801a210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a214:	9200      	str	r2, [sp, #0]
 801a216:	460a      	mov	r2, r1
 801a218:	68b9      	ldr	r1, [r7, #8]
 801a21a:	68f8      	ldr	r0, [r7, #12]
 801a21c:	f001 fe40 	bl	801bea0 <ethernet_output>
 801a220:	4603      	mov	r3, r0
}
 801a222:	4618      	mov	r0, r3
 801a224:	3710      	adds	r7, #16
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	20013444 	.word	0x20013444
 801a230:	08022488 	.word	0x08022488
 801a234:	080225f8 	.word	0x080225f8
 801a238:	08022500 	.word	0x08022500

0801a23c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b08a      	sub	sp, #40	; 0x28
 801a240:	af02      	add	r7, sp, #8
 801a242:	60f8      	str	r0, [r7, #12]
 801a244:	60b9      	str	r1, [r7, #8]
 801a246:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d106      	bne.n	801a260 <etharp_output+0x24>
 801a252:	4b73      	ldr	r3, [pc, #460]	; (801a420 <etharp_output+0x1e4>)
 801a254:	f240 321e 	movw	r2, #798	; 0x31e
 801a258:	4972      	ldr	r1, [pc, #456]	; (801a424 <etharp_output+0x1e8>)
 801a25a:	4873      	ldr	r0, [pc, #460]	; (801a428 <etharp_output+0x1ec>)
 801a25c:	f002 ff36 	bl	801d0cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d106      	bne.n	801a274 <etharp_output+0x38>
 801a266:	4b6e      	ldr	r3, [pc, #440]	; (801a420 <etharp_output+0x1e4>)
 801a268:	f240 321f 	movw	r2, #799	; 0x31f
 801a26c:	496f      	ldr	r1, [pc, #444]	; (801a42c <etharp_output+0x1f0>)
 801a26e:	486e      	ldr	r0, [pc, #440]	; (801a428 <etharp_output+0x1ec>)
 801a270:	f002 ff2c 	bl	801d0cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d106      	bne.n	801a288 <etharp_output+0x4c>
 801a27a:	4b69      	ldr	r3, [pc, #420]	; (801a420 <etharp_output+0x1e4>)
 801a27c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a280:	496b      	ldr	r1, [pc, #428]	; (801a430 <etharp_output+0x1f4>)
 801a282:	4869      	ldr	r0, [pc, #420]	; (801a428 <etharp_output+0x1ec>)
 801a284:	f002 ff22 	bl	801d0cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	68f9      	ldr	r1, [r7, #12]
 801a28e:	4618      	mov	r0, r3
 801a290:	f000 fef8 	bl	801b084 <ip4_addr_isbroadcast_u32>
 801a294:	4603      	mov	r3, r0
 801a296:	2b00      	cmp	r3, #0
 801a298:	d002      	beq.n	801a2a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a29a:	4b66      	ldr	r3, [pc, #408]	; (801a434 <etharp_output+0x1f8>)
 801a29c:	61fb      	str	r3, [r7, #28]
 801a29e:	e0af      	b.n	801a400 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a2a8:	2be0      	cmp	r3, #224	; 0xe0
 801a2aa:	d118      	bne.n	801a2de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a2b4:	235e      	movs	r3, #94	; 0x5e
 801a2b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	3301      	adds	r3, #1
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	3302      	adds	r3, #2
 801a2ca:	781b      	ldrb	r3, [r3, #0]
 801a2cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	3303      	adds	r3, #3
 801a2d2:	781b      	ldrb	r3, [r3, #0]
 801a2d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a2d6:	f107 0310 	add.w	r3, r7, #16
 801a2da:	61fb      	str	r3, [r7, #28]
 801a2dc:	e090      	b.n	801a400 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	681a      	ldr	r2, [r3, #0]
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	3304      	adds	r3, #4
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	405a      	eors	r2, r3
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	3308      	adds	r3, #8
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	4013      	ands	r3, r2
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d012      	beq.n	801a31c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a2fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a300:	4293      	cmp	r3, r2
 801a302:	d00b      	beq.n	801a31c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	330c      	adds	r3, #12
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d003      	beq.n	801a316 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	330c      	adds	r3, #12
 801a312:	61bb      	str	r3, [r7, #24]
 801a314:	e002      	b.n	801a31c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a316:	f06f 0303 	mvn.w	r3, #3
 801a31a:	e07d      	b.n	801a418 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a31c:	4b46      	ldr	r3, [pc, #280]	; (801a438 <etharp_output+0x1fc>)
 801a31e:	781b      	ldrb	r3, [r3, #0]
 801a320:	4619      	mov	r1, r3
 801a322:	4a46      	ldr	r2, [pc, #280]	; (801a43c <etharp_output+0x200>)
 801a324:	460b      	mov	r3, r1
 801a326:	005b      	lsls	r3, r3, #1
 801a328:	440b      	add	r3, r1
 801a32a:	00db      	lsls	r3, r3, #3
 801a32c:	4413      	add	r3, r2
 801a32e:	3314      	adds	r3, #20
 801a330:	781b      	ldrb	r3, [r3, #0]
 801a332:	2b01      	cmp	r3, #1
 801a334:	d925      	bls.n	801a382 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a336:	4b40      	ldr	r3, [pc, #256]	; (801a438 <etharp_output+0x1fc>)
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	4619      	mov	r1, r3
 801a33c:	4a3f      	ldr	r2, [pc, #252]	; (801a43c <etharp_output+0x200>)
 801a33e:	460b      	mov	r3, r1
 801a340:	005b      	lsls	r3, r3, #1
 801a342:	440b      	add	r3, r1
 801a344:	00db      	lsls	r3, r3, #3
 801a346:	4413      	add	r3, r2
 801a348:	3308      	adds	r3, #8
 801a34a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a34c:	68fa      	ldr	r2, [r7, #12]
 801a34e:	429a      	cmp	r2, r3
 801a350:	d117      	bne.n	801a382 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a352:	69bb      	ldr	r3, [r7, #24]
 801a354:	681a      	ldr	r2, [r3, #0]
 801a356:	4b38      	ldr	r3, [pc, #224]	; (801a438 <etharp_output+0x1fc>)
 801a358:	781b      	ldrb	r3, [r3, #0]
 801a35a:	4618      	mov	r0, r3
 801a35c:	4937      	ldr	r1, [pc, #220]	; (801a43c <etharp_output+0x200>)
 801a35e:	4603      	mov	r3, r0
 801a360:	005b      	lsls	r3, r3, #1
 801a362:	4403      	add	r3, r0
 801a364:	00db      	lsls	r3, r3, #3
 801a366:	440b      	add	r3, r1
 801a368:	3304      	adds	r3, #4
 801a36a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a36c:	429a      	cmp	r2, r3
 801a36e:	d108      	bne.n	801a382 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a370:	4b31      	ldr	r3, [pc, #196]	; (801a438 <etharp_output+0x1fc>)
 801a372:	781b      	ldrb	r3, [r3, #0]
 801a374:	461a      	mov	r2, r3
 801a376:	68b9      	ldr	r1, [r7, #8]
 801a378:	68f8      	ldr	r0, [r7, #12]
 801a37a:	f7ff fec5 	bl	801a108 <etharp_output_to_arp_index>
 801a37e:	4603      	mov	r3, r0
 801a380:	e04a      	b.n	801a418 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a382:	2300      	movs	r3, #0
 801a384:	75fb      	strb	r3, [r7, #23]
 801a386:	e031      	b.n	801a3ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a388:	7dfa      	ldrb	r2, [r7, #23]
 801a38a:	492c      	ldr	r1, [pc, #176]	; (801a43c <etharp_output+0x200>)
 801a38c:	4613      	mov	r3, r2
 801a38e:	005b      	lsls	r3, r3, #1
 801a390:	4413      	add	r3, r2
 801a392:	00db      	lsls	r3, r3, #3
 801a394:	440b      	add	r3, r1
 801a396:	3314      	adds	r3, #20
 801a398:	781b      	ldrb	r3, [r3, #0]
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d923      	bls.n	801a3e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a39e:	7dfa      	ldrb	r2, [r7, #23]
 801a3a0:	4926      	ldr	r1, [pc, #152]	; (801a43c <etharp_output+0x200>)
 801a3a2:	4613      	mov	r3, r2
 801a3a4:	005b      	lsls	r3, r3, #1
 801a3a6:	4413      	add	r3, r2
 801a3a8:	00db      	lsls	r3, r3, #3
 801a3aa:	440b      	add	r3, r1
 801a3ac:	3308      	adds	r3, #8
 801a3ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a3b0:	68fa      	ldr	r2, [r7, #12]
 801a3b2:	429a      	cmp	r2, r3
 801a3b4:	d117      	bne.n	801a3e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a3b6:	69bb      	ldr	r3, [r7, #24]
 801a3b8:	6819      	ldr	r1, [r3, #0]
 801a3ba:	7dfa      	ldrb	r2, [r7, #23]
 801a3bc:	481f      	ldr	r0, [pc, #124]	; (801a43c <etharp_output+0x200>)
 801a3be:	4613      	mov	r3, r2
 801a3c0:	005b      	lsls	r3, r3, #1
 801a3c2:	4413      	add	r3, r2
 801a3c4:	00db      	lsls	r3, r3, #3
 801a3c6:	4403      	add	r3, r0
 801a3c8:	3304      	adds	r3, #4
 801a3ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a3cc:	4299      	cmp	r1, r3
 801a3ce:	d10a      	bne.n	801a3e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a3d0:	4a19      	ldr	r2, [pc, #100]	; (801a438 <etharp_output+0x1fc>)
 801a3d2:	7dfb      	ldrb	r3, [r7, #23]
 801a3d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a3d6:	7dfb      	ldrb	r3, [r7, #23]
 801a3d8:	461a      	mov	r2, r3
 801a3da:	68b9      	ldr	r1, [r7, #8]
 801a3dc:	68f8      	ldr	r0, [r7, #12]
 801a3de:	f7ff fe93 	bl	801a108 <etharp_output_to_arp_index>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	e018      	b.n	801a418 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a3e6:	7dfb      	ldrb	r3, [r7, #23]
 801a3e8:	3301      	adds	r3, #1
 801a3ea:	75fb      	strb	r3, [r7, #23]
 801a3ec:	7dfb      	ldrb	r3, [r7, #23]
 801a3ee:	2b09      	cmp	r3, #9
 801a3f0:	d9ca      	bls.n	801a388 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a3f2:	68ba      	ldr	r2, [r7, #8]
 801a3f4:	69b9      	ldr	r1, [r7, #24]
 801a3f6:	68f8      	ldr	r0, [r7, #12]
 801a3f8:	f000 f822 	bl	801a440 <etharp_query>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	e00b      	b.n	801a418 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a40a:	9300      	str	r3, [sp, #0]
 801a40c:	69fb      	ldr	r3, [r7, #28]
 801a40e:	68b9      	ldr	r1, [r7, #8]
 801a410:	68f8      	ldr	r0, [r7, #12]
 801a412:	f001 fd45 	bl	801bea0 <ethernet_output>
 801a416:	4603      	mov	r3, r0
}
 801a418:	4618      	mov	r0, r3
 801a41a:	3720      	adds	r7, #32
 801a41c:	46bd      	mov	sp, r7
 801a41e:	bd80      	pop	{r7, pc}
 801a420:	08022488 	.word	0x08022488
 801a424:	080225d8 	.word	0x080225d8
 801a428:	08022500 	.word	0x08022500
 801a42c:	08022628 	.word	0x08022628
 801a430:	080225c8 	.word	0x080225c8
 801a434:	080245c4 	.word	0x080245c4
 801a438:	20013534 	.word	0x20013534
 801a43c:	20013444 	.word	0x20013444

0801a440 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b08c      	sub	sp, #48	; 0x30
 801a444:	af02      	add	r7, sp, #8
 801a446:	60f8      	str	r0, [r7, #12]
 801a448:	60b9      	str	r1, [r7, #8]
 801a44a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	3326      	adds	r3, #38	; 0x26
 801a450:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a452:	23ff      	movs	r3, #255	; 0xff
 801a454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a458:	2300      	movs	r3, #0
 801a45a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	68f9      	ldr	r1, [r7, #12]
 801a462:	4618      	mov	r0, r3
 801a464:	f000 fe0e 	bl	801b084 <ip4_addr_isbroadcast_u32>
 801a468:	4603      	mov	r3, r0
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d10c      	bne.n	801a488 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a476:	2be0      	cmp	r3, #224	; 0xe0
 801a478:	d006      	beq.n	801a488 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a47a:	68bb      	ldr	r3, [r7, #8]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d003      	beq.n	801a488 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a480:	68bb      	ldr	r3, [r7, #8]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d102      	bne.n	801a48e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a488:	f06f 030f 	mvn.w	r3, #15
 801a48c:	e101      	b.n	801a692 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a48e:	68fa      	ldr	r2, [r7, #12]
 801a490:	2101      	movs	r1, #1
 801a492:	68b8      	ldr	r0, [r7, #8]
 801a494:	f7ff fb60 	bl	8019b58 <etharp_find_entry>
 801a498:	4603      	mov	r3, r0
 801a49a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a49c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	da02      	bge.n	801a4aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a4a4:	8a7b      	ldrh	r3, [r7, #18]
 801a4a6:	b25b      	sxtb	r3, r3
 801a4a8:	e0f3      	b.n	801a692 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a4aa:	8a7b      	ldrh	r3, [r7, #18]
 801a4ac:	2b7e      	cmp	r3, #126	; 0x7e
 801a4ae:	d906      	bls.n	801a4be <etharp_query+0x7e>
 801a4b0:	4b7a      	ldr	r3, [pc, #488]	; (801a69c <etharp_query+0x25c>)
 801a4b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a4b6:	497a      	ldr	r1, [pc, #488]	; (801a6a0 <etharp_query+0x260>)
 801a4b8:	487a      	ldr	r0, [pc, #488]	; (801a6a4 <etharp_query+0x264>)
 801a4ba:	f002 fe07 	bl	801d0cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a4be:	8a7b      	ldrh	r3, [r7, #18]
 801a4c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a4c2:	7c7a      	ldrb	r2, [r7, #17]
 801a4c4:	4978      	ldr	r1, [pc, #480]	; (801a6a8 <etharp_query+0x268>)
 801a4c6:	4613      	mov	r3, r2
 801a4c8:	005b      	lsls	r3, r3, #1
 801a4ca:	4413      	add	r3, r2
 801a4cc:	00db      	lsls	r3, r3, #3
 801a4ce:	440b      	add	r3, r1
 801a4d0:	3314      	adds	r3, #20
 801a4d2:	781b      	ldrb	r3, [r3, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d115      	bne.n	801a504 <etharp_query+0xc4>
    is_new_entry = 1;
 801a4d8:	2301      	movs	r3, #1
 801a4da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a4dc:	7c7a      	ldrb	r2, [r7, #17]
 801a4de:	4972      	ldr	r1, [pc, #456]	; (801a6a8 <etharp_query+0x268>)
 801a4e0:	4613      	mov	r3, r2
 801a4e2:	005b      	lsls	r3, r3, #1
 801a4e4:	4413      	add	r3, r2
 801a4e6:	00db      	lsls	r3, r3, #3
 801a4e8:	440b      	add	r3, r1
 801a4ea:	3314      	adds	r3, #20
 801a4ec:	2201      	movs	r2, #1
 801a4ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a4f0:	7c7a      	ldrb	r2, [r7, #17]
 801a4f2:	496d      	ldr	r1, [pc, #436]	; (801a6a8 <etharp_query+0x268>)
 801a4f4:	4613      	mov	r3, r2
 801a4f6:	005b      	lsls	r3, r3, #1
 801a4f8:	4413      	add	r3, r2
 801a4fa:	00db      	lsls	r3, r3, #3
 801a4fc:	440b      	add	r3, r1
 801a4fe:	3308      	adds	r3, #8
 801a500:	68fa      	ldr	r2, [r7, #12]
 801a502:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a504:	7c7a      	ldrb	r2, [r7, #17]
 801a506:	4968      	ldr	r1, [pc, #416]	; (801a6a8 <etharp_query+0x268>)
 801a508:	4613      	mov	r3, r2
 801a50a:	005b      	lsls	r3, r3, #1
 801a50c:	4413      	add	r3, r2
 801a50e:	00db      	lsls	r3, r3, #3
 801a510:	440b      	add	r3, r1
 801a512:	3314      	adds	r3, #20
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	2b01      	cmp	r3, #1
 801a518:	d011      	beq.n	801a53e <etharp_query+0xfe>
 801a51a:	7c7a      	ldrb	r2, [r7, #17]
 801a51c:	4962      	ldr	r1, [pc, #392]	; (801a6a8 <etharp_query+0x268>)
 801a51e:	4613      	mov	r3, r2
 801a520:	005b      	lsls	r3, r3, #1
 801a522:	4413      	add	r3, r2
 801a524:	00db      	lsls	r3, r3, #3
 801a526:	440b      	add	r3, r1
 801a528:	3314      	adds	r3, #20
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	2b01      	cmp	r3, #1
 801a52e:	d806      	bhi.n	801a53e <etharp_query+0xfe>
 801a530:	4b5a      	ldr	r3, [pc, #360]	; (801a69c <etharp_query+0x25c>)
 801a532:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a536:	495d      	ldr	r1, [pc, #372]	; (801a6ac <etharp_query+0x26c>)
 801a538:	485a      	ldr	r0, [pc, #360]	; (801a6a4 <etharp_query+0x264>)
 801a53a:	f002 fdc7 	bl	801d0cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a53e:	6a3b      	ldr	r3, [r7, #32]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d102      	bne.n	801a54a <etharp_query+0x10a>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	2b00      	cmp	r3, #0
 801a548:	d10c      	bne.n	801a564 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a54a:	68b9      	ldr	r1, [r7, #8]
 801a54c:	68f8      	ldr	r0, [r7, #12]
 801a54e:	f000 f963 	bl	801a818 <etharp_request>
 801a552:	4603      	mov	r3, r0
 801a554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d102      	bne.n	801a564 <etharp_query+0x124>
      return result;
 801a55e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a562:	e096      	b.n	801a692 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d106      	bne.n	801a578 <etharp_query+0x138>
 801a56a:	4b4c      	ldr	r3, [pc, #304]	; (801a69c <etharp_query+0x25c>)
 801a56c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a570:	494f      	ldr	r1, [pc, #316]	; (801a6b0 <etharp_query+0x270>)
 801a572:	484c      	ldr	r0, [pc, #304]	; (801a6a4 <etharp_query+0x264>)
 801a574:	f002 fdaa 	bl	801d0cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a578:	7c7a      	ldrb	r2, [r7, #17]
 801a57a:	494b      	ldr	r1, [pc, #300]	; (801a6a8 <etharp_query+0x268>)
 801a57c:	4613      	mov	r3, r2
 801a57e:	005b      	lsls	r3, r3, #1
 801a580:	4413      	add	r3, r2
 801a582:	00db      	lsls	r3, r3, #3
 801a584:	440b      	add	r3, r1
 801a586:	3314      	adds	r3, #20
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	2b01      	cmp	r3, #1
 801a58c:	d917      	bls.n	801a5be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a58e:	4a49      	ldr	r2, [pc, #292]	; (801a6b4 <etharp_query+0x274>)
 801a590:	7c7b      	ldrb	r3, [r7, #17]
 801a592:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a594:	7c7a      	ldrb	r2, [r7, #17]
 801a596:	4613      	mov	r3, r2
 801a598:	005b      	lsls	r3, r3, #1
 801a59a:	4413      	add	r3, r2
 801a59c:	00db      	lsls	r3, r3, #3
 801a59e:	3308      	adds	r3, #8
 801a5a0:	4a41      	ldr	r2, [pc, #260]	; (801a6a8 <etharp_query+0x268>)
 801a5a2:	4413      	add	r3, r2
 801a5a4:	3304      	adds	r3, #4
 801a5a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a5aa:	9200      	str	r2, [sp, #0]
 801a5ac:	697a      	ldr	r2, [r7, #20]
 801a5ae:	6879      	ldr	r1, [r7, #4]
 801a5b0:	68f8      	ldr	r0, [r7, #12]
 801a5b2:	f001 fc75 	bl	801bea0 <ethernet_output>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5bc:	e067      	b.n	801a68e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a5be:	7c7a      	ldrb	r2, [r7, #17]
 801a5c0:	4939      	ldr	r1, [pc, #228]	; (801a6a8 <etharp_query+0x268>)
 801a5c2:	4613      	mov	r3, r2
 801a5c4:	005b      	lsls	r3, r3, #1
 801a5c6:	4413      	add	r3, r2
 801a5c8:	00db      	lsls	r3, r3, #3
 801a5ca:	440b      	add	r3, r1
 801a5cc:	3314      	adds	r3, #20
 801a5ce:	781b      	ldrb	r3, [r3, #0]
 801a5d0:	2b01      	cmp	r3, #1
 801a5d2:	d15c      	bne.n	801a68e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a5dc:	e01c      	b.n	801a618 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	895a      	ldrh	r2, [r3, #10]
 801a5e2:	69fb      	ldr	r3, [r7, #28]
 801a5e4:	891b      	ldrh	r3, [r3, #8]
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d10a      	bne.n	801a600 <etharp_query+0x1c0>
 801a5ea:	69fb      	ldr	r3, [r7, #28]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d006      	beq.n	801a600 <etharp_query+0x1c0>
 801a5f2:	4b2a      	ldr	r3, [pc, #168]	; (801a69c <etharp_query+0x25c>)
 801a5f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a5f8:	492f      	ldr	r1, [pc, #188]	; (801a6b8 <etharp_query+0x278>)
 801a5fa:	482a      	ldr	r0, [pc, #168]	; (801a6a4 <etharp_query+0x264>)
 801a5fc:	f002 fd66 	bl	801d0cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a600:	69fb      	ldr	r3, [r7, #28]
 801a602:	7b1b      	ldrb	r3, [r3, #12]
 801a604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d002      	beq.n	801a612 <etharp_query+0x1d2>
        copy_needed = 1;
 801a60c:	2301      	movs	r3, #1
 801a60e:	61bb      	str	r3, [r7, #24]
        break;
 801a610:	e005      	b.n	801a61e <etharp_query+0x1de>
      }
      p = p->next;
 801a612:	69fb      	ldr	r3, [r7, #28]
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a618:	69fb      	ldr	r3, [r7, #28]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d1df      	bne.n	801a5de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a61e:	69bb      	ldr	r3, [r7, #24]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d007      	beq.n	801a634 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a624:	687a      	ldr	r2, [r7, #4]
 801a626:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a62a:	200e      	movs	r0, #14
 801a62c:	f7f8 fc88 	bl	8012f40 <pbuf_clone>
 801a630:	61f8      	str	r0, [r7, #28]
 801a632:	e004      	b.n	801a63e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a638:	69f8      	ldr	r0, [r7, #28]
 801a63a:	f7f8 fabf 	bl	8012bbc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a63e:	69fb      	ldr	r3, [r7, #28]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d021      	beq.n	801a688 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a644:	7c7a      	ldrb	r2, [r7, #17]
 801a646:	4918      	ldr	r1, [pc, #96]	; (801a6a8 <etharp_query+0x268>)
 801a648:	4613      	mov	r3, r2
 801a64a:	005b      	lsls	r3, r3, #1
 801a64c:	4413      	add	r3, r2
 801a64e:	00db      	lsls	r3, r3, #3
 801a650:	440b      	add	r3, r1
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	2b00      	cmp	r3, #0
 801a656:	d00a      	beq.n	801a66e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a658:	7c7a      	ldrb	r2, [r7, #17]
 801a65a:	4913      	ldr	r1, [pc, #76]	; (801a6a8 <etharp_query+0x268>)
 801a65c:	4613      	mov	r3, r2
 801a65e:	005b      	lsls	r3, r3, #1
 801a660:	4413      	add	r3, r2
 801a662:	00db      	lsls	r3, r3, #3
 801a664:	440b      	add	r3, r1
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	4618      	mov	r0, r3
 801a66a:	f7f8 fa01 	bl	8012a70 <pbuf_free>
      }
      arp_table[i].q = p;
 801a66e:	7c7a      	ldrb	r2, [r7, #17]
 801a670:	490d      	ldr	r1, [pc, #52]	; (801a6a8 <etharp_query+0x268>)
 801a672:	4613      	mov	r3, r2
 801a674:	005b      	lsls	r3, r3, #1
 801a676:	4413      	add	r3, r2
 801a678:	00db      	lsls	r3, r3, #3
 801a67a:	440b      	add	r3, r1
 801a67c:	69fa      	ldr	r2, [r7, #28]
 801a67e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a680:	2300      	movs	r3, #0
 801a682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a686:	e002      	b.n	801a68e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a688:	23ff      	movs	r3, #255	; 0xff
 801a68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a68e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a692:	4618      	mov	r0, r3
 801a694:	3728      	adds	r7, #40	; 0x28
 801a696:	46bd      	mov	sp, r7
 801a698:	bd80      	pop	{r7, pc}
 801a69a:	bf00      	nop
 801a69c:	08022488 	.word	0x08022488
 801a6a0:	08022634 	.word	0x08022634
 801a6a4:	08022500 	.word	0x08022500
 801a6a8:	20013444 	.word	0x20013444
 801a6ac:	08022644 	.word	0x08022644
 801a6b0:	08022628 	.word	0x08022628
 801a6b4:	20013534 	.word	0x20013534
 801a6b8:	0802266c 	.word	0x0802266c

0801a6bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b08a      	sub	sp, #40	; 0x28
 801a6c0:	af02      	add	r7, sp, #8
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	607a      	str	r2, [r7, #4]
 801a6c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d106      	bne.n	801a6e2 <etharp_raw+0x26>
 801a6d4:	4b3a      	ldr	r3, [pc, #232]	; (801a7c0 <etharp_raw+0x104>)
 801a6d6:	f240 4257 	movw	r2, #1111	; 0x457
 801a6da:	493a      	ldr	r1, [pc, #232]	; (801a7c4 <etharp_raw+0x108>)
 801a6dc:	483a      	ldr	r0, [pc, #232]	; (801a7c8 <etharp_raw+0x10c>)
 801a6de:	f002 fcf5 	bl	801d0cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a6e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6e6:	211c      	movs	r1, #28
 801a6e8:	200e      	movs	r0, #14
 801a6ea:	f7f7 fedd 	bl	80124a8 <pbuf_alloc>
 801a6ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a6f0:	69bb      	ldr	r3, [r7, #24]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d102      	bne.n	801a6fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 801a6fa:	e05d      	b.n	801a7b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a6fc:	69bb      	ldr	r3, [r7, #24]
 801a6fe:	895b      	ldrh	r3, [r3, #10]
 801a700:	2b1b      	cmp	r3, #27
 801a702:	d806      	bhi.n	801a712 <etharp_raw+0x56>
 801a704:	4b2e      	ldr	r3, [pc, #184]	; (801a7c0 <etharp_raw+0x104>)
 801a706:	f240 4262 	movw	r2, #1122	; 0x462
 801a70a:	4930      	ldr	r1, [pc, #192]	; (801a7cc <etharp_raw+0x110>)
 801a70c:	482e      	ldr	r0, [pc, #184]	; (801a7c8 <etharp_raw+0x10c>)
 801a70e:	f002 fcdd 	bl	801d0cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a712:	69bb      	ldr	r3, [r7, #24]
 801a714:	685b      	ldr	r3, [r3, #4]
 801a716:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a718:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a71a:	4618      	mov	r0, r3
 801a71c:	f7f6 fdb6 	bl	801128c <lwip_htons>
 801a720:	4603      	mov	r3, r0
 801a722:	461a      	mov	r2, r3
 801a724:	697b      	ldr	r3, [r7, #20]
 801a726:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a72e:	2b06      	cmp	r3, #6
 801a730:	d006      	beq.n	801a740 <etharp_raw+0x84>
 801a732:	4b23      	ldr	r3, [pc, #140]	; (801a7c0 <etharp_raw+0x104>)
 801a734:	f240 4269 	movw	r2, #1129	; 0x469
 801a738:	4925      	ldr	r1, [pc, #148]	; (801a7d0 <etharp_raw+0x114>)
 801a73a:	4823      	ldr	r0, [pc, #140]	; (801a7c8 <etharp_raw+0x10c>)
 801a73c:	f002 fcc6 	bl	801d0cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	3308      	adds	r3, #8
 801a744:	2206      	movs	r2, #6
 801a746:	6839      	ldr	r1, [r7, #0]
 801a748:	4618      	mov	r0, r3
 801a74a:	f002 ff40 	bl	801d5ce <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	3312      	adds	r3, #18
 801a752:	2206      	movs	r2, #6
 801a754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a756:	4618      	mov	r0, r3
 801a758:	f002 ff39 	bl	801d5ce <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	330e      	adds	r3, #14
 801a760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a762:	6812      	ldr	r2, [r2, #0]
 801a764:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	3318      	adds	r3, #24
 801a76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a76c:	6812      	ldr	r2, [r2, #0]
 801a76e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a770:	697b      	ldr	r3, [r7, #20]
 801a772:	2200      	movs	r2, #0
 801a774:	701a      	strb	r2, [r3, #0]
 801a776:	2200      	movs	r2, #0
 801a778:	f042 0201 	orr.w	r2, r2, #1
 801a77c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a77e:	697b      	ldr	r3, [r7, #20]
 801a780:	2200      	movs	r2, #0
 801a782:	f042 0208 	orr.w	r2, r2, #8
 801a786:	709a      	strb	r2, [r3, #2]
 801a788:	2200      	movs	r2, #0
 801a78a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	2206      	movs	r2, #6
 801a790:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a792:	697b      	ldr	r3, [r7, #20]
 801a794:	2204      	movs	r2, #4
 801a796:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a798:	f640 0306 	movw	r3, #2054	; 0x806
 801a79c:	9300      	str	r3, [sp, #0]
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	68ba      	ldr	r2, [r7, #8]
 801a7a2:	69b9      	ldr	r1, [r7, #24]
 801a7a4:	68f8      	ldr	r0, [r7, #12]
 801a7a6:	f001 fb7b 	bl	801bea0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a7aa:	69b8      	ldr	r0, [r7, #24]
 801a7ac:	f7f8 f960 	bl	8012a70 <pbuf_free>
  p = NULL;
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a7b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	3720      	adds	r7, #32
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	08022488 	.word	0x08022488
 801a7c4:	080225d8 	.word	0x080225d8
 801a7c8:	08022500 	.word	0x08022500
 801a7cc:	08022688 	.word	0x08022688
 801a7d0:	080226bc 	.word	0x080226bc

0801a7d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b088      	sub	sp, #32
 801a7d8:	af04      	add	r7, sp, #16
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a7f0:	2201      	movs	r2, #1
 801a7f2:	9203      	str	r2, [sp, #12]
 801a7f4:	68ba      	ldr	r2, [r7, #8]
 801a7f6:	9202      	str	r2, [sp, #8]
 801a7f8:	4a06      	ldr	r2, [pc, #24]	; (801a814 <etharp_request_dst+0x40>)
 801a7fa:	9201      	str	r2, [sp, #4]
 801a7fc:	9300      	str	r3, [sp, #0]
 801a7fe:	4603      	mov	r3, r0
 801a800:	687a      	ldr	r2, [r7, #4]
 801a802:	68f8      	ldr	r0, [r7, #12]
 801a804:	f7ff ff5a 	bl	801a6bc <etharp_raw>
 801a808:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a80a:	4618      	mov	r0, r3
 801a80c:	3710      	adds	r7, #16
 801a80e:	46bd      	mov	sp, r7
 801a810:	bd80      	pop	{r7, pc}
 801a812:	bf00      	nop
 801a814:	080245cc 	.word	0x080245cc

0801a818 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b082      	sub	sp, #8
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a822:	4a05      	ldr	r2, [pc, #20]	; (801a838 <etharp_request+0x20>)
 801a824:	6839      	ldr	r1, [r7, #0]
 801a826:	6878      	ldr	r0, [r7, #4]
 801a828:	f7ff ffd4 	bl	801a7d4 <etharp_request_dst>
 801a82c:	4603      	mov	r3, r0
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3708      	adds	r7, #8
 801a832:	46bd      	mov	sp, r7
 801a834:	bd80      	pop	{r7, pc}
 801a836:	bf00      	nop
 801a838:	080245c4 	.word	0x080245c4

0801a83c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b08e      	sub	sp, #56	; 0x38
 801a840:	af04      	add	r7, sp, #16
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a846:	4b79      	ldr	r3, [pc, #484]	; (801aa2c <icmp_input+0x1f0>)
 801a848:	689b      	ldr	r3, [r3, #8]
 801a84a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a84e:	781b      	ldrb	r3, [r3, #0]
 801a850:	f003 030f 	and.w	r3, r3, #15
 801a854:	b2db      	uxtb	r3, r3
 801a856:	009b      	lsls	r3, r3, #2
 801a858:	b2db      	uxtb	r3, r3
 801a85a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a85c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a85e:	2b13      	cmp	r3, #19
 801a860:	f240 80cd 	bls.w	801a9fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	895b      	ldrh	r3, [r3, #10]
 801a868:	2b03      	cmp	r3, #3
 801a86a:	f240 80ca 	bls.w	801aa02 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	685b      	ldr	r3, [r3, #4]
 801a872:	781b      	ldrb	r3, [r3, #0]
 801a874:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a878:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	f000 80b7 	beq.w	801a9f0 <icmp_input+0x1b4>
 801a882:	2b08      	cmp	r3, #8
 801a884:	f040 80b7 	bne.w	801a9f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a888:	4b69      	ldr	r3, [pc, #420]	; (801aa30 <icmp_input+0x1f4>)
 801a88a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a88c:	4b67      	ldr	r3, [pc, #412]	; (801aa2c <icmp_input+0x1f0>)
 801a88e:	695b      	ldr	r3, [r3, #20]
 801a890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a894:	2be0      	cmp	r3, #224	; 0xe0
 801a896:	f000 80bb 	beq.w	801aa10 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a89a:	4b64      	ldr	r3, [pc, #400]	; (801aa2c <icmp_input+0x1f0>)
 801a89c:	695b      	ldr	r3, [r3, #20]
 801a89e:	4a63      	ldr	r2, [pc, #396]	; (801aa2c <icmp_input+0x1f0>)
 801a8a0:	6812      	ldr	r2, [r2, #0]
 801a8a2:	4611      	mov	r1, r2
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	f000 fbed 	bl	801b084 <ip4_addr_isbroadcast_u32>
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	f040 80b1 	bne.w	801aa14 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	891b      	ldrh	r3, [r3, #8]
 801a8b6:	2b07      	cmp	r3, #7
 801a8b8:	f240 80a5 	bls.w	801aa06 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a8bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a8be:	330e      	adds	r3, #14
 801a8c0:	4619      	mov	r1, r3
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	f7f8 f83e 	bl	8012944 <pbuf_add_header>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d04b      	beq.n	801a966 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	891a      	ldrh	r2, [r3, #8]
 801a8d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a8d4:	4413      	add	r3, r2
 801a8d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	891b      	ldrh	r3, [r3, #8]
 801a8dc:	8b7a      	ldrh	r2, [r7, #26]
 801a8de:	429a      	cmp	r2, r3
 801a8e0:	f0c0 809a 	bcc.w	801aa18 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a8e4:	8b7b      	ldrh	r3, [r7, #26]
 801a8e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a8ea:	4619      	mov	r1, r3
 801a8ec:	200e      	movs	r0, #14
 801a8ee:	f7f7 fddb 	bl	80124a8 <pbuf_alloc>
 801a8f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	f000 8090 	beq.w	801aa1c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a8fc:	697b      	ldr	r3, [r7, #20]
 801a8fe:	895b      	ldrh	r3, [r3, #10]
 801a900:	461a      	mov	r2, r3
 801a902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a904:	3308      	adds	r3, #8
 801a906:	429a      	cmp	r2, r3
 801a908:	d203      	bcs.n	801a912 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a90a:	6978      	ldr	r0, [r7, #20]
 801a90c:	f7f8 f8b0 	bl	8012a70 <pbuf_free>
          goto icmperr;
 801a910:	e085      	b.n	801aa1e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a912:	697b      	ldr	r3, [r7, #20]
 801a914:	685b      	ldr	r3, [r3, #4]
 801a916:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a91a:	4618      	mov	r0, r3
 801a91c:	f002 fe57 	bl	801d5ce <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a922:	4619      	mov	r1, r3
 801a924:	6978      	ldr	r0, [r7, #20]
 801a926:	f7f8 f81d 	bl	8012964 <pbuf_remove_header>
 801a92a:	4603      	mov	r3, r0
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d009      	beq.n	801a944 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a930:	4b40      	ldr	r3, [pc, #256]	; (801aa34 <icmp_input+0x1f8>)
 801a932:	22b6      	movs	r2, #182	; 0xb6
 801a934:	4940      	ldr	r1, [pc, #256]	; (801aa38 <icmp_input+0x1fc>)
 801a936:	4841      	ldr	r0, [pc, #260]	; (801aa3c <icmp_input+0x200>)
 801a938:	f002 fbc8 	bl	801d0cc <iprintf>
          pbuf_free(r);
 801a93c:	6978      	ldr	r0, [r7, #20]
 801a93e:	f7f8 f897 	bl	8012a70 <pbuf_free>
          goto icmperr;
 801a942:	e06c      	b.n	801aa1e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a944:	6879      	ldr	r1, [r7, #4]
 801a946:	6978      	ldr	r0, [r7, #20]
 801a948:	f7f8 f9b6 	bl	8012cb8 <pbuf_copy>
 801a94c:	4603      	mov	r3, r0
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d003      	beq.n	801a95a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a952:	6978      	ldr	r0, [r7, #20]
 801a954:	f7f8 f88c 	bl	8012a70 <pbuf_free>
          goto icmperr;
 801a958:	e061      	b.n	801aa1e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a95a:	6878      	ldr	r0, [r7, #4]
 801a95c:	f7f8 f888 	bl	8012a70 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a960:	697b      	ldr	r3, [r7, #20]
 801a962:	607b      	str	r3, [r7, #4]
 801a964:	e00f      	b.n	801a986 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a968:	330e      	adds	r3, #14
 801a96a:	4619      	mov	r1, r3
 801a96c:	6878      	ldr	r0, [r7, #4]
 801a96e:	f7f7 fff9 	bl	8012964 <pbuf_remove_header>
 801a972:	4603      	mov	r3, r0
 801a974:	2b00      	cmp	r3, #0
 801a976:	d006      	beq.n	801a986 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a978:	4b2e      	ldr	r3, [pc, #184]	; (801aa34 <icmp_input+0x1f8>)
 801a97a:	22c7      	movs	r2, #199	; 0xc7
 801a97c:	4930      	ldr	r1, [pc, #192]	; (801aa40 <icmp_input+0x204>)
 801a97e:	482f      	ldr	r0, [pc, #188]	; (801aa3c <icmp_input+0x200>)
 801a980:	f002 fba4 	bl	801d0cc <iprintf>
          goto icmperr;
 801a984:	e04b      	b.n	801aa1e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	685b      	ldr	r3, [r3, #4]
 801a98a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a98c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a98e:	4619      	mov	r1, r3
 801a990:	6878      	ldr	r0, [r7, #4]
 801a992:	f7f7 ffd7 	bl	8012944 <pbuf_add_header>
 801a996:	4603      	mov	r3, r0
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d12b      	bne.n	801a9f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	685b      	ldr	r3, [r3, #4]
 801a9a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a9a2:	69fb      	ldr	r3, [r7, #28]
 801a9a4:	681a      	ldr	r2, [r3, #0]
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a9aa:	4b20      	ldr	r3, [pc, #128]	; (801aa2c <icmp_input+0x1f0>)
 801a9ac:	691a      	ldr	r2, [r3, #16]
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a9b2:	693b      	ldr	r3, [r7, #16]
 801a9b4:	2200      	movs	r2, #0
 801a9b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a9b8:	693b      	ldr	r3, [r7, #16]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	709a      	strb	r2, [r3, #2]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	22ff      	movs	r2, #255	; 0xff
 801a9c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	729a      	strb	r2, [r3, #10]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a9d2:	683b      	ldr	r3, [r7, #0]
 801a9d4:	9302      	str	r3, [sp, #8]
 801a9d6:	2301      	movs	r3, #1
 801a9d8:	9301      	str	r3, [sp, #4]
 801a9da:	2300      	movs	r3, #0
 801a9dc:	9300      	str	r3, [sp, #0]
 801a9de:	23ff      	movs	r3, #255	; 0xff
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	69f9      	ldr	r1, [r7, #28]
 801a9e4:	6878      	ldr	r0, [r7, #4]
 801a9e6:	f000 fa75 	bl	801aed4 <ip4_output_if>
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a9ee:	e001      	b.n	801a9f4 <icmp_input+0x1b8>
      break;
 801a9f0:	bf00      	nop
 801a9f2:	e000      	b.n	801a9f6 <icmp_input+0x1ba>
      break;
 801a9f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a9f6:	6878      	ldr	r0, [r7, #4]
 801a9f8:	f7f8 f83a 	bl	8012a70 <pbuf_free>
  return;
 801a9fc:	e013      	b.n	801aa26 <icmp_input+0x1ea>
    goto lenerr;
 801a9fe:	bf00      	nop
 801aa00:	e002      	b.n	801aa08 <icmp_input+0x1cc>
    goto lenerr;
 801aa02:	bf00      	nop
 801aa04:	e000      	b.n	801aa08 <icmp_input+0x1cc>
        goto lenerr;
 801aa06:	bf00      	nop
lenerr:
  pbuf_free(p);
 801aa08:	6878      	ldr	r0, [r7, #4]
 801aa0a:	f7f8 f831 	bl	8012a70 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801aa0e:	e00a      	b.n	801aa26 <icmp_input+0x1ea>
        goto icmperr;
 801aa10:	bf00      	nop
 801aa12:	e004      	b.n	801aa1e <icmp_input+0x1e2>
        goto icmperr;
 801aa14:	bf00      	nop
 801aa16:	e002      	b.n	801aa1e <icmp_input+0x1e2>
          goto icmperr;
 801aa18:	bf00      	nop
 801aa1a:	e000      	b.n	801aa1e <icmp_input+0x1e2>
          goto icmperr;
 801aa1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801aa1e:	6878      	ldr	r0, [r7, #4]
 801aa20:	f7f8 f826 	bl	8012a70 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801aa24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801aa26:	3728      	adds	r7, #40	; 0x28
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	bd80      	pop	{r7, pc}
 801aa2c:	2000dad0 	.word	0x2000dad0
 801aa30:	2000dae4 	.word	0x2000dae4
 801aa34:	08022700 	.word	0x08022700
 801aa38:	08022738 	.word	0x08022738
 801aa3c:	08022770 	.word	0x08022770
 801aa40:	08022798 	.word	0x08022798

0801aa44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	460b      	mov	r3, r1
 801aa4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801aa50:	78fb      	ldrb	r3, [r7, #3]
 801aa52:	461a      	mov	r2, r3
 801aa54:	2103      	movs	r1, #3
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	f000 f814 	bl	801aa84 <icmp_send_response>
}
 801aa5c:	bf00      	nop
 801aa5e:	3708      	adds	r7, #8
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}

0801aa64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b082      	sub	sp, #8
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
 801aa6c:	460b      	mov	r3, r1
 801aa6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801aa70:	78fb      	ldrb	r3, [r7, #3]
 801aa72:	461a      	mov	r2, r3
 801aa74:	210b      	movs	r1, #11
 801aa76:	6878      	ldr	r0, [r7, #4]
 801aa78:	f000 f804 	bl	801aa84 <icmp_send_response>
}
 801aa7c:	bf00      	nop
 801aa7e:	3708      	adds	r7, #8
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bd80      	pop	{r7, pc}

0801aa84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b08c      	sub	sp, #48	; 0x30
 801aa88:	af04      	add	r7, sp, #16
 801aa8a:	6078      	str	r0, [r7, #4]
 801aa8c:	460b      	mov	r3, r1
 801aa8e:	70fb      	strb	r3, [r7, #3]
 801aa90:	4613      	mov	r3, r2
 801aa92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801aa94:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa98:	2124      	movs	r1, #36	; 0x24
 801aa9a:	2022      	movs	r0, #34	; 0x22
 801aa9c:	f7f7 fd04 	bl	80124a8 <pbuf_alloc>
 801aaa0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801aaa2:	69fb      	ldr	r3, [r7, #28]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d04c      	beq.n	801ab42 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801aaa8:	69fb      	ldr	r3, [r7, #28]
 801aaaa:	895b      	ldrh	r3, [r3, #10]
 801aaac:	2b23      	cmp	r3, #35	; 0x23
 801aaae:	d806      	bhi.n	801aabe <icmp_send_response+0x3a>
 801aab0:	4b26      	ldr	r3, [pc, #152]	; (801ab4c <icmp_send_response+0xc8>)
 801aab2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801aab6:	4926      	ldr	r1, [pc, #152]	; (801ab50 <icmp_send_response+0xcc>)
 801aab8:	4826      	ldr	r0, [pc, #152]	; (801ab54 <icmp_send_response+0xd0>)
 801aaba:	f002 fb07 	bl	801d0cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	685b      	ldr	r3, [r3, #4]
 801aac2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801aac4:	69fb      	ldr	r3, [r7, #28]
 801aac6:	685b      	ldr	r3, [r3, #4]
 801aac8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801aaca:	697b      	ldr	r3, [r7, #20]
 801aacc:	78fa      	ldrb	r2, [r7, #3]
 801aace:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801aad0:	697b      	ldr	r3, [r7, #20]
 801aad2:	78ba      	ldrb	r2, [r7, #2]
 801aad4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aad6:	697b      	ldr	r3, [r7, #20]
 801aad8:	2200      	movs	r2, #0
 801aada:	711a      	strb	r2, [r3, #4]
 801aadc:	2200      	movs	r2, #0
 801aade:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	2200      	movs	r2, #0
 801aae4:	719a      	strb	r2, [r3, #6]
 801aae6:	2200      	movs	r2, #0
 801aae8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801aaea:	69fb      	ldr	r3, [r7, #28]
 801aaec:	685b      	ldr	r3, [r3, #4]
 801aaee:	f103 0008 	add.w	r0, r3, #8
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	221c      	movs	r2, #28
 801aaf8:	4619      	mov	r1, r3
 801aafa:	f002 fd68 	bl	801d5ce <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801aafe:	69bb      	ldr	r3, [r7, #24]
 801ab00:	68db      	ldr	r3, [r3, #12]
 801ab02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ab04:	f107 030c 	add.w	r3, r7, #12
 801ab08:	4618      	mov	r0, r3
 801ab0a:	f000 f825 	bl	801ab58 <ip4_route>
 801ab0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ab10:	693b      	ldr	r3, [r7, #16]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d011      	beq.n	801ab3a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ab16:	697b      	ldr	r3, [r7, #20]
 801ab18:	2200      	movs	r2, #0
 801ab1a:	709a      	strb	r2, [r3, #2]
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ab20:	f107 020c 	add.w	r2, r7, #12
 801ab24:	693b      	ldr	r3, [r7, #16]
 801ab26:	9302      	str	r3, [sp, #8]
 801ab28:	2301      	movs	r3, #1
 801ab2a:	9301      	str	r3, [sp, #4]
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	9300      	str	r3, [sp, #0]
 801ab30:	23ff      	movs	r3, #255	; 0xff
 801ab32:	2100      	movs	r1, #0
 801ab34:	69f8      	ldr	r0, [r7, #28]
 801ab36:	f000 f9cd 	bl	801aed4 <ip4_output_if>
  }
  pbuf_free(q);
 801ab3a:	69f8      	ldr	r0, [r7, #28]
 801ab3c:	f7f7 ff98 	bl	8012a70 <pbuf_free>
 801ab40:	e000      	b.n	801ab44 <icmp_send_response+0xc0>
    return;
 801ab42:	bf00      	nop
}
 801ab44:	3720      	adds	r7, #32
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	08022700 	.word	0x08022700
 801ab50:	080227cc 	.word	0x080227cc
 801ab54:	08022770 	.word	0x08022770

0801ab58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ab58:	b480      	push	{r7}
 801ab5a:	b085      	sub	sp, #20
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ab60:	4b33      	ldr	r3, [pc, #204]	; (801ac30 <ip4_route+0xd8>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	60fb      	str	r3, [r7, #12]
 801ab66:	e036      	b.n	801abd6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab6e:	f003 0301 	and.w	r3, r3, #1
 801ab72:	b2db      	uxtb	r3, r3
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d02b      	beq.n	801abd0 <ip4_route+0x78>
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab7e:	089b      	lsrs	r3, r3, #2
 801ab80:	f003 0301 	and.w	r3, r3, #1
 801ab84:	b2db      	uxtb	r3, r3
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d022      	beq.n	801abd0 <ip4_route+0x78>
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	3304      	adds	r3, #4
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d01d      	beq.n	801abd0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681a      	ldr	r2, [r3, #0]
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	3304      	adds	r3, #4
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	405a      	eors	r2, r3
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	3308      	adds	r3, #8
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	4013      	ands	r3, r2
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d101      	bne.n	801abb0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	e038      	b.n	801ac22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abb6:	f003 0302 	and.w	r3, r3, #2
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d108      	bne.n	801abd0 <ip4_route+0x78>
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	330c      	adds	r3, #12
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	429a      	cmp	r2, r3
 801abca:	d101      	bne.n	801abd0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	e028      	b.n	801ac22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	60fb      	str	r3, [r7, #12]
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d1c5      	bne.n	801ab68 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801abdc:	4b15      	ldr	r3, [pc, #84]	; (801ac34 <ip4_route+0xdc>)
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d01a      	beq.n	801ac1a <ip4_route+0xc2>
 801abe4:	4b13      	ldr	r3, [pc, #76]	; (801ac34 <ip4_route+0xdc>)
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abec:	f003 0301 	and.w	r3, r3, #1
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d012      	beq.n	801ac1a <ip4_route+0xc2>
 801abf4:	4b0f      	ldr	r3, [pc, #60]	; (801ac34 <ip4_route+0xdc>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abfc:	f003 0304 	and.w	r3, r3, #4
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d00a      	beq.n	801ac1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ac04:	4b0b      	ldr	r3, [pc, #44]	; (801ac34 <ip4_route+0xdc>)
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	3304      	adds	r3, #4
 801ac0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d004      	beq.n	801ac1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	b2db      	uxtb	r3, r3
 801ac16:	2b7f      	cmp	r3, #127	; 0x7f
 801ac18:	d101      	bne.n	801ac1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	e001      	b.n	801ac22 <ip4_route+0xca>
  }

  return netif_default;
 801ac1e:	4b05      	ldr	r3, [pc, #20]	; (801ac34 <ip4_route+0xdc>)
 801ac20:	681b      	ldr	r3, [r3, #0]
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3714      	adds	r7, #20
 801ac26:	46bd      	mov	sp, r7
 801ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop
 801ac30:	200133d8 	.word	0x200133d8
 801ac34:	200133dc 	.word	0x200133dc

0801ac38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b082      	sub	sp, #8
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ac46:	f003 0301 	and.w	r3, r3, #1
 801ac4a:	b2db      	uxtb	r3, r3
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d016      	beq.n	801ac7e <ip4_input_accept+0x46>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	3304      	adds	r3, #4
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d011      	beq.n	801ac7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ac5a:	4b0b      	ldr	r3, [pc, #44]	; (801ac88 <ip4_input_accept+0x50>)
 801ac5c:	695a      	ldr	r2, [r3, #20]
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	3304      	adds	r3, #4
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	429a      	cmp	r2, r3
 801ac66:	d008      	beq.n	801ac7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ac68:	4b07      	ldr	r3, [pc, #28]	; (801ac88 <ip4_input_accept+0x50>)
 801ac6a:	695b      	ldr	r3, [r3, #20]
 801ac6c:	6879      	ldr	r1, [r7, #4]
 801ac6e:	4618      	mov	r0, r3
 801ac70:	f000 fa08 	bl	801b084 <ip4_addr_isbroadcast_u32>
 801ac74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d001      	beq.n	801ac7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ac7a:	2301      	movs	r3, #1
 801ac7c:	e000      	b.n	801ac80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ac7e:	2300      	movs	r3, #0
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	3708      	adds	r7, #8
 801ac84:	46bd      	mov	sp, r7
 801ac86:	bd80      	pop	{r7, pc}
 801ac88:	2000dad0 	.word	0x2000dad0

0801ac8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b086      	sub	sp, #24
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	6078      	str	r0, [r7, #4]
 801ac94:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	685b      	ldr	r3, [r3, #4]
 801ac9a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	091b      	lsrs	r3, r3, #4
 801aca2:	b2db      	uxtb	r3, r3
 801aca4:	2b04      	cmp	r3, #4
 801aca6:	d004      	beq.n	801acb2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f7f7 fee1 	bl	8012a70 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801acae:	2300      	movs	r3, #0
 801acb0:	e107      	b.n	801aec2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801acb2:	697b      	ldr	r3, [r7, #20]
 801acb4:	781b      	ldrb	r3, [r3, #0]
 801acb6:	f003 030f 	and.w	r3, r3, #15
 801acba:	b2db      	uxtb	r3, r3
 801acbc:	009b      	lsls	r3, r3, #2
 801acbe:	b2db      	uxtb	r3, r3
 801acc0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801acc2:	697b      	ldr	r3, [r7, #20]
 801acc4:	885b      	ldrh	r3, [r3, #2]
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	4618      	mov	r0, r3
 801acca:	f7f6 fadf 	bl	801128c <lwip_htons>
 801acce:	4603      	mov	r3, r0
 801acd0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	891b      	ldrh	r3, [r3, #8]
 801acd6:	89ba      	ldrh	r2, [r7, #12]
 801acd8:	429a      	cmp	r2, r3
 801acda:	d204      	bcs.n	801ace6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801acdc:	89bb      	ldrh	r3, [r7, #12]
 801acde:	4619      	mov	r1, r3
 801ace0:	6878      	ldr	r0, [r7, #4]
 801ace2:	f7f7 fd3f 	bl	8012764 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	895b      	ldrh	r3, [r3, #10]
 801acea:	89fa      	ldrh	r2, [r7, #14]
 801acec:	429a      	cmp	r2, r3
 801acee:	d807      	bhi.n	801ad00 <ip4_input+0x74>
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	891b      	ldrh	r3, [r3, #8]
 801acf4:	89ba      	ldrh	r2, [r7, #12]
 801acf6:	429a      	cmp	r2, r3
 801acf8:	d802      	bhi.n	801ad00 <ip4_input+0x74>
 801acfa:	89fb      	ldrh	r3, [r7, #14]
 801acfc:	2b13      	cmp	r3, #19
 801acfe:	d804      	bhi.n	801ad0a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ad00:	6878      	ldr	r0, [r7, #4]
 801ad02:	f7f7 feb5 	bl	8012a70 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ad06:	2300      	movs	r3, #0
 801ad08:	e0db      	b.n	801aec2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ad0a:	697b      	ldr	r3, [r7, #20]
 801ad0c:	691b      	ldr	r3, [r3, #16]
 801ad0e:	4a6f      	ldr	r2, [pc, #444]	; (801aecc <ip4_input+0x240>)
 801ad10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ad12:	697b      	ldr	r3, [r7, #20]
 801ad14:	68db      	ldr	r3, [r3, #12]
 801ad16:	4a6d      	ldr	r2, [pc, #436]	; (801aecc <ip4_input+0x240>)
 801ad18:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ad1a:	4b6c      	ldr	r3, [pc, #432]	; (801aecc <ip4_input+0x240>)
 801ad1c:	695b      	ldr	r3, [r3, #20]
 801ad1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ad22:	2be0      	cmp	r3, #224	; 0xe0
 801ad24:	d112      	bne.n	801ad4c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ad26:	683b      	ldr	r3, [r7, #0]
 801ad28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ad2c:	f003 0301 	and.w	r3, r3, #1
 801ad30:	b2db      	uxtb	r3, r3
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d007      	beq.n	801ad46 <ip4_input+0xba>
 801ad36:	683b      	ldr	r3, [r7, #0]
 801ad38:	3304      	adds	r3, #4
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d002      	beq.n	801ad46 <ip4_input+0xba>
      netif = inp;
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	613b      	str	r3, [r7, #16]
 801ad44:	e02a      	b.n	801ad9c <ip4_input+0x110>
    } else {
      netif = NULL;
 801ad46:	2300      	movs	r3, #0
 801ad48:	613b      	str	r3, [r7, #16]
 801ad4a:	e027      	b.n	801ad9c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ad4c:	6838      	ldr	r0, [r7, #0]
 801ad4e:	f7ff ff73 	bl	801ac38 <ip4_input_accept>
 801ad52:	4603      	mov	r3, r0
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d002      	beq.n	801ad5e <ip4_input+0xd2>
      netif = inp;
 801ad58:	683b      	ldr	r3, [r7, #0]
 801ad5a:	613b      	str	r3, [r7, #16]
 801ad5c:	e01e      	b.n	801ad9c <ip4_input+0x110>
    } else {
      netif = NULL;
 801ad5e:	2300      	movs	r3, #0
 801ad60:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ad62:	4b5a      	ldr	r3, [pc, #360]	; (801aecc <ip4_input+0x240>)
 801ad64:	695b      	ldr	r3, [r3, #20]
 801ad66:	b2db      	uxtb	r3, r3
 801ad68:	2b7f      	cmp	r3, #127	; 0x7f
 801ad6a:	d017      	beq.n	801ad9c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ad6c:	4b58      	ldr	r3, [pc, #352]	; (801aed0 <ip4_input+0x244>)
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	613b      	str	r3, [r7, #16]
 801ad72:	e00e      	b.n	801ad92 <ip4_input+0x106>
          if (netif == inp) {
 801ad74:	693a      	ldr	r2, [r7, #16]
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d006      	beq.n	801ad8a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ad7c:	6938      	ldr	r0, [r7, #16]
 801ad7e:	f7ff ff5b 	bl	801ac38 <ip4_input_accept>
 801ad82:	4603      	mov	r3, r0
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d108      	bne.n	801ad9a <ip4_input+0x10e>
 801ad88:	e000      	b.n	801ad8c <ip4_input+0x100>
            continue;
 801ad8a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ad8c:	693b      	ldr	r3, [r7, #16]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	613b      	str	r3, [r7, #16]
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d1ed      	bne.n	801ad74 <ip4_input+0xe8>
 801ad98:	e000      	b.n	801ad9c <ip4_input+0x110>
            break;
 801ad9a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ad9c:	4b4b      	ldr	r3, [pc, #300]	; (801aecc <ip4_input+0x240>)
 801ad9e:	691b      	ldr	r3, [r3, #16]
 801ada0:	6839      	ldr	r1, [r7, #0]
 801ada2:	4618      	mov	r0, r3
 801ada4:	f000 f96e 	bl	801b084 <ip4_addr_isbroadcast_u32>
 801ada8:	4603      	mov	r3, r0
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d105      	bne.n	801adba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801adae:	4b47      	ldr	r3, [pc, #284]	; (801aecc <ip4_input+0x240>)
 801adb0:	691b      	ldr	r3, [r3, #16]
 801adb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801adb6:	2be0      	cmp	r3, #224	; 0xe0
 801adb8:	d104      	bne.n	801adc4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801adba:	6878      	ldr	r0, [r7, #4]
 801adbc:	f7f7 fe58 	bl	8012a70 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801adc0:	2300      	movs	r3, #0
 801adc2:	e07e      	b.n	801aec2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801adc4:	693b      	ldr	r3, [r7, #16]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d104      	bne.n	801add4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801adca:	6878      	ldr	r0, [r7, #4]
 801adcc:	f7f7 fe50 	bl	8012a70 <pbuf_free>
    return ERR_OK;
 801add0:	2300      	movs	r3, #0
 801add2:	e076      	b.n	801aec2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801add4:	697b      	ldr	r3, [r7, #20]
 801add6:	88db      	ldrh	r3, [r3, #6]
 801add8:	b29b      	uxth	r3, r3
 801adda:	461a      	mov	r2, r3
 801addc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801ade0:	4013      	ands	r3, r2
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d00b      	beq.n	801adfe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ade6:	6878      	ldr	r0, [r7, #4]
 801ade8:	f000 fc92 	bl	801b710 <ip4_reass>
 801adec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d101      	bne.n	801adf8 <ip4_input+0x16c>
      return ERR_OK;
 801adf4:	2300      	movs	r3, #0
 801adf6:	e064      	b.n	801aec2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	685b      	ldr	r3, [r3, #4]
 801adfc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801adfe:	4a33      	ldr	r2, [pc, #204]	; (801aecc <ip4_input+0x240>)
 801ae00:	693b      	ldr	r3, [r7, #16]
 801ae02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ae04:	4a31      	ldr	r2, [pc, #196]	; (801aecc <ip4_input+0x240>)
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ae0a:	4a30      	ldr	r2, [pc, #192]	; (801aecc <ip4_input+0x240>)
 801ae0c:	697b      	ldr	r3, [r7, #20]
 801ae0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	781b      	ldrb	r3, [r3, #0]
 801ae14:	f003 030f 	and.w	r3, r3, #15
 801ae18:	b2db      	uxtb	r3, r3
 801ae1a:	009b      	lsls	r3, r3, #2
 801ae1c:	b2db      	uxtb	r3, r3
 801ae1e:	b29a      	uxth	r2, r3
 801ae20:	4b2a      	ldr	r3, [pc, #168]	; (801aecc <ip4_input+0x240>)
 801ae22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ae24:	89fb      	ldrh	r3, [r7, #14]
 801ae26:	4619      	mov	r1, r3
 801ae28:	6878      	ldr	r0, [r7, #4]
 801ae2a:	f7f7 fd9b 	bl	8012964 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ae2e:	697b      	ldr	r3, [r7, #20]
 801ae30:	7a5b      	ldrb	r3, [r3, #9]
 801ae32:	2b11      	cmp	r3, #17
 801ae34:	d006      	beq.n	801ae44 <ip4_input+0x1b8>
 801ae36:	2b11      	cmp	r3, #17
 801ae38:	dc13      	bgt.n	801ae62 <ip4_input+0x1d6>
 801ae3a:	2b01      	cmp	r3, #1
 801ae3c:	d00c      	beq.n	801ae58 <ip4_input+0x1cc>
 801ae3e:	2b06      	cmp	r3, #6
 801ae40:	d005      	beq.n	801ae4e <ip4_input+0x1c2>
 801ae42:	e00e      	b.n	801ae62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ae44:	6839      	ldr	r1, [r7, #0]
 801ae46:	6878      	ldr	r0, [r7, #4]
 801ae48:	f7fe fb5a 	bl	8019500 <udp_input>
        break;
 801ae4c:	e026      	b.n	801ae9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ae4e:	6839      	ldr	r1, [r7, #0]
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	f7f9 ff13 	bl	8014c7c <tcp_input>
        break;
 801ae56:	e021      	b.n	801ae9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ae58:	6839      	ldr	r1, [r7, #0]
 801ae5a:	6878      	ldr	r0, [r7, #4]
 801ae5c:	f7ff fcee 	bl	801a83c <icmp_input>
        break;
 801ae60:	e01c      	b.n	801ae9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ae62:	4b1a      	ldr	r3, [pc, #104]	; (801aecc <ip4_input+0x240>)
 801ae64:	695b      	ldr	r3, [r3, #20]
 801ae66:	6939      	ldr	r1, [r7, #16]
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f000 f90b 	bl	801b084 <ip4_addr_isbroadcast_u32>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d10f      	bne.n	801ae94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ae74:	4b15      	ldr	r3, [pc, #84]	; (801aecc <ip4_input+0x240>)
 801ae76:	695b      	ldr	r3, [r3, #20]
 801ae78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ae7c:	2be0      	cmp	r3, #224	; 0xe0
 801ae7e:	d009      	beq.n	801ae94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ae80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ae84:	4619      	mov	r1, r3
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	f7f7 fddf 	bl	8012a4a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ae8c:	2102      	movs	r1, #2
 801ae8e:	6878      	ldr	r0, [r7, #4]
 801ae90:	f7ff fdd8 	bl	801aa44 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f7f7 fdeb 	bl	8012a70 <pbuf_free>
        break;
 801ae9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ae9c:	4b0b      	ldr	r3, [pc, #44]	; (801aecc <ip4_input+0x240>)
 801ae9e:	2200      	movs	r2, #0
 801aea0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801aea2:	4b0a      	ldr	r3, [pc, #40]	; (801aecc <ip4_input+0x240>)
 801aea4:	2200      	movs	r2, #0
 801aea6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801aea8:	4b08      	ldr	r3, [pc, #32]	; (801aecc <ip4_input+0x240>)
 801aeaa:	2200      	movs	r2, #0
 801aeac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801aeae:	4b07      	ldr	r3, [pc, #28]	; (801aecc <ip4_input+0x240>)
 801aeb0:	2200      	movs	r2, #0
 801aeb2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801aeb4:	4b05      	ldr	r3, [pc, #20]	; (801aecc <ip4_input+0x240>)
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801aeba:	4b04      	ldr	r3, [pc, #16]	; (801aecc <ip4_input+0x240>)
 801aebc:	2200      	movs	r2, #0
 801aebe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801aec0:	2300      	movs	r3, #0
}
 801aec2:	4618      	mov	r0, r3
 801aec4:	3718      	adds	r7, #24
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}
 801aeca:	bf00      	nop
 801aecc:	2000dad0 	.word	0x2000dad0
 801aed0:	200133d8 	.word	0x200133d8

0801aed4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801aed4:	b580      	push	{r7, lr}
 801aed6:	b08a      	sub	sp, #40	; 0x28
 801aed8:	af04      	add	r7, sp, #16
 801aeda:	60f8      	str	r0, [r7, #12]
 801aedc:	60b9      	str	r1, [r7, #8]
 801aede:	607a      	str	r2, [r7, #4]
 801aee0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801aee2:	68bb      	ldr	r3, [r7, #8]
 801aee4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d009      	beq.n	801af00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d003      	beq.n	801aefa <ip4_output_if+0x26>
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d102      	bne.n	801af00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aefc:	3304      	adds	r3, #4
 801aefe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801af00:	78fa      	ldrb	r2, [r7, #3]
 801af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af04:	9302      	str	r3, [sp, #8]
 801af06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801af0a:	9301      	str	r3, [sp, #4]
 801af0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801af10:	9300      	str	r3, [sp, #0]
 801af12:	4613      	mov	r3, r2
 801af14:	687a      	ldr	r2, [r7, #4]
 801af16:	6979      	ldr	r1, [r7, #20]
 801af18:	68f8      	ldr	r0, [r7, #12]
 801af1a:	f000 f805 	bl	801af28 <ip4_output_if_src>
 801af1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801af20:	4618      	mov	r0, r3
 801af22:	3718      	adds	r7, #24
 801af24:	46bd      	mov	sp, r7
 801af26:	bd80      	pop	{r7, pc}

0801af28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b088      	sub	sp, #32
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	60f8      	str	r0, [r7, #12]
 801af30:	60b9      	str	r1, [r7, #8]
 801af32:	607a      	str	r2, [r7, #4]
 801af34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	7b9b      	ldrb	r3, [r3, #14]
 801af3a:	2b01      	cmp	r3, #1
 801af3c:	d006      	beq.n	801af4c <ip4_output_if_src+0x24>
 801af3e:	4b4b      	ldr	r3, [pc, #300]	; (801b06c <ip4_output_if_src+0x144>)
 801af40:	f44f 7255 	mov.w	r2, #852	; 0x354
 801af44:	494a      	ldr	r1, [pc, #296]	; (801b070 <ip4_output_if_src+0x148>)
 801af46:	484b      	ldr	r0, [pc, #300]	; (801b074 <ip4_output_if_src+0x14c>)
 801af48:	f002 f8c0 	bl	801d0cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d060      	beq.n	801b014 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801af52:	2314      	movs	r3, #20
 801af54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801af56:	2114      	movs	r1, #20
 801af58:	68f8      	ldr	r0, [r7, #12]
 801af5a:	f7f7 fcf3 	bl	8012944 <pbuf_add_header>
 801af5e:	4603      	mov	r3, r0
 801af60:	2b00      	cmp	r3, #0
 801af62:	d002      	beq.n	801af6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801af64:	f06f 0301 	mvn.w	r3, #1
 801af68:	e07c      	b.n	801b064 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	685b      	ldr	r3, [r3, #4]
 801af6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	895b      	ldrh	r3, [r3, #10]
 801af74:	2b13      	cmp	r3, #19
 801af76:	d806      	bhi.n	801af86 <ip4_output_if_src+0x5e>
 801af78:	4b3c      	ldr	r3, [pc, #240]	; (801b06c <ip4_output_if_src+0x144>)
 801af7a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801af7e:	493e      	ldr	r1, [pc, #248]	; (801b078 <ip4_output_if_src+0x150>)
 801af80:	483c      	ldr	r0, [pc, #240]	; (801b074 <ip4_output_if_src+0x14c>)
 801af82:	f002 f8a3 	bl	801d0cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801af86:	69fb      	ldr	r3, [r7, #28]
 801af88:	78fa      	ldrb	r2, [r7, #3]
 801af8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801af8c:	69fb      	ldr	r3, [r7, #28]
 801af8e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801af92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	681a      	ldr	r2, [r3, #0]
 801af98:	69fb      	ldr	r3, [r7, #28]
 801af9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801af9c:	8b7b      	ldrh	r3, [r7, #26]
 801af9e:	089b      	lsrs	r3, r3, #2
 801afa0:	b29b      	uxth	r3, r3
 801afa2:	b2db      	uxtb	r3, r3
 801afa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afa8:	b2da      	uxtb	r2, r3
 801afaa:	69fb      	ldr	r3, [r7, #28]
 801afac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801afae:	69fb      	ldr	r3, [r7, #28]
 801afb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801afb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	891b      	ldrh	r3, [r3, #8]
 801afba:	4618      	mov	r0, r3
 801afbc:	f7f6 f966 	bl	801128c <lwip_htons>
 801afc0:	4603      	mov	r3, r0
 801afc2:	461a      	mov	r2, r3
 801afc4:	69fb      	ldr	r3, [r7, #28]
 801afc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801afc8:	69fb      	ldr	r3, [r7, #28]
 801afca:	2200      	movs	r2, #0
 801afcc:	719a      	strb	r2, [r3, #6]
 801afce:	2200      	movs	r2, #0
 801afd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801afd2:	4b2a      	ldr	r3, [pc, #168]	; (801b07c <ip4_output_if_src+0x154>)
 801afd4:	881b      	ldrh	r3, [r3, #0]
 801afd6:	4618      	mov	r0, r3
 801afd8:	f7f6 f958 	bl	801128c <lwip_htons>
 801afdc:	4603      	mov	r3, r0
 801afde:	461a      	mov	r2, r3
 801afe0:	69fb      	ldr	r3, [r7, #28]
 801afe2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801afe4:	4b25      	ldr	r3, [pc, #148]	; (801b07c <ip4_output_if_src+0x154>)
 801afe6:	881b      	ldrh	r3, [r3, #0]
 801afe8:	3301      	adds	r3, #1
 801afea:	b29a      	uxth	r2, r3
 801afec:	4b23      	ldr	r3, [pc, #140]	; (801b07c <ip4_output_if_src+0x154>)
 801afee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d104      	bne.n	801b000 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801aff6:	4b22      	ldr	r3, [pc, #136]	; (801b080 <ip4_output_if_src+0x158>)
 801aff8:	681a      	ldr	r2, [r3, #0]
 801affa:	69fb      	ldr	r3, [r7, #28]
 801affc:	60da      	str	r2, [r3, #12]
 801affe:	e003      	b.n	801b008 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	681a      	ldr	r2, [r3, #0]
 801b004:	69fb      	ldr	r3, [r7, #28]
 801b006:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b008:	69fb      	ldr	r3, [r7, #28]
 801b00a:	2200      	movs	r2, #0
 801b00c:	729a      	strb	r2, [r3, #10]
 801b00e:	2200      	movs	r2, #0
 801b010:	72da      	strb	r2, [r3, #11]
 801b012:	e00f      	b.n	801b034 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	895b      	ldrh	r3, [r3, #10]
 801b018:	2b13      	cmp	r3, #19
 801b01a:	d802      	bhi.n	801b022 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b01c:	f06f 0301 	mvn.w	r3, #1
 801b020:	e020      	b.n	801b064 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	685b      	ldr	r3, [r3, #4]
 801b026:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b028:	69fb      	ldr	r3, [r7, #28]
 801b02a:	691b      	ldr	r3, [r3, #16]
 801b02c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b02e:	f107 0314 	add.w	r3, r7, #20
 801b032:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b036:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d00c      	beq.n	801b056 <ip4_output_if_src+0x12e>
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	891a      	ldrh	r2, [r3, #8]
 801b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b044:	429a      	cmp	r2, r3
 801b046:	d906      	bls.n	801b056 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b048:	687a      	ldr	r2, [r7, #4]
 801b04a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b04c:	68f8      	ldr	r0, [r7, #12]
 801b04e:	f000 fd53 	bl	801baf8 <ip4_frag>
 801b052:	4603      	mov	r3, r0
 801b054:	e006      	b.n	801b064 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b058:	695b      	ldr	r3, [r3, #20]
 801b05a:	687a      	ldr	r2, [r7, #4]
 801b05c:	68f9      	ldr	r1, [r7, #12]
 801b05e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b060:	4798      	blx	r3
 801b062:	4603      	mov	r3, r0
}
 801b064:	4618      	mov	r0, r3
 801b066:	3720      	adds	r7, #32
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}
 801b06c:	080227f8 	.word	0x080227f8
 801b070:	0802282c 	.word	0x0802282c
 801b074:	08022838 	.word	0x08022838
 801b078:	08022860 	.word	0x08022860
 801b07c:	20013536 	.word	0x20013536
 801b080:	080245c0 	.word	0x080245c0

0801b084 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b084:	b480      	push	{r7}
 801b086:	b085      	sub	sp, #20
 801b088:	af00      	add	r7, sp, #0
 801b08a:	6078      	str	r0, [r7, #4]
 801b08c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b098:	d002      	beq.n	801b0a0 <ip4_addr_isbroadcast_u32+0x1c>
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d101      	bne.n	801b0a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b0a0:	2301      	movs	r3, #1
 801b0a2:	e02a      	b.n	801b0fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b0aa:	f003 0302 	and.w	r3, r3, #2
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d101      	bne.n	801b0b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	e021      	b.n	801b0fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	3304      	adds	r3, #4
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	687a      	ldr	r2, [r7, #4]
 801b0be:	429a      	cmp	r2, r3
 801b0c0:	d101      	bne.n	801b0c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	e019      	b.n	801b0fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b0c6:	68fa      	ldr	r2, [r7, #12]
 801b0c8:	683b      	ldr	r3, [r7, #0]
 801b0ca:	3304      	adds	r3, #4
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	405a      	eors	r2, r3
 801b0d0:	683b      	ldr	r3, [r7, #0]
 801b0d2:	3308      	adds	r3, #8
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	4013      	ands	r3, r2
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d10d      	bne.n	801b0f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	3308      	adds	r3, #8
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	43da      	mvns	r2, r3
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b0e8:	683b      	ldr	r3, [r7, #0]
 801b0ea:	3308      	adds	r3, #8
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	d101      	bne.n	801b0f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b0f4:	2301      	movs	r3, #1
 801b0f6:	e000      	b.n	801b0fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b0f8:	2300      	movs	r3, #0
  }
}
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	3714      	adds	r7, #20
 801b0fe:	46bd      	mov	sp, r7
 801b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b104:	4770      	bx	lr
	...

0801b108 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b084      	sub	sp, #16
 801b10c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b10e:	2300      	movs	r3, #0
 801b110:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b112:	4b12      	ldr	r3, [pc, #72]	; (801b15c <ip_reass_tmr+0x54>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b118:	e018      	b.n	801b14c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	7fdb      	ldrb	r3, [r3, #31]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d00b      	beq.n	801b13a <ip_reass_tmr+0x32>
      r->timer--;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	7fdb      	ldrb	r3, [r3, #31]
 801b126:	3b01      	subs	r3, #1
 801b128:	b2da      	uxtb	r2, r3
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	60fb      	str	r3, [r7, #12]
 801b138:	e008      	b.n	801b14c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b144:	68b9      	ldr	r1, [r7, #8]
 801b146:	6878      	ldr	r0, [r7, #4]
 801b148:	f000 f80a 	bl	801b160 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d1e3      	bne.n	801b11a <ip_reass_tmr+0x12>
    }
  }
}
 801b152:	bf00      	nop
 801b154:	bf00      	nop
 801b156:	3710      	adds	r7, #16
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}
 801b15c:	20013538 	.word	0x20013538

0801b160 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b160:	b580      	push	{r7, lr}
 801b162:	b088      	sub	sp, #32
 801b164:	af00      	add	r7, sp, #0
 801b166:	6078      	str	r0, [r7, #4]
 801b168:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b16a:	2300      	movs	r3, #0
 801b16c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b16e:	683a      	ldr	r2, [r7, #0]
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	429a      	cmp	r2, r3
 801b174:	d105      	bne.n	801b182 <ip_reass_free_complete_datagram+0x22>
 801b176:	4b45      	ldr	r3, [pc, #276]	; (801b28c <ip_reass_free_complete_datagram+0x12c>)
 801b178:	22ab      	movs	r2, #171	; 0xab
 801b17a:	4945      	ldr	r1, [pc, #276]	; (801b290 <ip_reass_free_complete_datagram+0x130>)
 801b17c:	4845      	ldr	r0, [pc, #276]	; (801b294 <ip_reass_free_complete_datagram+0x134>)
 801b17e:	f001 ffa5 	bl	801d0cc <iprintf>
  if (prev != NULL) {
 801b182:	683b      	ldr	r3, [r7, #0]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d00a      	beq.n	801b19e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b188:	683b      	ldr	r3, [r7, #0]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	687a      	ldr	r2, [r7, #4]
 801b18e:	429a      	cmp	r2, r3
 801b190:	d005      	beq.n	801b19e <ip_reass_free_complete_datagram+0x3e>
 801b192:	4b3e      	ldr	r3, [pc, #248]	; (801b28c <ip_reass_free_complete_datagram+0x12c>)
 801b194:	22ad      	movs	r2, #173	; 0xad
 801b196:	4940      	ldr	r1, [pc, #256]	; (801b298 <ip_reass_free_complete_datagram+0x138>)
 801b198:	483e      	ldr	r0, [pc, #248]	; (801b294 <ip_reass_free_complete_datagram+0x134>)
 801b19a:	f001 ff97 	bl	801d0cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	685b      	ldr	r3, [r3, #4]
 801b1a2:	685b      	ldr	r3, [r3, #4]
 801b1a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b1a6:	697b      	ldr	r3, [r7, #20]
 801b1a8:	889b      	ldrh	r3, [r3, #4]
 801b1aa:	b29b      	uxth	r3, r3
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d12a      	bne.n	801b206 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	681a      	ldr	r2, [r3, #0]
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b1be:	69bb      	ldr	r3, [r7, #24]
 801b1c0:	6858      	ldr	r0, [r3, #4]
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	3308      	adds	r3, #8
 801b1c6:	2214      	movs	r2, #20
 801b1c8:	4619      	mov	r1, r3
 801b1ca:	f002 fa00 	bl	801d5ce <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b1ce:	2101      	movs	r1, #1
 801b1d0:	69b8      	ldr	r0, [r7, #24]
 801b1d2:	f7ff fc47 	bl	801aa64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b1d6:	69b8      	ldr	r0, [r7, #24]
 801b1d8:	f7f7 fcd8 	bl	8012b8c <pbuf_clen>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b1e0:	8bfa      	ldrh	r2, [r7, #30]
 801b1e2:	8a7b      	ldrh	r3, [r7, #18]
 801b1e4:	4413      	add	r3, r2
 801b1e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1ea:	db05      	blt.n	801b1f8 <ip_reass_free_complete_datagram+0x98>
 801b1ec:	4b27      	ldr	r3, [pc, #156]	; (801b28c <ip_reass_free_complete_datagram+0x12c>)
 801b1ee:	22bc      	movs	r2, #188	; 0xbc
 801b1f0:	492a      	ldr	r1, [pc, #168]	; (801b29c <ip_reass_free_complete_datagram+0x13c>)
 801b1f2:	4828      	ldr	r0, [pc, #160]	; (801b294 <ip_reass_free_complete_datagram+0x134>)
 801b1f4:	f001 ff6a 	bl	801d0cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b1f8:	8bfa      	ldrh	r2, [r7, #30]
 801b1fa:	8a7b      	ldrh	r3, [r7, #18]
 801b1fc:	4413      	add	r3, r2
 801b1fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b200:	69b8      	ldr	r0, [r7, #24]
 801b202:	f7f7 fc35 	bl	8012a70 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	685b      	ldr	r3, [r3, #4]
 801b20a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b20c:	e01f      	b.n	801b24e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b20e:	69bb      	ldr	r3, [r7, #24]
 801b210:	685b      	ldr	r3, [r3, #4]
 801b212:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b214:	69bb      	ldr	r3, [r7, #24]
 801b216:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b21e:	68f8      	ldr	r0, [r7, #12]
 801b220:	f7f7 fcb4 	bl	8012b8c <pbuf_clen>
 801b224:	4603      	mov	r3, r0
 801b226:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b228:	8bfa      	ldrh	r2, [r7, #30]
 801b22a:	8a7b      	ldrh	r3, [r7, #18]
 801b22c:	4413      	add	r3, r2
 801b22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b232:	db05      	blt.n	801b240 <ip_reass_free_complete_datagram+0xe0>
 801b234:	4b15      	ldr	r3, [pc, #84]	; (801b28c <ip_reass_free_complete_datagram+0x12c>)
 801b236:	22cc      	movs	r2, #204	; 0xcc
 801b238:	4918      	ldr	r1, [pc, #96]	; (801b29c <ip_reass_free_complete_datagram+0x13c>)
 801b23a:	4816      	ldr	r0, [pc, #88]	; (801b294 <ip_reass_free_complete_datagram+0x134>)
 801b23c:	f001 ff46 	bl	801d0cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b240:	8bfa      	ldrh	r2, [r7, #30]
 801b242:	8a7b      	ldrh	r3, [r7, #18]
 801b244:	4413      	add	r3, r2
 801b246:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b248:	68f8      	ldr	r0, [r7, #12]
 801b24a:	f7f7 fc11 	bl	8012a70 <pbuf_free>
  while (p != NULL) {
 801b24e:	69bb      	ldr	r3, [r7, #24]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d1dc      	bne.n	801b20e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b254:	6839      	ldr	r1, [r7, #0]
 801b256:	6878      	ldr	r0, [r7, #4]
 801b258:	f000 f8c2 	bl	801b3e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b25c:	4b10      	ldr	r3, [pc, #64]	; (801b2a0 <ip_reass_free_complete_datagram+0x140>)
 801b25e:	881b      	ldrh	r3, [r3, #0]
 801b260:	8bfa      	ldrh	r2, [r7, #30]
 801b262:	429a      	cmp	r2, r3
 801b264:	d905      	bls.n	801b272 <ip_reass_free_complete_datagram+0x112>
 801b266:	4b09      	ldr	r3, [pc, #36]	; (801b28c <ip_reass_free_complete_datagram+0x12c>)
 801b268:	22d2      	movs	r2, #210	; 0xd2
 801b26a:	490e      	ldr	r1, [pc, #56]	; (801b2a4 <ip_reass_free_complete_datagram+0x144>)
 801b26c:	4809      	ldr	r0, [pc, #36]	; (801b294 <ip_reass_free_complete_datagram+0x134>)
 801b26e:	f001 ff2d 	bl	801d0cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b272:	4b0b      	ldr	r3, [pc, #44]	; (801b2a0 <ip_reass_free_complete_datagram+0x140>)
 801b274:	881a      	ldrh	r2, [r3, #0]
 801b276:	8bfb      	ldrh	r3, [r7, #30]
 801b278:	1ad3      	subs	r3, r2, r3
 801b27a:	b29a      	uxth	r2, r3
 801b27c:	4b08      	ldr	r3, [pc, #32]	; (801b2a0 <ip_reass_free_complete_datagram+0x140>)
 801b27e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b280:	8bfb      	ldrh	r3, [r7, #30]
}
 801b282:	4618      	mov	r0, r3
 801b284:	3720      	adds	r7, #32
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}
 801b28a:	bf00      	nop
 801b28c:	08022890 	.word	0x08022890
 801b290:	080228cc 	.word	0x080228cc
 801b294:	080228d8 	.word	0x080228d8
 801b298:	08022900 	.word	0x08022900
 801b29c:	08022914 	.word	0x08022914
 801b2a0:	2001353c 	.word	0x2001353c
 801b2a4:	08022934 	.word	0x08022934

0801b2a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	b08a      	sub	sp, #40	; 0x28
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
 801b2b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b2be:	2300      	movs	r3, #0
 801b2c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b2c6:	4b28      	ldr	r3, [pc, #160]	; (801b368 <ip_reass_remove_oldest_datagram+0xc0>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b2cc:	e030      	b.n	801b330 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2d0:	695a      	ldr	r2, [r3, #20]
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	68db      	ldr	r3, [r3, #12]
 801b2d6:	429a      	cmp	r2, r3
 801b2d8:	d10c      	bne.n	801b2f4 <ip_reass_remove_oldest_datagram+0x4c>
 801b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2dc:	699a      	ldr	r2, [r3, #24]
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	691b      	ldr	r3, [r3, #16]
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d106      	bne.n	801b2f4 <ip_reass_remove_oldest_datagram+0x4c>
 801b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e8:	899a      	ldrh	r2, [r3, #12]
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	889b      	ldrh	r3, [r3, #4]
 801b2ee:	b29b      	uxth	r3, r3
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d014      	beq.n	801b31e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	3301      	adds	r3, #1
 801b2f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b2fa:	6a3b      	ldr	r3, [r7, #32]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d104      	bne.n	801b30a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b302:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b304:	69fb      	ldr	r3, [r7, #28]
 801b306:	61bb      	str	r3, [r7, #24]
 801b308:	e009      	b.n	801b31e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b30c:	7fda      	ldrb	r2, [r3, #31]
 801b30e:	6a3b      	ldr	r3, [r7, #32]
 801b310:	7fdb      	ldrb	r3, [r3, #31]
 801b312:	429a      	cmp	r2, r3
 801b314:	d803      	bhi.n	801b31e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b318:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b31a:	69fb      	ldr	r3, [r7, #28]
 801b31c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d001      	beq.n	801b32a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b328:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b332:	2b00      	cmp	r3, #0
 801b334:	d1cb      	bne.n	801b2ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b336:	6a3b      	ldr	r3, [r7, #32]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d008      	beq.n	801b34e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b33c:	69b9      	ldr	r1, [r7, #24]
 801b33e:	6a38      	ldr	r0, [r7, #32]
 801b340:	f7ff ff0e 	bl	801b160 <ip_reass_free_complete_datagram>
 801b344:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b346:	697a      	ldr	r2, [r7, #20]
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	4413      	add	r3, r2
 801b34c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b34e:	697a      	ldr	r2, [r7, #20]
 801b350:	683b      	ldr	r3, [r7, #0]
 801b352:	429a      	cmp	r2, r3
 801b354:	da02      	bge.n	801b35c <ip_reass_remove_oldest_datagram+0xb4>
 801b356:	693b      	ldr	r3, [r7, #16]
 801b358:	2b01      	cmp	r3, #1
 801b35a:	dcac      	bgt.n	801b2b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b35c:	697b      	ldr	r3, [r7, #20]
}
 801b35e:	4618      	mov	r0, r3
 801b360:	3728      	adds	r7, #40	; 0x28
 801b362:	46bd      	mov	sp, r7
 801b364:	bd80      	pop	{r7, pc}
 801b366:	bf00      	nop
 801b368:	20013538 	.word	0x20013538

0801b36c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b36c:	b580      	push	{r7, lr}
 801b36e:	b084      	sub	sp, #16
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b376:	2004      	movs	r0, #4
 801b378:	f7f6 fc60 	bl	8011c3c <memp_malloc>
 801b37c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d110      	bne.n	801b3a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b384:	6839      	ldr	r1, [r7, #0]
 801b386:	6878      	ldr	r0, [r7, #4]
 801b388:	f7ff ff8e 	bl	801b2a8 <ip_reass_remove_oldest_datagram>
 801b38c:	4602      	mov	r2, r0
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	4293      	cmp	r3, r2
 801b392:	dc03      	bgt.n	801b39c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b394:	2004      	movs	r0, #4
 801b396:	f7f6 fc51 	bl	8011c3c <memp_malloc>
 801b39a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d101      	bne.n	801b3a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	e016      	b.n	801b3d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b3a6:	2220      	movs	r2, #32
 801b3a8:	2100      	movs	r1, #0
 801b3aa:	68f8      	ldr	r0, [r7, #12]
 801b3ac:	f002 f81e 	bl	801d3ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	220f      	movs	r2, #15
 801b3b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b3b6:	4b09      	ldr	r3, [pc, #36]	; (801b3dc <ip_reass_enqueue_new_datagram+0x70>)
 801b3b8:	681a      	ldr	r2, [r3, #0]
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b3be:	4a07      	ldr	r2, [pc, #28]	; (801b3dc <ip_reass_enqueue_new_datagram+0x70>)
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	3308      	adds	r3, #8
 801b3c8:	2214      	movs	r2, #20
 801b3ca:	6879      	ldr	r1, [r7, #4]
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	f002 f8fe 	bl	801d5ce <memcpy>
  return ipr;
 801b3d2:	68fb      	ldr	r3, [r7, #12]
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	3710      	adds	r7, #16
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd80      	pop	{r7, pc}
 801b3dc:	20013538 	.word	0x20013538

0801b3e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b082      	sub	sp, #8
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
 801b3e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b3ea:	4b10      	ldr	r3, [pc, #64]	; (801b42c <ip_reass_dequeue_datagram+0x4c>)
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	687a      	ldr	r2, [r7, #4]
 801b3f0:	429a      	cmp	r2, r3
 801b3f2:	d104      	bne.n	801b3fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	4a0c      	ldr	r2, [pc, #48]	; (801b42c <ip_reass_dequeue_datagram+0x4c>)
 801b3fa:	6013      	str	r3, [r2, #0]
 801b3fc:	e00d      	b.n	801b41a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b3fe:	683b      	ldr	r3, [r7, #0]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d106      	bne.n	801b412 <ip_reass_dequeue_datagram+0x32>
 801b404:	4b0a      	ldr	r3, [pc, #40]	; (801b430 <ip_reass_dequeue_datagram+0x50>)
 801b406:	f240 1245 	movw	r2, #325	; 0x145
 801b40a:	490a      	ldr	r1, [pc, #40]	; (801b434 <ip_reass_dequeue_datagram+0x54>)
 801b40c:	480a      	ldr	r0, [pc, #40]	; (801b438 <ip_reass_dequeue_datagram+0x58>)
 801b40e:	f001 fe5d 	bl	801d0cc <iprintf>
    prev->next = ipr->next;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	681a      	ldr	r2, [r3, #0]
 801b416:	683b      	ldr	r3, [r7, #0]
 801b418:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b41a:	6879      	ldr	r1, [r7, #4]
 801b41c:	2004      	movs	r0, #4
 801b41e:	f7f6 fc83 	bl	8011d28 <memp_free>
}
 801b422:	bf00      	nop
 801b424:	3708      	adds	r7, #8
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}
 801b42a:	bf00      	nop
 801b42c:	20013538 	.word	0x20013538
 801b430:	08022890 	.word	0x08022890
 801b434:	08022958 	.word	0x08022958
 801b438:	080228d8 	.word	0x080228d8

0801b43c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b08c      	sub	sp, #48	; 0x30
 801b440:	af00      	add	r7, sp, #0
 801b442:	60f8      	str	r0, [r7, #12]
 801b444:	60b9      	str	r1, [r7, #8]
 801b446:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b448:	2300      	movs	r3, #0
 801b44a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b44c:	2301      	movs	r3, #1
 801b44e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	685b      	ldr	r3, [r3, #4]
 801b454:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b456:	69fb      	ldr	r3, [r7, #28]
 801b458:	885b      	ldrh	r3, [r3, #2]
 801b45a:	b29b      	uxth	r3, r3
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7f5 ff15 	bl	801128c <lwip_htons>
 801b462:	4603      	mov	r3, r0
 801b464:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b466:	69fb      	ldr	r3, [r7, #28]
 801b468:	781b      	ldrb	r3, [r3, #0]
 801b46a:	f003 030f 	and.w	r3, r3, #15
 801b46e:	b2db      	uxtb	r3, r3
 801b470:	009b      	lsls	r3, r3, #2
 801b472:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b474:	7e7b      	ldrb	r3, [r7, #25]
 801b476:	b29b      	uxth	r3, r3
 801b478:	8b7a      	ldrh	r2, [r7, #26]
 801b47a:	429a      	cmp	r2, r3
 801b47c:	d202      	bcs.n	801b484 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b47e:	f04f 33ff 	mov.w	r3, #4294967295
 801b482:	e135      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b484:	7e7b      	ldrb	r3, [r7, #25]
 801b486:	b29b      	uxth	r3, r3
 801b488:	8b7a      	ldrh	r2, [r7, #26]
 801b48a:	1ad3      	subs	r3, r2, r3
 801b48c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b48e:	69fb      	ldr	r3, [r7, #28]
 801b490:	88db      	ldrh	r3, [r3, #6]
 801b492:	b29b      	uxth	r3, r3
 801b494:	4618      	mov	r0, r3
 801b496:	f7f5 fef9 	bl	801128c <lwip_htons>
 801b49a:	4603      	mov	r3, r0
 801b49c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b4a0:	b29b      	uxth	r3, r3
 801b4a2:	00db      	lsls	r3, r3, #3
 801b4a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	685b      	ldr	r3, [r3, #4]
 801b4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	701a      	strb	r2, [r3, #0]
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	705a      	strb	r2, [r3, #1]
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	709a      	strb	r2, [r3, #2]
 801b4ba:	2200      	movs	r2, #0
 801b4bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4c0:	8afa      	ldrh	r2, [r7, #22]
 801b4c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b4c4:	8afa      	ldrh	r2, [r7, #22]
 801b4c6:	8b7b      	ldrh	r3, [r7, #26]
 801b4c8:	4413      	add	r3, r2
 801b4ca:	b29a      	uxth	r2, r3
 801b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4d2:	88db      	ldrh	r3, [r3, #6]
 801b4d4:	b29b      	uxth	r3, r3
 801b4d6:	8afa      	ldrh	r2, [r7, #22]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d902      	bls.n	801b4e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b4e0:	e106      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	685b      	ldr	r3, [r3, #4]
 801b4e6:	627b      	str	r3, [r7, #36]	; 0x24
 801b4e8:	e068      	b.n	801b5bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ec:	685b      	ldr	r3, [r3, #4]
 801b4ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f2:	889b      	ldrh	r3, [r3, #4]
 801b4f4:	b29a      	uxth	r2, r3
 801b4f6:	693b      	ldr	r3, [r7, #16]
 801b4f8:	889b      	ldrh	r3, [r3, #4]
 801b4fa:	b29b      	uxth	r3, r3
 801b4fc:	429a      	cmp	r2, r3
 801b4fe:	d235      	bcs.n	801b56c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b504:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d020      	beq.n	801b54e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b50e:	889b      	ldrh	r3, [r3, #4]
 801b510:	b29a      	uxth	r2, r3
 801b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b514:	88db      	ldrh	r3, [r3, #6]
 801b516:	b29b      	uxth	r3, r3
 801b518:	429a      	cmp	r2, r3
 801b51a:	d307      	bcc.n	801b52c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b51e:	88db      	ldrh	r3, [r3, #6]
 801b520:	b29a      	uxth	r2, r3
 801b522:	693b      	ldr	r3, [r7, #16]
 801b524:	889b      	ldrh	r3, [r3, #4]
 801b526:	b29b      	uxth	r3, r3
 801b528:	429a      	cmp	r2, r3
 801b52a:	d902      	bls.n	801b532 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b52c:	f04f 33ff 	mov.w	r3, #4294967295
 801b530:	e0de      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b534:	68ba      	ldr	r2, [r7, #8]
 801b536:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b53a:	88db      	ldrh	r3, [r3, #6]
 801b53c:	b29a      	uxth	r2, r3
 801b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b540:	889b      	ldrh	r3, [r3, #4]
 801b542:	b29b      	uxth	r3, r3
 801b544:	429a      	cmp	r2, r3
 801b546:	d03d      	beq.n	801b5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b548:	2300      	movs	r3, #0
 801b54a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b54c:	e03a      	b.n	801b5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b550:	88db      	ldrh	r3, [r3, #6]
 801b552:	b29a      	uxth	r2, r3
 801b554:	693b      	ldr	r3, [r7, #16]
 801b556:	889b      	ldrh	r3, [r3, #4]
 801b558:	b29b      	uxth	r3, r3
 801b55a:	429a      	cmp	r2, r3
 801b55c:	d902      	bls.n	801b564 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b55e:	f04f 33ff 	mov.w	r3, #4294967295
 801b562:	e0c5      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	68ba      	ldr	r2, [r7, #8]
 801b568:	605a      	str	r2, [r3, #4]
      break;
 801b56a:	e02b      	b.n	801b5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b56e:	889b      	ldrh	r3, [r3, #4]
 801b570:	b29a      	uxth	r2, r3
 801b572:	693b      	ldr	r3, [r7, #16]
 801b574:	889b      	ldrh	r3, [r3, #4]
 801b576:	b29b      	uxth	r3, r3
 801b578:	429a      	cmp	r2, r3
 801b57a:	d102      	bne.n	801b582 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b57c:	f04f 33ff 	mov.w	r3, #4294967295
 801b580:	e0b6      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b584:	889b      	ldrh	r3, [r3, #4]
 801b586:	b29a      	uxth	r2, r3
 801b588:	693b      	ldr	r3, [r7, #16]
 801b58a:	88db      	ldrh	r3, [r3, #6]
 801b58c:	b29b      	uxth	r3, r3
 801b58e:	429a      	cmp	r2, r3
 801b590:	d202      	bcs.n	801b598 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b592:	f04f 33ff 	mov.w	r3, #4294967295
 801b596:	e0ab      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d009      	beq.n	801b5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5a0:	88db      	ldrh	r3, [r3, #6]
 801b5a2:	b29a      	uxth	r2, r3
 801b5a4:	693b      	ldr	r3, [r7, #16]
 801b5a6:	889b      	ldrh	r3, [r3, #4]
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d001      	beq.n	801b5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b5b2:	693b      	ldr	r3, [r7, #16]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b5b8:	693b      	ldr	r3, [r7, #16]
 801b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d193      	bne.n	801b4ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b5c2:	e000      	b.n	801b5c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b5c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d12d      	bne.n	801b628 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d01c      	beq.n	801b60c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5d4:	88db      	ldrh	r3, [r3, #6]
 801b5d6:	b29a      	uxth	r2, r3
 801b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5da:	889b      	ldrh	r3, [r3, #4]
 801b5dc:	b29b      	uxth	r3, r3
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	d906      	bls.n	801b5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b5e2:	4b45      	ldr	r3, [pc, #276]	; (801b6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b5e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b5e8:	4944      	ldr	r1, [pc, #272]	; (801b6fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b5ea:	4845      	ldr	r0, [pc, #276]	; (801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b5ec:	f001 fd6e 	bl	801d0cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5f2:	68ba      	ldr	r2, [r7, #8]
 801b5f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5f8:	88db      	ldrh	r3, [r3, #6]
 801b5fa:	b29a      	uxth	r2, r3
 801b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5fe:	889b      	ldrh	r3, [r3, #4]
 801b600:	b29b      	uxth	r3, r3
 801b602:	429a      	cmp	r2, r3
 801b604:	d010      	beq.n	801b628 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b606:	2300      	movs	r3, #0
 801b608:	623b      	str	r3, [r7, #32]
 801b60a:	e00d      	b.n	801b628 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	685b      	ldr	r3, [r3, #4]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d006      	beq.n	801b622 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b614:	4b38      	ldr	r3, [pc, #224]	; (801b6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b616:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b61a:	493a      	ldr	r1, [pc, #232]	; (801b704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b61c:	4838      	ldr	r0, [pc, #224]	; (801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b61e:	f001 fd55 	bl	801d0cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	68ba      	ldr	r2, [r7, #8]
 801b626:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d105      	bne.n	801b63a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	7f9b      	ldrb	r3, [r3, #30]
 801b632:	f003 0301 	and.w	r3, r3, #1
 801b636:	2b00      	cmp	r3, #0
 801b638:	d059      	beq.n	801b6ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b63a:	6a3b      	ldr	r3, [r7, #32]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d04f      	beq.n	801b6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	685b      	ldr	r3, [r3, #4]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d006      	beq.n	801b656 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	685b      	ldr	r3, [r3, #4]
 801b64c:	685b      	ldr	r3, [r3, #4]
 801b64e:	889b      	ldrh	r3, [r3, #4]
 801b650:	b29b      	uxth	r3, r3
 801b652:	2b00      	cmp	r3, #0
 801b654:	d002      	beq.n	801b65c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b656:	2300      	movs	r3, #0
 801b658:	623b      	str	r3, [r7, #32]
 801b65a:	e041      	b.n	801b6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b65e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b666:	e012      	b.n	801b68e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b66a:	685b      	ldr	r3, [r3, #4]
 801b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b670:	88db      	ldrh	r3, [r3, #6]
 801b672:	b29a      	uxth	r2, r3
 801b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b676:	889b      	ldrh	r3, [r3, #4]
 801b678:	b29b      	uxth	r3, r3
 801b67a:	429a      	cmp	r2, r3
 801b67c:	d002      	beq.n	801b684 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b67e:	2300      	movs	r3, #0
 801b680:	623b      	str	r3, [r7, #32]
            break;
 801b682:	e007      	b.n	801b694 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b686:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b690:	2b00      	cmp	r3, #0
 801b692:	d1e9      	bne.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b694:	6a3b      	ldr	r3, [r7, #32]
 801b696:	2b00      	cmp	r3, #0
 801b698:	d022      	beq.n	801b6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	685b      	ldr	r3, [r3, #4]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d106      	bne.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b6a2:	4b15      	ldr	r3, [pc, #84]	; (801b6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b6a4:	f240 12df 	movw	r2, #479	; 0x1df
 801b6a8:	4917      	ldr	r1, [pc, #92]	; (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b6aa:	4815      	ldr	r0, [pc, #84]	; (801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6ac:	f001 fd0e 	bl	801d0cc <iprintf>
          LWIP_ASSERT("sanity check",
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	685b      	ldr	r3, [r3, #4]
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	d106      	bne.n	801b6ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b6bc:	4b0e      	ldr	r3, [pc, #56]	; (801b6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b6be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b6c2:	4911      	ldr	r1, [pc, #68]	; (801b708 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b6c4:	480e      	ldr	r0, [pc, #56]	; (801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6c6:	f001 fd01 	bl	801d0cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d006      	beq.n	801b6e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b6d2:	4b09      	ldr	r3, [pc, #36]	; (801b6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b6d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801b6d8:	490c      	ldr	r1, [pc, #48]	; (801b70c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b6da:	4809      	ldr	r0, [pc, #36]	; (801b700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b6dc:	f001 fcf6 	bl	801d0cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b6e0:	6a3b      	ldr	r3, [r7, #32]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	bf14      	ite	ne
 801b6e6:	2301      	movne	r3, #1
 801b6e8:	2300      	moveq	r3, #0
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	e000      	b.n	801b6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b6ee:	2300      	movs	r3, #0
}
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	3730      	adds	r7, #48	; 0x30
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	bd80      	pop	{r7, pc}
 801b6f8:	08022890 	.word	0x08022890
 801b6fc:	08022974 	.word	0x08022974
 801b700:	080228d8 	.word	0x080228d8
 801b704:	08022994 	.word	0x08022994
 801b708:	080229cc 	.word	0x080229cc
 801b70c:	080229dc 	.word	0x080229dc

0801b710 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b710:	b580      	push	{r7, lr}
 801b712:	b08e      	sub	sp, #56	; 0x38
 801b714:	af00      	add	r7, sp, #0
 801b716:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	685b      	ldr	r3, [r3, #4]
 801b71c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b720:	781b      	ldrb	r3, [r3, #0]
 801b722:	f003 030f 	and.w	r3, r3, #15
 801b726:	b2db      	uxtb	r3, r3
 801b728:	009b      	lsls	r3, r3, #2
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	2b14      	cmp	r3, #20
 801b72e:	f040 8171 	bne.w	801ba14 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b734:	88db      	ldrh	r3, [r3, #6]
 801b736:	b29b      	uxth	r3, r3
 801b738:	4618      	mov	r0, r3
 801b73a:	f7f5 fda7 	bl	801128c <lwip_htons>
 801b73e:	4603      	mov	r3, r0
 801b740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b744:	b29b      	uxth	r3, r3
 801b746:	00db      	lsls	r3, r3, #3
 801b748:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b74c:	885b      	ldrh	r3, [r3, #2]
 801b74e:	b29b      	uxth	r3, r3
 801b750:	4618      	mov	r0, r3
 801b752:	f7f5 fd9b 	bl	801128c <lwip_htons>
 801b756:	4603      	mov	r3, r0
 801b758:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b75c:	781b      	ldrb	r3, [r3, #0]
 801b75e:	f003 030f 	and.w	r3, r3, #15
 801b762:	b2db      	uxtb	r3, r3
 801b764:	009b      	lsls	r3, r3, #2
 801b766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801b76a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b76e:	b29b      	uxth	r3, r3
 801b770:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b772:	429a      	cmp	r2, r3
 801b774:	f0c0 8150 	bcc.w	801ba18 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b77c:	b29b      	uxth	r3, r3
 801b77e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b780:	1ad3      	subs	r3, r2, r3
 801b782:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b784:	6878      	ldr	r0, [r7, #4]
 801b786:	f7f7 fa01 	bl	8012b8c <pbuf_clen>
 801b78a:	4603      	mov	r3, r0
 801b78c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b78e:	4b8c      	ldr	r3, [pc, #560]	; (801b9c0 <ip4_reass+0x2b0>)
 801b790:	881b      	ldrh	r3, [r3, #0]
 801b792:	461a      	mov	r2, r3
 801b794:	8c3b      	ldrh	r3, [r7, #32]
 801b796:	4413      	add	r3, r2
 801b798:	2b0a      	cmp	r3, #10
 801b79a:	dd10      	ble.n	801b7be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b79c:	8c3b      	ldrh	r3, [r7, #32]
 801b79e:	4619      	mov	r1, r3
 801b7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b7a2:	f7ff fd81 	bl	801b2a8 <ip_reass_remove_oldest_datagram>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	f000 8137 	beq.w	801ba1c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b7ae:	4b84      	ldr	r3, [pc, #528]	; (801b9c0 <ip4_reass+0x2b0>)
 801b7b0:	881b      	ldrh	r3, [r3, #0]
 801b7b2:	461a      	mov	r2, r3
 801b7b4:	8c3b      	ldrh	r3, [r7, #32]
 801b7b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b7b8:	2b0a      	cmp	r3, #10
 801b7ba:	f300 812f 	bgt.w	801ba1c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b7be:	4b81      	ldr	r3, [pc, #516]	; (801b9c4 <ip4_reass+0x2b4>)
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	633b      	str	r3, [r7, #48]	; 0x30
 801b7c4:	e015      	b.n	801b7f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7c8:	695a      	ldr	r2, [r3, #20]
 801b7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7cc:	68db      	ldr	r3, [r3, #12]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d10c      	bne.n	801b7ec <ip4_reass+0xdc>
 801b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7d4:	699a      	ldr	r2, [r3, #24]
 801b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7d8:	691b      	ldr	r3, [r3, #16]
 801b7da:	429a      	cmp	r2, r3
 801b7dc:	d106      	bne.n	801b7ec <ip4_reass+0xdc>
 801b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7e0:	899a      	ldrh	r2, [r3, #12]
 801b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7e4:	889b      	ldrh	r3, [r3, #4]
 801b7e6:	b29b      	uxth	r3, r3
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	d006      	beq.n	801b7fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	633b      	str	r3, [r7, #48]	; 0x30
 801b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d1e6      	bne.n	801b7c6 <ip4_reass+0xb6>
 801b7f8:	e000      	b.n	801b7fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b7fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d109      	bne.n	801b816 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b802:	8c3b      	ldrh	r3, [r7, #32]
 801b804:	4619      	mov	r1, r3
 801b806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b808:	f7ff fdb0 	bl	801b36c <ip_reass_enqueue_new_datagram>
 801b80c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b810:	2b00      	cmp	r3, #0
 801b812:	d11c      	bne.n	801b84e <ip4_reass+0x13e>
      goto nullreturn;
 801b814:	e105      	b.n	801ba22 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b818:	88db      	ldrh	r3, [r3, #6]
 801b81a:	b29b      	uxth	r3, r3
 801b81c:	4618      	mov	r0, r3
 801b81e:	f7f5 fd35 	bl	801128c <lwip_htons>
 801b822:	4603      	mov	r3, r0
 801b824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d110      	bne.n	801b84e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b82e:	89db      	ldrh	r3, [r3, #14]
 801b830:	4618      	mov	r0, r3
 801b832:	f7f5 fd2b 	bl	801128c <lwip_htons>
 801b836:	4603      	mov	r3, r0
 801b838:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d006      	beq.n	801b84e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b842:	3308      	adds	r3, #8
 801b844:	2214      	movs	r2, #20
 801b846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b848:	4618      	mov	r0, r3
 801b84a:	f001 fec0 	bl	801d5ce <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b850:	88db      	ldrh	r3, [r3, #6]
 801b852:	b29b      	uxth	r3, r3
 801b854:	f003 0320 	and.w	r3, r3, #32
 801b858:	2b00      	cmp	r3, #0
 801b85a:	bf0c      	ite	eq
 801b85c:	2301      	moveq	r3, #1
 801b85e:	2300      	movne	r3, #0
 801b860:	b2db      	uxtb	r3, r3
 801b862:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b864:	69fb      	ldr	r3, [r7, #28]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d00e      	beq.n	801b888 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b86a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b86e:	4413      	add	r3, r2
 801b870:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b872:	8b7a      	ldrh	r2, [r7, #26]
 801b874:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b876:	429a      	cmp	r2, r3
 801b878:	f0c0 80a0 	bcc.w	801b9bc <ip4_reass+0x2ac>
 801b87c:	8b7b      	ldrh	r3, [r7, #26]
 801b87e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b882:	4293      	cmp	r3, r2
 801b884:	f200 809a 	bhi.w	801b9bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b888:	69fa      	ldr	r2, [r7, #28]
 801b88a:	6879      	ldr	r1, [r7, #4]
 801b88c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b88e:	f7ff fdd5 	bl	801b43c <ip_reass_chain_frag_into_datagram_and_validate>
 801b892:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b89a:	f000 809b 	beq.w	801b9d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b89e:	4b48      	ldr	r3, [pc, #288]	; (801b9c0 <ip4_reass+0x2b0>)
 801b8a0:	881a      	ldrh	r2, [r3, #0]
 801b8a2:	8c3b      	ldrh	r3, [r7, #32]
 801b8a4:	4413      	add	r3, r2
 801b8a6:	b29a      	uxth	r2, r3
 801b8a8:	4b45      	ldr	r3, [pc, #276]	; (801b9c0 <ip4_reass+0x2b0>)
 801b8aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b8ac:	69fb      	ldr	r3, [r7, #28]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d00d      	beq.n	801b8ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b8b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8b6:	4413      	add	r3, r2
 801b8b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8bc:	8a7a      	ldrh	r2, [r7, #18]
 801b8be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8c2:	7f9b      	ldrb	r3, [r3, #30]
 801b8c4:	f043 0301 	orr.w	r3, r3, #1
 801b8c8:	b2da      	uxtb	r2, r3
 801b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b8ce:	697b      	ldr	r3, [r7, #20]
 801b8d0:	2b01      	cmp	r3, #1
 801b8d2:	d171      	bne.n	801b9b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8d6:	8b9b      	ldrh	r3, [r3, #28]
 801b8d8:	3314      	adds	r3, #20
 801b8da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	685b      	ldr	r3, [r3, #4]
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8e8:	685b      	ldr	r3, [r3, #4]
 801b8ea:	685b      	ldr	r3, [r3, #4]
 801b8ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8f0:	3308      	adds	r3, #8
 801b8f2:	2214      	movs	r2, #20
 801b8f4:	4619      	mov	r1, r3
 801b8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b8f8:	f001 fe69 	bl	801d5ce <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b8fc:	8a3b      	ldrh	r3, [r7, #16]
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7f5 fcc4 	bl	801128c <lwip_htons>
 801b904:	4603      	mov	r3, r0
 801b906:	461a      	mov	r2, r3
 801b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b90a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b90e:	2200      	movs	r2, #0
 801b910:	719a      	strb	r2, [r3, #6]
 801b912:	2200      	movs	r2, #0
 801b914:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b918:	2200      	movs	r2, #0
 801b91a:	729a      	strb	r2, [r3, #10]
 801b91c:	2200      	movs	r2, #0
 801b91e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b926:	e00d      	b.n	801b944 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b92a:	685b      	ldr	r3, [r3, #4]
 801b92c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b92e:	2114      	movs	r1, #20
 801b930:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b932:	f7f7 f817 	bl	8012964 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b936:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b938:	6878      	ldr	r0, [r7, #4]
 801b93a:	f7f7 f967 	bl	8012c0c <pbuf_cat>
      r = iprh->next_pbuf;
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b946:	2b00      	cmp	r3, #0
 801b948:	d1ee      	bne.n	801b928 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b94a:	4b1e      	ldr	r3, [pc, #120]	; (801b9c4 <ip4_reass+0x2b4>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b950:	429a      	cmp	r2, r3
 801b952:	d102      	bne.n	801b95a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b954:	2300      	movs	r3, #0
 801b956:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b958:	e010      	b.n	801b97c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b95a:	4b1a      	ldr	r3, [pc, #104]	; (801b9c4 <ip4_reass+0x2b4>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b960:	e007      	b.n	801b972 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b968:	429a      	cmp	r2, r3
 801b96a:	d006      	beq.n	801b97a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b974:	2b00      	cmp	r3, #0
 801b976:	d1f4      	bne.n	801b962 <ip4_reass+0x252>
 801b978:	e000      	b.n	801b97c <ip4_reass+0x26c>
          break;
 801b97a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b97c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b97e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b980:	f7ff fd2e 	bl	801b3e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b984:	6878      	ldr	r0, [r7, #4]
 801b986:	f7f7 f901 	bl	8012b8c <pbuf_clen>
 801b98a:	4603      	mov	r3, r0
 801b98c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b98e:	4b0c      	ldr	r3, [pc, #48]	; (801b9c0 <ip4_reass+0x2b0>)
 801b990:	881b      	ldrh	r3, [r3, #0]
 801b992:	8c3a      	ldrh	r2, [r7, #32]
 801b994:	429a      	cmp	r2, r3
 801b996:	d906      	bls.n	801b9a6 <ip4_reass+0x296>
 801b998:	4b0b      	ldr	r3, [pc, #44]	; (801b9c8 <ip4_reass+0x2b8>)
 801b99a:	f240 229b 	movw	r2, #667	; 0x29b
 801b99e:	490b      	ldr	r1, [pc, #44]	; (801b9cc <ip4_reass+0x2bc>)
 801b9a0:	480b      	ldr	r0, [pc, #44]	; (801b9d0 <ip4_reass+0x2c0>)
 801b9a2:	f001 fb93 	bl	801d0cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b9a6:	4b06      	ldr	r3, [pc, #24]	; (801b9c0 <ip4_reass+0x2b0>)
 801b9a8:	881a      	ldrh	r2, [r3, #0]
 801b9aa:	8c3b      	ldrh	r3, [r7, #32]
 801b9ac:	1ad3      	subs	r3, r2, r3
 801b9ae:	b29a      	uxth	r2, r3
 801b9b0:	4b03      	ldr	r3, [pc, #12]	; (801b9c0 <ip4_reass+0x2b0>)
 801b9b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	e038      	b.n	801ba2a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	e036      	b.n	801ba2a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b9bc:	bf00      	nop
 801b9be:	e00a      	b.n	801b9d6 <ip4_reass+0x2c6>
 801b9c0:	2001353c 	.word	0x2001353c
 801b9c4:	20013538 	.word	0x20013538
 801b9c8:	08022890 	.word	0x08022890
 801b9cc:	08022a00 	.word	0x08022a00
 801b9d0:	080228d8 	.word	0x080228d8
    goto nullreturn_ipr;
 801b9d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d106      	bne.n	801b9ea <ip4_reass+0x2da>
 801b9dc:	4b15      	ldr	r3, [pc, #84]	; (801ba34 <ip4_reass+0x324>)
 801b9de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b9e2:	4915      	ldr	r1, [pc, #84]	; (801ba38 <ip4_reass+0x328>)
 801b9e4:	4815      	ldr	r0, [pc, #84]	; (801ba3c <ip4_reass+0x32c>)
 801b9e6:	f001 fb71 	bl	801d0cc <iprintf>
  if (ipr->p == NULL) {
 801b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9ec:	685b      	ldr	r3, [r3, #4]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d116      	bne.n	801ba20 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b9f2:	4b13      	ldr	r3, [pc, #76]	; (801ba40 <ip4_reass+0x330>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9f8:	429a      	cmp	r2, r3
 801b9fa:	d006      	beq.n	801ba0a <ip4_reass+0x2fa>
 801b9fc:	4b0d      	ldr	r3, [pc, #52]	; (801ba34 <ip4_reass+0x324>)
 801b9fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ba02:	4910      	ldr	r1, [pc, #64]	; (801ba44 <ip4_reass+0x334>)
 801ba04:	480d      	ldr	r0, [pc, #52]	; (801ba3c <ip4_reass+0x32c>)
 801ba06:	f001 fb61 	bl	801d0cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ba0a:	2100      	movs	r1, #0
 801ba0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ba0e:	f7ff fce7 	bl	801b3e0 <ip_reass_dequeue_datagram>
 801ba12:	e006      	b.n	801ba22 <ip4_reass+0x312>
    goto nullreturn;
 801ba14:	bf00      	nop
 801ba16:	e004      	b.n	801ba22 <ip4_reass+0x312>
    goto nullreturn;
 801ba18:	bf00      	nop
 801ba1a:	e002      	b.n	801ba22 <ip4_reass+0x312>
      goto nullreturn;
 801ba1c:	bf00      	nop
 801ba1e:	e000      	b.n	801ba22 <ip4_reass+0x312>
  }

nullreturn:
 801ba20:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ba22:	6878      	ldr	r0, [r7, #4]
 801ba24:	f7f7 f824 	bl	8012a70 <pbuf_free>
  return NULL;
 801ba28:	2300      	movs	r3, #0
}
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	3738      	adds	r7, #56	; 0x38
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bd80      	pop	{r7, pc}
 801ba32:	bf00      	nop
 801ba34:	08022890 	.word	0x08022890
 801ba38:	08022a1c 	.word	0x08022a1c
 801ba3c:	080228d8 	.word	0x080228d8
 801ba40:	20013538 	.word	0x20013538
 801ba44:	08022a28 	.word	0x08022a28

0801ba48 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ba4c:	2005      	movs	r0, #5
 801ba4e:	f7f6 f8f5 	bl	8011c3c <memp_malloc>
 801ba52:	4603      	mov	r3, r0
}
 801ba54:	4618      	mov	r0, r3
 801ba56:	bd80      	pop	{r7, pc}

0801ba58 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b082      	sub	sp, #8
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d106      	bne.n	801ba74 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ba66:	4b07      	ldr	r3, [pc, #28]	; (801ba84 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ba68:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ba6c:	4906      	ldr	r1, [pc, #24]	; (801ba88 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ba6e:	4807      	ldr	r0, [pc, #28]	; (801ba8c <ip_frag_free_pbuf_custom_ref+0x34>)
 801ba70:	f001 fb2c 	bl	801d0cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ba74:	6879      	ldr	r1, [r7, #4]
 801ba76:	2005      	movs	r0, #5
 801ba78:	f7f6 f956 	bl	8011d28 <memp_free>
}
 801ba7c:	bf00      	nop
 801ba7e:	3708      	adds	r7, #8
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}
 801ba84:	08022890 	.word	0x08022890
 801ba88:	08022a48 	.word	0x08022a48
 801ba8c:	080228d8 	.word	0x080228d8

0801ba90 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b084      	sub	sp, #16
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d106      	bne.n	801bab0 <ipfrag_free_pbuf_custom+0x20>
 801baa2:	4b11      	ldr	r3, [pc, #68]	; (801bae8 <ipfrag_free_pbuf_custom+0x58>)
 801baa4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801baa8:	4910      	ldr	r1, [pc, #64]	; (801baec <ipfrag_free_pbuf_custom+0x5c>)
 801baaa:	4811      	ldr	r0, [pc, #68]	; (801baf0 <ipfrag_free_pbuf_custom+0x60>)
 801baac:	f001 fb0e 	bl	801d0cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801bab0:	68fa      	ldr	r2, [r7, #12]
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	429a      	cmp	r2, r3
 801bab6:	d006      	beq.n	801bac6 <ipfrag_free_pbuf_custom+0x36>
 801bab8:	4b0b      	ldr	r3, [pc, #44]	; (801bae8 <ipfrag_free_pbuf_custom+0x58>)
 801baba:	f240 22cf 	movw	r2, #719	; 0x2cf
 801babe:	490d      	ldr	r1, [pc, #52]	; (801baf4 <ipfrag_free_pbuf_custom+0x64>)
 801bac0:	480b      	ldr	r0, [pc, #44]	; (801baf0 <ipfrag_free_pbuf_custom+0x60>)
 801bac2:	f001 fb03 	bl	801d0cc <iprintf>
  if (pcr->original != NULL) {
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	695b      	ldr	r3, [r3, #20]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d004      	beq.n	801bad8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	695b      	ldr	r3, [r3, #20]
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7f6 ffcc 	bl	8012a70 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801bad8:	68f8      	ldr	r0, [r7, #12]
 801bada:	f7ff ffbd 	bl	801ba58 <ip_frag_free_pbuf_custom_ref>
}
 801bade:	bf00      	nop
 801bae0:	3710      	adds	r7, #16
 801bae2:	46bd      	mov	sp, r7
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	08022890 	.word	0x08022890
 801baec:	08022a54 	.word	0x08022a54
 801baf0:	080228d8 	.word	0x080228d8
 801baf4:	08022a60 	.word	0x08022a60

0801baf8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b094      	sub	sp, #80	; 0x50
 801bafc:	af02      	add	r7, sp, #8
 801bafe:	60f8      	str	r0, [r7, #12]
 801bb00:	60b9      	str	r1, [r7, #8]
 801bb02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bb04:	2300      	movs	r3, #0
 801bb06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801bb0a:	68bb      	ldr	r3, [r7, #8]
 801bb0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801bb0e:	3b14      	subs	r3, #20
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	da00      	bge.n	801bb16 <ip4_frag+0x1e>
 801bb14:	3307      	adds	r3, #7
 801bb16:	10db      	asrs	r3, r3, #3
 801bb18:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801bb1a:	2314      	movs	r3, #20
 801bb1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	685b      	ldr	r3, [r3, #4]
 801bb22:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801bb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb26:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb2a:	781b      	ldrb	r3, [r3, #0]
 801bb2c:	f003 030f 	and.w	r3, r3, #15
 801bb30:	b2db      	uxtb	r3, r3
 801bb32:	009b      	lsls	r3, r3, #2
 801bb34:	b2db      	uxtb	r3, r3
 801bb36:	2b14      	cmp	r3, #20
 801bb38:	d002      	beq.n	801bb40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bb3a:	f06f 0305 	mvn.w	r3, #5
 801bb3e:	e110      	b.n	801bd62 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	895b      	ldrh	r3, [r3, #10]
 801bb44:	2b13      	cmp	r3, #19
 801bb46:	d809      	bhi.n	801bb5c <ip4_frag+0x64>
 801bb48:	4b88      	ldr	r3, [pc, #544]	; (801bd6c <ip4_frag+0x274>)
 801bb4a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801bb4e:	4988      	ldr	r1, [pc, #544]	; (801bd70 <ip4_frag+0x278>)
 801bb50:	4888      	ldr	r0, [pc, #544]	; (801bd74 <ip4_frag+0x27c>)
 801bb52:	f001 fabb 	bl	801d0cc <iprintf>
 801bb56:	f06f 0305 	mvn.w	r3, #5
 801bb5a:	e102      	b.n	801bd62 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb5e:	88db      	ldrh	r3, [r3, #6]
 801bb60:	b29b      	uxth	r3, r3
 801bb62:	4618      	mov	r0, r3
 801bb64:	f7f5 fb92 	bl	801128c <lwip_htons>
 801bb68:	4603      	mov	r3, r0
 801bb6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801bb6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bb76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	891b      	ldrh	r3, [r3, #8]
 801bb82:	3b14      	subs	r3, #20
 801bb84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801bb88:	e0e1      	b.n	801bd4e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bb8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bb8c:	00db      	lsls	r3, r3, #3
 801bb8e:	b29b      	uxth	r3, r3
 801bb90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb94:	4293      	cmp	r3, r2
 801bb96:	bf28      	it	cs
 801bb98:	4613      	movcs	r3, r2
 801bb9a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bb9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bba0:	2114      	movs	r1, #20
 801bba2:	200e      	movs	r0, #14
 801bba4:	f7f6 fc80 	bl	80124a8 <pbuf_alloc>
 801bba8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801bbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	f000 80d5 	beq.w	801bd5c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbb4:	895b      	ldrh	r3, [r3, #10]
 801bbb6:	2b13      	cmp	r3, #19
 801bbb8:	d806      	bhi.n	801bbc8 <ip4_frag+0xd0>
 801bbba:	4b6c      	ldr	r3, [pc, #432]	; (801bd6c <ip4_frag+0x274>)
 801bbbc:	f44f 7249 	mov.w	r2, #804	; 0x324
 801bbc0:	496d      	ldr	r1, [pc, #436]	; (801bd78 <ip4_frag+0x280>)
 801bbc2:	486c      	ldr	r0, [pc, #432]	; (801bd74 <ip4_frag+0x27c>)
 801bbc4:	f001 fa82 	bl	801d0cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbca:	685b      	ldr	r3, [r3, #4]
 801bbcc:	2214      	movs	r2, #20
 801bbce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	f001 fcfc 	bl	801d5ce <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bbd8:	685b      	ldr	r3, [r3, #4]
 801bbda:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801bbdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bbde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801bbe2:	e064      	b.n	801bcae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	895a      	ldrh	r2, [r3, #10]
 801bbe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bbea:	1ad3      	subs	r3, r2, r3
 801bbec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	895b      	ldrh	r3, [r3, #10]
 801bbf2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bbf4:	429a      	cmp	r2, r3
 801bbf6:	d906      	bls.n	801bc06 <ip4_frag+0x10e>
 801bbf8:	4b5c      	ldr	r3, [pc, #368]	; (801bd6c <ip4_frag+0x274>)
 801bbfa:	f240 322d 	movw	r2, #813	; 0x32d
 801bbfe:	495f      	ldr	r1, [pc, #380]	; (801bd7c <ip4_frag+0x284>)
 801bc00:	485c      	ldr	r0, [pc, #368]	; (801bd74 <ip4_frag+0x27c>)
 801bc02:	f001 fa63 	bl	801d0cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bc06:	8bfa      	ldrh	r2, [r7, #30]
 801bc08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bc0c:	4293      	cmp	r3, r2
 801bc0e:	bf28      	it	cs
 801bc10:	4613      	movcs	r3, r2
 801bc12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bc16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d105      	bne.n	801bc2a <ip4_frag+0x132>
        poff = 0;
 801bc1e:	2300      	movs	r3, #0
 801bc20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	60fb      	str	r3, [r7, #12]
        continue;
 801bc28:	e041      	b.n	801bcae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bc2a:	f7ff ff0d 	bl	801ba48 <ip_frag_alloc_pbuf_custom_ref>
 801bc2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bc30:	69bb      	ldr	r3, [r7, #24]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d103      	bne.n	801bc3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bc36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc38:	f7f6 ff1a 	bl	8012a70 <pbuf_free>
        goto memerr;
 801bc3c:	e08f      	b.n	801bd5e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bc3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bc44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bc46:	4413      	add	r3, r2
 801bc48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801bc4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801bc50:	9201      	str	r2, [sp, #4]
 801bc52:	9300      	str	r3, [sp, #0]
 801bc54:	4603      	mov	r3, r0
 801bc56:	2241      	movs	r2, #65	; 0x41
 801bc58:	2000      	movs	r0, #0
 801bc5a:	f7f6 fd4f 	bl	80126fc <pbuf_alloced_custom>
 801bc5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d106      	bne.n	801bc74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bc66:	69b8      	ldr	r0, [r7, #24]
 801bc68:	f7ff fef6 	bl	801ba58 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bc6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc6e:	f7f6 feff 	bl	8012a70 <pbuf_free>
        goto memerr;
 801bc72:	e074      	b.n	801bd5e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bc74:	68f8      	ldr	r0, [r7, #12]
 801bc76:	f7f6 ffa1 	bl	8012bbc <pbuf_ref>
      pcr->original = p;
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	68fa      	ldr	r2, [r7, #12]
 801bc7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bc80:	69bb      	ldr	r3, [r7, #24]
 801bc82:	4a3f      	ldr	r2, [pc, #252]	; (801bd80 <ip4_frag+0x288>)
 801bc84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bc86:	6979      	ldr	r1, [r7, #20]
 801bc88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc8a:	f7f6 ffbf 	bl	8012c0c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bc8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801bc92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc96:	1ad3      	subs	r3, r2, r3
 801bc98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801bc9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d004      	beq.n	801bcae <ip4_frag+0x1b6>
        poff = 0;
 801bca4:	2300      	movs	r3, #0
 801bca6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bcae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d196      	bne.n	801bbe4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bcb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bcb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bcbc:	4413      	add	r3, r2
 801bcbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bcc0:	68bb      	ldr	r3, [r7, #8]
 801bcc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801bcc4:	f1a3 0213 	sub.w	r2, r3, #19
 801bcc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bccc:	429a      	cmp	r2, r3
 801bcce:	bfcc      	ite	gt
 801bcd0:	2301      	movgt	r3, #1
 801bcd2:	2300      	movle	r3, #0
 801bcd4:	b2db      	uxtb	r3, r3
 801bcd6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bcd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bcdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bce0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801bce2:	6a3b      	ldr	r3, [r7, #32]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d002      	beq.n	801bcee <ip4_frag+0x1f6>
 801bce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d003      	beq.n	801bcf6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bcee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bcf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bcf4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bcf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7f5 fac7 	bl	801128c <lwip_htons>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	461a      	mov	r2, r3
 801bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bd06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bd08:	3314      	adds	r3, #20
 801bd0a:	b29b      	uxth	r3, r3
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	f7f5 fabd 	bl	801128c <lwip_htons>
 801bd12:	4603      	mov	r3, r0
 801bd14:	461a      	mov	r2, r3
 801bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	729a      	strb	r2, [r3, #10]
 801bd20:	2200      	movs	r2, #0
 801bd22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bd24:	68bb      	ldr	r3, [r7, #8]
 801bd26:	695b      	ldr	r3, [r3, #20]
 801bd28:	687a      	ldr	r2, [r7, #4]
 801bd2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bd2c:	68b8      	ldr	r0, [r7, #8]
 801bd2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bd30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bd32:	f7f6 fe9d 	bl	8012a70 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bd36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bd3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bd3c:	1ad3      	subs	r3, r2, r3
 801bd3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801bd42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801bd46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bd48:	4413      	add	r3, r2
 801bd4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801bd4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	f47f af19 	bne.w	801bb8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bd58:	2300      	movs	r3, #0
 801bd5a:	e002      	b.n	801bd62 <ip4_frag+0x26a>
      goto memerr;
 801bd5c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bd5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bd62:	4618      	mov	r0, r3
 801bd64:	3748      	adds	r7, #72	; 0x48
 801bd66:	46bd      	mov	sp, r7
 801bd68:	bd80      	pop	{r7, pc}
 801bd6a:	bf00      	nop
 801bd6c:	08022890 	.word	0x08022890
 801bd70:	08022a6c 	.word	0x08022a6c
 801bd74:	080228d8 	.word	0x080228d8
 801bd78:	08022a88 	.word	0x08022a88
 801bd7c:	08022aa8 	.word	0x08022aa8
 801bd80:	0801ba91 	.word	0x0801ba91

0801bd84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bd84:	b580      	push	{r7, lr}
 801bd86:	b086      	sub	sp, #24
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
 801bd8c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bd8e:	230e      	movs	r3, #14
 801bd90:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	895b      	ldrh	r3, [r3, #10]
 801bd96:	2b0e      	cmp	r3, #14
 801bd98:	d96e      	bls.n	801be78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	7bdb      	ldrb	r3, [r3, #15]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d106      	bne.n	801bdb0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bda2:	683b      	ldr	r3, [r7, #0]
 801bda4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bda8:	3301      	adds	r3, #1
 801bdaa:	b2da      	uxtb	r2, r3
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	685b      	ldr	r3, [r3, #4]
 801bdb4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bdb6:	693b      	ldr	r3, [r7, #16]
 801bdb8:	7b1a      	ldrb	r2, [r3, #12]
 801bdba:	7b5b      	ldrb	r3, [r3, #13]
 801bdbc:	021b      	lsls	r3, r3, #8
 801bdbe:	4313      	orrs	r3, r2
 801bdc0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bdc2:	693b      	ldr	r3, [r7, #16]
 801bdc4:	781b      	ldrb	r3, [r3, #0]
 801bdc6:	f003 0301 	and.w	r3, r3, #1
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d023      	beq.n	801be16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bdce:	693b      	ldr	r3, [r7, #16]
 801bdd0:	781b      	ldrb	r3, [r3, #0]
 801bdd2:	2b01      	cmp	r3, #1
 801bdd4:	d10f      	bne.n	801bdf6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bdd6:	693b      	ldr	r3, [r7, #16]
 801bdd8:	785b      	ldrb	r3, [r3, #1]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d11b      	bne.n	801be16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bdde:	693b      	ldr	r3, [r7, #16]
 801bde0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bde2:	2b5e      	cmp	r3, #94	; 0x5e
 801bde4:	d117      	bne.n	801be16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	7b5b      	ldrb	r3, [r3, #13]
 801bdea:	f043 0310 	orr.w	r3, r3, #16
 801bdee:	b2da      	uxtb	r2, r3
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	735a      	strb	r2, [r3, #13]
 801bdf4:	e00f      	b.n	801be16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801bdf6:	693b      	ldr	r3, [r7, #16]
 801bdf8:	2206      	movs	r2, #6
 801bdfa:	4928      	ldr	r1, [pc, #160]	; (801be9c <ethernet_input+0x118>)
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	f001 facb 	bl	801d398 <memcmp>
 801be02:	4603      	mov	r3, r0
 801be04:	2b00      	cmp	r3, #0
 801be06:	d106      	bne.n	801be16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	7b5b      	ldrb	r3, [r3, #13]
 801be0c:	f043 0308 	orr.w	r3, r3, #8
 801be10:	b2da      	uxtb	r2, r3
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801be16:	89fb      	ldrh	r3, [r7, #14]
 801be18:	2b08      	cmp	r3, #8
 801be1a:	d003      	beq.n	801be24 <ethernet_input+0xa0>
 801be1c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801be20:	d014      	beq.n	801be4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801be22:	e032      	b.n	801be8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801be24:	683b      	ldr	r3, [r7, #0]
 801be26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801be2a:	f003 0308 	and.w	r3, r3, #8
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d024      	beq.n	801be7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801be32:	8afb      	ldrh	r3, [r7, #22]
 801be34:	4619      	mov	r1, r3
 801be36:	6878      	ldr	r0, [r7, #4]
 801be38:	f7f6 fd94 	bl	8012964 <pbuf_remove_header>
 801be3c:	4603      	mov	r3, r0
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d11e      	bne.n	801be80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801be42:	6839      	ldr	r1, [r7, #0]
 801be44:	6878      	ldr	r0, [r7, #4]
 801be46:	f7fe ff21 	bl	801ac8c <ip4_input>
      break;
 801be4a:	e013      	b.n	801be74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801be4c:	683b      	ldr	r3, [r7, #0]
 801be4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801be52:	f003 0308 	and.w	r3, r3, #8
 801be56:	2b00      	cmp	r3, #0
 801be58:	d014      	beq.n	801be84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801be5a:	8afb      	ldrh	r3, [r7, #22]
 801be5c:	4619      	mov	r1, r3
 801be5e:	6878      	ldr	r0, [r7, #4]
 801be60:	f7f6 fd80 	bl	8012964 <pbuf_remove_header>
 801be64:	4603      	mov	r3, r0
 801be66:	2b00      	cmp	r3, #0
 801be68:	d10e      	bne.n	801be88 <ethernet_input+0x104>
        etharp_input(p, netif);
 801be6a:	6839      	ldr	r1, [r7, #0]
 801be6c:	6878      	ldr	r0, [r7, #4]
 801be6e:	f7fe f8c1 	bl	8019ff4 <etharp_input>
      break;
 801be72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801be74:	2300      	movs	r3, #0
 801be76:	e00c      	b.n	801be92 <ethernet_input+0x10e>
    goto free_and_return;
 801be78:	bf00      	nop
 801be7a:	e006      	b.n	801be8a <ethernet_input+0x106>
        goto free_and_return;
 801be7c:	bf00      	nop
 801be7e:	e004      	b.n	801be8a <ethernet_input+0x106>
        goto free_and_return;
 801be80:	bf00      	nop
 801be82:	e002      	b.n	801be8a <ethernet_input+0x106>
        goto free_and_return;
 801be84:	bf00      	nop
 801be86:	e000      	b.n	801be8a <ethernet_input+0x106>
        goto free_and_return;
 801be88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801be8a:	6878      	ldr	r0, [r7, #4]
 801be8c:	f7f6 fdf0 	bl	8012a70 <pbuf_free>
  return ERR_OK;
 801be90:	2300      	movs	r3, #0
}
 801be92:	4618      	mov	r0, r3
 801be94:	3718      	adds	r7, #24
 801be96:	46bd      	mov	sp, r7
 801be98:	bd80      	pop	{r7, pc}
 801be9a:	bf00      	nop
 801be9c:	080245c4 	.word	0x080245c4

0801bea0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801bea0:	b580      	push	{r7, lr}
 801bea2:	b086      	sub	sp, #24
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	60f8      	str	r0, [r7, #12]
 801bea8:	60b9      	str	r1, [r7, #8]
 801beaa:	607a      	str	r2, [r7, #4]
 801beac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801beae:	8c3b      	ldrh	r3, [r7, #32]
 801beb0:	4618      	mov	r0, r3
 801beb2:	f7f5 f9eb 	bl	801128c <lwip_htons>
 801beb6:	4603      	mov	r3, r0
 801beb8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801beba:	210e      	movs	r1, #14
 801bebc:	68b8      	ldr	r0, [r7, #8]
 801bebe:	f7f6 fd41 	bl	8012944 <pbuf_add_header>
 801bec2:	4603      	mov	r3, r0
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d125      	bne.n	801bf14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801bec8:	68bb      	ldr	r3, [r7, #8]
 801beca:	685b      	ldr	r3, [r3, #4]
 801becc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801bece:	693b      	ldr	r3, [r7, #16]
 801bed0:	8afa      	ldrh	r2, [r7, #22]
 801bed2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801bed4:	693b      	ldr	r3, [r7, #16]
 801bed6:	2206      	movs	r2, #6
 801bed8:	6839      	ldr	r1, [r7, #0]
 801beda:	4618      	mov	r0, r3
 801bedc:	f001 fb77 	bl	801d5ce <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801bee0:	693b      	ldr	r3, [r7, #16]
 801bee2:	3306      	adds	r3, #6
 801bee4:	2206      	movs	r2, #6
 801bee6:	6879      	ldr	r1, [r7, #4]
 801bee8:	4618      	mov	r0, r3
 801beea:	f001 fb70 	bl	801d5ce <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801beee:	68fb      	ldr	r3, [r7, #12]
 801bef0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bef4:	2b06      	cmp	r3, #6
 801bef6:	d006      	beq.n	801bf06 <ethernet_output+0x66>
 801bef8:	4b0a      	ldr	r3, [pc, #40]	; (801bf24 <ethernet_output+0x84>)
 801befa:	f44f 7299 	mov.w	r2, #306	; 0x132
 801befe:	490a      	ldr	r1, [pc, #40]	; (801bf28 <ethernet_output+0x88>)
 801bf00:	480a      	ldr	r0, [pc, #40]	; (801bf2c <ethernet_output+0x8c>)
 801bf02:	f001 f8e3 	bl	801d0cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	699b      	ldr	r3, [r3, #24]
 801bf0a:	68b9      	ldr	r1, [r7, #8]
 801bf0c:	68f8      	ldr	r0, [r7, #12]
 801bf0e:	4798      	blx	r3
 801bf10:	4603      	mov	r3, r0
 801bf12:	e002      	b.n	801bf1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801bf14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801bf16:	f06f 0301 	mvn.w	r3, #1
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	3718      	adds	r7, #24
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	bd80      	pop	{r7, pc}
 801bf22:	bf00      	nop
 801bf24:	08022ab8 	.word	0x08022ab8
 801bf28:	08022af0 	.word	0x08022af0
 801bf2c:	08022b24 	.word	0x08022b24

0801bf30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b086      	sub	sp, #24
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	6078      	str	r0, [r7, #4]
 801bf38:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801bf3a:	683b      	ldr	r3, [r7, #0]
 801bf3c:	60bb      	str	r3, [r7, #8]
 801bf3e:	2304      	movs	r3, #4
 801bf40:	60fb      	str	r3, [r7, #12]
 801bf42:	2300      	movs	r3, #0
 801bf44:	613b      	str	r3, [r7, #16]
 801bf46:	2300      	movs	r3, #0
 801bf48:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801bf4a:	f107 0308 	add.w	r3, r7, #8
 801bf4e:	2100      	movs	r1, #0
 801bf50:	4618      	mov	r0, r3
 801bf52:	f7f0 f856 	bl	800c002 <osMessageCreate>
 801bf56:	4602      	mov	r2, r0
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d102      	bne.n	801bf6a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801bf64:	f04f 33ff 	mov.w	r3, #4294967295
 801bf68:	e000      	b.n	801bf6c <sys_mbox_new+0x3c>

  return ERR_OK;
 801bf6a:	2300      	movs	r3, #0
}
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	3718      	adds	r7, #24
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}

0801bf74 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b082      	sub	sp, #8
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	4618      	mov	r0, r3
 801bf82:	f7f0 f91b 	bl	800c1bc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	f7f0 f92c 	bl	800c1e8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801bf90:	bf00      	nop
 801bf92:	3708      	adds	r7, #8
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}

0801bf98 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	b084      	sub	sp, #16
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	6078      	str	r0, [r7, #4]
 801bfa0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	6839      	ldr	r1, [r7, #0]
 801bfa8:	2200      	movs	r2, #0
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f7f0 f852 	bl	800c054 <osMessagePut>
 801bfb0:	4603      	mov	r3, r0
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d102      	bne.n	801bfbc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	73fb      	strb	r3, [r7, #15]
 801bfba:	e001      	b.n	801bfc0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bfbc:	23ff      	movs	r3, #255	; 0xff
 801bfbe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801bfc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	3710      	adds	r7, #16
 801bfc8:	46bd      	mov	sp, r7
 801bfca:	bd80      	pop	{r7, pc}

0801bfcc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bfcc:	b580      	push	{r7, lr}
 801bfce:	b08c      	sub	sp, #48	; 0x30
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	61f8      	str	r0, [r7, #28]
 801bfd4:	61b9      	str	r1, [r7, #24]
 801bfd6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801bfd8:	f7ef fe3e 	bl	800bc58 <osKernelSysTick>
 801bfdc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d017      	beq.n	801c014 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801bfe4:	69fb      	ldr	r3, [r7, #28]
 801bfe6:	6819      	ldr	r1, [r3, #0]
 801bfe8:	f107 0320 	add.w	r3, r7, #32
 801bfec:	697a      	ldr	r2, [r7, #20]
 801bfee:	4618      	mov	r0, r3
 801bff0:	f7f0 f870 	bl	800c0d4 <osMessageGet>

    if(event.status == osEventMessage)
 801bff4:	6a3b      	ldr	r3, [r7, #32]
 801bff6:	2b10      	cmp	r3, #16
 801bff8:	d109      	bne.n	801c00e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bffc:	461a      	mov	r2, r3
 801bffe:	69bb      	ldr	r3, [r7, #24]
 801c000:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c002:	f7ef fe29 	bl	800bc58 <osKernelSysTick>
 801c006:	4602      	mov	r2, r0
 801c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c00a:	1ad3      	subs	r3, r2, r3
 801c00c:	e019      	b.n	801c042 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c00e:	f04f 33ff 	mov.w	r3, #4294967295
 801c012:	e016      	b.n	801c042 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c014:	69fb      	ldr	r3, [r7, #28]
 801c016:	6819      	ldr	r1, [r3, #0]
 801c018:	463b      	mov	r3, r7
 801c01a:	f04f 32ff 	mov.w	r2, #4294967295
 801c01e:	4618      	mov	r0, r3
 801c020:	f7f0 f858 	bl	800c0d4 <osMessageGet>
 801c024:	f107 0320 	add.w	r3, r7, #32
 801c028:	463a      	mov	r2, r7
 801c02a:	ca07      	ldmia	r2, {r0, r1, r2}
 801c02c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c032:	461a      	mov	r2, r3
 801c034:	69bb      	ldr	r3, [r7, #24]
 801c036:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c038:	f7ef fe0e 	bl	800bc58 <osKernelSysTick>
 801c03c:	4602      	mov	r2, r0
 801c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c040:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c042:	4618      	mov	r0, r3
 801c044:	3730      	adds	r7, #48	; 0x30
 801c046:	46bd      	mov	sp, r7
 801c048:	bd80      	pop	{r7, pc}

0801c04a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c04a:	b580      	push	{r7, lr}
 801c04c:	b086      	sub	sp, #24
 801c04e:	af00      	add	r7, sp, #0
 801c050:	6078      	str	r0, [r7, #4]
 801c052:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	6819      	ldr	r1, [r3, #0]
 801c058:	f107 030c 	add.w	r3, r7, #12
 801c05c:	2200      	movs	r2, #0
 801c05e:	4618      	mov	r0, r3
 801c060:	f7f0 f838 	bl	800c0d4 <osMessageGet>

  if(event.status == osEventMessage)
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	2b10      	cmp	r3, #16
 801c068:	d105      	bne.n	801c076 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c06a:	693b      	ldr	r3, [r7, #16]
 801c06c:	461a      	mov	r2, r3
 801c06e:	683b      	ldr	r3, [r7, #0]
 801c070:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c072:	2300      	movs	r3, #0
 801c074:	e001      	b.n	801c07a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c076:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c07a:	4618      	mov	r0, r3
 801c07c:	3718      	adds	r7, #24
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}

0801c082 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c082:	b480      	push	{r7}
 801c084:	b083      	sub	sp, #12
 801c086:	af00      	add	r7, sp, #0
 801c088:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d101      	bne.n	801c096 <sys_mbox_valid+0x14>
    return 0;
 801c092:	2300      	movs	r3, #0
 801c094:	e000      	b.n	801c098 <sys_mbox_valid+0x16>
  else
    return 1;
 801c096:	2301      	movs	r3, #1
}
 801c098:	4618      	mov	r0, r3
 801c09a:	370c      	adds	r7, #12
 801c09c:	46bd      	mov	sp, r7
 801c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a2:	4770      	bx	lr

0801c0a4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c0a4:	b480      	push	{r7}
 801c0a6:	b083      	sub	sp, #12
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	601a      	str	r2, [r3, #0]
}
 801c0b2:	bf00      	nop
 801c0b4:	370c      	adds	r7, #12
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0bc:	4770      	bx	lr

0801c0be <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c0be:	b580      	push	{r7, lr}
 801c0c0:	b084      	sub	sp, #16
 801c0c2:	af00      	add	r7, sp, #0
 801c0c4:	6078      	str	r0, [r7, #4]
 801c0c6:	460b      	mov	r3, r1
 801c0c8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	60bb      	str	r3, [r7, #8]
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c0d2:	f107 0308 	add.w	r3, r7, #8
 801c0d6:	2101      	movs	r1, #1
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7ef fec9 	bl	800be70 <osSemaphoreCreate>
 801c0de:	4602      	mov	r2, r0
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d102      	bne.n	801c0f2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c0ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c0f0:	e009      	b.n	801c106 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c0f2:	78fb      	ldrb	r3, [r7, #3]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d105      	bne.n	801c104 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	2100      	movs	r1, #0
 801c0fe:	4618      	mov	r0, r3
 801c100:	f7ef fee8 	bl	800bed4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c104:	2300      	movs	r3, #0
}
 801c106:	4618      	mov	r0, r3
 801c108:	3710      	adds	r7, #16
 801c10a:	46bd      	mov	sp, r7
 801c10c:	bd80      	pop	{r7, pc}

0801c10e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c10e:	b580      	push	{r7, lr}
 801c110:	b084      	sub	sp, #16
 801c112:	af00      	add	r7, sp, #0
 801c114:	6078      	str	r0, [r7, #4]
 801c116:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c118:	f7ef fd9e 	bl	800bc58 <osKernelSysTick>
 801c11c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c11e:	683b      	ldr	r3, [r7, #0]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d011      	beq.n	801c148 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	6839      	ldr	r1, [r7, #0]
 801c12a:	4618      	mov	r0, r3
 801c12c:	f7ef fed2 	bl	800bed4 <osSemaphoreWait>
 801c130:	4603      	mov	r3, r0
 801c132:	2b00      	cmp	r3, #0
 801c134:	d105      	bne.n	801c142 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c136:	f7ef fd8f 	bl	800bc58 <osKernelSysTick>
 801c13a:	4602      	mov	r2, r0
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	1ad3      	subs	r3, r2, r3
 801c140:	e012      	b.n	801c168 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c142:	f04f 33ff 	mov.w	r3, #4294967295
 801c146:	e00f      	b.n	801c168 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c148:	bf00      	nop
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	f04f 31ff 	mov.w	r1, #4294967295
 801c152:	4618      	mov	r0, r3
 801c154:	f7ef febe 	bl	800bed4 <osSemaphoreWait>
 801c158:	4603      	mov	r3, r0
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	d1f5      	bne.n	801c14a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c15e:	f7ef fd7b 	bl	800bc58 <osKernelSysTick>
 801c162:	4602      	mov	r2, r0
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c168:	4618      	mov	r0, r3
 801c16a:	3710      	adds	r7, #16
 801c16c:	46bd      	mov	sp, r7
 801c16e:	bd80      	pop	{r7, pc}

0801c170 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b082      	sub	sp, #8
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	4618      	mov	r0, r3
 801c17e:	f7ef fef7 	bl	800bf70 <osSemaphoreRelease>
}
 801c182:	bf00      	nop
 801c184:	3708      	adds	r7, #8
 801c186:	46bd      	mov	sp, r7
 801c188:	bd80      	pop	{r7, pc}

0801c18a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c18a:	b580      	push	{r7, lr}
 801c18c:	b082      	sub	sp, #8
 801c18e:	af00      	add	r7, sp, #0
 801c190:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	4618      	mov	r0, r3
 801c198:	f7ef ff20 	bl	800bfdc <osSemaphoreDelete>
}
 801c19c:	bf00      	nop
 801c19e:	3708      	adds	r7, #8
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	bd80      	pop	{r7, pc}

0801c1a4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c1a4:	b480      	push	{r7}
 801c1a6:	b083      	sub	sp, #12
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d101      	bne.n	801c1b8 <sys_sem_valid+0x14>
    return 0;
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	e000      	b.n	801c1ba <sys_sem_valid+0x16>
  else
    return 1;
 801c1b8:	2301      	movs	r3, #1
}
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	370c      	adds	r7, #12
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c4:	4770      	bx	lr

0801c1c6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c1c6:	b480      	push	{r7}
 801c1c8:	b083      	sub	sp, #12
 801c1ca:	af00      	add	r7, sp, #0
 801c1cc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	601a      	str	r2, [r3, #0]
}
 801c1d4:	bf00      	nop
 801c1d6:	370c      	adds	r7, #12
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1de:	4770      	bx	lr

0801c1e0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c1e4:	4803      	ldr	r0, [pc, #12]	; (801c1f4 <sys_init+0x14>)
 801c1e6:	f7ef fda7 	bl	800bd38 <osMutexCreate>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	4a02      	ldr	r2, [pc, #8]	; (801c1f8 <sys_init+0x18>)
 801c1ee:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c1f0:	bf00      	nop
 801c1f2:	bd80      	pop	{r7, pc}
 801c1f4:	080245d4 	.word	0x080245d4
 801c1f8:	20013540 	.word	0x20013540

0801c1fc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b084      	sub	sp, #16
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c204:	2300      	movs	r3, #0
 801c206:	60bb      	str	r3, [r7, #8]
 801c208:	2300      	movs	r3, #0
 801c20a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c20c:	f107 0308 	add.w	r3, r7, #8
 801c210:	4618      	mov	r0, r3
 801c212:	f7ef fd91 	bl	800bd38 <osMutexCreate>
 801c216:	4602      	mov	r2, r0
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d102      	bne.n	801c22a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c224:	f04f 33ff 	mov.w	r3, #4294967295
 801c228:	e000      	b.n	801c22c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c22a:	2300      	movs	r3, #0
}
 801c22c:	4618      	mov	r0, r3
 801c22e:	3710      	adds	r7, #16
 801c230:	46bd      	mov	sp, r7
 801c232:	bd80      	pop	{r7, pc}

0801c234 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b082      	sub	sp, #8
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	f04f 31ff 	mov.w	r1, #4294967295
 801c244:	4618      	mov	r0, r3
 801c246:	f7ef fd8f 	bl	800bd68 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c24a:	bf00      	nop
 801c24c:	3708      	adds	r7, #8
 801c24e:	46bd      	mov	sp, r7
 801c250:	bd80      	pop	{r7, pc}

0801c252 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c252:	b580      	push	{r7, lr}
 801c254:	b082      	sub	sp, #8
 801c256:	af00      	add	r7, sp, #0
 801c258:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	4618      	mov	r0, r3
 801c260:	f7ef fdd0 	bl	800be04 <osMutexRelease>
}
 801c264:	bf00      	nop
 801c266:	3708      	adds	r7, #8
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}

0801c26c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b08c      	sub	sp, #48	; 0x30
 801c270:	af00      	add	r7, sp, #0
 801c272:	60f8      	str	r0, [r7, #12]
 801c274:	60b9      	str	r1, [r7, #8]
 801c276:	607a      	str	r2, [r7, #4]
 801c278:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c27a:	f107 0314 	add.w	r3, r7, #20
 801c27e:	2200      	movs	r2, #0
 801c280:	601a      	str	r2, [r3, #0]
 801c282:	605a      	str	r2, [r3, #4]
 801c284:	609a      	str	r2, [r3, #8]
 801c286:	60da      	str	r2, [r3, #12]
 801c288:	611a      	str	r2, [r3, #16]
 801c28a:	615a      	str	r2, [r3, #20]
 801c28c:	619a      	str	r2, [r3, #24]
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	617b      	str	r3, [r7, #20]
 801c292:	68bb      	ldr	r3, [r7, #8]
 801c294:	61bb      	str	r3, [r7, #24]
 801c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c298:	b21b      	sxth	r3, r3
 801c29a:	83bb      	strh	r3, [r7, #28]
 801c29c:	683b      	ldr	r3, [r7, #0]
 801c29e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c2a0:	f107 0314 	add.w	r3, r7, #20
 801c2a4:	6879      	ldr	r1, [r7, #4]
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	f7ef fce6 	bl	800bc78 <osThreadCreate>
 801c2ac:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	3730      	adds	r7, #48	; 0x30
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd80      	pop	{r7, pc}
	...

0801c2b8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c2b8:	b580      	push	{r7, lr}
 801c2ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c2bc:	4b04      	ldr	r3, [pc, #16]	; (801c2d0 <sys_arch_protect+0x18>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	f04f 31ff 	mov.w	r1, #4294967295
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	f7ef fd4f 	bl	800bd68 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c2ca:	2301      	movs	r3, #1
}
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	20013540 	.word	0x20013540

0801c2d4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b082      	sub	sp, #8
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c2dc:	4b04      	ldr	r3, [pc, #16]	; (801c2f0 <sys_arch_unprotect+0x1c>)
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	f7ef fd8f 	bl	800be04 <osMutexRelease>
}
 801c2e6:	bf00      	nop
 801c2e8:	3708      	adds	r7, #8
 801c2ea:	46bd      	mov	sp, r7
 801c2ec:	bd80      	pop	{r7, pc}
 801c2ee:	bf00      	nop
 801c2f0:	20013540 	.word	0x20013540

0801c2f4 <__assert_func>:
 801c2f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2f6:	4614      	mov	r4, r2
 801c2f8:	461a      	mov	r2, r3
 801c2fa:	4b09      	ldr	r3, [pc, #36]	; (801c320 <__assert_func+0x2c>)
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	4605      	mov	r5, r0
 801c300:	68d8      	ldr	r0, [r3, #12]
 801c302:	b14c      	cbz	r4, 801c318 <__assert_func+0x24>
 801c304:	4b07      	ldr	r3, [pc, #28]	; (801c324 <__assert_func+0x30>)
 801c306:	9100      	str	r1, [sp, #0]
 801c308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c30c:	4906      	ldr	r1, [pc, #24]	; (801c328 <__assert_func+0x34>)
 801c30e:	462b      	mov	r3, r5
 801c310:	f000 feac 	bl	801d06c <fiprintf>
 801c314:	f001 f969 	bl	801d5ea <abort>
 801c318:	4b04      	ldr	r3, [pc, #16]	; (801c32c <__assert_func+0x38>)
 801c31a:	461c      	mov	r4, r3
 801c31c:	e7f3      	b.n	801c306 <__assert_func+0x12>
 801c31e:	bf00      	nop
 801c320:	20000088 	.word	0x20000088
 801c324:	080245dc 	.word	0x080245dc
 801c328:	080245e9 	.word	0x080245e9
 801c32c:	08024617 	.word	0x08024617

0801c330 <calloc>:
 801c330:	4b02      	ldr	r3, [pc, #8]	; (801c33c <calloc+0xc>)
 801c332:	460a      	mov	r2, r1
 801c334:	4601      	mov	r1, r0
 801c336:	6818      	ldr	r0, [r3, #0]
 801c338:	f000 b802 	b.w	801c340 <_calloc_r>
 801c33c:	20000088 	.word	0x20000088

0801c340 <_calloc_r>:
 801c340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c342:	fba1 2402 	umull	r2, r4, r1, r2
 801c346:	b94c      	cbnz	r4, 801c35c <_calloc_r+0x1c>
 801c348:	4611      	mov	r1, r2
 801c34a:	9201      	str	r2, [sp, #4]
 801c34c:	f000 f83e 	bl	801c3cc <_malloc_r>
 801c350:	9a01      	ldr	r2, [sp, #4]
 801c352:	4605      	mov	r5, r0
 801c354:	b930      	cbnz	r0, 801c364 <_calloc_r+0x24>
 801c356:	4628      	mov	r0, r5
 801c358:	b003      	add	sp, #12
 801c35a:	bd30      	pop	{r4, r5, pc}
 801c35c:	220c      	movs	r2, #12
 801c35e:	6002      	str	r2, [r0, #0]
 801c360:	2500      	movs	r5, #0
 801c362:	e7f8      	b.n	801c356 <_calloc_r+0x16>
 801c364:	4621      	mov	r1, r4
 801c366:	f001 f841 	bl	801d3ec <memset>
 801c36a:	e7f4      	b.n	801c356 <_calloc_r+0x16>

0801c36c <malloc>:
 801c36c:	4b02      	ldr	r3, [pc, #8]	; (801c378 <malloc+0xc>)
 801c36e:	4601      	mov	r1, r0
 801c370:	6818      	ldr	r0, [r3, #0]
 801c372:	f000 b82b 	b.w	801c3cc <_malloc_r>
 801c376:	bf00      	nop
 801c378:	20000088 	.word	0x20000088

0801c37c <free>:
 801c37c:	4b02      	ldr	r3, [pc, #8]	; (801c388 <free+0xc>)
 801c37e:	4601      	mov	r1, r0
 801c380:	6818      	ldr	r0, [r3, #0]
 801c382:	f001 bfb3 	b.w	801e2ec <_free_r>
 801c386:	bf00      	nop
 801c388:	20000088 	.word	0x20000088

0801c38c <sbrk_aligned>:
 801c38c:	b570      	push	{r4, r5, r6, lr}
 801c38e:	4e0e      	ldr	r6, [pc, #56]	; (801c3c8 <sbrk_aligned+0x3c>)
 801c390:	460c      	mov	r4, r1
 801c392:	6831      	ldr	r1, [r6, #0]
 801c394:	4605      	mov	r5, r0
 801c396:	b911      	cbnz	r1, 801c39e <sbrk_aligned+0x12>
 801c398:	f001 f8d0 	bl	801d53c <_sbrk_r>
 801c39c:	6030      	str	r0, [r6, #0]
 801c39e:	4621      	mov	r1, r4
 801c3a0:	4628      	mov	r0, r5
 801c3a2:	f001 f8cb 	bl	801d53c <_sbrk_r>
 801c3a6:	1c43      	adds	r3, r0, #1
 801c3a8:	d00a      	beq.n	801c3c0 <sbrk_aligned+0x34>
 801c3aa:	1cc4      	adds	r4, r0, #3
 801c3ac:	f024 0403 	bic.w	r4, r4, #3
 801c3b0:	42a0      	cmp	r0, r4
 801c3b2:	d007      	beq.n	801c3c4 <sbrk_aligned+0x38>
 801c3b4:	1a21      	subs	r1, r4, r0
 801c3b6:	4628      	mov	r0, r5
 801c3b8:	f001 f8c0 	bl	801d53c <_sbrk_r>
 801c3bc:	3001      	adds	r0, #1
 801c3be:	d101      	bne.n	801c3c4 <sbrk_aligned+0x38>
 801c3c0:	f04f 34ff 	mov.w	r4, #4294967295
 801c3c4:	4620      	mov	r0, r4
 801c3c6:	bd70      	pop	{r4, r5, r6, pc}
 801c3c8:	20013548 	.word	0x20013548

0801c3cc <_malloc_r>:
 801c3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3d0:	1ccd      	adds	r5, r1, #3
 801c3d2:	f025 0503 	bic.w	r5, r5, #3
 801c3d6:	3508      	adds	r5, #8
 801c3d8:	2d0c      	cmp	r5, #12
 801c3da:	bf38      	it	cc
 801c3dc:	250c      	movcc	r5, #12
 801c3de:	2d00      	cmp	r5, #0
 801c3e0:	4607      	mov	r7, r0
 801c3e2:	db01      	blt.n	801c3e8 <_malloc_r+0x1c>
 801c3e4:	42a9      	cmp	r1, r5
 801c3e6:	d905      	bls.n	801c3f4 <_malloc_r+0x28>
 801c3e8:	230c      	movs	r3, #12
 801c3ea:	603b      	str	r3, [r7, #0]
 801c3ec:	2600      	movs	r6, #0
 801c3ee:	4630      	mov	r0, r6
 801c3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c4c8 <_malloc_r+0xfc>
 801c3f8:	f000 f868 	bl	801c4cc <__malloc_lock>
 801c3fc:	f8d8 3000 	ldr.w	r3, [r8]
 801c400:	461c      	mov	r4, r3
 801c402:	bb5c      	cbnz	r4, 801c45c <_malloc_r+0x90>
 801c404:	4629      	mov	r1, r5
 801c406:	4638      	mov	r0, r7
 801c408:	f7ff ffc0 	bl	801c38c <sbrk_aligned>
 801c40c:	1c43      	adds	r3, r0, #1
 801c40e:	4604      	mov	r4, r0
 801c410:	d155      	bne.n	801c4be <_malloc_r+0xf2>
 801c412:	f8d8 4000 	ldr.w	r4, [r8]
 801c416:	4626      	mov	r6, r4
 801c418:	2e00      	cmp	r6, #0
 801c41a:	d145      	bne.n	801c4a8 <_malloc_r+0xdc>
 801c41c:	2c00      	cmp	r4, #0
 801c41e:	d048      	beq.n	801c4b2 <_malloc_r+0xe6>
 801c420:	6823      	ldr	r3, [r4, #0]
 801c422:	4631      	mov	r1, r6
 801c424:	4638      	mov	r0, r7
 801c426:	eb04 0903 	add.w	r9, r4, r3
 801c42a:	f001 f887 	bl	801d53c <_sbrk_r>
 801c42e:	4581      	cmp	r9, r0
 801c430:	d13f      	bne.n	801c4b2 <_malloc_r+0xe6>
 801c432:	6821      	ldr	r1, [r4, #0]
 801c434:	1a6d      	subs	r5, r5, r1
 801c436:	4629      	mov	r1, r5
 801c438:	4638      	mov	r0, r7
 801c43a:	f7ff ffa7 	bl	801c38c <sbrk_aligned>
 801c43e:	3001      	adds	r0, #1
 801c440:	d037      	beq.n	801c4b2 <_malloc_r+0xe6>
 801c442:	6823      	ldr	r3, [r4, #0]
 801c444:	442b      	add	r3, r5
 801c446:	6023      	str	r3, [r4, #0]
 801c448:	f8d8 3000 	ldr.w	r3, [r8]
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d038      	beq.n	801c4c2 <_malloc_r+0xf6>
 801c450:	685a      	ldr	r2, [r3, #4]
 801c452:	42a2      	cmp	r2, r4
 801c454:	d12b      	bne.n	801c4ae <_malloc_r+0xe2>
 801c456:	2200      	movs	r2, #0
 801c458:	605a      	str	r2, [r3, #4]
 801c45a:	e00f      	b.n	801c47c <_malloc_r+0xb0>
 801c45c:	6822      	ldr	r2, [r4, #0]
 801c45e:	1b52      	subs	r2, r2, r5
 801c460:	d41f      	bmi.n	801c4a2 <_malloc_r+0xd6>
 801c462:	2a0b      	cmp	r2, #11
 801c464:	d917      	bls.n	801c496 <_malloc_r+0xca>
 801c466:	1961      	adds	r1, r4, r5
 801c468:	42a3      	cmp	r3, r4
 801c46a:	6025      	str	r5, [r4, #0]
 801c46c:	bf18      	it	ne
 801c46e:	6059      	strne	r1, [r3, #4]
 801c470:	6863      	ldr	r3, [r4, #4]
 801c472:	bf08      	it	eq
 801c474:	f8c8 1000 	streq.w	r1, [r8]
 801c478:	5162      	str	r2, [r4, r5]
 801c47a:	604b      	str	r3, [r1, #4]
 801c47c:	4638      	mov	r0, r7
 801c47e:	f104 060b 	add.w	r6, r4, #11
 801c482:	f000 f829 	bl	801c4d8 <__malloc_unlock>
 801c486:	f026 0607 	bic.w	r6, r6, #7
 801c48a:	1d23      	adds	r3, r4, #4
 801c48c:	1af2      	subs	r2, r6, r3
 801c48e:	d0ae      	beq.n	801c3ee <_malloc_r+0x22>
 801c490:	1b9b      	subs	r3, r3, r6
 801c492:	50a3      	str	r3, [r4, r2]
 801c494:	e7ab      	b.n	801c3ee <_malloc_r+0x22>
 801c496:	42a3      	cmp	r3, r4
 801c498:	6862      	ldr	r2, [r4, #4]
 801c49a:	d1dd      	bne.n	801c458 <_malloc_r+0x8c>
 801c49c:	f8c8 2000 	str.w	r2, [r8]
 801c4a0:	e7ec      	b.n	801c47c <_malloc_r+0xb0>
 801c4a2:	4623      	mov	r3, r4
 801c4a4:	6864      	ldr	r4, [r4, #4]
 801c4a6:	e7ac      	b.n	801c402 <_malloc_r+0x36>
 801c4a8:	4634      	mov	r4, r6
 801c4aa:	6876      	ldr	r6, [r6, #4]
 801c4ac:	e7b4      	b.n	801c418 <_malloc_r+0x4c>
 801c4ae:	4613      	mov	r3, r2
 801c4b0:	e7cc      	b.n	801c44c <_malloc_r+0x80>
 801c4b2:	230c      	movs	r3, #12
 801c4b4:	603b      	str	r3, [r7, #0]
 801c4b6:	4638      	mov	r0, r7
 801c4b8:	f000 f80e 	bl	801c4d8 <__malloc_unlock>
 801c4bc:	e797      	b.n	801c3ee <_malloc_r+0x22>
 801c4be:	6025      	str	r5, [r4, #0]
 801c4c0:	e7dc      	b.n	801c47c <_malloc_r+0xb0>
 801c4c2:	605b      	str	r3, [r3, #4]
 801c4c4:	deff      	udf	#255	; 0xff
 801c4c6:	bf00      	nop
 801c4c8:	20013544 	.word	0x20013544

0801c4cc <__malloc_lock>:
 801c4cc:	4801      	ldr	r0, [pc, #4]	; (801c4d4 <__malloc_lock+0x8>)
 801c4ce:	f001 b87c 	b.w	801d5ca <__retarget_lock_acquire_recursive>
 801c4d2:	bf00      	nop
 801c4d4:	2001368c 	.word	0x2001368c

0801c4d8 <__malloc_unlock>:
 801c4d8:	4801      	ldr	r0, [pc, #4]	; (801c4e0 <__malloc_unlock+0x8>)
 801c4da:	f001 b877 	b.w	801d5cc <__retarget_lock_release_recursive>
 801c4de:	bf00      	nop
 801c4e0:	2001368c 	.word	0x2001368c

0801c4e4 <rand>:
 801c4e4:	4b16      	ldr	r3, [pc, #88]	; (801c540 <rand+0x5c>)
 801c4e6:	b510      	push	{r4, lr}
 801c4e8:	681c      	ldr	r4, [r3, #0]
 801c4ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c4ec:	b9b3      	cbnz	r3, 801c51c <rand+0x38>
 801c4ee:	2018      	movs	r0, #24
 801c4f0:	f7ff ff3c 	bl	801c36c <malloc>
 801c4f4:	4602      	mov	r2, r0
 801c4f6:	6320      	str	r0, [r4, #48]	; 0x30
 801c4f8:	b920      	cbnz	r0, 801c504 <rand+0x20>
 801c4fa:	4b12      	ldr	r3, [pc, #72]	; (801c544 <rand+0x60>)
 801c4fc:	4812      	ldr	r0, [pc, #72]	; (801c548 <rand+0x64>)
 801c4fe:	2152      	movs	r1, #82	; 0x52
 801c500:	f7ff fef8 	bl	801c2f4 <__assert_func>
 801c504:	4911      	ldr	r1, [pc, #68]	; (801c54c <rand+0x68>)
 801c506:	4b12      	ldr	r3, [pc, #72]	; (801c550 <rand+0x6c>)
 801c508:	e9c0 1300 	strd	r1, r3, [r0]
 801c50c:	4b11      	ldr	r3, [pc, #68]	; (801c554 <rand+0x70>)
 801c50e:	6083      	str	r3, [r0, #8]
 801c510:	230b      	movs	r3, #11
 801c512:	8183      	strh	r3, [r0, #12]
 801c514:	2100      	movs	r1, #0
 801c516:	2001      	movs	r0, #1
 801c518:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c51c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c51e:	480e      	ldr	r0, [pc, #56]	; (801c558 <rand+0x74>)
 801c520:	690b      	ldr	r3, [r1, #16]
 801c522:	694c      	ldr	r4, [r1, #20]
 801c524:	4a0d      	ldr	r2, [pc, #52]	; (801c55c <rand+0x78>)
 801c526:	4358      	muls	r0, r3
 801c528:	fb02 0004 	mla	r0, r2, r4, r0
 801c52c:	fba3 3202 	umull	r3, r2, r3, r2
 801c530:	3301      	adds	r3, #1
 801c532:	eb40 0002 	adc.w	r0, r0, r2
 801c536:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c53a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c53e:	bd10      	pop	{r4, pc}
 801c540:	20000088 	.word	0x20000088
 801c544:	08024618 	.word	0x08024618
 801c548:	0802462f 	.word	0x0802462f
 801c54c:	abcd330e 	.word	0xabcd330e
 801c550:	e66d1234 	.word	0xe66d1234
 801c554:	0005deec 	.word	0x0005deec
 801c558:	5851f42d 	.word	0x5851f42d
 801c55c:	4c957f2d 	.word	0x4c957f2d

0801c560 <_strtoul_l.constprop.0>:
 801c560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c564:	4f36      	ldr	r7, [pc, #216]	; (801c640 <_strtoul_l.constprop.0+0xe0>)
 801c566:	4686      	mov	lr, r0
 801c568:	460d      	mov	r5, r1
 801c56a:	4628      	mov	r0, r5
 801c56c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c570:	5d3e      	ldrb	r6, [r7, r4]
 801c572:	f016 0608 	ands.w	r6, r6, #8
 801c576:	d1f8      	bne.n	801c56a <_strtoul_l.constprop.0+0xa>
 801c578:	2c2d      	cmp	r4, #45	; 0x2d
 801c57a:	d130      	bne.n	801c5de <_strtoul_l.constprop.0+0x7e>
 801c57c:	782c      	ldrb	r4, [r5, #0]
 801c57e:	2601      	movs	r6, #1
 801c580:	1c85      	adds	r5, r0, #2
 801c582:	2b00      	cmp	r3, #0
 801c584:	d057      	beq.n	801c636 <_strtoul_l.constprop.0+0xd6>
 801c586:	2b10      	cmp	r3, #16
 801c588:	d109      	bne.n	801c59e <_strtoul_l.constprop.0+0x3e>
 801c58a:	2c30      	cmp	r4, #48	; 0x30
 801c58c:	d107      	bne.n	801c59e <_strtoul_l.constprop.0+0x3e>
 801c58e:	7828      	ldrb	r0, [r5, #0]
 801c590:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c594:	2858      	cmp	r0, #88	; 0x58
 801c596:	d149      	bne.n	801c62c <_strtoul_l.constprop.0+0xcc>
 801c598:	786c      	ldrb	r4, [r5, #1]
 801c59a:	2310      	movs	r3, #16
 801c59c:	3502      	adds	r5, #2
 801c59e:	f04f 38ff 	mov.w	r8, #4294967295
 801c5a2:	2700      	movs	r7, #0
 801c5a4:	fbb8 f8f3 	udiv	r8, r8, r3
 801c5a8:	fb03 f908 	mul.w	r9, r3, r8
 801c5ac:	ea6f 0909 	mvn.w	r9, r9
 801c5b0:	4638      	mov	r0, r7
 801c5b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c5b6:	f1bc 0f09 	cmp.w	ip, #9
 801c5ba:	d815      	bhi.n	801c5e8 <_strtoul_l.constprop.0+0x88>
 801c5bc:	4664      	mov	r4, ip
 801c5be:	42a3      	cmp	r3, r4
 801c5c0:	dd23      	ble.n	801c60a <_strtoul_l.constprop.0+0xaa>
 801c5c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 801c5c6:	d007      	beq.n	801c5d8 <_strtoul_l.constprop.0+0x78>
 801c5c8:	4580      	cmp	r8, r0
 801c5ca:	d31b      	bcc.n	801c604 <_strtoul_l.constprop.0+0xa4>
 801c5cc:	d101      	bne.n	801c5d2 <_strtoul_l.constprop.0+0x72>
 801c5ce:	45a1      	cmp	r9, r4
 801c5d0:	db18      	blt.n	801c604 <_strtoul_l.constprop.0+0xa4>
 801c5d2:	fb00 4003 	mla	r0, r0, r3, r4
 801c5d6:	2701      	movs	r7, #1
 801c5d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c5dc:	e7e9      	b.n	801c5b2 <_strtoul_l.constprop.0+0x52>
 801c5de:	2c2b      	cmp	r4, #43	; 0x2b
 801c5e0:	bf04      	itt	eq
 801c5e2:	782c      	ldrbeq	r4, [r5, #0]
 801c5e4:	1c85      	addeq	r5, r0, #2
 801c5e6:	e7cc      	b.n	801c582 <_strtoul_l.constprop.0+0x22>
 801c5e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c5ec:	f1bc 0f19 	cmp.w	ip, #25
 801c5f0:	d801      	bhi.n	801c5f6 <_strtoul_l.constprop.0+0x96>
 801c5f2:	3c37      	subs	r4, #55	; 0x37
 801c5f4:	e7e3      	b.n	801c5be <_strtoul_l.constprop.0+0x5e>
 801c5f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c5fa:	f1bc 0f19 	cmp.w	ip, #25
 801c5fe:	d804      	bhi.n	801c60a <_strtoul_l.constprop.0+0xaa>
 801c600:	3c57      	subs	r4, #87	; 0x57
 801c602:	e7dc      	b.n	801c5be <_strtoul_l.constprop.0+0x5e>
 801c604:	f04f 37ff 	mov.w	r7, #4294967295
 801c608:	e7e6      	b.n	801c5d8 <_strtoul_l.constprop.0+0x78>
 801c60a:	1c7b      	adds	r3, r7, #1
 801c60c:	d106      	bne.n	801c61c <_strtoul_l.constprop.0+0xbc>
 801c60e:	2322      	movs	r3, #34	; 0x22
 801c610:	f8ce 3000 	str.w	r3, [lr]
 801c614:	4638      	mov	r0, r7
 801c616:	b932      	cbnz	r2, 801c626 <_strtoul_l.constprop.0+0xc6>
 801c618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c61c:	b106      	cbz	r6, 801c620 <_strtoul_l.constprop.0+0xc0>
 801c61e:	4240      	negs	r0, r0
 801c620:	2a00      	cmp	r2, #0
 801c622:	d0f9      	beq.n	801c618 <_strtoul_l.constprop.0+0xb8>
 801c624:	b107      	cbz	r7, 801c628 <_strtoul_l.constprop.0+0xc8>
 801c626:	1e69      	subs	r1, r5, #1
 801c628:	6011      	str	r1, [r2, #0]
 801c62a:	e7f5      	b.n	801c618 <_strtoul_l.constprop.0+0xb8>
 801c62c:	2430      	movs	r4, #48	; 0x30
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d1b5      	bne.n	801c59e <_strtoul_l.constprop.0+0x3e>
 801c632:	2308      	movs	r3, #8
 801c634:	e7b3      	b.n	801c59e <_strtoul_l.constprop.0+0x3e>
 801c636:	2c30      	cmp	r4, #48	; 0x30
 801c638:	d0a9      	beq.n	801c58e <_strtoul_l.constprop.0+0x2e>
 801c63a:	230a      	movs	r3, #10
 801c63c:	e7af      	b.n	801c59e <_strtoul_l.constprop.0+0x3e>
 801c63e:	bf00      	nop
 801c640:	08024688 	.word	0x08024688

0801c644 <strtoul>:
 801c644:	4613      	mov	r3, r2
 801c646:	460a      	mov	r2, r1
 801c648:	4601      	mov	r1, r0
 801c64a:	4802      	ldr	r0, [pc, #8]	; (801c654 <strtoul+0x10>)
 801c64c:	6800      	ldr	r0, [r0, #0]
 801c64e:	f7ff bf87 	b.w	801c560 <_strtoul_l.constprop.0>
 801c652:	bf00      	nop
 801c654:	20000088 	.word	0x20000088

0801c658 <__cvt>:
 801c658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c65c:	ec55 4b10 	vmov	r4, r5, d0
 801c660:	2d00      	cmp	r5, #0
 801c662:	460e      	mov	r6, r1
 801c664:	4619      	mov	r1, r3
 801c666:	462b      	mov	r3, r5
 801c668:	bfbb      	ittet	lt
 801c66a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c66e:	461d      	movlt	r5, r3
 801c670:	2300      	movge	r3, #0
 801c672:	232d      	movlt	r3, #45	; 0x2d
 801c674:	700b      	strb	r3, [r1, #0]
 801c676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c678:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c67c:	4691      	mov	r9, r2
 801c67e:	f023 0820 	bic.w	r8, r3, #32
 801c682:	bfbc      	itt	lt
 801c684:	4622      	movlt	r2, r4
 801c686:	4614      	movlt	r4, r2
 801c688:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c68c:	d005      	beq.n	801c69a <__cvt+0x42>
 801c68e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c692:	d100      	bne.n	801c696 <__cvt+0x3e>
 801c694:	3601      	adds	r6, #1
 801c696:	2102      	movs	r1, #2
 801c698:	e000      	b.n	801c69c <__cvt+0x44>
 801c69a:	2103      	movs	r1, #3
 801c69c:	ab03      	add	r3, sp, #12
 801c69e:	9301      	str	r3, [sp, #4]
 801c6a0:	ab02      	add	r3, sp, #8
 801c6a2:	9300      	str	r3, [sp, #0]
 801c6a4:	ec45 4b10 	vmov	d0, r4, r5
 801c6a8:	4653      	mov	r3, sl
 801c6aa:	4632      	mov	r2, r6
 801c6ac:	f001 f82c 	bl	801d708 <_dtoa_r>
 801c6b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c6b4:	4607      	mov	r7, r0
 801c6b6:	d102      	bne.n	801c6be <__cvt+0x66>
 801c6b8:	f019 0f01 	tst.w	r9, #1
 801c6bc:	d022      	beq.n	801c704 <__cvt+0xac>
 801c6be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c6c2:	eb07 0906 	add.w	r9, r7, r6
 801c6c6:	d110      	bne.n	801c6ea <__cvt+0x92>
 801c6c8:	783b      	ldrb	r3, [r7, #0]
 801c6ca:	2b30      	cmp	r3, #48	; 0x30
 801c6cc:	d10a      	bne.n	801c6e4 <__cvt+0x8c>
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	4620      	mov	r0, r4
 801c6d4:	4629      	mov	r1, r5
 801c6d6:	f7e4 fa17 	bl	8000b08 <__aeabi_dcmpeq>
 801c6da:	b918      	cbnz	r0, 801c6e4 <__cvt+0x8c>
 801c6dc:	f1c6 0601 	rsb	r6, r6, #1
 801c6e0:	f8ca 6000 	str.w	r6, [sl]
 801c6e4:	f8da 3000 	ldr.w	r3, [sl]
 801c6e8:	4499      	add	r9, r3
 801c6ea:	2200      	movs	r2, #0
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	4629      	mov	r1, r5
 801c6f2:	f7e4 fa09 	bl	8000b08 <__aeabi_dcmpeq>
 801c6f6:	b108      	cbz	r0, 801c6fc <__cvt+0xa4>
 801c6f8:	f8cd 900c 	str.w	r9, [sp, #12]
 801c6fc:	2230      	movs	r2, #48	; 0x30
 801c6fe:	9b03      	ldr	r3, [sp, #12]
 801c700:	454b      	cmp	r3, r9
 801c702:	d307      	bcc.n	801c714 <__cvt+0xbc>
 801c704:	9b03      	ldr	r3, [sp, #12]
 801c706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c708:	1bdb      	subs	r3, r3, r7
 801c70a:	4638      	mov	r0, r7
 801c70c:	6013      	str	r3, [r2, #0]
 801c70e:	b004      	add	sp, #16
 801c710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c714:	1c59      	adds	r1, r3, #1
 801c716:	9103      	str	r1, [sp, #12]
 801c718:	701a      	strb	r2, [r3, #0]
 801c71a:	e7f0      	b.n	801c6fe <__cvt+0xa6>

0801c71c <__exponent>:
 801c71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c71e:	4603      	mov	r3, r0
 801c720:	2900      	cmp	r1, #0
 801c722:	bfb8      	it	lt
 801c724:	4249      	neglt	r1, r1
 801c726:	f803 2b02 	strb.w	r2, [r3], #2
 801c72a:	bfb4      	ite	lt
 801c72c:	222d      	movlt	r2, #45	; 0x2d
 801c72e:	222b      	movge	r2, #43	; 0x2b
 801c730:	2909      	cmp	r1, #9
 801c732:	7042      	strb	r2, [r0, #1]
 801c734:	dd2a      	ble.n	801c78c <__exponent+0x70>
 801c736:	f10d 0207 	add.w	r2, sp, #7
 801c73a:	4617      	mov	r7, r2
 801c73c:	260a      	movs	r6, #10
 801c73e:	4694      	mov	ip, r2
 801c740:	fb91 f5f6 	sdiv	r5, r1, r6
 801c744:	fb06 1415 	mls	r4, r6, r5, r1
 801c748:	3430      	adds	r4, #48	; 0x30
 801c74a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801c74e:	460c      	mov	r4, r1
 801c750:	2c63      	cmp	r4, #99	; 0x63
 801c752:	f102 32ff 	add.w	r2, r2, #4294967295
 801c756:	4629      	mov	r1, r5
 801c758:	dcf1      	bgt.n	801c73e <__exponent+0x22>
 801c75a:	3130      	adds	r1, #48	; 0x30
 801c75c:	f1ac 0402 	sub.w	r4, ip, #2
 801c760:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c764:	1c41      	adds	r1, r0, #1
 801c766:	4622      	mov	r2, r4
 801c768:	42ba      	cmp	r2, r7
 801c76a:	d30a      	bcc.n	801c782 <__exponent+0x66>
 801c76c:	f10d 0209 	add.w	r2, sp, #9
 801c770:	eba2 020c 	sub.w	r2, r2, ip
 801c774:	42bc      	cmp	r4, r7
 801c776:	bf88      	it	hi
 801c778:	2200      	movhi	r2, #0
 801c77a:	4413      	add	r3, r2
 801c77c:	1a18      	subs	r0, r3, r0
 801c77e:	b003      	add	sp, #12
 801c780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c782:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c786:	f801 5f01 	strb.w	r5, [r1, #1]!
 801c78a:	e7ed      	b.n	801c768 <__exponent+0x4c>
 801c78c:	2330      	movs	r3, #48	; 0x30
 801c78e:	3130      	adds	r1, #48	; 0x30
 801c790:	7083      	strb	r3, [r0, #2]
 801c792:	70c1      	strb	r1, [r0, #3]
 801c794:	1d03      	adds	r3, r0, #4
 801c796:	e7f1      	b.n	801c77c <__exponent+0x60>

0801c798 <_printf_float>:
 801c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c79c:	ed2d 8b02 	vpush	{d8}
 801c7a0:	b08d      	sub	sp, #52	; 0x34
 801c7a2:	460c      	mov	r4, r1
 801c7a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c7a8:	4616      	mov	r6, r2
 801c7aa:	461f      	mov	r7, r3
 801c7ac:	4605      	mov	r5, r0
 801c7ae:	f000 fe37 	bl	801d420 <_localeconv_r>
 801c7b2:	f8d0 a000 	ldr.w	sl, [r0]
 801c7b6:	4650      	mov	r0, sl
 801c7b8:	f7e3 fd7a 	bl	80002b0 <strlen>
 801c7bc:	2300      	movs	r3, #0
 801c7be:	930a      	str	r3, [sp, #40]	; 0x28
 801c7c0:	6823      	ldr	r3, [r4, #0]
 801c7c2:	9305      	str	r3, [sp, #20]
 801c7c4:	f8d8 3000 	ldr.w	r3, [r8]
 801c7c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c7cc:	3307      	adds	r3, #7
 801c7ce:	f023 0307 	bic.w	r3, r3, #7
 801c7d2:	f103 0208 	add.w	r2, r3, #8
 801c7d6:	f8c8 2000 	str.w	r2, [r8]
 801c7da:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c7de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c7e2:	9307      	str	r3, [sp, #28]
 801c7e4:	f8cd 8018 	str.w	r8, [sp, #24]
 801c7e8:	ee08 0a10 	vmov	s16, r0
 801c7ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801c7f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c7f4:	4b9e      	ldr	r3, [pc, #632]	; (801ca70 <_printf_float+0x2d8>)
 801c7f6:	f04f 32ff 	mov.w	r2, #4294967295
 801c7fa:	f7e4 f9b7 	bl	8000b6c <__aeabi_dcmpun>
 801c7fe:	bb88      	cbnz	r0, 801c864 <_printf_float+0xcc>
 801c800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c804:	4b9a      	ldr	r3, [pc, #616]	; (801ca70 <_printf_float+0x2d8>)
 801c806:	f04f 32ff 	mov.w	r2, #4294967295
 801c80a:	f7e4 f991 	bl	8000b30 <__aeabi_dcmple>
 801c80e:	bb48      	cbnz	r0, 801c864 <_printf_float+0xcc>
 801c810:	2200      	movs	r2, #0
 801c812:	2300      	movs	r3, #0
 801c814:	4640      	mov	r0, r8
 801c816:	4649      	mov	r1, r9
 801c818:	f7e4 f980 	bl	8000b1c <__aeabi_dcmplt>
 801c81c:	b110      	cbz	r0, 801c824 <_printf_float+0x8c>
 801c81e:	232d      	movs	r3, #45	; 0x2d
 801c820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c824:	4a93      	ldr	r2, [pc, #588]	; (801ca74 <_printf_float+0x2dc>)
 801c826:	4b94      	ldr	r3, [pc, #592]	; (801ca78 <_printf_float+0x2e0>)
 801c828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c82c:	bf94      	ite	ls
 801c82e:	4690      	movls	r8, r2
 801c830:	4698      	movhi	r8, r3
 801c832:	2303      	movs	r3, #3
 801c834:	6123      	str	r3, [r4, #16]
 801c836:	9b05      	ldr	r3, [sp, #20]
 801c838:	f023 0304 	bic.w	r3, r3, #4
 801c83c:	6023      	str	r3, [r4, #0]
 801c83e:	f04f 0900 	mov.w	r9, #0
 801c842:	9700      	str	r7, [sp, #0]
 801c844:	4633      	mov	r3, r6
 801c846:	aa0b      	add	r2, sp, #44	; 0x2c
 801c848:	4621      	mov	r1, r4
 801c84a:	4628      	mov	r0, r5
 801c84c:	f000 f9da 	bl	801cc04 <_printf_common>
 801c850:	3001      	adds	r0, #1
 801c852:	f040 8090 	bne.w	801c976 <_printf_float+0x1de>
 801c856:	f04f 30ff 	mov.w	r0, #4294967295
 801c85a:	b00d      	add	sp, #52	; 0x34
 801c85c:	ecbd 8b02 	vpop	{d8}
 801c860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c864:	4642      	mov	r2, r8
 801c866:	464b      	mov	r3, r9
 801c868:	4640      	mov	r0, r8
 801c86a:	4649      	mov	r1, r9
 801c86c:	f7e4 f97e 	bl	8000b6c <__aeabi_dcmpun>
 801c870:	b140      	cbz	r0, 801c884 <_printf_float+0xec>
 801c872:	464b      	mov	r3, r9
 801c874:	2b00      	cmp	r3, #0
 801c876:	bfbc      	itt	lt
 801c878:	232d      	movlt	r3, #45	; 0x2d
 801c87a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c87e:	4a7f      	ldr	r2, [pc, #508]	; (801ca7c <_printf_float+0x2e4>)
 801c880:	4b7f      	ldr	r3, [pc, #508]	; (801ca80 <_printf_float+0x2e8>)
 801c882:	e7d1      	b.n	801c828 <_printf_float+0x90>
 801c884:	6863      	ldr	r3, [r4, #4]
 801c886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c88a:	9206      	str	r2, [sp, #24]
 801c88c:	1c5a      	adds	r2, r3, #1
 801c88e:	d13f      	bne.n	801c910 <_printf_float+0x178>
 801c890:	2306      	movs	r3, #6
 801c892:	6063      	str	r3, [r4, #4]
 801c894:	9b05      	ldr	r3, [sp, #20]
 801c896:	6861      	ldr	r1, [r4, #4]
 801c898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c89c:	2300      	movs	r3, #0
 801c89e:	9303      	str	r3, [sp, #12]
 801c8a0:	ab0a      	add	r3, sp, #40	; 0x28
 801c8a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c8a6:	ab09      	add	r3, sp, #36	; 0x24
 801c8a8:	ec49 8b10 	vmov	d0, r8, r9
 801c8ac:	9300      	str	r3, [sp, #0]
 801c8ae:	6022      	str	r2, [r4, #0]
 801c8b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c8b4:	4628      	mov	r0, r5
 801c8b6:	f7ff fecf 	bl	801c658 <__cvt>
 801c8ba:	9b06      	ldr	r3, [sp, #24]
 801c8bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c8be:	2b47      	cmp	r3, #71	; 0x47
 801c8c0:	4680      	mov	r8, r0
 801c8c2:	d108      	bne.n	801c8d6 <_printf_float+0x13e>
 801c8c4:	1cc8      	adds	r0, r1, #3
 801c8c6:	db02      	blt.n	801c8ce <_printf_float+0x136>
 801c8c8:	6863      	ldr	r3, [r4, #4]
 801c8ca:	4299      	cmp	r1, r3
 801c8cc:	dd41      	ble.n	801c952 <_printf_float+0x1ba>
 801c8ce:	f1ab 0302 	sub.w	r3, fp, #2
 801c8d2:	fa5f fb83 	uxtb.w	fp, r3
 801c8d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c8da:	d820      	bhi.n	801c91e <_printf_float+0x186>
 801c8dc:	3901      	subs	r1, #1
 801c8de:	465a      	mov	r2, fp
 801c8e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c8e4:	9109      	str	r1, [sp, #36]	; 0x24
 801c8e6:	f7ff ff19 	bl	801c71c <__exponent>
 801c8ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c8ec:	1813      	adds	r3, r2, r0
 801c8ee:	2a01      	cmp	r2, #1
 801c8f0:	4681      	mov	r9, r0
 801c8f2:	6123      	str	r3, [r4, #16]
 801c8f4:	dc02      	bgt.n	801c8fc <_printf_float+0x164>
 801c8f6:	6822      	ldr	r2, [r4, #0]
 801c8f8:	07d2      	lsls	r2, r2, #31
 801c8fa:	d501      	bpl.n	801c900 <_printf_float+0x168>
 801c8fc:	3301      	adds	r3, #1
 801c8fe:	6123      	str	r3, [r4, #16]
 801c900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c904:	2b00      	cmp	r3, #0
 801c906:	d09c      	beq.n	801c842 <_printf_float+0xaa>
 801c908:	232d      	movs	r3, #45	; 0x2d
 801c90a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c90e:	e798      	b.n	801c842 <_printf_float+0xaa>
 801c910:	9a06      	ldr	r2, [sp, #24]
 801c912:	2a47      	cmp	r2, #71	; 0x47
 801c914:	d1be      	bne.n	801c894 <_printf_float+0xfc>
 801c916:	2b00      	cmp	r3, #0
 801c918:	d1bc      	bne.n	801c894 <_printf_float+0xfc>
 801c91a:	2301      	movs	r3, #1
 801c91c:	e7b9      	b.n	801c892 <_printf_float+0xfa>
 801c91e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c922:	d118      	bne.n	801c956 <_printf_float+0x1be>
 801c924:	2900      	cmp	r1, #0
 801c926:	6863      	ldr	r3, [r4, #4]
 801c928:	dd0b      	ble.n	801c942 <_printf_float+0x1aa>
 801c92a:	6121      	str	r1, [r4, #16]
 801c92c:	b913      	cbnz	r3, 801c934 <_printf_float+0x19c>
 801c92e:	6822      	ldr	r2, [r4, #0]
 801c930:	07d0      	lsls	r0, r2, #31
 801c932:	d502      	bpl.n	801c93a <_printf_float+0x1a2>
 801c934:	3301      	adds	r3, #1
 801c936:	440b      	add	r3, r1
 801c938:	6123      	str	r3, [r4, #16]
 801c93a:	65a1      	str	r1, [r4, #88]	; 0x58
 801c93c:	f04f 0900 	mov.w	r9, #0
 801c940:	e7de      	b.n	801c900 <_printf_float+0x168>
 801c942:	b913      	cbnz	r3, 801c94a <_printf_float+0x1b2>
 801c944:	6822      	ldr	r2, [r4, #0]
 801c946:	07d2      	lsls	r2, r2, #31
 801c948:	d501      	bpl.n	801c94e <_printf_float+0x1b6>
 801c94a:	3302      	adds	r3, #2
 801c94c:	e7f4      	b.n	801c938 <_printf_float+0x1a0>
 801c94e:	2301      	movs	r3, #1
 801c950:	e7f2      	b.n	801c938 <_printf_float+0x1a0>
 801c952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c958:	4299      	cmp	r1, r3
 801c95a:	db05      	blt.n	801c968 <_printf_float+0x1d0>
 801c95c:	6823      	ldr	r3, [r4, #0]
 801c95e:	6121      	str	r1, [r4, #16]
 801c960:	07d8      	lsls	r0, r3, #31
 801c962:	d5ea      	bpl.n	801c93a <_printf_float+0x1a2>
 801c964:	1c4b      	adds	r3, r1, #1
 801c966:	e7e7      	b.n	801c938 <_printf_float+0x1a0>
 801c968:	2900      	cmp	r1, #0
 801c96a:	bfd4      	ite	le
 801c96c:	f1c1 0202 	rsble	r2, r1, #2
 801c970:	2201      	movgt	r2, #1
 801c972:	4413      	add	r3, r2
 801c974:	e7e0      	b.n	801c938 <_printf_float+0x1a0>
 801c976:	6823      	ldr	r3, [r4, #0]
 801c978:	055a      	lsls	r2, r3, #21
 801c97a:	d407      	bmi.n	801c98c <_printf_float+0x1f4>
 801c97c:	6923      	ldr	r3, [r4, #16]
 801c97e:	4642      	mov	r2, r8
 801c980:	4631      	mov	r1, r6
 801c982:	4628      	mov	r0, r5
 801c984:	47b8      	blx	r7
 801c986:	3001      	adds	r0, #1
 801c988:	d12c      	bne.n	801c9e4 <_printf_float+0x24c>
 801c98a:	e764      	b.n	801c856 <_printf_float+0xbe>
 801c98c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c990:	f240 80e0 	bls.w	801cb54 <_printf_float+0x3bc>
 801c994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c998:	2200      	movs	r2, #0
 801c99a:	2300      	movs	r3, #0
 801c99c:	f7e4 f8b4 	bl	8000b08 <__aeabi_dcmpeq>
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	d034      	beq.n	801ca0e <_printf_float+0x276>
 801c9a4:	4a37      	ldr	r2, [pc, #220]	; (801ca84 <_printf_float+0x2ec>)
 801c9a6:	2301      	movs	r3, #1
 801c9a8:	4631      	mov	r1, r6
 801c9aa:	4628      	mov	r0, r5
 801c9ac:	47b8      	blx	r7
 801c9ae:	3001      	adds	r0, #1
 801c9b0:	f43f af51 	beq.w	801c856 <_printf_float+0xbe>
 801c9b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c9b8:	429a      	cmp	r2, r3
 801c9ba:	db02      	blt.n	801c9c2 <_printf_float+0x22a>
 801c9bc:	6823      	ldr	r3, [r4, #0]
 801c9be:	07d8      	lsls	r0, r3, #31
 801c9c0:	d510      	bpl.n	801c9e4 <_printf_float+0x24c>
 801c9c2:	ee18 3a10 	vmov	r3, s16
 801c9c6:	4652      	mov	r2, sl
 801c9c8:	4631      	mov	r1, r6
 801c9ca:	4628      	mov	r0, r5
 801c9cc:	47b8      	blx	r7
 801c9ce:	3001      	adds	r0, #1
 801c9d0:	f43f af41 	beq.w	801c856 <_printf_float+0xbe>
 801c9d4:	f04f 0800 	mov.w	r8, #0
 801c9d8:	f104 091a 	add.w	r9, r4, #26
 801c9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9de:	3b01      	subs	r3, #1
 801c9e0:	4543      	cmp	r3, r8
 801c9e2:	dc09      	bgt.n	801c9f8 <_printf_float+0x260>
 801c9e4:	6823      	ldr	r3, [r4, #0]
 801c9e6:	079b      	lsls	r3, r3, #30
 801c9e8:	f100 8107 	bmi.w	801cbfa <_printf_float+0x462>
 801c9ec:	68e0      	ldr	r0, [r4, #12]
 801c9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c9f0:	4298      	cmp	r0, r3
 801c9f2:	bfb8      	it	lt
 801c9f4:	4618      	movlt	r0, r3
 801c9f6:	e730      	b.n	801c85a <_printf_float+0xc2>
 801c9f8:	2301      	movs	r3, #1
 801c9fa:	464a      	mov	r2, r9
 801c9fc:	4631      	mov	r1, r6
 801c9fe:	4628      	mov	r0, r5
 801ca00:	47b8      	blx	r7
 801ca02:	3001      	adds	r0, #1
 801ca04:	f43f af27 	beq.w	801c856 <_printf_float+0xbe>
 801ca08:	f108 0801 	add.w	r8, r8, #1
 801ca0c:	e7e6      	b.n	801c9dc <_printf_float+0x244>
 801ca0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	dc39      	bgt.n	801ca88 <_printf_float+0x2f0>
 801ca14:	4a1b      	ldr	r2, [pc, #108]	; (801ca84 <_printf_float+0x2ec>)
 801ca16:	2301      	movs	r3, #1
 801ca18:	4631      	mov	r1, r6
 801ca1a:	4628      	mov	r0, r5
 801ca1c:	47b8      	blx	r7
 801ca1e:	3001      	adds	r0, #1
 801ca20:	f43f af19 	beq.w	801c856 <_printf_float+0xbe>
 801ca24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801ca28:	4313      	orrs	r3, r2
 801ca2a:	d102      	bne.n	801ca32 <_printf_float+0x29a>
 801ca2c:	6823      	ldr	r3, [r4, #0]
 801ca2e:	07d9      	lsls	r1, r3, #31
 801ca30:	d5d8      	bpl.n	801c9e4 <_printf_float+0x24c>
 801ca32:	ee18 3a10 	vmov	r3, s16
 801ca36:	4652      	mov	r2, sl
 801ca38:	4631      	mov	r1, r6
 801ca3a:	4628      	mov	r0, r5
 801ca3c:	47b8      	blx	r7
 801ca3e:	3001      	adds	r0, #1
 801ca40:	f43f af09 	beq.w	801c856 <_printf_float+0xbe>
 801ca44:	f04f 0900 	mov.w	r9, #0
 801ca48:	f104 0a1a 	add.w	sl, r4, #26
 801ca4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca4e:	425b      	negs	r3, r3
 801ca50:	454b      	cmp	r3, r9
 801ca52:	dc01      	bgt.n	801ca58 <_printf_float+0x2c0>
 801ca54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca56:	e792      	b.n	801c97e <_printf_float+0x1e6>
 801ca58:	2301      	movs	r3, #1
 801ca5a:	4652      	mov	r2, sl
 801ca5c:	4631      	mov	r1, r6
 801ca5e:	4628      	mov	r0, r5
 801ca60:	47b8      	blx	r7
 801ca62:	3001      	adds	r0, #1
 801ca64:	f43f aef7 	beq.w	801c856 <_printf_float+0xbe>
 801ca68:	f109 0901 	add.w	r9, r9, #1
 801ca6c:	e7ee      	b.n	801ca4c <_printf_float+0x2b4>
 801ca6e:	bf00      	nop
 801ca70:	7fefffff 	.word	0x7fefffff
 801ca74:	08024788 	.word	0x08024788
 801ca78:	0802478c 	.word	0x0802478c
 801ca7c:	08024790 	.word	0x08024790
 801ca80:	08024794 	.word	0x08024794
 801ca84:	08024798 	.word	0x08024798
 801ca88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ca8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ca8c:	429a      	cmp	r2, r3
 801ca8e:	bfa8      	it	ge
 801ca90:	461a      	movge	r2, r3
 801ca92:	2a00      	cmp	r2, #0
 801ca94:	4691      	mov	r9, r2
 801ca96:	dc37      	bgt.n	801cb08 <_printf_float+0x370>
 801ca98:	f04f 0b00 	mov.w	fp, #0
 801ca9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801caa0:	f104 021a 	add.w	r2, r4, #26
 801caa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801caa6:	9305      	str	r3, [sp, #20]
 801caa8:	eba3 0309 	sub.w	r3, r3, r9
 801caac:	455b      	cmp	r3, fp
 801caae:	dc33      	bgt.n	801cb18 <_printf_float+0x380>
 801cab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cab4:	429a      	cmp	r2, r3
 801cab6:	db3b      	blt.n	801cb30 <_printf_float+0x398>
 801cab8:	6823      	ldr	r3, [r4, #0]
 801caba:	07da      	lsls	r2, r3, #31
 801cabc:	d438      	bmi.n	801cb30 <_printf_float+0x398>
 801cabe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cac2:	eba2 0903 	sub.w	r9, r2, r3
 801cac6:	9b05      	ldr	r3, [sp, #20]
 801cac8:	1ad2      	subs	r2, r2, r3
 801caca:	4591      	cmp	r9, r2
 801cacc:	bfa8      	it	ge
 801cace:	4691      	movge	r9, r2
 801cad0:	f1b9 0f00 	cmp.w	r9, #0
 801cad4:	dc35      	bgt.n	801cb42 <_printf_float+0x3aa>
 801cad6:	f04f 0800 	mov.w	r8, #0
 801cada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cade:	f104 0a1a 	add.w	sl, r4, #26
 801cae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cae6:	1a9b      	subs	r3, r3, r2
 801cae8:	eba3 0309 	sub.w	r3, r3, r9
 801caec:	4543      	cmp	r3, r8
 801caee:	f77f af79 	ble.w	801c9e4 <_printf_float+0x24c>
 801caf2:	2301      	movs	r3, #1
 801caf4:	4652      	mov	r2, sl
 801caf6:	4631      	mov	r1, r6
 801caf8:	4628      	mov	r0, r5
 801cafa:	47b8      	blx	r7
 801cafc:	3001      	adds	r0, #1
 801cafe:	f43f aeaa 	beq.w	801c856 <_printf_float+0xbe>
 801cb02:	f108 0801 	add.w	r8, r8, #1
 801cb06:	e7ec      	b.n	801cae2 <_printf_float+0x34a>
 801cb08:	4613      	mov	r3, r2
 801cb0a:	4631      	mov	r1, r6
 801cb0c:	4642      	mov	r2, r8
 801cb0e:	4628      	mov	r0, r5
 801cb10:	47b8      	blx	r7
 801cb12:	3001      	adds	r0, #1
 801cb14:	d1c0      	bne.n	801ca98 <_printf_float+0x300>
 801cb16:	e69e      	b.n	801c856 <_printf_float+0xbe>
 801cb18:	2301      	movs	r3, #1
 801cb1a:	4631      	mov	r1, r6
 801cb1c:	4628      	mov	r0, r5
 801cb1e:	9205      	str	r2, [sp, #20]
 801cb20:	47b8      	blx	r7
 801cb22:	3001      	adds	r0, #1
 801cb24:	f43f ae97 	beq.w	801c856 <_printf_float+0xbe>
 801cb28:	9a05      	ldr	r2, [sp, #20]
 801cb2a:	f10b 0b01 	add.w	fp, fp, #1
 801cb2e:	e7b9      	b.n	801caa4 <_printf_float+0x30c>
 801cb30:	ee18 3a10 	vmov	r3, s16
 801cb34:	4652      	mov	r2, sl
 801cb36:	4631      	mov	r1, r6
 801cb38:	4628      	mov	r0, r5
 801cb3a:	47b8      	blx	r7
 801cb3c:	3001      	adds	r0, #1
 801cb3e:	d1be      	bne.n	801cabe <_printf_float+0x326>
 801cb40:	e689      	b.n	801c856 <_printf_float+0xbe>
 801cb42:	9a05      	ldr	r2, [sp, #20]
 801cb44:	464b      	mov	r3, r9
 801cb46:	4442      	add	r2, r8
 801cb48:	4631      	mov	r1, r6
 801cb4a:	4628      	mov	r0, r5
 801cb4c:	47b8      	blx	r7
 801cb4e:	3001      	adds	r0, #1
 801cb50:	d1c1      	bne.n	801cad6 <_printf_float+0x33e>
 801cb52:	e680      	b.n	801c856 <_printf_float+0xbe>
 801cb54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cb56:	2a01      	cmp	r2, #1
 801cb58:	dc01      	bgt.n	801cb5e <_printf_float+0x3c6>
 801cb5a:	07db      	lsls	r3, r3, #31
 801cb5c:	d53a      	bpl.n	801cbd4 <_printf_float+0x43c>
 801cb5e:	2301      	movs	r3, #1
 801cb60:	4642      	mov	r2, r8
 801cb62:	4631      	mov	r1, r6
 801cb64:	4628      	mov	r0, r5
 801cb66:	47b8      	blx	r7
 801cb68:	3001      	adds	r0, #1
 801cb6a:	f43f ae74 	beq.w	801c856 <_printf_float+0xbe>
 801cb6e:	ee18 3a10 	vmov	r3, s16
 801cb72:	4652      	mov	r2, sl
 801cb74:	4631      	mov	r1, r6
 801cb76:	4628      	mov	r0, r5
 801cb78:	47b8      	blx	r7
 801cb7a:	3001      	adds	r0, #1
 801cb7c:	f43f ae6b 	beq.w	801c856 <_printf_float+0xbe>
 801cb80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cb84:	2200      	movs	r2, #0
 801cb86:	2300      	movs	r3, #0
 801cb88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801cb8c:	f7e3 ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 801cb90:	b9d8      	cbnz	r0, 801cbca <_printf_float+0x432>
 801cb92:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cb96:	f108 0201 	add.w	r2, r8, #1
 801cb9a:	4631      	mov	r1, r6
 801cb9c:	4628      	mov	r0, r5
 801cb9e:	47b8      	blx	r7
 801cba0:	3001      	adds	r0, #1
 801cba2:	d10e      	bne.n	801cbc2 <_printf_float+0x42a>
 801cba4:	e657      	b.n	801c856 <_printf_float+0xbe>
 801cba6:	2301      	movs	r3, #1
 801cba8:	4652      	mov	r2, sl
 801cbaa:	4631      	mov	r1, r6
 801cbac:	4628      	mov	r0, r5
 801cbae:	47b8      	blx	r7
 801cbb0:	3001      	adds	r0, #1
 801cbb2:	f43f ae50 	beq.w	801c856 <_printf_float+0xbe>
 801cbb6:	f108 0801 	add.w	r8, r8, #1
 801cbba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbbc:	3b01      	subs	r3, #1
 801cbbe:	4543      	cmp	r3, r8
 801cbc0:	dcf1      	bgt.n	801cba6 <_printf_float+0x40e>
 801cbc2:	464b      	mov	r3, r9
 801cbc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801cbc8:	e6da      	b.n	801c980 <_printf_float+0x1e8>
 801cbca:	f04f 0800 	mov.w	r8, #0
 801cbce:	f104 0a1a 	add.w	sl, r4, #26
 801cbd2:	e7f2      	b.n	801cbba <_printf_float+0x422>
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	4642      	mov	r2, r8
 801cbd8:	e7df      	b.n	801cb9a <_printf_float+0x402>
 801cbda:	2301      	movs	r3, #1
 801cbdc:	464a      	mov	r2, r9
 801cbde:	4631      	mov	r1, r6
 801cbe0:	4628      	mov	r0, r5
 801cbe2:	47b8      	blx	r7
 801cbe4:	3001      	adds	r0, #1
 801cbe6:	f43f ae36 	beq.w	801c856 <_printf_float+0xbe>
 801cbea:	f108 0801 	add.w	r8, r8, #1
 801cbee:	68e3      	ldr	r3, [r4, #12]
 801cbf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cbf2:	1a5b      	subs	r3, r3, r1
 801cbf4:	4543      	cmp	r3, r8
 801cbf6:	dcf0      	bgt.n	801cbda <_printf_float+0x442>
 801cbf8:	e6f8      	b.n	801c9ec <_printf_float+0x254>
 801cbfa:	f04f 0800 	mov.w	r8, #0
 801cbfe:	f104 0919 	add.w	r9, r4, #25
 801cc02:	e7f4      	b.n	801cbee <_printf_float+0x456>

0801cc04 <_printf_common>:
 801cc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc08:	4616      	mov	r6, r2
 801cc0a:	4699      	mov	r9, r3
 801cc0c:	688a      	ldr	r2, [r1, #8]
 801cc0e:	690b      	ldr	r3, [r1, #16]
 801cc10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cc14:	4293      	cmp	r3, r2
 801cc16:	bfb8      	it	lt
 801cc18:	4613      	movlt	r3, r2
 801cc1a:	6033      	str	r3, [r6, #0]
 801cc1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cc20:	4607      	mov	r7, r0
 801cc22:	460c      	mov	r4, r1
 801cc24:	b10a      	cbz	r2, 801cc2a <_printf_common+0x26>
 801cc26:	3301      	adds	r3, #1
 801cc28:	6033      	str	r3, [r6, #0]
 801cc2a:	6823      	ldr	r3, [r4, #0]
 801cc2c:	0699      	lsls	r1, r3, #26
 801cc2e:	bf42      	ittt	mi
 801cc30:	6833      	ldrmi	r3, [r6, #0]
 801cc32:	3302      	addmi	r3, #2
 801cc34:	6033      	strmi	r3, [r6, #0]
 801cc36:	6825      	ldr	r5, [r4, #0]
 801cc38:	f015 0506 	ands.w	r5, r5, #6
 801cc3c:	d106      	bne.n	801cc4c <_printf_common+0x48>
 801cc3e:	f104 0a19 	add.w	sl, r4, #25
 801cc42:	68e3      	ldr	r3, [r4, #12]
 801cc44:	6832      	ldr	r2, [r6, #0]
 801cc46:	1a9b      	subs	r3, r3, r2
 801cc48:	42ab      	cmp	r3, r5
 801cc4a:	dc26      	bgt.n	801cc9a <_printf_common+0x96>
 801cc4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cc50:	1e13      	subs	r3, r2, #0
 801cc52:	6822      	ldr	r2, [r4, #0]
 801cc54:	bf18      	it	ne
 801cc56:	2301      	movne	r3, #1
 801cc58:	0692      	lsls	r2, r2, #26
 801cc5a:	d42b      	bmi.n	801ccb4 <_printf_common+0xb0>
 801cc5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cc60:	4649      	mov	r1, r9
 801cc62:	4638      	mov	r0, r7
 801cc64:	47c0      	blx	r8
 801cc66:	3001      	adds	r0, #1
 801cc68:	d01e      	beq.n	801cca8 <_printf_common+0xa4>
 801cc6a:	6823      	ldr	r3, [r4, #0]
 801cc6c:	6922      	ldr	r2, [r4, #16]
 801cc6e:	f003 0306 	and.w	r3, r3, #6
 801cc72:	2b04      	cmp	r3, #4
 801cc74:	bf02      	ittt	eq
 801cc76:	68e5      	ldreq	r5, [r4, #12]
 801cc78:	6833      	ldreq	r3, [r6, #0]
 801cc7a:	1aed      	subeq	r5, r5, r3
 801cc7c:	68a3      	ldr	r3, [r4, #8]
 801cc7e:	bf0c      	ite	eq
 801cc80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cc84:	2500      	movne	r5, #0
 801cc86:	4293      	cmp	r3, r2
 801cc88:	bfc4      	itt	gt
 801cc8a:	1a9b      	subgt	r3, r3, r2
 801cc8c:	18ed      	addgt	r5, r5, r3
 801cc8e:	2600      	movs	r6, #0
 801cc90:	341a      	adds	r4, #26
 801cc92:	42b5      	cmp	r5, r6
 801cc94:	d11a      	bne.n	801cccc <_printf_common+0xc8>
 801cc96:	2000      	movs	r0, #0
 801cc98:	e008      	b.n	801ccac <_printf_common+0xa8>
 801cc9a:	2301      	movs	r3, #1
 801cc9c:	4652      	mov	r2, sl
 801cc9e:	4649      	mov	r1, r9
 801cca0:	4638      	mov	r0, r7
 801cca2:	47c0      	blx	r8
 801cca4:	3001      	adds	r0, #1
 801cca6:	d103      	bne.n	801ccb0 <_printf_common+0xac>
 801cca8:	f04f 30ff 	mov.w	r0, #4294967295
 801ccac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccb0:	3501      	adds	r5, #1
 801ccb2:	e7c6      	b.n	801cc42 <_printf_common+0x3e>
 801ccb4:	18e1      	adds	r1, r4, r3
 801ccb6:	1c5a      	adds	r2, r3, #1
 801ccb8:	2030      	movs	r0, #48	; 0x30
 801ccba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ccbe:	4422      	add	r2, r4
 801ccc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ccc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ccc8:	3302      	adds	r3, #2
 801ccca:	e7c7      	b.n	801cc5c <_printf_common+0x58>
 801cccc:	2301      	movs	r3, #1
 801ccce:	4622      	mov	r2, r4
 801ccd0:	4649      	mov	r1, r9
 801ccd2:	4638      	mov	r0, r7
 801ccd4:	47c0      	blx	r8
 801ccd6:	3001      	adds	r0, #1
 801ccd8:	d0e6      	beq.n	801cca8 <_printf_common+0xa4>
 801ccda:	3601      	adds	r6, #1
 801ccdc:	e7d9      	b.n	801cc92 <_printf_common+0x8e>
	...

0801cce0 <_printf_i>:
 801cce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cce4:	7e0f      	ldrb	r7, [r1, #24]
 801cce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cce8:	2f78      	cmp	r7, #120	; 0x78
 801ccea:	4691      	mov	r9, r2
 801ccec:	4680      	mov	r8, r0
 801ccee:	460c      	mov	r4, r1
 801ccf0:	469a      	mov	sl, r3
 801ccf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ccf6:	d807      	bhi.n	801cd08 <_printf_i+0x28>
 801ccf8:	2f62      	cmp	r7, #98	; 0x62
 801ccfa:	d80a      	bhi.n	801cd12 <_printf_i+0x32>
 801ccfc:	2f00      	cmp	r7, #0
 801ccfe:	f000 80d4 	beq.w	801ceaa <_printf_i+0x1ca>
 801cd02:	2f58      	cmp	r7, #88	; 0x58
 801cd04:	f000 80c0 	beq.w	801ce88 <_printf_i+0x1a8>
 801cd08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cd0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cd10:	e03a      	b.n	801cd88 <_printf_i+0xa8>
 801cd12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cd16:	2b15      	cmp	r3, #21
 801cd18:	d8f6      	bhi.n	801cd08 <_printf_i+0x28>
 801cd1a:	a101      	add	r1, pc, #4	; (adr r1, 801cd20 <_printf_i+0x40>)
 801cd1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cd20:	0801cd79 	.word	0x0801cd79
 801cd24:	0801cd8d 	.word	0x0801cd8d
 801cd28:	0801cd09 	.word	0x0801cd09
 801cd2c:	0801cd09 	.word	0x0801cd09
 801cd30:	0801cd09 	.word	0x0801cd09
 801cd34:	0801cd09 	.word	0x0801cd09
 801cd38:	0801cd8d 	.word	0x0801cd8d
 801cd3c:	0801cd09 	.word	0x0801cd09
 801cd40:	0801cd09 	.word	0x0801cd09
 801cd44:	0801cd09 	.word	0x0801cd09
 801cd48:	0801cd09 	.word	0x0801cd09
 801cd4c:	0801ce91 	.word	0x0801ce91
 801cd50:	0801cdb9 	.word	0x0801cdb9
 801cd54:	0801ce4b 	.word	0x0801ce4b
 801cd58:	0801cd09 	.word	0x0801cd09
 801cd5c:	0801cd09 	.word	0x0801cd09
 801cd60:	0801ceb3 	.word	0x0801ceb3
 801cd64:	0801cd09 	.word	0x0801cd09
 801cd68:	0801cdb9 	.word	0x0801cdb9
 801cd6c:	0801cd09 	.word	0x0801cd09
 801cd70:	0801cd09 	.word	0x0801cd09
 801cd74:	0801ce53 	.word	0x0801ce53
 801cd78:	682b      	ldr	r3, [r5, #0]
 801cd7a:	1d1a      	adds	r2, r3, #4
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	602a      	str	r2, [r5, #0]
 801cd80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cd84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cd88:	2301      	movs	r3, #1
 801cd8a:	e09f      	b.n	801cecc <_printf_i+0x1ec>
 801cd8c:	6820      	ldr	r0, [r4, #0]
 801cd8e:	682b      	ldr	r3, [r5, #0]
 801cd90:	0607      	lsls	r7, r0, #24
 801cd92:	f103 0104 	add.w	r1, r3, #4
 801cd96:	6029      	str	r1, [r5, #0]
 801cd98:	d501      	bpl.n	801cd9e <_printf_i+0xbe>
 801cd9a:	681e      	ldr	r6, [r3, #0]
 801cd9c:	e003      	b.n	801cda6 <_printf_i+0xc6>
 801cd9e:	0646      	lsls	r6, r0, #25
 801cda0:	d5fb      	bpl.n	801cd9a <_printf_i+0xba>
 801cda2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cda6:	2e00      	cmp	r6, #0
 801cda8:	da03      	bge.n	801cdb2 <_printf_i+0xd2>
 801cdaa:	232d      	movs	r3, #45	; 0x2d
 801cdac:	4276      	negs	r6, r6
 801cdae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cdb2:	485a      	ldr	r0, [pc, #360]	; (801cf1c <_printf_i+0x23c>)
 801cdb4:	230a      	movs	r3, #10
 801cdb6:	e012      	b.n	801cdde <_printf_i+0xfe>
 801cdb8:	682b      	ldr	r3, [r5, #0]
 801cdba:	6820      	ldr	r0, [r4, #0]
 801cdbc:	1d19      	adds	r1, r3, #4
 801cdbe:	6029      	str	r1, [r5, #0]
 801cdc0:	0605      	lsls	r5, r0, #24
 801cdc2:	d501      	bpl.n	801cdc8 <_printf_i+0xe8>
 801cdc4:	681e      	ldr	r6, [r3, #0]
 801cdc6:	e002      	b.n	801cdce <_printf_i+0xee>
 801cdc8:	0641      	lsls	r1, r0, #25
 801cdca:	d5fb      	bpl.n	801cdc4 <_printf_i+0xe4>
 801cdcc:	881e      	ldrh	r6, [r3, #0]
 801cdce:	4853      	ldr	r0, [pc, #332]	; (801cf1c <_printf_i+0x23c>)
 801cdd0:	2f6f      	cmp	r7, #111	; 0x6f
 801cdd2:	bf0c      	ite	eq
 801cdd4:	2308      	moveq	r3, #8
 801cdd6:	230a      	movne	r3, #10
 801cdd8:	2100      	movs	r1, #0
 801cdda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cdde:	6865      	ldr	r5, [r4, #4]
 801cde0:	60a5      	str	r5, [r4, #8]
 801cde2:	2d00      	cmp	r5, #0
 801cde4:	bfa2      	ittt	ge
 801cde6:	6821      	ldrge	r1, [r4, #0]
 801cde8:	f021 0104 	bicge.w	r1, r1, #4
 801cdec:	6021      	strge	r1, [r4, #0]
 801cdee:	b90e      	cbnz	r6, 801cdf4 <_printf_i+0x114>
 801cdf0:	2d00      	cmp	r5, #0
 801cdf2:	d04b      	beq.n	801ce8c <_printf_i+0x1ac>
 801cdf4:	4615      	mov	r5, r2
 801cdf6:	fbb6 f1f3 	udiv	r1, r6, r3
 801cdfa:	fb03 6711 	mls	r7, r3, r1, r6
 801cdfe:	5dc7      	ldrb	r7, [r0, r7]
 801ce00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ce04:	4637      	mov	r7, r6
 801ce06:	42bb      	cmp	r3, r7
 801ce08:	460e      	mov	r6, r1
 801ce0a:	d9f4      	bls.n	801cdf6 <_printf_i+0x116>
 801ce0c:	2b08      	cmp	r3, #8
 801ce0e:	d10b      	bne.n	801ce28 <_printf_i+0x148>
 801ce10:	6823      	ldr	r3, [r4, #0]
 801ce12:	07de      	lsls	r6, r3, #31
 801ce14:	d508      	bpl.n	801ce28 <_printf_i+0x148>
 801ce16:	6923      	ldr	r3, [r4, #16]
 801ce18:	6861      	ldr	r1, [r4, #4]
 801ce1a:	4299      	cmp	r1, r3
 801ce1c:	bfde      	ittt	le
 801ce1e:	2330      	movle	r3, #48	; 0x30
 801ce20:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ce24:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ce28:	1b52      	subs	r2, r2, r5
 801ce2a:	6122      	str	r2, [r4, #16]
 801ce2c:	f8cd a000 	str.w	sl, [sp]
 801ce30:	464b      	mov	r3, r9
 801ce32:	aa03      	add	r2, sp, #12
 801ce34:	4621      	mov	r1, r4
 801ce36:	4640      	mov	r0, r8
 801ce38:	f7ff fee4 	bl	801cc04 <_printf_common>
 801ce3c:	3001      	adds	r0, #1
 801ce3e:	d14a      	bne.n	801ced6 <_printf_i+0x1f6>
 801ce40:	f04f 30ff 	mov.w	r0, #4294967295
 801ce44:	b004      	add	sp, #16
 801ce46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce4a:	6823      	ldr	r3, [r4, #0]
 801ce4c:	f043 0320 	orr.w	r3, r3, #32
 801ce50:	6023      	str	r3, [r4, #0]
 801ce52:	4833      	ldr	r0, [pc, #204]	; (801cf20 <_printf_i+0x240>)
 801ce54:	2778      	movs	r7, #120	; 0x78
 801ce56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ce5a:	6823      	ldr	r3, [r4, #0]
 801ce5c:	6829      	ldr	r1, [r5, #0]
 801ce5e:	061f      	lsls	r7, r3, #24
 801ce60:	f851 6b04 	ldr.w	r6, [r1], #4
 801ce64:	d402      	bmi.n	801ce6c <_printf_i+0x18c>
 801ce66:	065f      	lsls	r7, r3, #25
 801ce68:	bf48      	it	mi
 801ce6a:	b2b6      	uxthmi	r6, r6
 801ce6c:	07df      	lsls	r7, r3, #31
 801ce6e:	bf48      	it	mi
 801ce70:	f043 0320 	orrmi.w	r3, r3, #32
 801ce74:	6029      	str	r1, [r5, #0]
 801ce76:	bf48      	it	mi
 801ce78:	6023      	strmi	r3, [r4, #0]
 801ce7a:	b91e      	cbnz	r6, 801ce84 <_printf_i+0x1a4>
 801ce7c:	6823      	ldr	r3, [r4, #0]
 801ce7e:	f023 0320 	bic.w	r3, r3, #32
 801ce82:	6023      	str	r3, [r4, #0]
 801ce84:	2310      	movs	r3, #16
 801ce86:	e7a7      	b.n	801cdd8 <_printf_i+0xf8>
 801ce88:	4824      	ldr	r0, [pc, #144]	; (801cf1c <_printf_i+0x23c>)
 801ce8a:	e7e4      	b.n	801ce56 <_printf_i+0x176>
 801ce8c:	4615      	mov	r5, r2
 801ce8e:	e7bd      	b.n	801ce0c <_printf_i+0x12c>
 801ce90:	682b      	ldr	r3, [r5, #0]
 801ce92:	6826      	ldr	r6, [r4, #0]
 801ce94:	6961      	ldr	r1, [r4, #20]
 801ce96:	1d18      	adds	r0, r3, #4
 801ce98:	6028      	str	r0, [r5, #0]
 801ce9a:	0635      	lsls	r5, r6, #24
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	d501      	bpl.n	801cea4 <_printf_i+0x1c4>
 801cea0:	6019      	str	r1, [r3, #0]
 801cea2:	e002      	b.n	801ceaa <_printf_i+0x1ca>
 801cea4:	0670      	lsls	r0, r6, #25
 801cea6:	d5fb      	bpl.n	801cea0 <_printf_i+0x1c0>
 801cea8:	8019      	strh	r1, [r3, #0]
 801ceaa:	2300      	movs	r3, #0
 801ceac:	6123      	str	r3, [r4, #16]
 801ceae:	4615      	mov	r5, r2
 801ceb0:	e7bc      	b.n	801ce2c <_printf_i+0x14c>
 801ceb2:	682b      	ldr	r3, [r5, #0]
 801ceb4:	1d1a      	adds	r2, r3, #4
 801ceb6:	602a      	str	r2, [r5, #0]
 801ceb8:	681d      	ldr	r5, [r3, #0]
 801ceba:	6862      	ldr	r2, [r4, #4]
 801cebc:	2100      	movs	r1, #0
 801cebe:	4628      	mov	r0, r5
 801cec0:	f7e3 f9a6 	bl	8000210 <memchr>
 801cec4:	b108      	cbz	r0, 801ceca <_printf_i+0x1ea>
 801cec6:	1b40      	subs	r0, r0, r5
 801cec8:	6060      	str	r0, [r4, #4]
 801ceca:	6863      	ldr	r3, [r4, #4]
 801cecc:	6123      	str	r3, [r4, #16]
 801cece:	2300      	movs	r3, #0
 801ced0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ced4:	e7aa      	b.n	801ce2c <_printf_i+0x14c>
 801ced6:	6923      	ldr	r3, [r4, #16]
 801ced8:	462a      	mov	r2, r5
 801ceda:	4649      	mov	r1, r9
 801cedc:	4640      	mov	r0, r8
 801cede:	47d0      	blx	sl
 801cee0:	3001      	adds	r0, #1
 801cee2:	d0ad      	beq.n	801ce40 <_printf_i+0x160>
 801cee4:	6823      	ldr	r3, [r4, #0]
 801cee6:	079b      	lsls	r3, r3, #30
 801cee8:	d413      	bmi.n	801cf12 <_printf_i+0x232>
 801ceea:	68e0      	ldr	r0, [r4, #12]
 801ceec:	9b03      	ldr	r3, [sp, #12]
 801ceee:	4298      	cmp	r0, r3
 801cef0:	bfb8      	it	lt
 801cef2:	4618      	movlt	r0, r3
 801cef4:	e7a6      	b.n	801ce44 <_printf_i+0x164>
 801cef6:	2301      	movs	r3, #1
 801cef8:	4632      	mov	r2, r6
 801cefa:	4649      	mov	r1, r9
 801cefc:	4640      	mov	r0, r8
 801cefe:	47d0      	blx	sl
 801cf00:	3001      	adds	r0, #1
 801cf02:	d09d      	beq.n	801ce40 <_printf_i+0x160>
 801cf04:	3501      	adds	r5, #1
 801cf06:	68e3      	ldr	r3, [r4, #12]
 801cf08:	9903      	ldr	r1, [sp, #12]
 801cf0a:	1a5b      	subs	r3, r3, r1
 801cf0c:	42ab      	cmp	r3, r5
 801cf0e:	dcf2      	bgt.n	801cef6 <_printf_i+0x216>
 801cf10:	e7eb      	b.n	801ceea <_printf_i+0x20a>
 801cf12:	2500      	movs	r5, #0
 801cf14:	f104 0619 	add.w	r6, r4, #25
 801cf18:	e7f5      	b.n	801cf06 <_printf_i+0x226>
 801cf1a:	bf00      	nop
 801cf1c:	0802479a 	.word	0x0802479a
 801cf20:	080247ab 	.word	0x080247ab

0801cf24 <std>:
 801cf24:	2300      	movs	r3, #0
 801cf26:	b510      	push	{r4, lr}
 801cf28:	4604      	mov	r4, r0
 801cf2a:	e9c0 3300 	strd	r3, r3, [r0]
 801cf2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf32:	6083      	str	r3, [r0, #8]
 801cf34:	8181      	strh	r1, [r0, #12]
 801cf36:	6643      	str	r3, [r0, #100]	; 0x64
 801cf38:	81c2      	strh	r2, [r0, #14]
 801cf3a:	6183      	str	r3, [r0, #24]
 801cf3c:	4619      	mov	r1, r3
 801cf3e:	2208      	movs	r2, #8
 801cf40:	305c      	adds	r0, #92	; 0x5c
 801cf42:	f000 fa53 	bl	801d3ec <memset>
 801cf46:	4b0d      	ldr	r3, [pc, #52]	; (801cf7c <std+0x58>)
 801cf48:	6263      	str	r3, [r4, #36]	; 0x24
 801cf4a:	4b0d      	ldr	r3, [pc, #52]	; (801cf80 <std+0x5c>)
 801cf4c:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf4e:	4b0d      	ldr	r3, [pc, #52]	; (801cf84 <std+0x60>)
 801cf50:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf52:	4b0d      	ldr	r3, [pc, #52]	; (801cf88 <std+0x64>)
 801cf54:	6323      	str	r3, [r4, #48]	; 0x30
 801cf56:	4b0d      	ldr	r3, [pc, #52]	; (801cf8c <std+0x68>)
 801cf58:	6224      	str	r4, [r4, #32]
 801cf5a:	429c      	cmp	r4, r3
 801cf5c:	d006      	beq.n	801cf6c <std+0x48>
 801cf5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cf62:	4294      	cmp	r4, r2
 801cf64:	d002      	beq.n	801cf6c <std+0x48>
 801cf66:	33d0      	adds	r3, #208	; 0xd0
 801cf68:	429c      	cmp	r4, r3
 801cf6a:	d105      	bne.n	801cf78 <std+0x54>
 801cf6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf74:	f000 bb28 	b.w	801d5c8 <__retarget_lock_init_recursive>
 801cf78:	bd10      	pop	{r4, pc}
 801cf7a:	bf00      	nop
 801cf7c:	0801d1e9 	.word	0x0801d1e9
 801cf80:	0801d20b 	.word	0x0801d20b
 801cf84:	0801d243 	.word	0x0801d243
 801cf88:	0801d267 	.word	0x0801d267
 801cf8c:	2001354c 	.word	0x2001354c

0801cf90 <stdio_exit_handler>:
 801cf90:	4a02      	ldr	r2, [pc, #8]	; (801cf9c <stdio_exit_handler+0xc>)
 801cf92:	4903      	ldr	r1, [pc, #12]	; (801cfa0 <stdio_exit_handler+0x10>)
 801cf94:	4803      	ldr	r0, [pc, #12]	; (801cfa4 <stdio_exit_handler+0x14>)
 801cf96:	f000 b87b 	b.w	801d090 <_fwalk_sglue>
 801cf9a:	bf00      	nop
 801cf9c:	20000030 	.word	0x20000030
 801cfa0:	0801f0c1 	.word	0x0801f0c1
 801cfa4:	2000003c 	.word	0x2000003c

0801cfa8 <cleanup_stdio>:
 801cfa8:	6841      	ldr	r1, [r0, #4]
 801cfaa:	4b0c      	ldr	r3, [pc, #48]	; (801cfdc <cleanup_stdio+0x34>)
 801cfac:	4299      	cmp	r1, r3
 801cfae:	b510      	push	{r4, lr}
 801cfb0:	4604      	mov	r4, r0
 801cfb2:	d001      	beq.n	801cfb8 <cleanup_stdio+0x10>
 801cfb4:	f002 f884 	bl	801f0c0 <_fflush_r>
 801cfb8:	68a1      	ldr	r1, [r4, #8]
 801cfba:	4b09      	ldr	r3, [pc, #36]	; (801cfe0 <cleanup_stdio+0x38>)
 801cfbc:	4299      	cmp	r1, r3
 801cfbe:	d002      	beq.n	801cfc6 <cleanup_stdio+0x1e>
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	f002 f87d 	bl	801f0c0 <_fflush_r>
 801cfc6:	68e1      	ldr	r1, [r4, #12]
 801cfc8:	4b06      	ldr	r3, [pc, #24]	; (801cfe4 <cleanup_stdio+0x3c>)
 801cfca:	4299      	cmp	r1, r3
 801cfcc:	d004      	beq.n	801cfd8 <cleanup_stdio+0x30>
 801cfce:	4620      	mov	r0, r4
 801cfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfd4:	f002 b874 	b.w	801f0c0 <_fflush_r>
 801cfd8:	bd10      	pop	{r4, pc}
 801cfda:	bf00      	nop
 801cfdc:	2001354c 	.word	0x2001354c
 801cfe0:	200135b4 	.word	0x200135b4
 801cfe4:	2001361c 	.word	0x2001361c

0801cfe8 <global_stdio_init.part.0>:
 801cfe8:	b510      	push	{r4, lr}
 801cfea:	4b0b      	ldr	r3, [pc, #44]	; (801d018 <global_stdio_init.part.0+0x30>)
 801cfec:	4c0b      	ldr	r4, [pc, #44]	; (801d01c <global_stdio_init.part.0+0x34>)
 801cfee:	4a0c      	ldr	r2, [pc, #48]	; (801d020 <global_stdio_init.part.0+0x38>)
 801cff0:	601a      	str	r2, [r3, #0]
 801cff2:	4620      	mov	r0, r4
 801cff4:	2200      	movs	r2, #0
 801cff6:	2104      	movs	r1, #4
 801cff8:	f7ff ff94 	bl	801cf24 <std>
 801cffc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d000:	2201      	movs	r2, #1
 801d002:	2109      	movs	r1, #9
 801d004:	f7ff ff8e 	bl	801cf24 <std>
 801d008:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d00c:	2202      	movs	r2, #2
 801d00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d012:	2112      	movs	r1, #18
 801d014:	f7ff bf86 	b.w	801cf24 <std>
 801d018:	20013684 	.word	0x20013684
 801d01c:	2001354c 	.word	0x2001354c
 801d020:	0801cf91 	.word	0x0801cf91

0801d024 <__sfp_lock_acquire>:
 801d024:	4801      	ldr	r0, [pc, #4]	; (801d02c <__sfp_lock_acquire+0x8>)
 801d026:	f000 bad0 	b.w	801d5ca <__retarget_lock_acquire_recursive>
 801d02a:	bf00      	nop
 801d02c:	2001368d 	.word	0x2001368d

0801d030 <__sfp_lock_release>:
 801d030:	4801      	ldr	r0, [pc, #4]	; (801d038 <__sfp_lock_release+0x8>)
 801d032:	f000 bacb 	b.w	801d5cc <__retarget_lock_release_recursive>
 801d036:	bf00      	nop
 801d038:	2001368d 	.word	0x2001368d

0801d03c <__sinit>:
 801d03c:	b510      	push	{r4, lr}
 801d03e:	4604      	mov	r4, r0
 801d040:	f7ff fff0 	bl	801d024 <__sfp_lock_acquire>
 801d044:	6a23      	ldr	r3, [r4, #32]
 801d046:	b11b      	cbz	r3, 801d050 <__sinit+0x14>
 801d048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d04c:	f7ff bff0 	b.w	801d030 <__sfp_lock_release>
 801d050:	4b04      	ldr	r3, [pc, #16]	; (801d064 <__sinit+0x28>)
 801d052:	6223      	str	r3, [r4, #32]
 801d054:	4b04      	ldr	r3, [pc, #16]	; (801d068 <__sinit+0x2c>)
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d1f5      	bne.n	801d048 <__sinit+0xc>
 801d05c:	f7ff ffc4 	bl	801cfe8 <global_stdio_init.part.0>
 801d060:	e7f2      	b.n	801d048 <__sinit+0xc>
 801d062:	bf00      	nop
 801d064:	0801cfa9 	.word	0x0801cfa9
 801d068:	20013684 	.word	0x20013684

0801d06c <fiprintf>:
 801d06c:	b40e      	push	{r1, r2, r3}
 801d06e:	b503      	push	{r0, r1, lr}
 801d070:	4601      	mov	r1, r0
 801d072:	ab03      	add	r3, sp, #12
 801d074:	4805      	ldr	r0, [pc, #20]	; (801d08c <fiprintf+0x20>)
 801d076:	f853 2b04 	ldr.w	r2, [r3], #4
 801d07a:	6800      	ldr	r0, [r0, #0]
 801d07c:	9301      	str	r3, [sp, #4]
 801d07e:	f001 fe7f 	bl	801ed80 <_vfiprintf_r>
 801d082:	b002      	add	sp, #8
 801d084:	f85d eb04 	ldr.w	lr, [sp], #4
 801d088:	b003      	add	sp, #12
 801d08a:	4770      	bx	lr
 801d08c:	20000088 	.word	0x20000088

0801d090 <_fwalk_sglue>:
 801d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d094:	4607      	mov	r7, r0
 801d096:	4688      	mov	r8, r1
 801d098:	4614      	mov	r4, r2
 801d09a:	2600      	movs	r6, #0
 801d09c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d0a0:	f1b9 0901 	subs.w	r9, r9, #1
 801d0a4:	d505      	bpl.n	801d0b2 <_fwalk_sglue+0x22>
 801d0a6:	6824      	ldr	r4, [r4, #0]
 801d0a8:	2c00      	cmp	r4, #0
 801d0aa:	d1f7      	bne.n	801d09c <_fwalk_sglue+0xc>
 801d0ac:	4630      	mov	r0, r6
 801d0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0b2:	89ab      	ldrh	r3, [r5, #12]
 801d0b4:	2b01      	cmp	r3, #1
 801d0b6:	d907      	bls.n	801d0c8 <_fwalk_sglue+0x38>
 801d0b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d0bc:	3301      	adds	r3, #1
 801d0be:	d003      	beq.n	801d0c8 <_fwalk_sglue+0x38>
 801d0c0:	4629      	mov	r1, r5
 801d0c2:	4638      	mov	r0, r7
 801d0c4:	47c0      	blx	r8
 801d0c6:	4306      	orrs	r6, r0
 801d0c8:	3568      	adds	r5, #104	; 0x68
 801d0ca:	e7e9      	b.n	801d0a0 <_fwalk_sglue+0x10>

0801d0cc <iprintf>:
 801d0cc:	b40f      	push	{r0, r1, r2, r3}
 801d0ce:	b507      	push	{r0, r1, r2, lr}
 801d0d0:	4906      	ldr	r1, [pc, #24]	; (801d0ec <iprintf+0x20>)
 801d0d2:	ab04      	add	r3, sp, #16
 801d0d4:	6808      	ldr	r0, [r1, #0]
 801d0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0da:	6881      	ldr	r1, [r0, #8]
 801d0dc:	9301      	str	r3, [sp, #4]
 801d0de:	f001 fe4f 	bl	801ed80 <_vfiprintf_r>
 801d0e2:	b003      	add	sp, #12
 801d0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0e8:	b004      	add	sp, #16
 801d0ea:	4770      	bx	lr
 801d0ec:	20000088 	.word	0x20000088

0801d0f0 <_puts_r>:
 801d0f0:	6a03      	ldr	r3, [r0, #32]
 801d0f2:	b570      	push	{r4, r5, r6, lr}
 801d0f4:	6884      	ldr	r4, [r0, #8]
 801d0f6:	4605      	mov	r5, r0
 801d0f8:	460e      	mov	r6, r1
 801d0fa:	b90b      	cbnz	r3, 801d100 <_puts_r+0x10>
 801d0fc:	f7ff ff9e 	bl	801d03c <__sinit>
 801d100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d102:	07db      	lsls	r3, r3, #31
 801d104:	d405      	bmi.n	801d112 <_puts_r+0x22>
 801d106:	89a3      	ldrh	r3, [r4, #12]
 801d108:	0598      	lsls	r0, r3, #22
 801d10a:	d402      	bmi.n	801d112 <_puts_r+0x22>
 801d10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d10e:	f000 fa5c 	bl	801d5ca <__retarget_lock_acquire_recursive>
 801d112:	89a3      	ldrh	r3, [r4, #12]
 801d114:	0719      	lsls	r1, r3, #28
 801d116:	d513      	bpl.n	801d140 <_puts_r+0x50>
 801d118:	6923      	ldr	r3, [r4, #16]
 801d11a:	b18b      	cbz	r3, 801d140 <_puts_r+0x50>
 801d11c:	3e01      	subs	r6, #1
 801d11e:	68a3      	ldr	r3, [r4, #8]
 801d120:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d124:	3b01      	subs	r3, #1
 801d126:	60a3      	str	r3, [r4, #8]
 801d128:	b9e9      	cbnz	r1, 801d166 <_puts_r+0x76>
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	da2e      	bge.n	801d18c <_puts_r+0x9c>
 801d12e:	4622      	mov	r2, r4
 801d130:	210a      	movs	r1, #10
 801d132:	4628      	mov	r0, r5
 801d134:	f000 f89b 	bl	801d26e <__swbuf_r>
 801d138:	3001      	adds	r0, #1
 801d13a:	d007      	beq.n	801d14c <_puts_r+0x5c>
 801d13c:	250a      	movs	r5, #10
 801d13e:	e007      	b.n	801d150 <_puts_r+0x60>
 801d140:	4621      	mov	r1, r4
 801d142:	4628      	mov	r0, r5
 801d144:	f000 f8d0 	bl	801d2e8 <__swsetup_r>
 801d148:	2800      	cmp	r0, #0
 801d14a:	d0e7      	beq.n	801d11c <_puts_r+0x2c>
 801d14c:	f04f 35ff 	mov.w	r5, #4294967295
 801d150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d152:	07da      	lsls	r2, r3, #31
 801d154:	d405      	bmi.n	801d162 <_puts_r+0x72>
 801d156:	89a3      	ldrh	r3, [r4, #12]
 801d158:	059b      	lsls	r3, r3, #22
 801d15a:	d402      	bmi.n	801d162 <_puts_r+0x72>
 801d15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d15e:	f000 fa35 	bl	801d5cc <__retarget_lock_release_recursive>
 801d162:	4628      	mov	r0, r5
 801d164:	bd70      	pop	{r4, r5, r6, pc}
 801d166:	2b00      	cmp	r3, #0
 801d168:	da04      	bge.n	801d174 <_puts_r+0x84>
 801d16a:	69a2      	ldr	r2, [r4, #24]
 801d16c:	429a      	cmp	r2, r3
 801d16e:	dc06      	bgt.n	801d17e <_puts_r+0x8e>
 801d170:	290a      	cmp	r1, #10
 801d172:	d004      	beq.n	801d17e <_puts_r+0x8e>
 801d174:	6823      	ldr	r3, [r4, #0]
 801d176:	1c5a      	adds	r2, r3, #1
 801d178:	6022      	str	r2, [r4, #0]
 801d17a:	7019      	strb	r1, [r3, #0]
 801d17c:	e7cf      	b.n	801d11e <_puts_r+0x2e>
 801d17e:	4622      	mov	r2, r4
 801d180:	4628      	mov	r0, r5
 801d182:	f000 f874 	bl	801d26e <__swbuf_r>
 801d186:	3001      	adds	r0, #1
 801d188:	d1c9      	bne.n	801d11e <_puts_r+0x2e>
 801d18a:	e7df      	b.n	801d14c <_puts_r+0x5c>
 801d18c:	6823      	ldr	r3, [r4, #0]
 801d18e:	250a      	movs	r5, #10
 801d190:	1c5a      	adds	r2, r3, #1
 801d192:	6022      	str	r2, [r4, #0]
 801d194:	701d      	strb	r5, [r3, #0]
 801d196:	e7db      	b.n	801d150 <_puts_r+0x60>

0801d198 <puts>:
 801d198:	4b02      	ldr	r3, [pc, #8]	; (801d1a4 <puts+0xc>)
 801d19a:	4601      	mov	r1, r0
 801d19c:	6818      	ldr	r0, [r3, #0]
 801d19e:	f7ff bfa7 	b.w	801d0f0 <_puts_r>
 801d1a2:	bf00      	nop
 801d1a4:	20000088 	.word	0x20000088

0801d1a8 <siprintf>:
 801d1a8:	b40e      	push	{r1, r2, r3}
 801d1aa:	b500      	push	{lr}
 801d1ac:	b09c      	sub	sp, #112	; 0x70
 801d1ae:	ab1d      	add	r3, sp, #116	; 0x74
 801d1b0:	9002      	str	r0, [sp, #8]
 801d1b2:	9006      	str	r0, [sp, #24]
 801d1b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d1b8:	4809      	ldr	r0, [pc, #36]	; (801d1e0 <siprintf+0x38>)
 801d1ba:	9107      	str	r1, [sp, #28]
 801d1bc:	9104      	str	r1, [sp, #16]
 801d1be:	4909      	ldr	r1, [pc, #36]	; (801d1e4 <siprintf+0x3c>)
 801d1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1c4:	9105      	str	r1, [sp, #20]
 801d1c6:	6800      	ldr	r0, [r0, #0]
 801d1c8:	9301      	str	r3, [sp, #4]
 801d1ca:	a902      	add	r1, sp, #8
 801d1cc:	f001 fcb0 	bl	801eb30 <_svfiprintf_r>
 801d1d0:	9b02      	ldr	r3, [sp, #8]
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	701a      	strb	r2, [r3, #0]
 801d1d6:	b01c      	add	sp, #112	; 0x70
 801d1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1dc:	b003      	add	sp, #12
 801d1de:	4770      	bx	lr
 801d1e0:	20000088 	.word	0x20000088
 801d1e4:	ffff0208 	.word	0xffff0208

0801d1e8 <__sread>:
 801d1e8:	b510      	push	{r4, lr}
 801d1ea:	460c      	mov	r4, r1
 801d1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1f0:	f000 f992 	bl	801d518 <_read_r>
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	bfab      	itete	ge
 801d1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d1fa:	89a3      	ldrhlt	r3, [r4, #12]
 801d1fc:	181b      	addge	r3, r3, r0
 801d1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d202:	bfac      	ite	ge
 801d204:	6563      	strge	r3, [r4, #84]	; 0x54
 801d206:	81a3      	strhlt	r3, [r4, #12]
 801d208:	bd10      	pop	{r4, pc}

0801d20a <__swrite>:
 801d20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d20e:	461f      	mov	r7, r3
 801d210:	898b      	ldrh	r3, [r1, #12]
 801d212:	05db      	lsls	r3, r3, #23
 801d214:	4605      	mov	r5, r0
 801d216:	460c      	mov	r4, r1
 801d218:	4616      	mov	r6, r2
 801d21a:	d505      	bpl.n	801d228 <__swrite+0x1e>
 801d21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d220:	2302      	movs	r3, #2
 801d222:	2200      	movs	r2, #0
 801d224:	f000 f966 	bl	801d4f4 <_lseek_r>
 801d228:	89a3      	ldrh	r3, [r4, #12]
 801d22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d22e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d232:	81a3      	strh	r3, [r4, #12]
 801d234:	4632      	mov	r2, r6
 801d236:	463b      	mov	r3, r7
 801d238:	4628      	mov	r0, r5
 801d23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d23e:	f000 b98d 	b.w	801d55c <_write_r>

0801d242 <__sseek>:
 801d242:	b510      	push	{r4, lr}
 801d244:	460c      	mov	r4, r1
 801d246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d24a:	f000 f953 	bl	801d4f4 <_lseek_r>
 801d24e:	1c43      	adds	r3, r0, #1
 801d250:	89a3      	ldrh	r3, [r4, #12]
 801d252:	bf15      	itete	ne
 801d254:	6560      	strne	r0, [r4, #84]	; 0x54
 801d256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d25e:	81a3      	strheq	r3, [r4, #12]
 801d260:	bf18      	it	ne
 801d262:	81a3      	strhne	r3, [r4, #12]
 801d264:	bd10      	pop	{r4, pc}

0801d266 <__sclose>:
 801d266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d26a:	f000 b8dd 	b.w	801d428 <_close_r>

0801d26e <__swbuf_r>:
 801d26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d270:	460e      	mov	r6, r1
 801d272:	4614      	mov	r4, r2
 801d274:	4605      	mov	r5, r0
 801d276:	b118      	cbz	r0, 801d280 <__swbuf_r+0x12>
 801d278:	6a03      	ldr	r3, [r0, #32]
 801d27a:	b90b      	cbnz	r3, 801d280 <__swbuf_r+0x12>
 801d27c:	f7ff fede 	bl	801d03c <__sinit>
 801d280:	69a3      	ldr	r3, [r4, #24]
 801d282:	60a3      	str	r3, [r4, #8]
 801d284:	89a3      	ldrh	r3, [r4, #12]
 801d286:	071a      	lsls	r2, r3, #28
 801d288:	d525      	bpl.n	801d2d6 <__swbuf_r+0x68>
 801d28a:	6923      	ldr	r3, [r4, #16]
 801d28c:	b31b      	cbz	r3, 801d2d6 <__swbuf_r+0x68>
 801d28e:	6823      	ldr	r3, [r4, #0]
 801d290:	6922      	ldr	r2, [r4, #16]
 801d292:	1a98      	subs	r0, r3, r2
 801d294:	6963      	ldr	r3, [r4, #20]
 801d296:	b2f6      	uxtb	r6, r6
 801d298:	4283      	cmp	r3, r0
 801d29a:	4637      	mov	r7, r6
 801d29c:	dc04      	bgt.n	801d2a8 <__swbuf_r+0x3a>
 801d29e:	4621      	mov	r1, r4
 801d2a0:	4628      	mov	r0, r5
 801d2a2:	f001 ff0d 	bl	801f0c0 <_fflush_r>
 801d2a6:	b9e0      	cbnz	r0, 801d2e2 <__swbuf_r+0x74>
 801d2a8:	68a3      	ldr	r3, [r4, #8]
 801d2aa:	3b01      	subs	r3, #1
 801d2ac:	60a3      	str	r3, [r4, #8]
 801d2ae:	6823      	ldr	r3, [r4, #0]
 801d2b0:	1c5a      	adds	r2, r3, #1
 801d2b2:	6022      	str	r2, [r4, #0]
 801d2b4:	701e      	strb	r6, [r3, #0]
 801d2b6:	6962      	ldr	r2, [r4, #20]
 801d2b8:	1c43      	adds	r3, r0, #1
 801d2ba:	429a      	cmp	r2, r3
 801d2bc:	d004      	beq.n	801d2c8 <__swbuf_r+0x5a>
 801d2be:	89a3      	ldrh	r3, [r4, #12]
 801d2c0:	07db      	lsls	r3, r3, #31
 801d2c2:	d506      	bpl.n	801d2d2 <__swbuf_r+0x64>
 801d2c4:	2e0a      	cmp	r6, #10
 801d2c6:	d104      	bne.n	801d2d2 <__swbuf_r+0x64>
 801d2c8:	4621      	mov	r1, r4
 801d2ca:	4628      	mov	r0, r5
 801d2cc:	f001 fef8 	bl	801f0c0 <_fflush_r>
 801d2d0:	b938      	cbnz	r0, 801d2e2 <__swbuf_r+0x74>
 801d2d2:	4638      	mov	r0, r7
 801d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d2d6:	4621      	mov	r1, r4
 801d2d8:	4628      	mov	r0, r5
 801d2da:	f000 f805 	bl	801d2e8 <__swsetup_r>
 801d2de:	2800      	cmp	r0, #0
 801d2e0:	d0d5      	beq.n	801d28e <__swbuf_r+0x20>
 801d2e2:	f04f 37ff 	mov.w	r7, #4294967295
 801d2e6:	e7f4      	b.n	801d2d2 <__swbuf_r+0x64>

0801d2e8 <__swsetup_r>:
 801d2e8:	b538      	push	{r3, r4, r5, lr}
 801d2ea:	4b2a      	ldr	r3, [pc, #168]	; (801d394 <__swsetup_r+0xac>)
 801d2ec:	4605      	mov	r5, r0
 801d2ee:	6818      	ldr	r0, [r3, #0]
 801d2f0:	460c      	mov	r4, r1
 801d2f2:	b118      	cbz	r0, 801d2fc <__swsetup_r+0x14>
 801d2f4:	6a03      	ldr	r3, [r0, #32]
 801d2f6:	b90b      	cbnz	r3, 801d2fc <__swsetup_r+0x14>
 801d2f8:	f7ff fea0 	bl	801d03c <__sinit>
 801d2fc:	89a3      	ldrh	r3, [r4, #12]
 801d2fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d302:	0718      	lsls	r0, r3, #28
 801d304:	d422      	bmi.n	801d34c <__swsetup_r+0x64>
 801d306:	06d9      	lsls	r1, r3, #27
 801d308:	d407      	bmi.n	801d31a <__swsetup_r+0x32>
 801d30a:	2309      	movs	r3, #9
 801d30c:	602b      	str	r3, [r5, #0]
 801d30e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d312:	81a3      	strh	r3, [r4, #12]
 801d314:	f04f 30ff 	mov.w	r0, #4294967295
 801d318:	e034      	b.n	801d384 <__swsetup_r+0x9c>
 801d31a:	0758      	lsls	r0, r3, #29
 801d31c:	d512      	bpl.n	801d344 <__swsetup_r+0x5c>
 801d31e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d320:	b141      	cbz	r1, 801d334 <__swsetup_r+0x4c>
 801d322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d326:	4299      	cmp	r1, r3
 801d328:	d002      	beq.n	801d330 <__swsetup_r+0x48>
 801d32a:	4628      	mov	r0, r5
 801d32c:	f000 ffde 	bl	801e2ec <_free_r>
 801d330:	2300      	movs	r3, #0
 801d332:	6363      	str	r3, [r4, #52]	; 0x34
 801d334:	89a3      	ldrh	r3, [r4, #12]
 801d336:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d33a:	81a3      	strh	r3, [r4, #12]
 801d33c:	2300      	movs	r3, #0
 801d33e:	6063      	str	r3, [r4, #4]
 801d340:	6923      	ldr	r3, [r4, #16]
 801d342:	6023      	str	r3, [r4, #0]
 801d344:	89a3      	ldrh	r3, [r4, #12]
 801d346:	f043 0308 	orr.w	r3, r3, #8
 801d34a:	81a3      	strh	r3, [r4, #12]
 801d34c:	6923      	ldr	r3, [r4, #16]
 801d34e:	b94b      	cbnz	r3, 801d364 <__swsetup_r+0x7c>
 801d350:	89a3      	ldrh	r3, [r4, #12]
 801d352:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d35a:	d003      	beq.n	801d364 <__swsetup_r+0x7c>
 801d35c:	4621      	mov	r1, r4
 801d35e:	4628      	mov	r0, r5
 801d360:	f001 fefc 	bl	801f15c <__smakebuf_r>
 801d364:	89a0      	ldrh	r0, [r4, #12]
 801d366:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d36a:	f010 0301 	ands.w	r3, r0, #1
 801d36e:	d00a      	beq.n	801d386 <__swsetup_r+0x9e>
 801d370:	2300      	movs	r3, #0
 801d372:	60a3      	str	r3, [r4, #8]
 801d374:	6963      	ldr	r3, [r4, #20]
 801d376:	425b      	negs	r3, r3
 801d378:	61a3      	str	r3, [r4, #24]
 801d37a:	6923      	ldr	r3, [r4, #16]
 801d37c:	b943      	cbnz	r3, 801d390 <__swsetup_r+0xa8>
 801d37e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d382:	d1c4      	bne.n	801d30e <__swsetup_r+0x26>
 801d384:	bd38      	pop	{r3, r4, r5, pc}
 801d386:	0781      	lsls	r1, r0, #30
 801d388:	bf58      	it	pl
 801d38a:	6963      	ldrpl	r3, [r4, #20]
 801d38c:	60a3      	str	r3, [r4, #8]
 801d38e:	e7f4      	b.n	801d37a <__swsetup_r+0x92>
 801d390:	2000      	movs	r0, #0
 801d392:	e7f7      	b.n	801d384 <__swsetup_r+0x9c>
 801d394:	20000088 	.word	0x20000088

0801d398 <memcmp>:
 801d398:	b510      	push	{r4, lr}
 801d39a:	3901      	subs	r1, #1
 801d39c:	4402      	add	r2, r0
 801d39e:	4290      	cmp	r0, r2
 801d3a0:	d101      	bne.n	801d3a6 <memcmp+0xe>
 801d3a2:	2000      	movs	r0, #0
 801d3a4:	e005      	b.n	801d3b2 <memcmp+0x1a>
 801d3a6:	7803      	ldrb	r3, [r0, #0]
 801d3a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d3ac:	42a3      	cmp	r3, r4
 801d3ae:	d001      	beq.n	801d3b4 <memcmp+0x1c>
 801d3b0:	1b18      	subs	r0, r3, r4
 801d3b2:	bd10      	pop	{r4, pc}
 801d3b4:	3001      	adds	r0, #1
 801d3b6:	e7f2      	b.n	801d39e <memcmp+0x6>

0801d3b8 <memmove>:
 801d3b8:	4288      	cmp	r0, r1
 801d3ba:	b510      	push	{r4, lr}
 801d3bc:	eb01 0402 	add.w	r4, r1, r2
 801d3c0:	d902      	bls.n	801d3c8 <memmove+0x10>
 801d3c2:	4284      	cmp	r4, r0
 801d3c4:	4623      	mov	r3, r4
 801d3c6:	d807      	bhi.n	801d3d8 <memmove+0x20>
 801d3c8:	1e43      	subs	r3, r0, #1
 801d3ca:	42a1      	cmp	r1, r4
 801d3cc:	d008      	beq.n	801d3e0 <memmove+0x28>
 801d3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d3d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d3d6:	e7f8      	b.n	801d3ca <memmove+0x12>
 801d3d8:	4402      	add	r2, r0
 801d3da:	4601      	mov	r1, r0
 801d3dc:	428a      	cmp	r2, r1
 801d3de:	d100      	bne.n	801d3e2 <memmove+0x2a>
 801d3e0:	bd10      	pop	{r4, pc}
 801d3e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d3e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d3ea:	e7f7      	b.n	801d3dc <memmove+0x24>

0801d3ec <memset>:
 801d3ec:	4402      	add	r2, r0
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	4293      	cmp	r3, r2
 801d3f2:	d100      	bne.n	801d3f6 <memset+0xa>
 801d3f4:	4770      	bx	lr
 801d3f6:	f803 1b01 	strb.w	r1, [r3], #1
 801d3fa:	e7f9      	b.n	801d3f0 <memset+0x4>

0801d3fc <strncmp>:
 801d3fc:	b510      	push	{r4, lr}
 801d3fe:	b16a      	cbz	r2, 801d41c <strncmp+0x20>
 801d400:	3901      	subs	r1, #1
 801d402:	1884      	adds	r4, r0, r2
 801d404:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d408:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d40c:	429a      	cmp	r2, r3
 801d40e:	d103      	bne.n	801d418 <strncmp+0x1c>
 801d410:	42a0      	cmp	r0, r4
 801d412:	d001      	beq.n	801d418 <strncmp+0x1c>
 801d414:	2a00      	cmp	r2, #0
 801d416:	d1f5      	bne.n	801d404 <strncmp+0x8>
 801d418:	1ad0      	subs	r0, r2, r3
 801d41a:	bd10      	pop	{r4, pc}
 801d41c:	4610      	mov	r0, r2
 801d41e:	e7fc      	b.n	801d41a <strncmp+0x1e>

0801d420 <_localeconv_r>:
 801d420:	4800      	ldr	r0, [pc, #0]	; (801d424 <_localeconv_r+0x4>)
 801d422:	4770      	bx	lr
 801d424:	2000017c 	.word	0x2000017c

0801d428 <_close_r>:
 801d428:	b538      	push	{r3, r4, r5, lr}
 801d42a:	4d06      	ldr	r5, [pc, #24]	; (801d444 <_close_r+0x1c>)
 801d42c:	2300      	movs	r3, #0
 801d42e:	4604      	mov	r4, r0
 801d430:	4608      	mov	r0, r1
 801d432:	602b      	str	r3, [r5, #0]
 801d434:	f7e5 f91d 	bl	8002672 <_close>
 801d438:	1c43      	adds	r3, r0, #1
 801d43a:	d102      	bne.n	801d442 <_close_r+0x1a>
 801d43c:	682b      	ldr	r3, [r5, #0]
 801d43e:	b103      	cbz	r3, 801d442 <_close_r+0x1a>
 801d440:	6023      	str	r3, [r4, #0]
 801d442:	bd38      	pop	{r3, r4, r5, pc}
 801d444:	20013688 	.word	0x20013688

0801d448 <_reclaim_reent>:
 801d448:	4b29      	ldr	r3, [pc, #164]	; (801d4f0 <_reclaim_reent+0xa8>)
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	4283      	cmp	r3, r0
 801d44e:	b570      	push	{r4, r5, r6, lr}
 801d450:	4604      	mov	r4, r0
 801d452:	d04b      	beq.n	801d4ec <_reclaim_reent+0xa4>
 801d454:	69c3      	ldr	r3, [r0, #28]
 801d456:	b143      	cbz	r3, 801d46a <_reclaim_reent+0x22>
 801d458:	68db      	ldr	r3, [r3, #12]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d144      	bne.n	801d4e8 <_reclaim_reent+0xa0>
 801d45e:	69e3      	ldr	r3, [r4, #28]
 801d460:	6819      	ldr	r1, [r3, #0]
 801d462:	b111      	cbz	r1, 801d46a <_reclaim_reent+0x22>
 801d464:	4620      	mov	r0, r4
 801d466:	f000 ff41 	bl	801e2ec <_free_r>
 801d46a:	6961      	ldr	r1, [r4, #20]
 801d46c:	b111      	cbz	r1, 801d474 <_reclaim_reent+0x2c>
 801d46e:	4620      	mov	r0, r4
 801d470:	f000 ff3c 	bl	801e2ec <_free_r>
 801d474:	69e1      	ldr	r1, [r4, #28]
 801d476:	b111      	cbz	r1, 801d47e <_reclaim_reent+0x36>
 801d478:	4620      	mov	r0, r4
 801d47a:	f000 ff37 	bl	801e2ec <_free_r>
 801d47e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d480:	b111      	cbz	r1, 801d488 <_reclaim_reent+0x40>
 801d482:	4620      	mov	r0, r4
 801d484:	f000 ff32 	bl	801e2ec <_free_r>
 801d488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d48a:	b111      	cbz	r1, 801d492 <_reclaim_reent+0x4a>
 801d48c:	4620      	mov	r0, r4
 801d48e:	f000 ff2d 	bl	801e2ec <_free_r>
 801d492:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d494:	b111      	cbz	r1, 801d49c <_reclaim_reent+0x54>
 801d496:	4620      	mov	r0, r4
 801d498:	f000 ff28 	bl	801e2ec <_free_r>
 801d49c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d49e:	b111      	cbz	r1, 801d4a6 <_reclaim_reent+0x5e>
 801d4a0:	4620      	mov	r0, r4
 801d4a2:	f000 ff23 	bl	801e2ec <_free_r>
 801d4a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801d4a8:	b111      	cbz	r1, 801d4b0 <_reclaim_reent+0x68>
 801d4aa:	4620      	mov	r0, r4
 801d4ac:	f000 ff1e 	bl	801e2ec <_free_r>
 801d4b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d4b2:	b111      	cbz	r1, 801d4ba <_reclaim_reent+0x72>
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	f000 ff19 	bl	801e2ec <_free_r>
 801d4ba:	6a23      	ldr	r3, [r4, #32]
 801d4bc:	b1b3      	cbz	r3, 801d4ec <_reclaim_reent+0xa4>
 801d4be:	4620      	mov	r0, r4
 801d4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d4c4:	4718      	bx	r3
 801d4c6:	5949      	ldr	r1, [r1, r5]
 801d4c8:	b941      	cbnz	r1, 801d4dc <_reclaim_reent+0x94>
 801d4ca:	3504      	adds	r5, #4
 801d4cc:	69e3      	ldr	r3, [r4, #28]
 801d4ce:	2d80      	cmp	r5, #128	; 0x80
 801d4d0:	68d9      	ldr	r1, [r3, #12]
 801d4d2:	d1f8      	bne.n	801d4c6 <_reclaim_reent+0x7e>
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	f000 ff09 	bl	801e2ec <_free_r>
 801d4da:	e7c0      	b.n	801d45e <_reclaim_reent+0x16>
 801d4dc:	680e      	ldr	r6, [r1, #0]
 801d4de:	4620      	mov	r0, r4
 801d4e0:	f000 ff04 	bl	801e2ec <_free_r>
 801d4e4:	4631      	mov	r1, r6
 801d4e6:	e7ef      	b.n	801d4c8 <_reclaim_reent+0x80>
 801d4e8:	2500      	movs	r5, #0
 801d4ea:	e7ef      	b.n	801d4cc <_reclaim_reent+0x84>
 801d4ec:	bd70      	pop	{r4, r5, r6, pc}
 801d4ee:	bf00      	nop
 801d4f0:	20000088 	.word	0x20000088

0801d4f4 <_lseek_r>:
 801d4f4:	b538      	push	{r3, r4, r5, lr}
 801d4f6:	4d07      	ldr	r5, [pc, #28]	; (801d514 <_lseek_r+0x20>)
 801d4f8:	4604      	mov	r4, r0
 801d4fa:	4608      	mov	r0, r1
 801d4fc:	4611      	mov	r1, r2
 801d4fe:	2200      	movs	r2, #0
 801d500:	602a      	str	r2, [r5, #0]
 801d502:	461a      	mov	r2, r3
 801d504:	f7e5 f8dc 	bl	80026c0 <_lseek>
 801d508:	1c43      	adds	r3, r0, #1
 801d50a:	d102      	bne.n	801d512 <_lseek_r+0x1e>
 801d50c:	682b      	ldr	r3, [r5, #0]
 801d50e:	b103      	cbz	r3, 801d512 <_lseek_r+0x1e>
 801d510:	6023      	str	r3, [r4, #0]
 801d512:	bd38      	pop	{r3, r4, r5, pc}
 801d514:	20013688 	.word	0x20013688

0801d518 <_read_r>:
 801d518:	b538      	push	{r3, r4, r5, lr}
 801d51a:	4d07      	ldr	r5, [pc, #28]	; (801d538 <_read_r+0x20>)
 801d51c:	4604      	mov	r4, r0
 801d51e:	4608      	mov	r0, r1
 801d520:	4611      	mov	r1, r2
 801d522:	2200      	movs	r2, #0
 801d524:	602a      	str	r2, [r5, #0]
 801d526:	461a      	mov	r2, r3
 801d528:	f7e5 f86a 	bl	8002600 <_read>
 801d52c:	1c43      	adds	r3, r0, #1
 801d52e:	d102      	bne.n	801d536 <_read_r+0x1e>
 801d530:	682b      	ldr	r3, [r5, #0]
 801d532:	b103      	cbz	r3, 801d536 <_read_r+0x1e>
 801d534:	6023      	str	r3, [r4, #0]
 801d536:	bd38      	pop	{r3, r4, r5, pc}
 801d538:	20013688 	.word	0x20013688

0801d53c <_sbrk_r>:
 801d53c:	b538      	push	{r3, r4, r5, lr}
 801d53e:	4d06      	ldr	r5, [pc, #24]	; (801d558 <_sbrk_r+0x1c>)
 801d540:	2300      	movs	r3, #0
 801d542:	4604      	mov	r4, r0
 801d544:	4608      	mov	r0, r1
 801d546:	602b      	str	r3, [r5, #0]
 801d548:	f7e5 f8c8 	bl	80026dc <_sbrk>
 801d54c:	1c43      	adds	r3, r0, #1
 801d54e:	d102      	bne.n	801d556 <_sbrk_r+0x1a>
 801d550:	682b      	ldr	r3, [r5, #0]
 801d552:	b103      	cbz	r3, 801d556 <_sbrk_r+0x1a>
 801d554:	6023      	str	r3, [r4, #0]
 801d556:	bd38      	pop	{r3, r4, r5, pc}
 801d558:	20013688 	.word	0x20013688

0801d55c <_write_r>:
 801d55c:	b538      	push	{r3, r4, r5, lr}
 801d55e:	4d07      	ldr	r5, [pc, #28]	; (801d57c <_write_r+0x20>)
 801d560:	4604      	mov	r4, r0
 801d562:	4608      	mov	r0, r1
 801d564:	4611      	mov	r1, r2
 801d566:	2200      	movs	r2, #0
 801d568:	602a      	str	r2, [r5, #0]
 801d56a:	461a      	mov	r2, r3
 801d56c:	f7e5 f865 	bl	800263a <_write>
 801d570:	1c43      	adds	r3, r0, #1
 801d572:	d102      	bne.n	801d57a <_write_r+0x1e>
 801d574:	682b      	ldr	r3, [r5, #0]
 801d576:	b103      	cbz	r3, 801d57a <_write_r+0x1e>
 801d578:	6023      	str	r3, [r4, #0]
 801d57a:	bd38      	pop	{r3, r4, r5, pc}
 801d57c:	20013688 	.word	0x20013688

0801d580 <__libc_init_array>:
 801d580:	b570      	push	{r4, r5, r6, lr}
 801d582:	4d0d      	ldr	r5, [pc, #52]	; (801d5b8 <__libc_init_array+0x38>)
 801d584:	4c0d      	ldr	r4, [pc, #52]	; (801d5bc <__libc_init_array+0x3c>)
 801d586:	1b64      	subs	r4, r4, r5
 801d588:	10a4      	asrs	r4, r4, #2
 801d58a:	2600      	movs	r6, #0
 801d58c:	42a6      	cmp	r6, r4
 801d58e:	d109      	bne.n	801d5a4 <__libc_init_array+0x24>
 801d590:	4d0b      	ldr	r5, [pc, #44]	; (801d5c0 <__libc_init_array+0x40>)
 801d592:	4c0c      	ldr	r4, [pc, #48]	; (801d5c4 <__libc_init_array+0x44>)
 801d594:	f001 feda 	bl	801f34c <_init>
 801d598:	1b64      	subs	r4, r4, r5
 801d59a:	10a4      	asrs	r4, r4, #2
 801d59c:	2600      	movs	r6, #0
 801d59e:	42a6      	cmp	r6, r4
 801d5a0:	d105      	bne.n	801d5ae <__libc_init_array+0x2e>
 801d5a2:	bd70      	pop	{r4, r5, r6, pc}
 801d5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d5a8:	4798      	blx	r3
 801d5aa:	3601      	adds	r6, #1
 801d5ac:	e7ee      	b.n	801d58c <__libc_init_array+0xc>
 801d5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801d5b2:	4798      	blx	r3
 801d5b4:	3601      	adds	r6, #1
 801d5b6:	e7f2      	b.n	801d59e <__libc_init_array+0x1e>
 801d5b8:	080249b0 	.word	0x080249b0
 801d5bc:	080249b0 	.word	0x080249b0
 801d5c0:	080249b0 	.word	0x080249b0
 801d5c4:	080249b4 	.word	0x080249b4

0801d5c8 <__retarget_lock_init_recursive>:
 801d5c8:	4770      	bx	lr

0801d5ca <__retarget_lock_acquire_recursive>:
 801d5ca:	4770      	bx	lr

0801d5cc <__retarget_lock_release_recursive>:
 801d5cc:	4770      	bx	lr

0801d5ce <memcpy>:
 801d5ce:	440a      	add	r2, r1
 801d5d0:	4291      	cmp	r1, r2
 801d5d2:	f100 33ff 	add.w	r3, r0, #4294967295
 801d5d6:	d100      	bne.n	801d5da <memcpy+0xc>
 801d5d8:	4770      	bx	lr
 801d5da:	b510      	push	{r4, lr}
 801d5dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d5e4:	4291      	cmp	r1, r2
 801d5e6:	d1f9      	bne.n	801d5dc <memcpy+0xe>
 801d5e8:	bd10      	pop	{r4, pc}

0801d5ea <abort>:
 801d5ea:	b508      	push	{r3, lr}
 801d5ec:	2006      	movs	r0, #6
 801d5ee:	f001 fe19 	bl	801f224 <raise>
 801d5f2:	2001      	movs	r0, #1
 801d5f4:	f7e4 fffa 	bl	80025ec <_exit>

0801d5f8 <quorem>:
 801d5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5fc:	6903      	ldr	r3, [r0, #16]
 801d5fe:	690c      	ldr	r4, [r1, #16]
 801d600:	42a3      	cmp	r3, r4
 801d602:	4607      	mov	r7, r0
 801d604:	db7e      	blt.n	801d704 <quorem+0x10c>
 801d606:	3c01      	subs	r4, #1
 801d608:	f101 0814 	add.w	r8, r1, #20
 801d60c:	f100 0514 	add.w	r5, r0, #20
 801d610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d614:	9301      	str	r3, [sp, #4]
 801d616:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d61a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d61e:	3301      	adds	r3, #1
 801d620:	429a      	cmp	r2, r3
 801d622:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d626:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d62a:	fbb2 f6f3 	udiv	r6, r2, r3
 801d62e:	d331      	bcc.n	801d694 <quorem+0x9c>
 801d630:	f04f 0e00 	mov.w	lr, #0
 801d634:	4640      	mov	r0, r8
 801d636:	46ac      	mov	ip, r5
 801d638:	46f2      	mov	sl, lr
 801d63a:	f850 2b04 	ldr.w	r2, [r0], #4
 801d63e:	b293      	uxth	r3, r2
 801d640:	fb06 e303 	mla	r3, r6, r3, lr
 801d644:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d648:	0c1a      	lsrs	r2, r3, #16
 801d64a:	b29b      	uxth	r3, r3
 801d64c:	ebaa 0303 	sub.w	r3, sl, r3
 801d650:	f8dc a000 	ldr.w	sl, [ip]
 801d654:	fa13 f38a 	uxtah	r3, r3, sl
 801d658:	fb06 220e 	mla	r2, r6, lr, r2
 801d65c:	9300      	str	r3, [sp, #0]
 801d65e:	9b00      	ldr	r3, [sp, #0]
 801d660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d664:	b292      	uxth	r2, r2
 801d666:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d66a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d66e:	f8bd 3000 	ldrh.w	r3, [sp]
 801d672:	4581      	cmp	r9, r0
 801d674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d678:	f84c 3b04 	str.w	r3, [ip], #4
 801d67c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d680:	d2db      	bcs.n	801d63a <quorem+0x42>
 801d682:	f855 300b 	ldr.w	r3, [r5, fp]
 801d686:	b92b      	cbnz	r3, 801d694 <quorem+0x9c>
 801d688:	9b01      	ldr	r3, [sp, #4]
 801d68a:	3b04      	subs	r3, #4
 801d68c:	429d      	cmp	r5, r3
 801d68e:	461a      	mov	r2, r3
 801d690:	d32c      	bcc.n	801d6ec <quorem+0xf4>
 801d692:	613c      	str	r4, [r7, #16]
 801d694:	4638      	mov	r0, r7
 801d696:	f001 f8f1 	bl	801e87c <__mcmp>
 801d69a:	2800      	cmp	r0, #0
 801d69c:	db22      	blt.n	801d6e4 <quorem+0xec>
 801d69e:	3601      	adds	r6, #1
 801d6a0:	4629      	mov	r1, r5
 801d6a2:	2000      	movs	r0, #0
 801d6a4:	f858 2b04 	ldr.w	r2, [r8], #4
 801d6a8:	f8d1 c000 	ldr.w	ip, [r1]
 801d6ac:	b293      	uxth	r3, r2
 801d6ae:	1ac3      	subs	r3, r0, r3
 801d6b0:	0c12      	lsrs	r2, r2, #16
 801d6b2:	fa13 f38c 	uxtah	r3, r3, ip
 801d6b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801d6ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d6be:	b29b      	uxth	r3, r3
 801d6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d6c4:	45c1      	cmp	r9, r8
 801d6c6:	f841 3b04 	str.w	r3, [r1], #4
 801d6ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d6ce:	d2e9      	bcs.n	801d6a4 <quorem+0xac>
 801d6d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d6d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d6d8:	b922      	cbnz	r2, 801d6e4 <quorem+0xec>
 801d6da:	3b04      	subs	r3, #4
 801d6dc:	429d      	cmp	r5, r3
 801d6de:	461a      	mov	r2, r3
 801d6e0:	d30a      	bcc.n	801d6f8 <quorem+0x100>
 801d6e2:	613c      	str	r4, [r7, #16]
 801d6e4:	4630      	mov	r0, r6
 801d6e6:	b003      	add	sp, #12
 801d6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ec:	6812      	ldr	r2, [r2, #0]
 801d6ee:	3b04      	subs	r3, #4
 801d6f0:	2a00      	cmp	r2, #0
 801d6f2:	d1ce      	bne.n	801d692 <quorem+0x9a>
 801d6f4:	3c01      	subs	r4, #1
 801d6f6:	e7c9      	b.n	801d68c <quorem+0x94>
 801d6f8:	6812      	ldr	r2, [r2, #0]
 801d6fa:	3b04      	subs	r3, #4
 801d6fc:	2a00      	cmp	r2, #0
 801d6fe:	d1f0      	bne.n	801d6e2 <quorem+0xea>
 801d700:	3c01      	subs	r4, #1
 801d702:	e7eb      	b.n	801d6dc <quorem+0xe4>
 801d704:	2000      	movs	r0, #0
 801d706:	e7ee      	b.n	801d6e6 <quorem+0xee>

0801d708 <_dtoa_r>:
 801d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d70c:	ed2d 8b04 	vpush	{d8-d9}
 801d710:	69c5      	ldr	r5, [r0, #28]
 801d712:	b093      	sub	sp, #76	; 0x4c
 801d714:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d718:	ec57 6b10 	vmov	r6, r7, d0
 801d71c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d720:	9107      	str	r1, [sp, #28]
 801d722:	4604      	mov	r4, r0
 801d724:	920a      	str	r2, [sp, #40]	; 0x28
 801d726:	930d      	str	r3, [sp, #52]	; 0x34
 801d728:	b975      	cbnz	r5, 801d748 <_dtoa_r+0x40>
 801d72a:	2010      	movs	r0, #16
 801d72c:	f7fe fe1e 	bl	801c36c <malloc>
 801d730:	4602      	mov	r2, r0
 801d732:	61e0      	str	r0, [r4, #28]
 801d734:	b920      	cbnz	r0, 801d740 <_dtoa_r+0x38>
 801d736:	4bae      	ldr	r3, [pc, #696]	; (801d9f0 <_dtoa_r+0x2e8>)
 801d738:	21ef      	movs	r1, #239	; 0xef
 801d73a:	48ae      	ldr	r0, [pc, #696]	; (801d9f4 <_dtoa_r+0x2ec>)
 801d73c:	f7fe fdda 	bl	801c2f4 <__assert_func>
 801d740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d744:	6005      	str	r5, [r0, #0]
 801d746:	60c5      	str	r5, [r0, #12]
 801d748:	69e3      	ldr	r3, [r4, #28]
 801d74a:	6819      	ldr	r1, [r3, #0]
 801d74c:	b151      	cbz	r1, 801d764 <_dtoa_r+0x5c>
 801d74e:	685a      	ldr	r2, [r3, #4]
 801d750:	604a      	str	r2, [r1, #4]
 801d752:	2301      	movs	r3, #1
 801d754:	4093      	lsls	r3, r2
 801d756:	608b      	str	r3, [r1, #8]
 801d758:	4620      	mov	r0, r4
 801d75a:	f000 fe53 	bl	801e404 <_Bfree>
 801d75e:	69e3      	ldr	r3, [r4, #28]
 801d760:	2200      	movs	r2, #0
 801d762:	601a      	str	r2, [r3, #0]
 801d764:	1e3b      	subs	r3, r7, #0
 801d766:	bfbb      	ittet	lt
 801d768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d76c:	9303      	strlt	r3, [sp, #12]
 801d76e:	2300      	movge	r3, #0
 801d770:	2201      	movlt	r2, #1
 801d772:	bfac      	ite	ge
 801d774:	f8c8 3000 	strge.w	r3, [r8]
 801d778:	f8c8 2000 	strlt.w	r2, [r8]
 801d77c:	4b9e      	ldr	r3, [pc, #632]	; (801d9f8 <_dtoa_r+0x2f0>)
 801d77e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d782:	ea33 0308 	bics.w	r3, r3, r8
 801d786:	d11b      	bne.n	801d7c0 <_dtoa_r+0xb8>
 801d788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d78a:	f242 730f 	movw	r3, #9999	; 0x270f
 801d78e:	6013      	str	r3, [r2, #0]
 801d790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801d794:	4333      	orrs	r3, r6
 801d796:	f000 8593 	beq.w	801e2c0 <_dtoa_r+0xbb8>
 801d79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d79c:	b963      	cbnz	r3, 801d7b8 <_dtoa_r+0xb0>
 801d79e:	4b97      	ldr	r3, [pc, #604]	; (801d9fc <_dtoa_r+0x2f4>)
 801d7a0:	e027      	b.n	801d7f2 <_dtoa_r+0xea>
 801d7a2:	4b97      	ldr	r3, [pc, #604]	; (801da00 <_dtoa_r+0x2f8>)
 801d7a4:	9300      	str	r3, [sp, #0]
 801d7a6:	3308      	adds	r3, #8
 801d7a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d7aa:	6013      	str	r3, [r2, #0]
 801d7ac:	9800      	ldr	r0, [sp, #0]
 801d7ae:	b013      	add	sp, #76	; 0x4c
 801d7b0:	ecbd 8b04 	vpop	{d8-d9}
 801d7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7b8:	4b90      	ldr	r3, [pc, #576]	; (801d9fc <_dtoa_r+0x2f4>)
 801d7ba:	9300      	str	r3, [sp, #0]
 801d7bc:	3303      	adds	r3, #3
 801d7be:	e7f3      	b.n	801d7a8 <_dtoa_r+0xa0>
 801d7c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d7c4:	2200      	movs	r2, #0
 801d7c6:	ec51 0b17 	vmov	r0, r1, d7
 801d7ca:	eeb0 8a47 	vmov.f32	s16, s14
 801d7ce:	eef0 8a67 	vmov.f32	s17, s15
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	f7e3 f998 	bl	8000b08 <__aeabi_dcmpeq>
 801d7d8:	4681      	mov	r9, r0
 801d7da:	b160      	cbz	r0, 801d7f6 <_dtoa_r+0xee>
 801d7dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7de:	2301      	movs	r3, #1
 801d7e0:	6013      	str	r3, [r2, #0]
 801d7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	f000 8568 	beq.w	801e2ba <_dtoa_r+0xbb2>
 801d7ea:	4b86      	ldr	r3, [pc, #536]	; (801da04 <_dtoa_r+0x2fc>)
 801d7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d7ee:	6013      	str	r3, [r2, #0]
 801d7f0:	3b01      	subs	r3, #1
 801d7f2:	9300      	str	r3, [sp, #0]
 801d7f4:	e7da      	b.n	801d7ac <_dtoa_r+0xa4>
 801d7f6:	aa10      	add	r2, sp, #64	; 0x40
 801d7f8:	a911      	add	r1, sp, #68	; 0x44
 801d7fa:	4620      	mov	r0, r4
 801d7fc:	eeb0 0a48 	vmov.f32	s0, s16
 801d800:	eef0 0a68 	vmov.f32	s1, s17
 801d804:	f001 f8e0 	bl	801e9c8 <__d2b>
 801d808:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801d80c:	4682      	mov	sl, r0
 801d80e:	2d00      	cmp	r5, #0
 801d810:	d07f      	beq.n	801d912 <_dtoa_r+0x20a>
 801d812:	ee18 3a90 	vmov	r3, s17
 801d816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d81a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d81e:	ec51 0b18 	vmov	r0, r1, d8
 801d822:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d82a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801d82e:	4619      	mov	r1, r3
 801d830:	2200      	movs	r2, #0
 801d832:	4b75      	ldr	r3, [pc, #468]	; (801da08 <_dtoa_r+0x300>)
 801d834:	f7e2 fd48 	bl	80002c8 <__aeabi_dsub>
 801d838:	a367      	add	r3, pc, #412	; (adr r3, 801d9d8 <_dtoa_r+0x2d0>)
 801d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d83e:	f7e2 fefb 	bl	8000638 <__aeabi_dmul>
 801d842:	a367      	add	r3, pc, #412	; (adr r3, 801d9e0 <_dtoa_r+0x2d8>)
 801d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d848:	f7e2 fd40 	bl	80002cc <__adddf3>
 801d84c:	4606      	mov	r6, r0
 801d84e:	4628      	mov	r0, r5
 801d850:	460f      	mov	r7, r1
 801d852:	f7e2 fe87 	bl	8000564 <__aeabi_i2d>
 801d856:	a364      	add	r3, pc, #400	; (adr r3, 801d9e8 <_dtoa_r+0x2e0>)
 801d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d85c:	f7e2 feec 	bl	8000638 <__aeabi_dmul>
 801d860:	4602      	mov	r2, r0
 801d862:	460b      	mov	r3, r1
 801d864:	4630      	mov	r0, r6
 801d866:	4639      	mov	r1, r7
 801d868:	f7e2 fd30 	bl	80002cc <__adddf3>
 801d86c:	4606      	mov	r6, r0
 801d86e:	460f      	mov	r7, r1
 801d870:	f7e3 f992 	bl	8000b98 <__aeabi_d2iz>
 801d874:	2200      	movs	r2, #0
 801d876:	4683      	mov	fp, r0
 801d878:	2300      	movs	r3, #0
 801d87a:	4630      	mov	r0, r6
 801d87c:	4639      	mov	r1, r7
 801d87e:	f7e3 f94d 	bl	8000b1c <__aeabi_dcmplt>
 801d882:	b148      	cbz	r0, 801d898 <_dtoa_r+0x190>
 801d884:	4658      	mov	r0, fp
 801d886:	f7e2 fe6d 	bl	8000564 <__aeabi_i2d>
 801d88a:	4632      	mov	r2, r6
 801d88c:	463b      	mov	r3, r7
 801d88e:	f7e3 f93b 	bl	8000b08 <__aeabi_dcmpeq>
 801d892:	b908      	cbnz	r0, 801d898 <_dtoa_r+0x190>
 801d894:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d898:	f1bb 0f16 	cmp.w	fp, #22
 801d89c:	d857      	bhi.n	801d94e <_dtoa_r+0x246>
 801d89e:	4b5b      	ldr	r3, [pc, #364]	; (801da0c <_dtoa_r+0x304>)
 801d8a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8a8:	ec51 0b18 	vmov	r0, r1, d8
 801d8ac:	f7e3 f936 	bl	8000b1c <__aeabi_dcmplt>
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	d04e      	beq.n	801d952 <_dtoa_r+0x24a>
 801d8b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	930c      	str	r3, [sp, #48]	; 0x30
 801d8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8be:	1b5b      	subs	r3, r3, r5
 801d8c0:	1e5a      	subs	r2, r3, #1
 801d8c2:	bf45      	ittet	mi
 801d8c4:	f1c3 0301 	rsbmi	r3, r3, #1
 801d8c8:	9305      	strmi	r3, [sp, #20]
 801d8ca:	2300      	movpl	r3, #0
 801d8cc:	2300      	movmi	r3, #0
 801d8ce:	9206      	str	r2, [sp, #24]
 801d8d0:	bf54      	ite	pl
 801d8d2:	9305      	strpl	r3, [sp, #20]
 801d8d4:	9306      	strmi	r3, [sp, #24]
 801d8d6:	f1bb 0f00 	cmp.w	fp, #0
 801d8da:	db3c      	blt.n	801d956 <_dtoa_r+0x24e>
 801d8dc:	9b06      	ldr	r3, [sp, #24]
 801d8de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801d8e2:	445b      	add	r3, fp
 801d8e4:	9306      	str	r3, [sp, #24]
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	9308      	str	r3, [sp, #32]
 801d8ea:	9b07      	ldr	r3, [sp, #28]
 801d8ec:	2b09      	cmp	r3, #9
 801d8ee:	d868      	bhi.n	801d9c2 <_dtoa_r+0x2ba>
 801d8f0:	2b05      	cmp	r3, #5
 801d8f2:	bfc4      	itt	gt
 801d8f4:	3b04      	subgt	r3, #4
 801d8f6:	9307      	strgt	r3, [sp, #28]
 801d8f8:	9b07      	ldr	r3, [sp, #28]
 801d8fa:	f1a3 0302 	sub.w	r3, r3, #2
 801d8fe:	bfcc      	ite	gt
 801d900:	2500      	movgt	r5, #0
 801d902:	2501      	movle	r5, #1
 801d904:	2b03      	cmp	r3, #3
 801d906:	f200 8085 	bhi.w	801da14 <_dtoa_r+0x30c>
 801d90a:	e8df f003 	tbb	[pc, r3]
 801d90e:	3b2e      	.short	0x3b2e
 801d910:	5839      	.short	0x5839
 801d912:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d916:	441d      	add	r5, r3
 801d918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d91c:	2b20      	cmp	r3, #32
 801d91e:	bfc1      	itttt	gt
 801d920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d924:	fa08 f803 	lslgt.w	r8, r8, r3
 801d928:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801d92c:	fa26 f303 	lsrgt.w	r3, r6, r3
 801d930:	bfd6      	itet	le
 801d932:	f1c3 0320 	rsble	r3, r3, #32
 801d936:	ea48 0003 	orrgt.w	r0, r8, r3
 801d93a:	fa06 f003 	lslle.w	r0, r6, r3
 801d93e:	f7e2 fe01 	bl	8000544 <__aeabi_ui2d>
 801d942:	2201      	movs	r2, #1
 801d944:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801d948:	3d01      	subs	r5, #1
 801d94a:	920e      	str	r2, [sp, #56]	; 0x38
 801d94c:	e76f      	b.n	801d82e <_dtoa_r+0x126>
 801d94e:	2301      	movs	r3, #1
 801d950:	e7b3      	b.n	801d8ba <_dtoa_r+0x1b2>
 801d952:	900c      	str	r0, [sp, #48]	; 0x30
 801d954:	e7b2      	b.n	801d8bc <_dtoa_r+0x1b4>
 801d956:	9b05      	ldr	r3, [sp, #20]
 801d958:	eba3 030b 	sub.w	r3, r3, fp
 801d95c:	9305      	str	r3, [sp, #20]
 801d95e:	f1cb 0300 	rsb	r3, fp, #0
 801d962:	9308      	str	r3, [sp, #32]
 801d964:	2300      	movs	r3, #0
 801d966:	930b      	str	r3, [sp, #44]	; 0x2c
 801d968:	e7bf      	b.n	801d8ea <_dtoa_r+0x1e2>
 801d96a:	2300      	movs	r3, #0
 801d96c:	9309      	str	r3, [sp, #36]	; 0x24
 801d96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d970:	2b00      	cmp	r3, #0
 801d972:	dc52      	bgt.n	801da1a <_dtoa_r+0x312>
 801d974:	2301      	movs	r3, #1
 801d976:	9301      	str	r3, [sp, #4]
 801d978:	9304      	str	r3, [sp, #16]
 801d97a:	461a      	mov	r2, r3
 801d97c:	920a      	str	r2, [sp, #40]	; 0x28
 801d97e:	e00b      	b.n	801d998 <_dtoa_r+0x290>
 801d980:	2301      	movs	r3, #1
 801d982:	e7f3      	b.n	801d96c <_dtoa_r+0x264>
 801d984:	2300      	movs	r3, #0
 801d986:	9309      	str	r3, [sp, #36]	; 0x24
 801d988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d98a:	445b      	add	r3, fp
 801d98c:	9301      	str	r3, [sp, #4]
 801d98e:	3301      	adds	r3, #1
 801d990:	2b01      	cmp	r3, #1
 801d992:	9304      	str	r3, [sp, #16]
 801d994:	bfb8      	it	lt
 801d996:	2301      	movlt	r3, #1
 801d998:	69e0      	ldr	r0, [r4, #28]
 801d99a:	2100      	movs	r1, #0
 801d99c:	2204      	movs	r2, #4
 801d99e:	f102 0614 	add.w	r6, r2, #20
 801d9a2:	429e      	cmp	r6, r3
 801d9a4:	d93d      	bls.n	801da22 <_dtoa_r+0x31a>
 801d9a6:	6041      	str	r1, [r0, #4]
 801d9a8:	4620      	mov	r0, r4
 801d9aa:	f000 fceb 	bl	801e384 <_Balloc>
 801d9ae:	9000      	str	r0, [sp, #0]
 801d9b0:	2800      	cmp	r0, #0
 801d9b2:	d139      	bne.n	801da28 <_dtoa_r+0x320>
 801d9b4:	4b16      	ldr	r3, [pc, #88]	; (801da10 <_dtoa_r+0x308>)
 801d9b6:	4602      	mov	r2, r0
 801d9b8:	f240 11af 	movw	r1, #431	; 0x1af
 801d9bc:	e6bd      	b.n	801d73a <_dtoa_r+0x32>
 801d9be:	2301      	movs	r3, #1
 801d9c0:	e7e1      	b.n	801d986 <_dtoa_r+0x27e>
 801d9c2:	2501      	movs	r5, #1
 801d9c4:	2300      	movs	r3, #0
 801d9c6:	9307      	str	r3, [sp, #28]
 801d9c8:	9509      	str	r5, [sp, #36]	; 0x24
 801d9ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d9ce:	9301      	str	r3, [sp, #4]
 801d9d0:	9304      	str	r3, [sp, #16]
 801d9d2:	2200      	movs	r2, #0
 801d9d4:	2312      	movs	r3, #18
 801d9d6:	e7d1      	b.n	801d97c <_dtoa_r+0x274>
 801d9d8:	636f4361 	.word	0x636f4361
 801d9dc:	3fd287a7 	.word	0x3fd287a7
 801d9e0:	8b60c8b3 	.word	0x8b60c8b3
 801d9e4:	3fc68a28 	.word	0x3fc68a28
 801d9e8:	509f79fb 	.word	0x509f79fb
 801d9ec:	3fd34413 	.word	0x3fd34413
 801d9f0:	08024618 	.word	0x08024618
 801d9f4:	080247c9 	.word	0x080247c9
 801d9f8:	7ff00000 	.word	0x7ff00000
 801d9fc:	080247c5 	.word	0x080247c5
 801da00:	080247bc 	.word	0x080247bc
 801da04:	08024799 	.word	0x08024799
 801da08:	3ff80000 	.word	0x3ff80000
 801da0c:	080248b8 	.word	0x080248b8
 801da10:	08024821 	.word	0x08024821
 801da14:	2301      	movs	r3, #1
 801da16:	9309      	str	r3, [sp, #36]	; 0x24
 801da18:	e7d7      	b.n	801d9ca <_dtoa_r+0x2c2>
 801da1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da1c:	9301      	str	r3, [sp, #4]
 801da1e:	9304      	str	r3, [sp, #16]
 801da20:	e7ba      	b.n	801d998 <_dtoa_r+0x290>
 801da22:	3101      	adds	r1, #1
 801da24:	0052      	lsls	r2, r2, #1
 801da26:	e7ba      	b.n	801d99e <_dtoa_r+0x296>
 801da28:	69e3      	ldr	r3, [r4, #28]
 801da2a:	9a00      	ldr	r2, [sp, #0]
 801da2c:	601a      	str	r2, [r3, #0]
 801da2e:	9b04      	ldr	r3, [sp, #16]
 801da30:	2b0e      	cmp	r3, #14
 801da32:	f200 80a8 	bhi.w	801db86 <_dtoa_r+0x47e>
 801da36:	2d00      	cmp	r5, #0
 801da38:	f000 80a5 	beq.w	801db86 <_dtoa_r+0x47e>
 801da3c:	f1bb 0f00 	cmp.w	fp, #0
 801da40:	dd38      	ble.n	801dab4 <_dtoa_r+0x3ac>
 801da42:	4bc0      	ldr	r3, [pc, #768]	; (801dd44 <_dtoa_r+0x63c>)
 801da44:	f00b 020f 	and.w	r2, fp, #15
 801da48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801da4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801da50:	e9d3 6700 	ldrd	r6, r7, [r3]
 801da54:	ea4f 182b 	mov.w	r8, fp, asr #4
 801da58:	d019      	beq.n	801da8e <_dtoa_r+0x386>
 801da5a:	4bbb      	ldr	r3, [pc, #748]	; (801dd48 <_dtoa_r+0x640>)
 801da5c:	ec51 0b18 	vmov	r0, r1, d8
 801da60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801da64:	f7e2 ff12 	bl	800088c <__aeabi_ddiv>
 801da68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da6c:	f008 080f 	and.w	r8, r8, #15
 801da70:	2503      	movs	r5, #3
 801da72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801dd48 <_dtoa_r+0x640>
 801da76:	f1b8 0f00 	cmp.w	r8, #0
 801da7a:	d10a      	bne.n	801da92 <_dtoa_r+0x38a>
 801da7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da80:	4632      	mov	r2, r6
 801da82:	463b      	mov	r3, r7
 801da84:	f7e2 ff02 	bl	800088c <__aeabi_ddiv>
 801da88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da8c:	e02b      	b.n	801dae6 <_dtoa_r+0x3de>
 801da8e:	2502      	movs	r5, #2
 801da90:	e7ef      	b.n	801da72 <_dtoa_r+0x36a>
 801da92:	f018 0f01 	tst.w	r8, #1
 801da96:	d008      	beq.n	801daaa <_dtoa_r+0x3a2>
 801da98:	4630      	mov	r0, r6
 801da9a:	4639      	mov	r1, r7
 801da9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801daa0:	f7e2 fdca 	bl	8000638 <__aeabi_dmul>
 801daa4:	3501      	adds	r5, #1
 801daa6:	4606      	mov	r6, r0
 801daa8:	460f      	mov	r7, r1
 801daaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 801daae:	f109 0908 	add.w	r9, r9, #8
 801dab2:	e7e0      	b.n	801da76 <_dtoa_r+0x36e>
 801dab4:	f000 809f 	beq.w	801dbf6 <_dtoa_r+0x4ee>
 801dab8:	f1cb 0600 	rsb	r6, fp, #0
 801dabc:	4ba1      	ldr	r3, [pc, #644]	; (801dd44 <_dtoa_r+0x63c>)
 801dabe:	4fa2      	ldr	r7, [pc, #648]	; (801dd48 <_dtoa_r+0x640>)
 801dac0:	f006 020f 	and.w	r2, r6, #15
 801dac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dacc:	ec51 0b18 	vmov	r0, r1, d8
 801dad0:	f7e2 fdb2 	bl	8000638 <__aeabi_dmul>
 801dad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dad8:	1136      	asrs	r6, r6, #4
 801dada:	2300      	movs	r3, #0
 801dadc:	2502      	movs	r5, #2
 801dade:	2e00      	cmp	r6, #0
 801dae0:	d17e      	bne.n	801dbe0 <_dtoa_r+0x4d8>
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d1d0      	bne.n	801da88 <_dtoa_r+0x380>
 801dae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dae8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801daec:	2b00      	cmp	r3, #0
 801daee:	f000 8084 	beq.w	801dbfa <_dtoa_r+0x4f2>
 801daf2:	4b96      	ldr	r3, [pc, #600]	; (801dd4c <_dtoa_r+0x644>)
 801daf4:	2200      	movs	r2, #0
 801daf6:	4640      	mov	r0, r8
 801daf8:	4649      	mov	r1, r9
 801dafa:	f7e3 f80f 	bl	8000b1c <__aeabi_dcmplt>
 801dafe:	2800      	cmp	r0, #0
 801db00:	d07b      	beq.n	801dbfa <_dtoa_r+0x4f2>
 801db02:	9b04      	ldr	r3, [sp, #16]
 801db04:	2b00      	cmp	r3, #0
 801db06:	d078      	beq.n	801dbfa <_dtoa_r+0x4f2>
 801db08:	9b01      	ldr	r3, [sp, #4]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	dd39      	ble.n	801db82 <_dtoa_r+0x47a>
 801db0e:	4b90      	ldr	r3, [pc, #576]	; (801dd50 <_dtoa_r+0x648>)
 801db10:	2200      	movs	r2, #0
 801db12:	4640      	mov	r0, r8
 801db14:	4649      	mov	r1, r9
 801db16:	f7e2 fd8f 	bl	8000638 <__aeabi_dmul>
 801db1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db1e:	9e01      	ldr	r6, [sp, #4]
 801db20:	f10b 37ff 	add.w	r7, fp, #4294967295
 801db24:	3501      	adds	r5, #1
 801db26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801db2a:	4628      	mov	r0, r5
 801db2c:	f7e2 fd1a 	bl	8000564 <__aeabi_i2d>
 801db30:	4642      	mov	r2, r8
 801db32:	464b      	mov	r3, r9
 801db34:	f7e2 fd80 	bl	8000638 <__aeabi_dmul>
 801db38:	4b86      	ldr	r3, [pc, #536]	; (801dd54 <_dtoa_r+0x64c>)
 801db3a:	2200      	movs	r2, #0
 801db3c:	f7e2 fbc6 	bl	80002cc <__adddf3>
 801db40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801db44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db48:	9303      	str	r3, [sp, #12]
 801db4a:	2e00      	cmp	r6, #0
 801db4c:	d158      	bne.n	801dc00 <_dtoa_r+0x4f8>
 801db4e:	4b82      	ldr	r3, [pc, #520]	; (801dd58 <_dtoa_r+0x650>)
 801db50:	2200      	movs	r2, #0
 801db52:	4640      	mov	r0, r8
 801db54:	4649      	mov	r1, r9
 801db56:	f7e2 fbb7 	bl	80002c8 <__aeabi_dsub>
 801db5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801db5e:	4680      	mov	r8, r0
 801db60:	4689      	mov	r9, r1
 801db62:	f7e2 fff9 	bl	8000b58 <__aeabi_dcmpgt>
 801db66:	2800      	cmp	r0, #0
 801db68:	f040 8296 	bne.w	801e098 <_dtoa_r+0x990>
 801db6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801db70:	4640      	mov	r0, r8
 801db72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801db76:	4649      	mov	r1, r9
 801db78:	f7e2 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 801db7c:	2800      	cmp	r0, #0
 801db7e:	f040 8289 	bne.w	801e094 <_dtoa_r+0x98c>
 801db82:	ed8d 8b02 	vstr	d8, [sp, #8]
 801db86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db88:	2b00      	cmp	r3, #0
 801db8a:	f2c0 814e 	blt.w	801de2a <_dtoa_r+0x722>
 801db8e:	f1bb 0f0e 	cmp.w	fp, #14
 801db92:	f300 814a 	bgt.w	801de2a <_dtoa_r+0x722>
 801db96:	4b6b      	ldr	r3, [pc, #428]	; (801dd44 <_dtoa_r+0x63c>)
 801db98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801db9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	f280 80dc 	bge.w	801dd60 <_dtoa_r+0x658>
 801dba8:	9b04      	ldr	r3, [sp, #16]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	f300 80d8 	bgt.w	801dd60 <_dtoa_r+0x658>
 801dbb0:	f040 826f 	bne.w	801e092 <_dtoa_r+0x98a>
 801dbb4:	4b68      	ldr	r3, [pc, #416]	; (801dd58 <_dtoa_r+0x650>)
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	4640      	mov	r0, r8
 801dbba:	4649      	mov	r1, r9
 801dbbc:	f7e2 fd3c 	bl	8000638 <__aeabi_dmul>
 801dbc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dbc4:	f7e2 ffbe 	bl	8000b44 <__aeabi_dcmpge>
 801dbc8:	9e04      	ldr	r6, [sp, #16]
 801dbca:	4637      	mov	r7, r6
 801dbcc:	2800      	cmp	r0, #0
 801dbce:	f040 8245 	bne.w	801e05c <_dtoa_r+0x954>
 801dbd2:	9d00      	ldr	r5, [sp, #0]
 801dbd4:	2331      	movs	r3, #49	; 0x31
 801dbd6:	f805 3b01 	strb.w	r3, [r5], #1
 801dbda:	f10b 0b01 	add.w	fp, fp, #1
 801dbde:	e241      	b.n	801e064 <_dtoa_r+0x95c>
 801dbe0:	07f2      	lsls	r2, r6, #31
 801dbe2:	d505      	bpl.n	801dbf0 <_dtoa_r+0x4e8>
 801dbe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dbe8:	f7e2 fd26 	bl	8000638 <__aeabi_dmul>
 801dbec:	3501      	adds	r5, #1
 801dbee:	2301      	movs	r3, #1
 801dbf0:	1076      	asrs	r6, r6, #1
 801dbf2:	3708      	adds	r7, #8
 801dbf4:	e773      	b.n	801dade <_dtoa_r+0x3d6>
 801dbf6:	2502      	movs	r5, #2
 801dbf8:	e775      	b.n	801dae6 <_dtoa_r+0x3de>
 801dbfa:	9e04      	ldr	r6, [sp, #16]
 801dbfc:	465f      	mov	r7, fp
 801dbfe:	e792      	b.n	801db26 <_dtoa_r+0x41e>
 801dc00:	9900      	ldr	r1, [sp, #0]
 801dc02:	4b50      	ldr	r3, [pc, #320]	; (801dd44 <_dtoa_r+0x63c>)
 801dc04:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dc08:	4431      	add	r1, r6
 801dc0a:	9102      	str	r1, [sp, #8]
 801dc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc0e:	eeb0 9a47 	vmov.f32	s18, s14
 801dc12:	eef0 9a67 	vmov.f32	s19, s15
 801dc16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801dc1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dc1e:	2900      	cmp	r1, #0
 801dc20:	d044      	beq.n	801dcac <_dtoa_r+0x5a4>
 801dc22:	494e      	ldr	r1, [pc, #312]	; (801dd5c <_dtoa_r+0x654>)
 801dc24:	2000      	movs	r0, #0
 801dc26:	f7e2 fe31 	bl	800088c <__aeabi_ddiv>
 801dc2a:	ec53 2b19 	vmov	r2, r3, d9
 801dc2e:	f7e2 fb4b 	bl	80002c8 <__aeabi_dsub>
 801dc32:	9d00      	ldr	r5, [sp, #0]
 801dc34:	ec41 0b19 	vmov	d9, r0, r1
 801dc38:	4649      	mov	r1, r9
 801dc3a:	4640      	mov	r0, r8
 801dc3c:	f7e2 ffac 	bl	8000b98 <__aeabi_d2iz>
 801dc40:	4606      	mov	r6, r0
 801dc42:	f7e2 fc8f 	bl	8000564 <__aeabi_i2d>
 801dc46:	4602      	mov	r2, r0
 801dc48:	460b      	mov	r3, r1
 801dc4a:	4640      	mov	r0, r8
 801dc4c:	4649      	mov	r1, r9
 801dc4e:	f7e2 fb3b 	bl	80002c8 <__aeabi_dsub>
 801dc52:	3630      	adds	r6, #48	; 0x30
 801dc54:	f805 6b01 	strb.w	r6, [r5], #1
 801dc58:	ec53 2b19 	vmov	r2, r3, d9
 801dc5c:	4680      	mov	r8, r0
 801dc5e:	4689      	mov	r9, r1
 801dc60:	f7e2 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 801dc64:	2800      	cmp	r0, #0
 801dc66:	d164      	bne.n	801dd32 <_dtoa_r+0x62a>
 801dc68:	4642      	mov	r2, r8
 801dc6a:	464b      	mov	r3, r9
 801dc6c:	4937      	ldr	r1, [pc, #220]	; (801dd4c <_dtoa_r+0x644>)
 801dc6e:	2000      	movs	r0, #0
 801dc70:	f7e2 fb2a 	bl	80002c8 <__aeabi_dsub>
 801dc74:	ec53 2b19 	vmov	r2, r3, d9
 801dc78:	f7e2 ff50 	bl	8000b1c <__aeabi_dcmplt>
 801dc7c:	2800      	cmp	r0, #0
 801dc7e:	f040 80b6 	bne.w	801ddee <_dtoa_r+0x6e6>
 801dc82:	9b02      	ldr	r3, [sp, #8]
 801dc84:	429d      	cmp	r5, r3
 801dc86:	f43f af7c 	beq.w	801db82 <_dtoa_r+0x47a>
 801dc8a:	4b31      	ldr	r3, [pc, #196]	; (801dd50 <_dtoa_r+0x648>)
 801dc8c:	ec51 0b19 	vmov	r0, r1, d9
 801dc90:	2200      	movs	r2, #0
 801dc92:	f7e2 fcd1 	bl	8000638 <__aeabi_dmul>
 801dc96:	4b2e      	ldr	r3, [pc, #184]	; (801dd50 <_dtoa_r+0x648>)
 801dc98:	ec41 0b19 	vmov	d9, r0, r1
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	4640      	mov	r0, r8
 801dca0:	4649      	mov	r1, r9
 801dca2:	f7e2 fcc9 	bl	8000638 <__aeabi_dmul>
 801dca6:	4680      	mov	r8, r0
 801dca8:	4689      	mov	r9, r1
 801dcaa:	e7c5      	b.n	801dc38 <_dtoa_r+0x530>
 801dcac:	ec51 0b17 	vmov	r0, r1, d7
 801dcb0:	f7e2 fcc2 	bl	8000638 <__aeabi_dmul>
 801dcb4:	9b02      	ldr	r3, [sp, #8]
 801dcb6:	9d00      	ldr	r5, [sp, #0]
 801dcb8:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcba:	ec41 0b19 	vmov	d9, r0, r1
 801dcbe:	4649      	mov	r1, r9
 801dcc0:	4640      	mov	r0, r8
 801dcc2:	f7e2 ff69 	bl	8000b98 <__aeabi_d2iz>
 801dcc6:	4606      	mov	r6, r0
 801dcc8:	f7e2 fc4c 	bl	8000564 <__aeabi_i2d>
 801dccc:	3630      	adds	r6, #48	; 0x30
 801dcce:	4602      	mov	r2, r0
 801dcd0:	460b      	mov	r3, r1
 801dcd2:	4640      	mov	r0, r8
 801dcd4:	4649      	mov	r1, r9
 801dcd6:	f7e2 faf7 	bl	80002c8 <__aeabi_dsub>
 801dcda:	f805 6b01 	strb.w	r6, [r5], #1
 801dcde:	9b02      	ldr	r3, [sp, #8]
 801dce0:	429d      	cmp	r5, r3
 801dce2:	4680      	mov	r8, r0
 801dce4:	4689      	mov	r9, r1
 801dce6:	f04f 0200 	mov.w	r2, #0
 801dcea:	d124      	bne.n	801dd36 <_dtoa_r+0x62e>
 801dcec:	4b1b      	ldr	r3, [pc, #108]	; (801dd5c <_dtoa_r+0x654>)
 801dcee:	ec51 0b19 	vmov	r0, r1, d9
 801dcf2:	f7e2 faeb 	bl	80002cc <__adddf3>
 801dcf6:	4602      	mov	r2, r0
 801dcf8:	460b      	mov	r3, r1
 801dcfa:	4640      	mov	r0, r8
 801dcfc:	4649      	mov	r1, r9
 801dcfe:	f7e2 ff2b 	bl	8000b58 <__aeabi_dcmpgt>
 801dd02:	2800      	cmp	r0, #0
 801dd04:	d173      	bne.n	801ddee <_dtoa_r+0x6e6>
 801dd06:	ec53 2b19 	vmov	r2, r3, d9
 801dd0a:	4914      	ldr	r1, [pc, #80]	; (801dd5c <_dtoa_r+0x654>)
 801dd0c:	2000      	movs	r0, #0
 801dd0e:	f7e2 fadb 	bl	80002c8 <__aeabi_dsub>
 801dd12:	4602      	mov	r2, r0
 801dd14:	460b      	mov	r3, r1
 801dd16:	4640      	mov	r0, r8
 801dd18:	4649      	mov	r1, r9
 801dd1a:	f7e2 feff 	bl	8000b1c <__aeabi_dcmplt>
 801dd1e:	2800      	cmp	r0, #0
 801dd20:	f43f af2f 	beq.w	801db82 <_dtoa_r+0x47a>
 801dd24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dd26:	1e6b      	subs	r3, r5, #1
 801dd28:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dd2e:	2b30      	cmp	r3, #48	; 0x30
 801dd30:	d0f8      	beq.n	801dd24 <_dtoa_r+0x61c>
 801dd32:	46bb      	mov	fp, r7
 801dd34:	e04a      	b.n	801ddcc <_dtoa_r+0x6c4>
 801dd36:	4b06      	ldr	r3, [pc, #24]	; (801dd50 <_dtoa_r+0x648>)
 801dd38:	f7e2 fc7e 	bl	8000638 <__aeabi_dmul>
 801dd3c:	4680      	mov	r8, r0
 801dd3e:	4689      	mov	r9, r1
 801dd40:	e7bd      	b.n	801dcbe <_dtoa_r+0x5b6>
 801dd42:	bf00      	nop
 801dd44:	080248b8 	.word	0x080248b8
 801dd48:	08024890 	.word	0x08024890
 801dd4c:	3ff00000 	.word	0x3ff00000
 801dd50:	40240000 	.word	0x40240000
 801dd54:	401c0000 	.word	0x401c0000
 801dd58:	40140000 	.word	0x40140000
 801dd5c:	3fe00000 	.word	0x3fe00000
 801dd60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801dd64:	9d00      	ldr	r5, [sp, #0]
 801dd66:	4642      	mov	r2, r8
 801dd68:	464b      	mov	r3, r9
 801dd6a:	4630      	mov	r0, r6
 801dd6c:	4639      	mov	r1, r7
 801dd6e:	f7e2 fd8d 	bl	800088c <__aeabi_ddiv>
 801dd72:	f7e2 ff11 	bl	8000b98 <__aeabi_d2iz>
 801dd76:	9001      	str	r0, [sp, #4]
 801dd78:	f7e2 fbf4 	bl	8000564 <__aeabi_i2d>
 801dd7c:	4642      	mov	r2, r8
 801dd7e:	464b      	mov	r3, r9
 801dd80:	f7e2 fc5a 	bl	8000638 <__aeabi_dmul>
 801dd84:	4602      	mov	r2, r0
 801dd86:	460b      	mov	r3, r1
 801dd88:	4630      	mov	r0, r6
 801dd8a:	4639      	mov	r1, r7
 801dd8c:	f7e2 fa9c 	bl	80002c8 <__aeabi_dsub>
 801dd90:	9e01      	ldr	r6, [sp, #4]
 801dd92:	9f04      	ldr	r7, [sp, #16]
 801dd94:	3630      	adds	r6, #48	; 0x30
 801dd96:	f805 6b01 	strb.w	r6, [r5], #1
 801dd9a:	9e00      	ldr	r6, [sp, #0]
 801dd9c:	1bae      	subs	r6, r5, r6
 801dd9e:	42b7      	cmp	r7, r6
 801dda0:	4602      	mov	r2, r0
 801dda2:	460b      	mov	r3, r1
 801dda4:	d134      	bne.n	801de10 <_dtoa_r+0x708>
 801dda6:	f7e2 fa91 	bl	80002cc <__adddf3>
 801ddaa:	4642      	mov	r2, r8
 801ddac:	464b      	mov	r3, r9
 801ddae:	4606      	mov	r6, r0
 801ddb0:	460f      	mov	r7, r1
 801ddb2:	f7e2 fed1 	bl	8000b58 <__aeabi_dcmpgt>
 801ddb6:	b9c8      	cbnz	r0, 801ddec <_dtoa_r+0x6e4>
 801ddb8:	4642      	mov	r2, r8
 801ddba:	464b      	mov	r3, r9
 801ddbc:	4630      	mov	r0, r6
 801ddbe:	4639      	mov	r1, r7
 801ddc0:	f7e2 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 801ddc4:	b110      	cbz	r0, 801ddcc <_dtoa_r+0x6c4>
 801ddc6:	9b01      	ldr	r3, [sp, #4]
 801ddc8:	07db      	lsls	r3, r3, #31
 801ddca:	d40f      	bmi.n	801ddec <_dtoa_r+0x6e4>
 801ddcc:	4651      	mov	r1, sl
 801ddce:	4620      	mov	r0, r4
 801ddd0:	f000 fb18 	bl	801e404 <_Bfree>
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddd8:	702b      	strb	r3, [r5, #0]
 801ddda:	f10b 0301 	add.w	r3, fp, #1
 801ddde:	6013      	str	r3, [r2, #0]
 801dde0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	f43f ace2 	beq.w	801d7ac <_dtoa_r+0xa4>
 801dde8:	601d      	str	r5, [r3, #0]
 801ddea:	e4df      	b.n	801d7ac <_dtoa_r+0xa4>
 801ddec:	465f      	mov	r7, fp
 801ddee:	462b      	mov	r3, r5
 801ddf0:	461d      	mov	r5, r3
 801ddf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ddf6:	2a39      	cmp	r2, #57	; 0x39
 801ddf8:	d106      	bne.n	801de08 <_dtoa_r+0x700>
 801ddfa:	9a00      	ldr	r2, [sp, #0]
 801ddfc:	429a      	cmp	r2, r3
 801ddfe:	d1f7      	bne.n	801ddf0 <_dtoa_r+0x6e8>
 801de00:	9900      	ldr	r1, [sp, #0]
 801de02:	2230      	movs	r2, #48	; 0x30
 801de04:	3701      	adds	r7, #1
 801de06:	700a      	strb	r2, [r1, #0]
 801de08:	781a      	ldrb	r2, [r3, #0]
 801de0a:	3201      	adds	r2, #1
 801de0c:	701a      	strb	r2, [r3, #0]
 801de0e:	e790      	b.n	801dd32 <_dtoa_r+0x62a>
 801de10:	4ba3      	ldr	r3, [pc, #652]	; (801e0a0 <_dtoa_r+0x998>)
 801de12:	2200      	movs	r2, #0
 801de14:	f7e2 fc10 	bl	8000638 <__aeabi_dmul>
 801de18:	2200      	movs	r2, #0
 801de1a:	2300      	movs	r3, #0
 801de1c:	4606      	mov	r6, r0
 801de1e:	460f      	mov	r7, r1
 801de20:	f7e2 fe72 	bl	8000b08 <__aeabi_dcmpeq>
 801de24:	2800      	cmp	r0, #0
 801de26:	d09e      	beq.n	801dd66 <_dtoa_r+0x65e>
 801de28:	e7d0      	b.n	801ddcc <_dtoa_r+0x6c4>
 801de2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de2c:	2a00      	cmp	r2, #0
 801de2e:	f000 80ca 	beq.w	801dfc6 <_dtoa_r+0x8be>
 801de32:	9a07      	ldr	r2, [sp, #28]
 801de34:	2a01      	cmp	r2, #1
 801de36:	f300 80ad 	bgt.w	801df94 <_dtoa_r+0x88c>
 801de3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801de3c:	2a00      	cmp	r2, #0
 801de3e:	f000 80a5 	beq.w	801df8c <_dtoa_r+0x884>
 801de42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801de46:	9e08      	ldr	r6, [sp, #32]
 801de48:	9d05      	ldr	r5, [sp, #20]
 801de4a:	9a05      	ldr	r2, [sp, #20]
 801de4c:	441a      	add	r2, r3
 801de4e:	9205      	str	r2, [sp, #20]
 801de50:	9a06      	ldr	r2, [sp, #24]
 801de52:	2101      	movs	r1, #1
 801de54:	441a      	add	r2, r3
 801de56:	4620      	mov	r0, r4
 801de58:	9206      	str	r2, [sp, #24]
 801de5a:	f000 fb89 	bl	801e570 <__i2b>
 801de5e:	4607      	mov	r7, r0
 801de60:	b165      	cbz	r5, 801de7c <_dtoa_r+0x774>
 801de62:	9b06      	ldr	r3, [sp, #24]
 801de64:	2b00      	cmp	r3, #0
 801de66:	dd09      	ble.n	801de7c <_dtoa_r+0x774>
 801de68:	42ab      	cmp	r3, r5
 801de6a:	9a05      	ldr	r2, [sp, #20]
 801de6c:	bfa8      	it	ge
 801de6e:	462b      	movge	r3, r5
 801de70:	1ad2      	subs	r2, r2, r3
 801de72:	9205      	str	r2, [sp, #20]
 801de74:	9a06      	ldr	r2, [sp, #24]
 801de76:	1aed      	subs	r5, r5, r3
 801de78:	1ad3      	subs	r3, r2, r3
 801de7a:	9306      	str	r3, [sp, #24]
 801de7c:	9b08      	ldr	r3, [sp, #32]
 801de7e:	b1f3      	cbz	r3, 801debe <_dtoa_r+0x7b6>
 801de80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de82:	2b00      	cmp	r3, #0
 801de84:	f000 80a3 	beq.w	801dfce <_dtoa_r+0x8c6>
 801de88:	2e00      	cmp	r6, #0
 801de8a:	dd10      	ble.n	801deae <_dtoa_r+0x7a6>
 801de8c:	4639      	mov	r1, r7
 801de8e:	4632      	mov	r2, r6
 801de90:	4620      	mov	r0, r4
 801de92:	f000 fc2d 	bl	801e6f0 <__pow5mult>
 801de96:	4652      	mov	r2, sl
 801de98:	4601      	mov	r1, r0
 801de9a:	4607      	mov	r7, r0
 801de9c:	4620      	mov	r0, r4
 801de9e:	f000 fb7d 	bl	801e59c <__multiply>
 801dea2:	4651      	mov	r1, sl
 801dea4:	4680      	mov	r8, r0
 801dea6:	4620      	mov	r0, r4
 801dea8:	f000 faac 	bl	801e404 <_Bfree>
 801deac:	46c2      	mov	sl, r8
 801deae:	9b08      	ldr	r3, [sp, #32]
 801deb0:	1b9a      	subs	r2, r3, r6
 801deb2:	d004      	beq.n	801debe <_dtoa_r+0x7b6>
 801deb4:	4651      	mov	r1, sl
 801deb6:	4620      	mov	r0, r4
 801deb8:	f000 fc1a 	bl	801e6f0 <__pow5mult>
 801debc:	4682      	mov	sl, r0
 801debe:	2101      	movs	r1, #1
 801dec0:	4620      	mov	r0, r4
 801dec2:	f000 fb55 	bl	801e570 <__i2b>
 801dec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dec8:	2b00      	cmp	r3, #0
 801deca:	4606      	mov	r6, r0
 801decc:	f340 8081 	ble.w	801dfd2 <_dtoa_r+0x8ca>
 801ded0:	461a      	mov	r2, r3
 801ded2:	4601      	mov	r1, r0
 801ded4:	4620      	mov	r0, r4
 801ded6:	f000 fc0b 	bl	801e6f0 <__pow5mult>
 801deda:	9b07      	ldr	r3, [sp, #28]
 801dedc:	2b01      	cmp	r3, #1
 801dede:	4606      	mov	r6, r0
 801dee0:	dd7a      	ble.n	801dfd8 <_dtoa_r+0x8d0>
 801dee2:	f04f 0800 	mov.w	r8, #0
 801dee6:	6933      	ldr	r3, [r6, #16]
 801dee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801deec:	6918      	ldr	r0, [r3, #16]
 801deee:	f000 faf1 	bl	801e4d4 <__hi0bits>
 801def2:	f1c0 0020 	rsb	r0, r0, #32
 801def6:	9b06      	ldr	r3, [sp, #24]
 801def8:	4418      	add	r0, r3
 801defa:	f010 001f 	ands.w	r0, r0, #31
 801defe:	f000 8094 	beq.w	801e02a <_dtoa_r+0x922>
 801df02:	f1c0 0320 	rsb	r3, r0, #32
 801df06:	2b04      	cmp	r3, #4
 801df08:	f340 8085 	ble.w	801e016 <_dtoa_r+0x90e>
 801df0c:	9b05      	ldr	r3, [sp, #20]
 801df0e:	f1c0 001c 	rsb	r0, r0, #28
 801df12:	4403      	add	r3, r0
 801df14:	9305      	str	r3, [sp, #20]
 801df16:	9b06      	ldr	r3, [sp, #24]
 801df18:	4403      	add	r3, r0
 801df1a:	4405      	add	r5, r0
 801df1c:	9306      	str	r3, [sp, #24]
 801df1e:	9b05      	ldr	r3, [sp, #20]
 801df20:	2b00      	cmp	r3, #0
 801df22:	dd05      	ble.n	801df30 <_dtoa_r+0x828>
 801df24:	4651      	mov	r1, sl
 801df26:	461a      	mov	r2, r3
 801df28:	4620      	mov	r0, r4
 801df2a:	f000 fc3b 	bl	801e7a4 <__lshift>
 801df2e:	4682      	mov	sl, r0
 801df30:	9b06      	ldr	r3, [sp, #24]
 801df32:	2b00      	cmp	r3, #0
 801df34:	dd05      	ble.n	801df42 <_dtoa_r+0x83a>
 801df36:	4631      	mov	r1, r6
 801df38:	461a      	mov	r2, r3
 801df3a:	4620      	mov	r0, r4
 801df3c:	f000 fc32 	bl	801e7a4 <__lshift>
 801df40:	4606      	mov	r6, r0
 801df42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df44:	2b00      	cmp	r3, #0
 801df46:	d072      	beq.n	801e02e <_dtoa_r+0x926>
 801df48:	4631      	mov	r1, r6
 801df4a:	4650      	mov	r0, sl
 801df4c:	f000 fc96 	bl	801e87c <__mcmp>
 801df50:	2800      	cmp	r0, #0
 801df52:	da6c      	bge.n	801e02e <_dtoa_r+0x926>
 801df54:	2300      	movs	r3, #0
 801df56:	4651      	mov	r1, sl
 801df58:	220a      	movs	r2, #10
 801df5a:	4620      	mov	r0, r4
 801df5c:	f000 fa74 	bl	801e448 <__multadd>
 801df60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df62:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df66:	4682      	mov	sl, r0
 801df68:	2b00      	cmp	r3, #0
 801df6a:	f000 81b0 	beq.w	801e2ce <_dtoa_r+0xbc6>
 801df6e:	2300      	movs	r3, #0
 801df70:	4639      	mov	r1, r7
 801df72:	220a      	movs	r2, #10
 801df74:	4620      	mov	r0, r4
 801df76:	f000 fa67 	bl	801e448 <__multadd>
 801df7a:	9b01      	ldr	r3, [sp, #4]
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	4607      	mov	r7, r0
 801df80:	f300 8096 	bgt.w	801e0b0 <_dtoa_r+0x9a8>
 801df84:	9b07      	ldr	r3, [sp, #28]
 801df86:	2b02      	cmp	r3, #2
 801df88:	dc59      	bgt.n	801e03e <_dtoa_r+0x936>
 801df8a:	e091      	b.n	801e0b0 <_dtoa_r+0x9a8>
 801df8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801df92:	e758      	b.n	801de46 <_dtoa_r+0x73e>
 801df94:	9b04      	ldr	r3, [sp, #16]
 801df96:	1e5e      	subs	r6, r3, #1
 801df98:	9b08      	ldr	r3, [sp, #32]
 801df9a:	42b3      	cmp	r3, r6
 801df9c:	bfbf      	itttt	lt
 801df9e:	9b08      	ldrlt	r3, [sp, #32]
 801dfa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801dfa2:	9608      	strlt	r6, [sp, #32]
 801dfa4:	1af3      	sublt	r3, r6, r3
 801dfa6:	bfb4      	ite	lt
 801dfa8:	18d2      	addlt	r2, r2, r3
 801dfaa:	1b9e      	subge	r6, r3, r6
 801dfac:	9b04      	ldr	r3, [sp, #16]
 801dfae:	bfbc      	itt	lt
 801dfb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801dfb2:	2600      	movlt	r6, #0
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	bfb7      	itett	lt
 801dfb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801dfbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801dfc0:	1a9d      	sublt	r5, r3, r2
 801dfc2:	2300      	movlt	r3, #0
 801dfc4:	e741      	b.n	801de4a <_dtoa_r+0x742>
 801dfc6:	9e08      	ldr	r6, [sp, #32]
 801dfc8:	9d05      	ldr	r5, [sp, #20]
 801dfca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dfcc:	e748      	b.n	801de60 <_dtoa_r+0x758>
 801dfce:	9a08      	ldr	r2, [sp, #32]
 801dfd0:	e770      	b.n	801deb4 <_dtoa_r+0x7ac>
 801dfd2:	9b07      	ldr	r3, [sp, #28]
 801dfd4:	2b01      	cmp	r3, #1
 801dfd6:	dc19      	bgt.n	801e00c <_dtoa_r+0x904>
 801dfd8:	9b02      	ldr	r3, [sp, #8]
 801dfda:	b9bb      	cbnz	r3, 801e00c <_dtoa_r+0x904>
 801dfdc:	9b03      	ldr	r3, [sp, #12]
 801dfde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dfe2:	b99b      	cbnz	r3, 801e00c <_dtoa_r+0x904>
 801dfe4:	9b03      	ldr	r3, [sp, #12]
 801dfe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dfea:	0d1b      	lsrs	r3, r3, #20
 801dfec:	051b      	lsls	r3, r3, #20
 801dfee:	b183      	cbz	r3, 801e012 <_dtoa_r+0x90a>
 801dff0:	9b05      	ldr	r3, [sp, #20]
 801dff2:	3301      	adds	r3, #1
 801dff4:	9305      	str	r3, [sp, #20]
 801dff6:	9b06      	ldr	r3, [sp, #24]
 801dff8:	3301      	adds	r3, #1
 801dffa:	9306      	str	r3, [sp, #24]
 801dffc:	f04f 0801 	mov.w	r8, #1
 801e000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e002:	2b00      	cmp	r3, #0
 801e004:	f47f af6f 	bne.w	801dee6 <_dtoa_r+0x7de>
 801e008:	2001      	movs	r0, #1
 801e00a:	e774      	b.n	801def6 <_dtoa_r+0x7ee>
 801e00c:	f04f 0800 	mov.w	r8, #0
 801e010:	e7f6      	b.n	801e000 <_dtoa_r+0x8f8>
 801e012:	4698      	mov	r8, r3
 801e014:	e7f4      	b.n	801e000 <_dtoa_r+0x8f8>
 801e016:	d082      	beq.n	801df1e <_dtoa_r+0x816>
 801e018:	9a05      	ldr	r2, [sp, #20]
 801e01a:	331c      	adds	r3, #28
 801e01c:	441a      	add	r2, r3
 801e01e:	9205      	str	r2, [sp, #20]
 801e020:	9a06      	ldr	r2, [sp, #24]
 801e022:	441a      	add	r2, r3
 801e024:	441d      	add	r5, r3
 801e026:	9206      	str	r2, [sp, #24]
 801e028:	e779      	b.n	801df1e <_dtoa_r+0x816>
 801e02a:	4603      	mov	r3, r0
 801e02c:	e7f4      	b.n	801e018 <_dtoa_r+0x910>
 801e02e:	9b04      	ldr	r3, [sp, #16]
 801e030:	2b00      	cmp	r3, #0
 801e032:	dc37      	bgt.n	801e0a4 <_dtoa_r+0x99c>
 801e034:	9b07      	ldr	r3, [sp, #28]
 801e036:	2b02      	cmp	r3, #2
 801e038:	dd34      	ble.n	801e0a4 <_dtoa_r+0x99c>
 801e03a:	9b04      	ldr	r3, [sp, #16]
 801e03c:	9301      	str	r3, [sp, #4]
 801e03e:	9b01      	ldr	r3, [sp, #4]
 801e040:	b963      	cbnz	r3, 801e05c <_dtoa_r+0x954>
 801e042:	4631      	mov	r1, r6
 801e044:	2205      	movs	r2, #5
 801e046:	4620      	mov	r0, r4
 801e048:	f000 f9fe 	bl	801e448 <__multadd>
 801e04c:	4601      	mov	r1, r0
 801e04e:	4606      	mov	r6, r0
 801e050:	4650      	mov	r0, sl
 801e052:	f000 fc13 	bl	801e87c <__mcmp>
 801e056:	2800      	cmp	r0, #0
 801e058:	f73f adbb 	bgt.w	801dbd2 <_dtoa_r+0x4ca>
 801e05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e05e:	9d00      	ldr	r5, [sp, #0]
 801e060:	ea6f 0b03 	mvn.w	fp, r3
 801e064:	f04f 0800 	mov.w	r8, #0
 801e068:	4631      	mov	r1, r6
 801e06a:	4620      	mov	r0, r4
 801e06c:	f000 f9ca 	bl	801e404 <_Bfree>
 801e070:	2f00      	cmp	r7, #0
 801e072:	f43f aeab 	beq.w	801ddcc <_dtoa_r+0x6c4>
 801e076:	f1b8 0f00 	cmp.w	r8, #0
 801e07a:	d005      	beq.n	801e088 <_dtoa_r+0x980>
 801e07c:	45b8      	cmp	r8, r7
 801e07e:	d003      	beq.n	801e088 <_dtoa_r+0x980>
 801e080:	4641      	mov	r1, r8
 801e082:	4620      	mov	r0, r4
 801e084:	f000 f9be 	bl	801e404 <_Bfree>
 801e088:	4639      	mov	r1, r7
 801e08a:	4620      	mov	r0, r4
 801e08c:	f000 f9ba 	bl	801e404 <_Bfree>
 801e090:	e69c      	b.n	801ddcc <_dtoa_r+0x6c4>
 801e092:	2600      	movs	r6, #0
 801e094:	4637      	mov	r7, r6
 801e096:	e7e1      	b.n	801e05c <_dtoa_r+0x954>
 801e098:	46bb      	mov	fp, r7
 801e09a:	4637      	mov	r7, r6
 801e09c:	e599      	b.n	801dbd2 <_dtoa_r+0x4ca>
 801e09e:	bf00      	nop
 801e0a0:	40240000 	.word	0x40240000
 801e0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	f000 80c8 	beq.w	801e23c <_dtoa_r+0xb34>
 801e0ac:	9b04      	ldr	r3, [sp, #16]
 801e0ae:	9301      	str	r3, [sp, #4]
 801e0b0:	2d00      	cmp	r5, #0
 801e0b2:	dd05      	ble.n	801e0c0 <_dtoa_r+0x9b8>
 801e0b4:	4639      	mov	r1, r7
 801e0b6:	462a      	mov	r2, r5
 801e0b8:	4620      	mov	r0, r4
 801e0ba:	f000 fb73 	bl	801e7a4 <__lshift>
 801e0be:	4607      	mov	r7, r0
 801e0c0:	f1b8 0f00 	cmp.w	r8, #0
 801e0c4:	d05b      	beq.n	801e17e <_dtoa_r+0xa76>
 801e0c6:	6879      	ldr	r1, [r7, #4]
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f000 f95b 	bl	801e384 <_Balloc>
 801e0ce:	4605      	mov	r5, r0
 801e0d0:	b928      	cbnz	r0, 801e0de <_dtoa_r+0x9d6>
 801e0d2:	4b83      	ldr	r3, [pc, #524]	; (801e2e0 <_dtoa_r+0xbd8>)
 801e0d4:	4602      	mov	r2, r0
 801e0d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801e0da:	f7ff bb2e 	b.w	801d73a <_dtoa_r+0x32>
 801e0de:	693a      	ldr	r2, [r7, #16]
 801e0e0:	3202      	adds	r2, #2
 801e0e2:	0092      	lsls	r2, r2, #2
 801e0e4:	f107 010c 	add.w	r1, r7, #12
 801e0e8:	300c      	adds	r0, #12
 801e0ea:	f7ff fa70 	bl	801d5ce <memcpy>
 801e0ee:	2201      	movs	r2, #1
 801e0f0:	4629      	mov	r1, r5
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	f000 fb56 	bl	801e7a4 <__lshift>
 801e0f8:	9b00      	ldr	r3, [sp, #0]
 801e0fa:	3301      	adds	r3, #1
 801e0fc:	9304      	str	r3, [sp, #16]
 801e0fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e102:	4413      	add	r3, r2
 801e104:	9308      	str	r3, [sp, #32]
 801e106:	9b02      	ldr	r3, [sp, #8]
 801e108:	f003 0301 	and.w	r3, r3, #1
 801e10c:	46b8      	mov	r8, r7
 801e10e:	9306      	str	r3, [sp, #24]
 801e110:	4607      	mov	r7, r0
 801e112:	9b04      	ldr	r3, [sp, #16]
 801e114:	4631      	mov	r1, r6
 801e116:	3b01      	subs	r3, #1
 801e118:	4650      	mov	r0, sl
 801e11a:	9301      	str	r3, [sp, #4]
 801e11c:	f7ff fa6c 	bl	801d5f8 <quorem>
 801e120:	4641      	mov	r1, r8
 801e122:	9002      	str	r0, [sp, #8]
 801e124:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e128:	4650      	mov	r0, sl
 801e12a:	f000 fba7 	bl	801e87c <__mcmp>
 801e12e:	463a      	mov	r2, r7
 801e130:	9005      	str	r0, [sp, #20]
 801e132:	4631      	mov	r1, r6
 801e134:	4620      	mov	r0, r4
 801e136:	f000 fbbd 	bl	801e8b4 <__mdiff>
 801e13a:	68c2      	ldr	r2, [r0, #12]
 801e13c:	4605      	mov	r5, r0
 801e13e:	bb02      	cbnz	r2, 801e182 <_dtoa_r+0xa7a>
 801e140:	4601      	mov	r1, r0
 801e142:	4650      	mov	r0, sl
 801e144:	f000 fb9a 	bl	801e87c <__mcmp>
 801e148:	4602      	mov	r2, r0
 801e14a:	4629      	mov	r1, r5
 801e14c:	4620      	mov	r0, r4
 801e14e:	9209      	str	r2, [sp, #36]	; 0x24
 801e150:	f000 f958 	bl	801e404 <_Bfree>
 801e154:	9b07      	ldr	r3, [sp, #28]
 801e156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e158:	9d04      	ldr	r5, [sp, #16]
 801e15a:	ea43 0102 	orr.w	r1, r3, r2
 801e15e:	9b06      	ldr	r3, [sp, #24]
 801e160:	4319      	orrs	r1, r3
 801e162:	d110      	bne.n	801e186 <_dtoa_r+0xa7e>
 801e164:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e168:	d029      	beq.n	801e1be <_dtoa_r+0xab6>
 801e16a:	9b05      	ldr	r3, [sp, #20]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	dd02      	ble.n	801e176 <_dtoa_r+0xa6e>
 801e170:	9b02      	ldr	r3, [sp, #8]
 801e172:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801e176:	9b01      	ldr	r3, [sp, #4]
 801e178:	f883 9000 	strb.w	r9, [r3]
 801e17c:	e774      	b.n	801e068 <_dtoa_r+0x960>
 801e17e:	4638      	mov	r0, r7
 801e180:	e7ba      	b.n	801e0f8 <_dtoa_r+0x9f0>
 801e182:	2201      	movs	r2, #1
 801e184:	e7e1      	b.n	801e14a <_dtoa_r+0xa42>
 801e186:	9b05      	ldr	r3, [sp, #20]
 801e188:	2b00      	cmp	r3, #0
 801e18a:	db04      	blt.n	801e196 <_dtoa_r+0xa8e>
 801e18c:	9907      	ldr	r1, [sp, #28]
 801e18e:	430b      	orrs	r3, r1
 801e190:	9906      	ldr	r1, [sp, #24]
 801e192:	430b      	orrs	r3, r1
 801e194:	d120      	bne.n	801e1d8 <_dtoa_r+0xad0>
 801e196:	2a00      	cmp	r2, #0
 801e198:	dded      	ble.n	801e176 <_dtoa_r+0xa6e>
 801e19a:	4651      	mov	r1, sl
 801e19c:	2201      	movs	r2, #1
 801e19e:	4620      	mov	r0, r4
 801e1a0:	f000 fb00 	bl	801e7a4 <__lshift>
 801e1a4:	4631      	mov	r1, r6
 801e1a6:	4682      	mov	sl, r0
 801e1a8:	f000 fb68 	bl	801e87c <__mcmp>
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	dc03      	bgt.n	801e1b8 <_dtoa_r+0xab0>
 801e1b0:	d1e1      	bne.n	801e176 <_dtoa_r+0xa6e>
 801e1b2:	f019 0f01 	tst.w	r9, #1
 801e1b6:	d0de      	beq.n	801e176 <_dtoa_r+0xa6e>
 801e1b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e1bc:	d1d8      	bne.n	801e170 <_dtoa_r+0xa68>
 801e1be:	9a01      	ldr	r2, [sp, #4]
 801e1c0:	2339      	movs	r3, #57	; 0x39
 801e1c2:	7013      	strb	r3, [r2, #0]
 801e1c4:	462b      	mov	r3, r5
 801e1c6:	461d      	mov	r5, r3
 801e1c8:	3b01      	subs	r3, #1
 801e1ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e1ce:	2a39      	cmp	r2, #57	; 0x39
 801e1d0:	d06c      	beq.n	801e2ac <_dtoa_r+0xba4>
 801e1d2:	3201      	adds	r2, #1
 801e1d4:	701a      	strb	r2, [r3, #0]
 801e1d6:	e747      	b.n	801e068 <_dtoa_r+0x960>
 801e1d8:	2a00      	cmp	r2, #0
 801e1da:	dd07      	ble.n	801e1ec <_dtoa_r+0xae4>
 801e1dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801e1e0:	d0ed      	beq.n	801e1be <_dtoa_r+0xab6>
 801e1e2:	9a01      	ldr	r2, [sp, #4]
 801e1e4:	f109 0301 	add.w	r3, r9, #1
 801e1e8:	7013      	strb	r3, [r2, #0]
 801e1ea:	e73d      	b.n	801e068 <_dtoa_r+0x960>
 801e1ec:	9b04      	ldr	r3, [sp, #16]
 801e1ee:	9a08      	ldr	r2, [sp, #32]
 801e1f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 801e1f4:	4293      	cmp	r3, r2
 801e1f6:	d043      	beq.n	801e280 <_dtoa_r+0xb78>
 801e1f8:	4651      	mov	r1, sl
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	220a      	movs	r2, #10
 801e1fe:	4620      	mov	r0, r4
 801e200:	f000 f922 	bl	801e448 <__multadd>
 801e204:	45b8      	cmp	r8, r7
 801e206:	4682      	mov	sl, r0
 801e208:	f04f 0300 	mov.w	r3, #0
 801e20c:	f04f 020a 	mov.w	r2, #10
 801e210:	4641      	mov	r1, r8
 801e212:	4620      	mov	r0, r4
 801e214:	d107      	bne.n	801e226 <_dtoa_r+0xb1e>
 801e216:	f000 f917 	bl	801e448 <__multadd>
 801e21a:	4680      	mov	r8, r0
 801e21c:	4607      	mov	r7, r0
 801e21e:	9b04      	ldr	r3, [sp, #16]
 801e220:	3301      	adds	r3, #1
 801e222:	9304      	str	r3, [sp, #16]
 801e224:	e775      	b.n	801e112 <_dtoa_r+0xa0a>
 801e226:	f000 f90f 	bl	801e448 <__multadd>
 801e22a:	4639      	mov	r1, r7
 801e22c:	4680      	mov	r8, r0
 801e22e:	2300      	movs	r3, #0
 801e230:	220a      	movs	r2, #10
 801e232:	4620      	mov	r0, r4
 801e234:	f000 f908 	bl	801e448 <__multadd>
 801e238:	4607      	mov	r7, r0
 801e23a:	e7f0      	b.n	801e21e <_dtoa_r+0xb16>
 801e23c:	9b04      	ldr	r3, [sp, #16]
 801e23e:	9301      	str	r3, [sp, #4]
 801e240:	9d00      	ldr	r5, [sp, #0]
 801e242:	4631      	mov	r1, r6
 801e244:	4650      	mov	r0, sl
 801e246:	f7ff f9d7 	bl	801d5f8 <quorem>
 801e24a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801e24e:	9b00      	ldr	r3, [sp, #0]
 801e250:	f805 9b01 	strb.w	r9, [r5], #1
 801e254:	1aea      	subs	r2, r5, r3
 801e256:	9b01      	ldr	r3, [sp, #4]
 801e258:	4293      	cmp	r3, r2
 801e25a:	dd07      	ble.n	801e26c <_dtoa_r+0xb64>
 801e25c:	4651      	mov	r1, sl
 801e25e:	2300      	movs	r3, #0
 801e260:	220a      	movs	r2, #10
 801e262:	4620      	mov	r0, r4
 801e264:	f000 f8f0 	bl	801e448 <__multadd>
 801e268:	4682      	mov	sl, r0
 801e26a:	e7ea      	b.n	801e242 <_dtoa_r+0xb3a>
 801e26c:	9b01      	ldr	r3, [sp, #4]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	bfc8      	it	gt
 801e272:	461d      	movgt	r5, r3
 801e274:	9b00      	ldr	r3, [sp, #0]
 801e276:	bfd8      	it	le
 801e278:	2501      	movle	r5, #1
 801e27a:	441d      	add	r5, r3
 801e27c:	f04f 0800 	mov.w	r8, #0
 801e280:	4651      	mov	r1, sl
 801e282:	2201      	movs	r2, #1
 801e284:	4620      	mov	r0, r4
 801e286:	f000 fa8d 	bl	801e7a4 <__lshift>
 801e28a:	4631      	mov	r1, r6
 801e28c:	4682      	mov	sl, r0
 801e28e:	f000 faf5 	bl	801e87c <__mcmp>
 801e292:	2800      	cmp	r0, #0
 801e294:	dc96      	bgt.n	801e1c4 <_dtoa_r+0xabc>
 801e296:	d102      	bne.n	801e29e <_dtoa_r+0xb96>
 801e298:	f019 0f01 	tst.w	r9, #1
 801e29c:	d192      	bne.n	801e1c4 <_dtoa_r+0xabc>
 801e29e:	462b      	mov	r3, r5
 801e2a0:	461d      	mov	r5, r3
 801e2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e2a6:	2a30      	cmp	r2, #48	; 0x30
 801e2a8:	d0fa      	beq.n	801e2a0 <_dtoa_r+0xb98>
 801e2aa:	e6dd      	b.n	801e068 <_dtoa_r+0x960>
 801e2ac:	9a00      	ldr	r2, [sp, #0]
 801e2ae:	429a      	cmp	r2, r3
 801e2b0:	d189      	bne.n	801e1c6 <_dtoa_r+0xabe>
 801e2b2:	f10b 0b01 	add.w	fp, fp, #1
 801e2b6:	2331      	movs	r3, #49	; 0x31
 801e2b8:	e796      	b.n	801e1e8 <_dtoa_r+0xae0>
 801e2ba:	4b0a      	ldr	r3, [pc, #40]	; (801e2e4 <_dtoa_r+0xbdc>)
 801e2bc:	f7ff ba99 	b.w	801d7f2 <_dtoa_r+0xea>
 801e2c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	f47f aa6d 	bne.w	801d7a2 <_dtoa_r+0x9a>
 801e2c8:	4b07      	ldr	r3, [pc, #28]	; (801e2e8 <_dtoa_r+0xbe0>)
 801e2ca:	f7ff ba92 	b.w	801d7f2 <_dtoa_r+0xea>
 801e2ce:	9b01      	ldr	r3, [sp, #4]
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	dcb5      	bgt.n	801e240 <_dtoa_r+0xb38>
 801e2d4:	9b07      	ldr	r3, [sp, #28]
 801e2d6:	2b02      	cmp	r3, #2
 801e2d8:	f73f aeb1 	bgt.w	801e03e <_dtoa_r+0x936>
 801e2dc:	e7b0      	b.n	801e240 <_dtoa_r+0xb38>
 801e2de:	bf00      	nop
 801e2e0:	08024821 	.word	0x08024821
 801e2e4:	08024798 	.word	0x08024798
 801e2e8:	080247bc 	.word	0x080247bc

0801e2ec <_free_r>:
 801e2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2ee:	2900      	cmp	r1, #0
 801e2f0:	d044      	beq.n	801e37c <_free_r+0x90>
 801e2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e2f6:	9001      	str	r0, [sp, #4]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	f1a1 0404 	sub.w	r4, r1, #4
 801e2fe:	bfb8      	it	lt
 801e300:	18e4      	addlt	r4, r4, r3
 801e302:	f7fe f8e3 	bl	801c4cc <__malloc_lock>
 801e306:	4a1e      	ldr	r2, [pc, #120]	; (801e380 <_free_r+0x94>)
 801e308:	9801      	ldr	r0, [sp, #4]
 801e30a:	6813      	ldr	r3, [r2, #0]
 801e30c:	b933      	cbnz	r3, 801e31c <_free_r+0x30>
 801e30e:	6063      	str	r3, [r4, #4]
 801e310:	6014      	str	r4, [r2, #0]
 801e312:	b003      	add	sp, #12
 801e314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e318:	f7fe b8de 	b.w	801c4d8 <__malloc_unlock>
 801e31c:	42a3      	cmp	r3, r4
 801e31e:	d908      	bls.n	801e332 <_free_r+0x46>
 801e320:	6825      	ldr	r5, [r4, #0]
 801e322:	1961      	adds	r1, r4, r5
 801e324:	428b      	cmp	r3, r1
 801e326:	bf01      	itttt	eq
 801e328:	6819      	ldreq	r1, [r3, #0]
 801e32a:	685b      	ldreq	r3, [r3, #4]
 801e32c:	1949      	addeq	r1, r1, r5
 801e32e:	6021      	streq	r1, [r4, #0]
 801e330:	e7ed      	b.n	801e30e <_free_r+0x22>
 801e332:	461a      	mov	r2, r3
 801e334:	685b      	ldr	r3, [r3, #4]
 801e336:	b10b      	cbz	r3, 801e33c <_free_r+0x50>
 801e338:	42a3      	cmp	r3, r4
 801e33a:	d9fa      	bls.n	801e332 <_free_r+0x46>
 801e33c:	6811      	ldr	r1, [r2, #0]
 801e33e:	1855      	adds	r5, r2, r1
 801e340:	42a5      	cmp	r5, r4
 801e342:	d10b      	bne.n	801e35c <_free_r+0x70>
 801e344:	6824      	ldr	r4, [r4, #0]
 801e346:	4421      	add	r1, r4
 801e348:	1854      	adds	r4, r2, r1
 801e34a:	42a3      	cmp	r3, r4
 801e34c:	6011      	str	r1, [r2, #0]
 801e34e:	d1e0      	bne.n	801e312 <_free_r+0x26>
 801e350:	681c      	ldr	r4, [r3, #0]
 801e352:	685b      	ldr	r3, [r3, #4]
 801e354:	6053      	str	r3, [r2, #4]
 801e356:	440c      	add	r4, r1
 801e358:	6014      	str	r4, [r2, #0]
 801e35a:	e7da      	b.n	801e312 <_free_r+0x26>
 801e35c:	d902      	bls.n	801e364 <_free_r+0x78>
 801e35e:	230c      	movs	r3, #12
 801e360:	6003      	str	r3, [r0, #0]
 801e362:	e7d6      	b.n	801e312 <_free_r+0x26>
 801e364:	6825      	ldr	r5, [r4, #0]
 801e366:	1961      	adds	r1, r4, r5
 801e368:	428b      	cmp	r3, r1
 801e36a:	bf04      	itt	eq
 801e36c:	6819      	ldreq	r1, [r3, #0]
 801e36e:	685b      	ldreq	r3, [r3, #4]
 801e370:	6063      	str	r3, [r4, #4]
 801e372:	bf04      	itt	eq
 801e374:	1949      	addeq	r1, r1, r5
 801e376:	6021      	streq	r1, [r4, #0]
 801e378:	6054      	str	r4, [r2, #4]
 801e37a:	e7ca      	b.n	801e312 <_free_r+0x26>
 801e37c:	b003      	add	sp, #12
 801e37e:	bd30      	pop	{r4, r5, pc}
 801e380:	20013544 	.word	0x20013544

0801e384 <_Balloc>:
 801e384:	b570      	push	{r4, r5, r6, lr}
 801e386:	69c6      	ldr	r6, [r0, #28]
 801e388:	4604      	mov	r4, r0
 801e38a:	460d      	mov	r5, r1
 801e38c:	b976      	cbnz	r6, 801e3ac <_Balloc+0x28>
 801e38e:	2010      	movs	r0, #16
 801e390:	f7fd ffec 	bl	801c36c <malloc>
 801e394:	4602      	mov	r2, r0
 801e396:	61e0      	str	r0, [r4, #28]
 801e398:	b920      	cbnz	r0, 801e3a4 <_Balloc+0x20>
 801e39a:	4b18      	ldr	r3, [pc, #96]	; (801e3fc <_Balloc+0x78>)
 801e39c:	4818      	ldr	r0, [pc, #96]	; (801e400 <_Balloc+0x7c>)
 801e39e:	216b      	movs	r1, #107	; 0x6b
 801e3a0:	f7fd ffa8 	bl	801c2f4 <__assert_func>
 801e3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e3a8:	6006      	str	r6, [r0, #0]
 801e3aa:	60c6      	str	r6, [r0, #12]
 801e3ac:	69e6      	ldr	r6, [r4, #28]
 801e3ae:	68f3      	ldr	r3, [r6, #12]
 801e3b0:	b183      	cbz	r3, 801e3d4 <_Balloc+0x50>
 801e3b2:	69e3      	ldr	r3, [r4, #28]
 801e3b4:	68db      	ldr	r3, [r3, #12]
 801e3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e3ba:	b9b8      	cbnz	r0, 801e3ec <_Balloc+0x68>
 801e3bc:	2101      	movs	r1, #1
 801e3be:	fa01 f605 	lsl.w	r6, r1, r5
 801e3c2:	1d72      	adds	r2, r6, #5
 801e3c4:	0092      	lsls	r2, r2, #2
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	f7fd ffba 	bl	801c340 <_calloc_r>
 801e3cc:	b160      	cbz	r0, 801e3e8 <_Balloc+0x64>
 801e3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e3d2:	e00e      	b.n	801e3f2 <_Balloc+0x6e>
 801e3d4:	2221      	movs	r2, #33	; 0x21
 801e3d6:	2104      	movs	r1, #4
 801e3d8:	4620      	mov	r0, r4
 801e3da:	f7fd ffb1 	bl	801c340 <_calloc_r>
 801e3de:	69e3      	ldr	r3, [r4, #28]
 801e3e0:	60f0      	str	r0, [r6, #12]
 801e3e2:	68db      	ldr	r3, [r3, #12]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d1e4      	bne.n	801e3b2 <_Balloc+0x2e>
 801e3e8:	2000      	movs	r0, #0
 801e3ea:	bd70      	pop	{r4, r5, r6, pc}
 801e3ec:	6802      	ldr	r2, [r0, #0]
 801e3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e3f2:	2300      	movs	r3, #0
 801e3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e3f8:	e7f7      	b.n	801e3ea <_Balloc+0x66>
 801e3fa:	bf00      	nop
 801e3fc:	08024618 	.word	0x08024618
 801e400:	08024832 	.word	0x08024832

0801e404 <_Bfree>:
 801e404:	b570      	push	{r4, r5, r6, lr}
 801e406:	69c6      	ldr	r6, [r0, #28]
 801e408:	4605      	mov	r5, r0
 801e40a:	460c      	mov	r4, r1
 801e40c:	b976      	cbnz	r6, 801e42c <_Bfree+0x28>
 801e40e:	2010      	movs	r0, #16
 801e410:	f7fd ffac 	bl	801c36c <malloc>
 801e414:	4602      	mov	r2, r0
 801e416:	61e8      	str	r0, [r5, #28]
 801e418:	b920      	cbnz	r0, 801e424 <_Bfree+0x20>
 801e41a:	4b09      	ldr	r3, [pc, #36]	; (801e440 <_Bfree+0x3c>)
 801e41c:	4809      	ldr	r0, [pc, #36]	; (801e444 <_Bfree+0x40>)
 801e41e:	218f      	movs	r1, #143	; 0x8f
 801e420:	f7fd ff68 	bl	801c2f4 <__assert_func>
 801e424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e428:	6006      	str	r6, [r0, #0]
 801e42a:	60c6      	str	r6, [r0, #12]
 801e42c:	b13c      	cbz	r4, 801e43e <_Bfree+0x3a>
 801e42e:	69eb      	ldr	r3, [r5, #28]
 801e430:	6862      	ldr	r2, [r4, #4]
 801e432:	68db      	ldr	r3, [r3, #12]
 801e434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e438:	6021      	str	r1, [r4, #0]
 801e43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e43e:	bd70      	pop	{r4, r5, r6, pc}
 801e440:	08024618 	.word	0x08024618
 801e444:	08024832 	.word	0x08024832

0801e448 <__multadd>:
 801e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e44c:	690d      	ldr	r5, [r1, #16]
 801e44e:	4607      	mov	r7, r0
 801e450:	460c      	mov	r4, r1
 801e452:	461e      	mov	r6, r3
 801e454:	f101 0c14 	add.w	ip, r1, #20
 801e458:	2000      	movs	r0, #0
 801e45a:	f8dc 3000 	ldr.w	r3, [ip]
 801e45e:	b299      	uxth	r1, r3
 801e460:	fb02 6101 	mla	r1, r2, r1, r6
 801e464:	0c1e      	lsrs	r6, r3, #16
 801e466:	0c0b      	lsrs	r3, r1, #16
 801e468:	fb02 3306 	mla	r3, r2, r6, r3
 801e46c:	b289      	uxth	r1, r1
 801e46e:	3001      	adds	r0, #1
 801e470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e474:	4285      	cmp	r5, r0
 801e476:	f84c 1b04 	str.w	r1, [ip], #4
 801e47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e47e:	dcec      	bgt.n	801e45a <__multadd+0x12>
 801e480:	b30e      	cbz	r6, 801e4c6 <__multadd+0x7e>
 801e482:	68a3      	ldr	r3, [r4, #8]
 801e484:	42ab      	cmp	r3, r5
 801e486:	dc19      	bgt.n	801e4bc <__multadd+0x74>
 801e488:	6861      	ldr	r1, [r4, #4]
 801e48a:	4638      	mov	r0, r7
 801e48c:	3101      	adds	r1, #1
 801e48e:	f7ff ff79 	bl	801e384 <_Balloc>
 801e492:	4680      	mov	r8, r0
 801e494:	b928      	cbnz	r0, 801e4a2 <__multadd+0x5a>
 801e496:	4602      	mov	r2, r0
 801e498:	4b0c      	ldr	r3, [pc, #48]	; (801e4cc <__multadd+0x84>)
 801e49a:	480d      	ldr	r0, [pc, #52]	; (801e4d0 <__multadd+0x88>)
 801e49c:	21ba      	movs	r1, #186	; 0xba
 801e49e:	f7fd ff29 	bl	801c2f4 <__assert_func>
 801e4a2:	6922      	ldr	r2, [r4, #16]
 801e4a4:	3202      	adds	r2, #2
 801e4a6:	f104 010c 	add.w	r1, r4, #12
 801e4aa:	0092      	lsls	r2, r2, #2
 801e4ac:	300c      	adds	r0, #12
 801e4ae:	f7ff f88e 	bl	801d5ce <memcpy>
 801e4b2:	4621      	mov	r1, r4
 801e4b4:	4638      	mov	r0, r7
 801e4b6:	f7ff ffa5 	bl	801e404 <_Bfree>
 801e4ba:	4644      	mov	r4, r8
 801e4bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e4c0:	3501      	adds	r5, #1
 801e4c2:	615e      	str	r6, [r3, #20]
 801e4c4:	6125      	str	r5, [r4, #16]
 801e4c6:	4620      	mov	r0, r4
 801e4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4cc:	08024821 	.word	0x08024821
 801e4d0:	08024832 	.word	0x08024832

0801e4d4 <__hi0bits>:
 801e4d4:	0c03      	lsrs	r3, r0, #16
 801e4d6:	041b      	lsls	r3, r3, #16
 801e4d8:	b9d3      	cbnz	r3, 801e510 <__hi0bits+0x3c>
 801e4da:	0400      	lsls	r0, r0, #16
 801e4dc:	2310      	movs	r3, #16
 801e4de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e4e2:	bf04      	itt	eq
 801e4e4:	0200      	lsleq	r0, r0, #8
 801e4e6:	3308      	addeq	r3, #8
 801e4e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e4ec:	bf04      	itt	eq
 801e4ee:	0100      	lsleq	r0, r0, #4
 801e4f0:	3304      	addeq	r3, #4
 801e4f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e4f6:	bf04      	itt	eq
 801e4f8:	0080      	lsleq	r0, r0, #2
 801e4fa:	3302      	addeq	r3, #2
 801e4fc:	2800      	cmp	r0, #0
 801e4fe:	db05      	blt.n	801e50c <__hi0bits+0x38>
 801e500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e504:	f103 0301 	add.w	r3, r3, #1
 801e508:	bf08      	it	eq
 801e50a:	2320      	moveq	r3, #32
 801e50c:	4618      	mov	r0, r3
 801e50e:	4770      	bx	lr
 801e510:	2300      	movs	r3, #0
 801e512:	e7e4      	b.n	801e4de <__hi0bits+0xa>

0801e514 <__lo0bits>:
 801e514:	6803      	ldr	r3, [r0, #0]
 801e516:	f013 0207 	ands.w	r2, r3, #7
 801e51a:	d00c      	beq.n	801e536 <__lo0bits+0x22>
 801e51c:	07d9      	lsls	r1, r3, #31
 801e51e:	d422      	bmi.n	801e566 <__lo0bits+0x52>
 801e520:	079a      	lsls	r2, r3, #30
 801e522:	bf49      	itett	mi
 801e524:	085b      	lsrmi	r3, r3, #1
 801e526:	089b      	lsrpl	r3, r3, #2
 801e528:	6003      	strmi	r3, [r0, #0]
 801e52a:	2201      	movmi	r2, #1
 801e52c:	bf5c      	itt	pl
 801e52e:	6003      	strpl	r3, [r0, #0]
 801e530:	2202      	movpl	r2, #2
 801e532:	4610      	mov	r0, r2
 801e534:	4770      	bx	lr
 801e536:	b299      	uxth	r1, r3
 801e538:	b909      	cbnz	r1, 801e53e <__lo0bits+0x2a>
 801e53a:	0c1b      	lsrs	r3, r3, #16
 801e53c:	2210      	movs	r2, #16
 801e53e:	b2d9      	uxtb	r1, r3
 801e540:	b909      	cbnz	r1, 801e546 <__lo0bits+0x32>
 801e542:	3208      	adds	r2, #8
 801e544:	0a1b      	lsrs	r3, r3, #8
 801e546:	0719      	lsls	r1, r3, #28
 801e548:	bf04      	itt	eq
 801e54a:	091b      	lsreq	r3, r3, #4
 801e54c:	3204      	addeq	r2, #4
 801e54e:	0799      	lsls	r1, r3, #30
 801e550:	bf04      	itt	eq
 801e552:	089b      	lsreq	r3, r3, #2
 801e554:	3202      	addeq	r2, #2
 801e556:	07d9      	lsls	r1, r3, #31
 801e558:	d403      	bmi.n	801e562 <__lo0bits+0x4e>
 801e55a:	085b      	lsrs	r3, r3, #1
 801e55c:	f102 0201 	add.w	r2, r2, #1
 801e560:	d003      	beq.n	801e56a <__lo0bits+0x56>
 801e562:	6003      	str	r3, [r0, #0]
 801e564:	e7e5      	b.n	801e532 <__lo0bits+0x1e>
 801e566:	2200      	movs	r2, #0
 801e568:	e7e3      	b.n	801e532 <__lo0bits+0x1e>
 801e56a:	2220      	movs	r2, #32
 801e56c:	e7e1      	b.n	801e532 <__lo0bits+0x1e>
	...

0801e570 <__i2b>:
 801e570:	b510      	push	{r4, lr}
 801e572:	460c      	mov	r4, r1
 801e574:	2101      	movs	r1, #1
 801e576:	f7ff ff05 	bl	801e384 <_Balloc>
 801e57a:	4602      	mov	r2, r0
 801e57c:	b928      	cbnz	r0, 801e58a <__i2b+0x1a>
 801e57e:	4b05      	ldr	r3, [pc, #20]	; (801e594 <__i2b+0x24>)
 801e580:	4805      	ldr	r0, [pc, #20]	; (801e598 <__i2b+0x28>)
 801e582:	f240 1145 	movw	r1, #325	; 0x145
 801e586:	f7fd feb5 	bl	801c2f4 <__assert_func>
 801e58a:	2301      	movs	r3, #1
 801e58c:	6144      	str	r4, [r0, #20]
 801e58e:	6103      	str	r3, [r0, #16]
 801e590:	bd10      	pop	{r4, pc}
 801e592:	bf00      	nop
 801e594:	08024821 	.word	0x08024821
 801e598:	08024832 	.word	0x08024832

0801e59c <__multiply>:
 801e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5a0:	4691      	mov	r9, r2
 801e5a2:	690a      	ldr	r2, [r1, #16]
 801e5a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e5a8:	429a      	cmp	r2, r3
 801e5aa:	bfb8      	it	lt
 801e5ac:	460b      	movlt	r3, r1
 801e5ae:	460c      	mov	r4, r1
 801e5b0:	bfbc      	itt	lt
 801e5b2:	464c      	movlt	r4, r9
 801e5b4:	4699      	movlt	r9, r3
 801e5b6:	6927      	ldr	r7, [r4, #16]
 801e5b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e5bc:	68a3      	ldr	r3, [r4, #8]
 801e5be:	6861      	ldr	r1, [r4, #4]
 801e5c0:	eb07 060a 	add.w	r6, r7, sl
 801e5c4:	42b3      	cmp	r3, r6
 801e5c6:	b085      	sub	sp, #20
 801e5c8:	bfb8      	it	lt
 801e5ca:	3101      	addlt	r1, #1
 801e5cc:	f7ff feda 	bl	801e384 <_Balloc>
 801e5d0:	b930      	cbnz	r0, 801e5e0 <__multiply+0x44>
 801e5d2:	4602      	mov	r2, r0
 801e5d4:	4b44      	ldr	r3, [pc, #272]	; (801e6e8 <__multiply+0x14c>)
 801e5d6:	4845      	ldr	r0, [pc, #276]	; (801e6ec <__multiply+0x150>)
 801e5d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801e5dc:	f7fd fe8a 	bl	801c2f4 <__assert_func>
 801e5e0:	f100 0514 	add.w	r5, r0, #20
 801e5e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e5e8:	462b      	mov	r3, r5
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	4543      	cmp	r3, r8
 801e5ee:	d321      	bcc.n	801e634 <__multiply+0x98>
 801e5f0:	f104 0314 	add.w	r3, r4, #20
 801e5f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e5f8:	f109 0314 	add.w	r3, r9, #20
 801e5fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e600:	9202      	str	r2, [sp, #8]
 801e602:	1b3a      	subs	r2, r7, r4
 801e604:	3a15      	subs	r2, #21
 801e606:	f022 0203 	bic.w	r2, r2, #3
 801e60a:	3204      	adds	r2, #4
 801e60c:	f104 0115 	add.w	r1, r4, #21
 801e610:	428f      	cmp	r7, r1
 801e612:	bf38      	it	cc
 801e614:	2204      	movcc	r2, #4
 801e616:	9201      	str	r2, [sp, #4]
 801e618:	9a02      	ldr	r2, [sp, #8]
 801e61a:	9303      	str	r3, [sp, #12]
 801e61c:	429a      	cmp	r2, r3
 801e61e:	d80c      	bhi.n	801e63a <__multiply+0x9e>
 801e620:	2e00      	cmp	r6, #0
 801e622:	dd03      	ble.n	801e62c <__multiply+0x90>
 801e624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d05b      	beq.n	801e6e4 <__multiply+0x148>
 801e62c:	6106      	str	r6, [r0, #16]
 801e62e:	b005      	add	sp, #20
 801e630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e634:	f843 2b04 	str.w	r2, [r3], #4
 801e638:	e7d8      	b.n	801e5ec <__multiply+0x50>
 801e63a:	f8b3 a000 	ldrh.w	sl, [r3]
 801e63e:	f1ba 0f00 	cmp.w	sl, #0
 801e642:	d024      	beq.n	801e68e <__multiply+0xf2>
 801e644:	f104 0e14 	add.w	lr, r4, #20
 801e648:	46a9      	mov	r9, r5
 801e64a:	f04f 0c00 	mov.w	ip, #0
 801e64e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e652:	f8d9 1000 	ldr.w	r1, [r9]
 801e656:	fa1f fb82 	uxth.w	fp, r2
 801e65a:	b289      	uxth	r1, r1
 801e65c:	fb0a 110b 	mla	r1, sl, fp, r1
 801e660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e664:	f8d9 2000 	ldr.w	r2, [r9]
 801e668:	4461      	add	r1, ip
 801e66a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e66e:	fb0a c20b 	mla	r2, sl, fp, ip
 801e672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e676:	b289      	uxth	r1, r1
 801e678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e67c:	4577      	cmp	r7, lr
 801e67e:	f849 1b04 	str.w	r1, [r9], #4
 801e682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e686:	d8e2      	bhi.n	801e64e <__multiply+0xb2>
 801e688:	9a01      	ldr	r2, [sp, #4]
 801e68a:	f845 c002 	str.w	ip, [r5, r2]
 801e68e:	9a03      	ldr	r2, [sp, #12]
 801e690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e694:	3304      	adds	r3, #4
 801e696:	f1b9 0f00 	cmp.w	r9, #0
 801e69a:	d021      	beq.n	801e6e0 <__multiply+0x144>
 801e69c:	6829      	ldr	r1, [r5, #0]
 801e69e:	f104 0c14 	add.w	ip, r4, #20
 801e6a2:	46ae      	mov	lr, r5
 801e6a4:	f04f 0a00 	mov.w	sl, #0
 801e6a8:	f8bc b000 	ldrh.w	fp, [ip]
 801e6ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e6b0:	fb09 220b 	mla	r2, r9, fp, r2
 801e6b4:	4452      	add	r2, sl
 801e6b6:	b289      	uxth	r1, r1
 801e6b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e6bc:	f84e 1b04 	str.w	r1, [lr], #4
 801e6c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801e6c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e6c8:	f8be 1000 	ldrh.w	r1, [lr]
 801e6cc:	fb09 110a 	mla	r1, r9, sl, r1
 801e6d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801e6d4:	4567      	cmp	r7, ip
 801e6d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e6da:	d8e5      	bhi.n	801e6a8 <__multiply+0x10c>
 801e6dc:	9a01      	ldr	r2, [sp, #4]
 801e6de:	50a9      	str	r1, [r5, r2]
 801e6e0:	3504      	adds	r5, #4
 801e6e2:	e799      	b.n	801e618 <__multiply+0x7c>
 801e6e4:	3e01      	subs	r6, #1
 801e6e6:	e79b      	b.n	801e620 <__multiply+0x84>
 801e6e8:	08024821 	.word	0x08024821
 801e6ec:	08024832 	.word	0x08024832

0801e6f0 <__pow5mult>:
 801e6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6f4:	4615      	mov	r5, r2
 801e6f6:	f012 0203 	ands.w	r2, r2, #3
 801e6fa:	4606      	mov	r6, r0
 801e6fc:	460f      	mov	r7, r1
 801e6fe:	d007      	beq.n	801e710 <__pow5mult+0x20>
 801e700:	4c25      	ldr	r4, [pc, #148]	; (801e798 <__pow5mult+0xa8>)
 801e702:	3a01      	subs	r2, #1
 801e704:	2300      	movs	r3, #0
 801e706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e70a:	f7ff fe9d 	bl	801e448 <__multadd>
 801e70e:	4607      	mov	r7, r0
 801e710:	10ad      	asrs	r5, r5, #2
 801e712:	d03d      	beq.n	801e790 <__pow5mult+0xa0>
 801e714:	69f4      	ldr	r4, [r6, #28]
 801e716:	b97c      	cbnz	r4, 801e738 <__pow5mult+0x48>
 801e718:	2010      	movs	r0, #16
 801e71a:	f7fd fe27 	bl	801c36c <malloc>
 801e71e:	4602      	mov	r2, r0
 801e720:	61f0      	str	r0, [r6, #28]
 801e722:	b928      	cbnz	r0, 801e730 <__pow5mult+0x40>
 801e724:	4b1d      	ldr	r3, [pc, #116]	; (801e79c <__pow5mult+0xac>)
 801e726:	481e      	ldr	r0, [pc, #120]	; (801e7a0 <__pow5mult+0xb0>)
 801e728:	f240 11b3 	movw	r1, #435	; 0x1b3
 801e72c:	f7fd fde2 	bl	801c2f4 <__assert_func>
 801e730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e734:	6004      	str	r4, [r0, #0]
 801e736:	60c4      	str	r4, [r0, #12]
 801e738:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801e73c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e740:	b94c      	cbnz	r4, 801e756 <__pow5mult+0x66>
 801e742:	f240 2171 	movw	r1, #625	; 0x271
 801e746:	4630      	mov	r0, r6
 801e748:	f7ff ff12 	bl	801e570 <__i2b>
 801e74c:	2300      	movs	r3, #0
 801e74e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e752:	4604      	mov	r4, r0
 801e754:	6003      	str	r3, [r0, #0]
 801e756:	f04f 0900 	mov.w	r9, #0
 801e75a:	07eb      	lsls	r3, r5, #31
 801e75c:	d50a      	bpl.n	801e774 <__pow5mult+0x84>
 801e75e:	4639      	mov	r1, r7
 801e760:	4622      	mov	r2, r4
 801e762:	4630      	mov	r0, r6
 801e764:	f7ff ff1a 	bl	801e59c <__multiply>
 801e768:	4639      	mov	r1, r7
 801e76a:	4680      	mov	r8, r0
 801e76c:	4630      	mov	r0, r6
 801e76e:	f7ff fe49 	bl	801e404 <_Bfree>
 801e772:	4647      	mov	r7, r8
 801e774:	106d      	asrs	r5, r5, #1
 801e776:	d00b      	beq.n	801e790 <__pow5mult+0xa0>
 801e778:	6820      	ldr	r0, [r4, #0]
 801e77a:	b938      	cbnz	r0, 801e78c <__pow5mult+0x9c>
 801e77c:	4622      	mov	r2, r4
 801e77e:	4621      	mov	r1, r4
 801e780:	4630      	mov	r0, r6
 801e782:	f7ff ff0b 	bl	801e59c <__multiply>
 801e786:	6020      	str	r0, [r4, #0]
 801e788:	f8c0 9000 	str.w	r9, [r0]
 801e78c:	4604      	mov	r4, r0
 801e78e:	e7e4      	b.n	801e75a <__pow5mult+0x6a>
 801e790:	4638      	mov	r0, r7
 801e792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e796:	bf00      	nop
 801e798:	08024980 	.word	0x08024980
 801e79c:	08024618 	.word	0x08024618
 801e7a0:	08024832 	.word	0x08024832

0801e7a4 <__lshift>:
 801e7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7a8:	460c      	mov	r4, r1
 801e7aa:	6849      	ldr	r1, [r1, #4]
 801e7ac:	6923      	ldr	r3, [r4, #16]
 801e7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e7b2:	68a3      	ldr	r3, [r4, #8]
 801e7b4:	4607      	mov	r7, r0
 801e7b6:	4691      	mov	r9, r2
 801e7b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e7bc:	f108 0601 	add.w	r6, r8, #1
 801e7c0:	42b3      	cmp	r3, r6
 801e7c2:	db0b      	blt.n	801e7dc <__lshift+0x38>
 801e7c4:	4638      	mov	r0, r7
 801e7c6:	f7ff fddd 	bl	801e384 <_Balloc>
 801e7ca:	4605      	mov	r5, r0
 801e7cc:	b948      	cbnz	r0, 801e7e2 <__lshift+0x3e>
 801e7ce:	4602      	mov	r2, r0
 801e7d0:	4b28      	ldr	r3, [pc, #160]	; (801e874 <__lshift+0xd0>)
 801e7d2:	4829      	ldr	r0, [pc, #164]	; (801e878 <__lshift+0xd4>)
 801e7d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801e7d8:	f7fd fd8c 	bl	801c2f4 <__assert_func>
 801e7dc:	3101      	adds	r1, #1
 801e7de:	005b      	lsls	r3, r3, #1
 801e7e0:	e7ee      	b.n	801e7c0 <__lshift+0x1c>
 801e7e2:	2300      	movs	r3, #0
 801e7e4:	f100 0114 	add.w	r1, r0, #20
 801e7e8:	f100 0210 	add.w	r2, r0, #16
 801e7ec:	4618      	mov	r0, r3
 801e7ee:	4553      	cmp	r3, sl
 801e7f0:	db33      	blt.n	801e85a <__lshift+0xb6>
 801e7f2:	6920      	ldr	r0, [r4, #16]
 801e7f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e7f8:	f104 0314 	add.w	r3, r4, #20
 801e7fc:	f019 091f 	ands.w	r9, r9, #31
 801e800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e808:	d02b      	beq.n	801e862 <__lshift+0xbe>
 801e80a:	f1c9 0e20 	rsb	lr, r9, #32
 801e80e:	468a      	mov	sl, r1
 801e810:	2200      	movs	r2, #0
 801e812:	6818      	ldr	r0, [r3, #0]
 801e814:	fa00 f009 	lsl.w	r0, r0, r9
 801e818:	4310      	orrs	r0, r2
 801e81a:	f84a 0b04 	str.w	r0, [sl], #4
 801e81e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e822:	459c      	cmp	ip, r3
 801e824:	fa22 f20e 	lsr.w	r2, r2, lr
 801e828:	d8f3      	bhi.n	801e812 <__lshift+0x6e>
 801e82a:	ebac 0304 	sub.w	r3, ip, r4
 801e82e:	3b15      	subs	r3, #21
 801e830:	f023 0303 	bic.w	r3, r3, #3
 801e834:	3304      	adds	r3, #4
 801e836:	f104 0015 	add.w	r0, r4, #21
 801e83a:	4584      	cmp	ip, r0
 801e83c:	bf38      	it	cc
 801e83e:	2304      	movcc	r3, #4
 801e840:	50ca      	str	r2, [r1, r3]
 801e842:	b10a      	cbz	r2, 801e848 <__lshift+0xa4>
 801e844:	f108 0602 	add.w	r6, r8, #2
 801e848:	3e01      	subs	r6, #1
 801e84a:	4638      	mov	r0, r7
 801e84c:	612e      	str	r6, [r5, #16]
 801e84e:	4621      	mov	r1, r4
 801e850:	f7ff fdd8 	bl	801e404 <_Bfree>
 801e854:	4628      	mov	r0, r5
 801e856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e85a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e85e:	3301      	adds	r3, #1
 801e860:	e7c5      	b.n	801e7ee <__lshift+0x4a>
 801e862:	3904      	subs	r1, #4
 801e864:	f853 2b04 	ldr.w	r2, [r3], #4
 801e868:	f841 2f04 	str.w	r2, [r1, #4]!
 801e86c:	459c      	cmp	ip, r3
 801e86e:	d8f9      	bhi.n	801e864 <__lshift+0xc0>
 801e870:	e7ea      	b.n	801e848 <__lshift+0xa4>
 801e872:	bf00      	nop
 801e874:	08024821 	.word	0x08024821
 801e878:	08024832 	.word	0x08024832

0801e87c <__mcmp>:
 801e87c:	b530      	push	{r4, r5, lr}
 801e87e:	6902      	ldr	r2, [r0, #16]
 801e880:	690c      	ldr	r4, [r1, #16]
 801e882:	1b12      	subs	r2, r2, r4
 801e884:	d10e      	bne.n	801e8a4 <__mcmp+0x28>
 801e886:	f100 0314 	add.w	r3, r0, #20
 801e88a:	3114      	adds	r1, #20
 801e88c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e89c:	42a5      	cmp	r5, r4
 801e89e:	d003      	beq.n	801e8a8 <__mcmp+0x2c>
 801e8a0:	d305      	bcc.n	801e8ae <__mcmp+0x32>
 801e8a2:	2201      	movs	r2, #1
 801e8a4:	4610      	mov	r0, r2
 801e8a6:	bd30      	pop	{r4, r5, pc}
 801e8a8:	4283      	cmp	r3, r0
 801e8aa:	d3f3      	bcc.n	801e894 <__mcmp+0x18>
 801e8ac:	e7fa      	b.n	801e8a4 <__mcmp+0x28>
 801e8ae:	f04f 32ff 	mov.w	r2, #4294967295
 801e8b2:	e7f7      	b.n	801e8a4 <__mcmp+0x28>

0801e8b4 <__mdiff>:
 801e8b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8b8:	460c      	mov	r4, r1
 801e8ba:	4606      	mov	r6, r0
 801e8bc:	4611      	mov	r1, r2
 801e8be:	4620      	mov	r0, r4
 801e8c0:	4690      	mov	r8, r2
 801e8c2:	f7ff ffdb 	bl	801e87c <__mcmp>
 801e8c6:	1e05      	subs	r5, r0, #0
 801e8c8:	d110      	bne.n	801e8ec <__mdiff+0x38>
 801e8ca:	4629      	mov	r1, r5
 801e8cc:	4630      	mov	r0, r6
 801e8ce:	f7ff fd59 	bl	801e384 <_Balloc>
 801e8d2:	b930      	cbnz	r0, 801e8e2 <__mdiff+0x2e>
 801e8d4:	4b3a      	ldr	r3, [pc, #232]	; (801e9c0 <__mdiff+0x10c>)
 801e8d6:	4602      	mov	r2, r0
 801e8d8:	f240 2137 	movw	r1, #567	; 0x237
 801e8dc:	4839      	ldr	r0, [pc, #228]	; (801e9c4 <__mdiff+0x110>)
 801e8de:	f7fd fd09 	bl	801c2f4 <__assert_func>
 801e8e2:	2301      	movs	r3, #1
 801e8e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8ec:	bfa4      	itt	ge
 801e8ee:	4643      	movge	r3, r8
 801e8f0:	46a0      	movge	r8, r4
 801e8f2:	4630      	mov	r0, r6
 801e8f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e8f8:	bfa6      	itte	ge
 801e8fa:	461c      	movge	r4, r3
 801e8fc:	2500      	movge	r5, #0
 801e8fe:	2501      	movlt	r5, #1
 801e900:	f7ff fd40 	bl	801e384 <_Balloc>
 801e904:	b920      	cbnz	r0, 801e910 <__mdiff+0x5c>
 801e906:	4b2e      	ldr	r3, [pc, #184]	; (801e9c0 <__mdiff+0x10c>)
 801e908:	4602      	mov	r2, r0
 801e90a:	f240 2145 	movw	r1, #581	; 0x245
 801e90e:	e7e5      	b.n	801e8dc <__mdiff+0x28>
 801e910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e914:	6926      	ldr	r6, [r4, #16]
 801e916:	60c5      	str	r5, [r0, #12]
 801e918:	f104 0914 	add.w	r9, r4, #20
 801e91c:	f108 0514 	add.w	r5, r8, #20
 801e920:	f100 0e14 	add.w	lr, r0, #20
 801e924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e92c:	f108 0210 	add.w	r2, r8, #16
 801e930:	46f2      	mov	sl, lr
 801e932:	2100      	movs	r1, #0
 801e934:	f859 3b04 	ldr.w	r3, [r9], #4
 801e938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e93c:	fa11 f88b 	uxtah	r8, r1, fp
 801e940:	b299      	uxth	r1, r3
 801e942:	0c1b      	lsrs	r3, r3, #16
 801e944:	eba8 0801 	sub.w	r8, r8, r1
 801e948:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e94c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e950:	fa1f f888 	uxth.w	r8, r8
 801e954:	1419      	asrs	r1, r3, #16
 801e956:	454e      	cmp	r6, r9
 801e958:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e95c:	f84a 3b04 	str.w	r3, [sl], #4
 801e960:	d8e8      	bhi.n	801e934 <__mdiff+0x80>
 801e962:	1b33      	subs	r3, r6, r4
 801e964:	3b15      	subs	r3, #21
 801e966:	f023 0303 	bic.w	r3, r3, #3
 801e96a:	3304      	adds	r3, #4
 801e96c:	3415      	adds	r4, #21
 801e96e:	42a6      	cmp	r6, r4
 801e970:	bf38      	it	cc
 801e972:	2304      	movcc	r3, #4
 801e974:	441d      	add	r5, r3
 801e976:	4473      	add	r3, lr
 801e978:	469e      	mov	lr, r3
 801e97a:	462e      	mov	r6, r5
 801e97c:	4566      	cmp	r6, ip
 801e97e:	d30e      	bcc.n	801e99e <__mdiff+0xea>
 801e980:	f10c 0203 	add.w	r2, ip, #3
 801e984:	1b52      	subs	r2, r2, r5
 801e986:	f022 0203 	bic.w	r2, r2, #3
 801e98a:	3d03      	subs	r5, #3
 801e98c:	45ac      	cmp	ip, r5
 801e98e:	bf38      	it	cc
 801e990:	2200      	movcc	r2, #0
 801e992:	4413      	add	r3, r2
 801e994:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801e998:	b17a      	cbz	r2, 801e9ba <__mdiff+0x106>
 801e99a:	6107      	str	r7, [r0, #16]
 801e99c:	e7a4      	b.n	801e8e8 <__mdiff+0x34>
 801e99e:	f856 8b04 	ldr.w	r8, [r6], #4
 801e9a2:	fa11 f288 	uxtah	r2, r1, r8
 801e9a6:	1414      	asrs	r4, r2, #16
 801e9a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e9ac:	b292      	uxth	r2, r2
 801e9ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e9b2:	f84e 2b04 	str.w	r2, [lr], #4
 801e9b6:	1421      	asrs	r1, r4, #16
 801e9b8:	e7e0      	b.n	801e97c <__mdiff+0xc8>
 801e9ba:	3f01      	subs	r7, #1
 801e9bc:	e7ea      	b.n	801e994 <__mdiff+0xe0>
 801e9be:	bf00      	nop
 801e9c0:	08024821 	.word	0x08024821
 801e9c4:	08024832 	.word	0x08024832

0801e9c8 <__d2b>:
 801e9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e9cc:	460f      	mov	r7, r1
 801e9ce:	2101      	movs	r1, #1
 801e9d0:	ec59 8b10 	vmov	r8, r9, d0
 801e9d4:	4616      	mov	r6, r2
 801e9d6:	f7ff fcd5 	bl	801e384 <_Balloc>
 801e9da:	4604      	mov	r4, r0
 801e9dc:	b930      	cbnz	r0, 801e9ec <__d2b+0x24>
 801e9de:	4602      	mov	r2, r0
 801e9e0:	4b24      	ldr	r3, [pc, #144]	; (801ea74 <__d2b+0xac>)
 801e9e2:	4825      	ldr	r0, [pc, #148]	; (801ea78 <__d2b+0xb0>)
 801e9e4:	f240 310f 	movw	r1, #783	; 0x30f
 801e9e8:	f7fd fc84 	bl	801c2f4 <__assert_func>
 801e9ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e9f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e9f4:	bb2d      	cbnz	r5, 801ea42 <__d2b+0x7a>
 801e9f6:	9301      	str	r3, [sp, #4]
 801e9f8:	f1b8 0300 	subs.w	r3, r8, #0
 801e9fc:	d026      	beq.n	801ea4c <__d2b+0x84>
 801e9fe:	4668      	mov	r0, sp
 801ea00:	9300      	str	r3, [sp, #0]
 801ea02:	f7ff fd87 	bl	801e514 <__lo0bits>
 801ea06:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ea0a:	b1e8      	cbz	r0, 801ea48 <__d2b+0x80>
 801ea0c:	f1c0 0320 	rsb	r3, r0, #32
 801ea10:	fa02 f303 	lsl.w	r3, r2, r3
 801ea14:	430b      	orrs	r3, r1
 801ea16:	40c2      	lsrs	r2, r0
 801ea18:	6163      	str	r3, [r4, #20]
 801ea1a:	9201      	str	r2, [sp, #4]
 801ea1c:	9b01      	ldr	r3, [sp, #4]
 801ea1e:	61a3      	str	r3, [r4, #24]
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	bf14      	ite	ne
 801ea24:	2202      	movne	r2, #2
 801ea26:	2201      	moveq	r2, #1
 801ea28:	6122      	str	r2, [r4, #16]
 801ea2a:	b1bd      	cbz	r5, 801ea5c <__d2b+0x94>
 801ea2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ea30:	4405      	add	r5, r0
 801ea32:	603d      	str	r5, [r7, #0]
 801ea34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ea38:	6030      	str	r0, [r6, #0]
 801ea3a:	4620      	mov	r0, r4
 801ea3c:	b003      	add	sp, #12
 801ea3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ea46:	e7d6      	b.n	801e9f6 <__d2b+0x2e>
 801ea48:	6161      	str	r1, [r4, #20]
 801ea4a:	e7e7      	b.n	801ea1c <__d2b+0x54>
 801ea4c:	a801      	add	r0, sp, #4
 801ea4e:	f7ff fd61 	bl	801e514 <__lo0bits>
 801ea52:	9b01      	ldr	r3, [sp, #4]
 801ea54:	6163      	str	r3, [r4, #20]
 801ea56:	3020      	adds	r0, #32
 801ea58:	2201      	movs	r2, #1
 801ea5a:	e7e5      	b.n	801ea28 <__d2b+0x60>
 801ea5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ea60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ea64:	6038      	str	r0, [r7, #0]
 801ea66:	6918      	ldr	r0, [r3, #16]
 801ea68:	f7ff fd34 	bl	801e4d4 <__hi0bits>
 801ea6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ea70:	e7e2      	b.n	801ea38 <__d2b+0x70>
 801ea72:	bf00      	nop
 801ea74:	08024821 	.word	0x08024821
 801ea78:	08024832 	.word	0x08024832

0801ea7c <__ssputs_r>:
 801ea7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea80:	688e      	ldr	r6, [r1, #8]
 801ea82:	461f      	mov	r7, r3
 801ea84:	42be      	cmp	r6, r7
 801ea86:	680b      	ldr	r3, [r1, #0]
 801ea88:	4682      	mov	sl, r0
 801ea8a:	460c      	mov	r4, r1
 801ea8c:	4690      	mov	r8, r2
 801ea8e:	d82c      	bhi.n	801eaea <__ssputs_r+0x6e>
 801ea90:	898a      	ldrh	r2, [r1, #12]
 801ea92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ea96:	d026      	beq.n	801eae6 <__ssputs_r+0x6a>
 801ea98:	6965      	ldr	r5, [r4, #20]
 801ea9a:	6909      	ldr	r1, [r1, #16]
 801ea9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eaa0:	eba3 0901 	sub.w	r9, r3, r1
 801eaa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eaa8:	1c7b      	adds	r3, r7, #1
 801eaaa:	444b      	add	r3, r9
 801eaac:	106d      	asrs	r5, r5, #1
 801eaae:	429d      	cmp	r5, r3
 801eab0:	bf38      	it	cc
 801eab2:	461d      	movcc	r5, r3
 801eab4:	0553      	lsls	r3, r2, #21
 801eab6:	d527      	bpl.n	801eb08 <__ssputs_r+0x8c>
 801eab8:	4629      	mov	r1, r5
 801eaba:	f7fd fc87 	bl	801c3cc <_malloc_r>
 801eabe:	4606      	mov	r6, r0
 801eac0:	b360      	cbz	r0, 801eb1c <__ssputs_r+0xa0>
 801eac2:	6921      	ldr	r1, [r4, #16]
 801eac4:	464a      	mov	r2, r9
 801eac6:	f7fe fd82 	bl	801d5ce <memcpy>
 801eaca:	89a3      	ldrh	r3, [r4, #12]
 801eacc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ead0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ead4:	81a3      	strh	r3, [r4, #12]
 801ead6:	6126      	str	r6, [r4, #16]
 801ead8:	6165      	str	r5, [r4, #20]
 801eada:	444e      	add	r6, r9
 801eadc:	eba5 0509 	sub.w	r5, r5, r9
 801eae0:	6026      	str	r6, [r4, #0]
 801eae2:	60a5      	str	r5, [r4, #8]
 801eae4:	463e      	mov	r6, r7
 801eae6:	42be      	cmp	r6, r7
 801eae8:	d900      	bls.n	801eaec <__ssputs_r+0x70>
 801eaea:	463e      	mov	r6, r7
 801eaec:	6820      	ldr	r0, [r4, #0]
 801eaee:	4632      	mov	r2, r6
 801eaf0:	4641      	mov	r1, r8
 801eaf2:	f7fe fc61 	bl	801d3b8 <memmove>
 801eaf6:	68a3      	ldr	r3, [r4, #8]
 801eaf8:	1b9b      	subs	r3, r3, r6
 801eafa:	60a3      	str	r3, [r4, #8]
 801eafc:	6823      	ldr	r3, [r4, #0]
 801eafe:	4433      	add	r3, r6
 801eb00:	6023      	str	r3, [r4, #0]
 801eb02:	2000      	movs	r0, #0
 801eb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb08:	462a      	mov	r2, r5
 801eb0a:	f000 fbdb 	bl	801f2c4 <_realloc_r>
 801eb0e:	4606      	mov	r6, r0
 801eb10:	2800      	cmp	r0, #0
 801eb12:	d1e0      	bne.n	801ead6 <__ssputs_r+0x5a>
 801eb14:	6921      	ldr	r1, [r4, #16]
 801eb16:	4650      	mov	r0, sl
 801eb18:	f7ff fbe8 	bl	801e2ec <_free_r>
 801eb1c:	230c      	movs	r3, #12
 801eb1e:	f8ca 3000 	str.w	r3, [sl]
 801eb22:	89a3      	ldrh	r3, [r4, #12]
 801eb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb28:	81a3      	strh	r3, [r4, #12]
 801eb2a:	f04f 30ff 	mov.w	r0, #4294967295
 801eb2e:	e7e9      	b.n	801eb04 <__ssputs_r+0x88>

0801eb30 <_svfiprintf_r>:
 801eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb34:	4698      	mov	r8, r3
 801eb36:	898b      	ldrh	r3, [r1, #12]
 801eb38:	061b      	lsls	r3, r3, #24
 801eb3a:	b09d      	sub	sp, #116	; 0x74
 801eb3c:	4607      	mov	r7, r0
 801eb3e:	460d      	mov	r5, r1
 801eb40:	4614      	mov	r4, r2
 801eb42:	d50e      	bpl.n	801eb62 <_svfiprintf_r+0x32>
 801eb44:	690b      	ldr	r3, [r1, #16]
 801eb46:	b963      	cbnz	r3, 801eb62 <_svfiprintf_r+0x32>
 801eb48:	2140      	movs	r1, #64	; 0x40
 801eb4a:	f7fd fc3f 	bl	801c3cc <_malloc_r>
 801eb4e:	6028      	str	r0, [r5, #0]
 801eb50:	6128      	str	r0, [r5, #16]
 801eb52:	b920      	cbnz	r0, 801eb5e <_svfiprintf_r+0x2e>
 801eb54:	230c      	movs	r3, #12
 801eb56:	603b      	str	r3, [r7, #0]
 801eb58:	f04f 30ff 	mov.w	r0, #4294967295
 801eb5c:	e0d0      	b.n	801ed00 <_svfiprintf_r+0x1d0>
 801eb5e:	2340      	movs	r3, #64	; 0x40
 801eb60:	616b      	str	r3, [r5, #20]
 801eb62:	2300      	movs	r3, #0
 801eb64:	9309      	str	r3, [sp, #36]	; 0x24
 801eb66:	2320      	movs	r3, #32
 801eb68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eb6c:	f8cd 800c 	str.w	r8, [sp, #12]
 801eb70:	2330      	movs	r3, #48	; 0x30
 801eb72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ed18 <_svfiprintf_r+0x1e8>
 801eb76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eb7a:	f04f 0901 	mov.w	r9, #1
 801eb7e:	4623      	mov	r3, r4
 801eb80:	469a      	mov	sl, r3
 801eb82:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eb86:	b10a      	cbz	r2, 801eb8c <_svfiprintf_r+0x5c>
 801eb88:	2a25      	cmp	r2, #37	; 0x25
 801eb8a:	d1f9      	bne.n	801eb80 <_svfiprintf_r+0x50>
 801eb8c:	ebba 0b04 	subs.w	fp, sl, r4
 801eb90:	d00b      	beq.n	801ebaa <_svfiprintf_r+0x7a>
 801eb92:	465b      	mov	r3, fp
 801eb94:	4622      	mov	r2, r4
 801eb96:	4629      	mov	r1, r5
 801eb98:	4638      	mov	r0, r7
 801eb9a:	f7ff ff6f 	bl	801ea7c <__ssputs_r>
 801eb9e:	3001      	adds	r0, #1
 801eba0:	f000 80a9 	beq.w	801ecf6 <_svfiprintf_r+0x1c6>
 801eba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eba6:	445a      	add	r2, fp
 801eba8:	9209      	str	r2, [sp, #36]	; 0x24
 801ebaa:	f89a 3000 	ldrb.w	r3, [sl]
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	f000 80a1 	beq.w	801ecf6 <_svfiprintf_r+0x1c6>
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	f04f 32ff 	mov.w	r2, #4294967295
 801ebba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ebbe:	f10a 0a01 	add.w	sl, sl, #1
 801ebc2:	9304      	str	r3, [sp, #16]
 801ebc4:	9307      	str	r3, [sp, #28]
 801ebc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ebca:	931a      	str	r3, [sp, #104]	; 0x68
 801ebcc:	4654      	mov	r4, sl
 801ebce:	2205      	movs	r2, #5
 801ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebd4:	4850      	ldr	r0, [pc, #320]	; (801ed18 <_svfiprintf_r+0x1e8>)
 801ebd6:	f7e1 fb1b 	bl	8000210 <memchr>
 801ebda:	9a04      	ldr	r2, [sp, #16]
 801ebdc:	b9d8      	cbnz	r0, 801ec16 <_svfiprintf_r+0xe6>
 801ebde:	06d0      	lsls	r0, r2, #27
 801ebe0:	bf44      	itt	mi
 801ebe2:	2320      	movmi	r3, #32
 801ebe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebe8:	0711      	lsls	r1, r2, #28
 801ebea:	bf44      	itt	mi
 801ebec:	232b      	movmi	r3, #43	; 0x2b
 801ebee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebf2:	f89a 3000 	ldrb.w	r3, [sl]
 801ebf6:	2b2a      	cmp	r3, #42	; 0x2a
 801ebf8:	d015      	beq.n	801ec26 <_svfiprintf_r+0xf6>
 801ebfa:	9a07      	ldr	r2, [sp, #28]
 801ebfc:	4654      	mov	r4, sl
 801ebfe:	2000      	movs	r0, #0
 801ec00:	f04f 0c0a 	mov.w	ip, #10
 801ec04:	4621      	mov	r1, r4
 801ec06:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec0a:	3b30      	subs	r3, #48	; 0x30
 801ec0c:	2b09      	cmp	r3, #9
 801ec0e:	d94d      	bls.n	801ecac <_svfiprintf_r+0x17c>
 801ec10:	b1b0      	cbz	r0, 801ec40 <_svfiprintf_r+0x110>
 801ec12:	9207      	str	r2, [sp, #28]
 801ec14:	e014      	b.n	801ec40 <_svfiprintf_r+0x110>
 801ec16:	eba0 0308 	sub.w	r3, r0, r8
 801ec1a:	fa09 f303 	lsl.w	r3, r9, r3
 801ec1e:	4313      	orrs	r3, r2
 801ec20:	9304      	str	r3, [sp, #16]
 801ec22:	46a2      	mov	sl, r4
 801ec24:	e7d2      	b.n	801ebcc <_svfiprintf_r+0x9c>
 801ec26:	9b03      	ldr	r3, [sp, #12]
 801ec28:	1d19      	adds	r1, r3, #4
 801ec2a:	681b      	ldr	r3, [r3, #0]
 801ec2c:	9103      	str	r1, [sp, #12]
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	bfbb      	ittet	lt
 801ec32:	425b      	neglt	r3, r3
 801ec34:	f042 0202 	orrlt.w	r2, r2, #2
 801ec38:	9307      	strge	r3, [sp, #28]
 801ec3a:	9307      	strlt	r3, [sp, #28]
 801ec3c:	bfb8      	it	lt
 801ec3e:	9204      	strlt	r2, [sp, #16]
 801ec40:	7823      	ldrb	r3, [r4, #0]
 801ec42:	2b2e      	cmp	r3, #46	; 0x2e
 801ec44:	d10c      	bne.n	801ec60 <_svfiprintf_r+0x130>
 801ec46:	7863      	ldrb	r3, [r4, #1]
 801ec48:	2b2a      	cmp	r3, #42	; 0x2a
 801ec4a:	d134      	bne.n	801ecb6 <_svfiprintf_r+0x186>
 801ec4c:	9b03      	ldr	r3, [sp, #12]
 801ec4e:	1d1a      	adds	r2, r3, #4
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	9203      	str	r2, [sp, #12]
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	bfb8      	it	lt
 801ec58:	f04f 33ff 	movlt.w	r3, #4294967295
 801ec5c:	3402      	adds	r4, #2
 801ec5e:	9305      	str	r3, [sp, #20]
 801ec60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ed28 <_svfiprintf_r+0x1f8>
 801ec64:	7821      	ldrb	r1, [r4, #0]
 801ec66:	2203      	movs	r2, #3
 801ec68:	4650      	mov	r0, sl
 801ec6a:	f7e1 fad1 	bl	8000210 <memchr>
 801ec6e:	b138      	cbz	r0, 801ec80 <_svfiprintf_r+0x150>
 801ec70:	9b04      	ldr	r3, [sp, #16]
 801ec72:	eba0 000a 	sub.w	r0, r0, sl
 801ec76:	2240      	movs	r2, #64	; 0x40
 801ec78:	4082      	lsls	r2, r0
 801ec7a:	4313      	orrs	r3, r2
 801ec7c:	3401      	adds	r4, #1
 801ec7e:	9304      	str	r3, [sp, #16]
 801ec80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec84:	4825      	ldr	r0, [pc, #148]	; (801ed1c <_svfiprintf_r+0x1ec>)
 801ec86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ec8a:	2206      	movs	r2, #6
 801ec8c:	f7e1 fac0 	bl	8000210 <memchr>
 801ec90:	2800      	cmp	r0, #0
 801ec92:	d038      	beq.n	801ed06 <_svfiprintf_r+0x1d6>
 801ec94:	4b22      	ldr	r3, [pc, #136]	; (801ed20 <_svfiprintf_r+0x1f0>)
 801ec96:	bb1b      	cbnz	r3, 801ece0 <_svfiprintf_r+0x1b0>
 801ec98:	9b03      	ldr	r3, [sp, #12]
 801ec9a:	3307      	adds	r3, #7
 801ec9c:	f023 0307 	bic.w	r3, r3, #7
 801eca0:	3308      	adds	r3, #8
 801eca2:	9303      	str	r3, [sp, #12]
 801eca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eca6:	4433      	add	r3, r6
 801eca8:	9309      	str	r3, [sp, #36]	; 0x24
 801ecaa:	e768      	b.n	801eb7e <_svfiprintf_r+0x4e>
 801ecac:	fb0c 3202 	mla	r2, ip, r2, r3
 801ecb0:	460c      	mov	r4, r1
 801ecb2:	2001      	movs	r0, #1
 801ecb4:	e7a6      	b.n	801ec04 <_svfiprintf_r+0xd4>
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	3401      	adds	r4, #1
 801ecba:	9305      	str	r3, [sp, #20]
 801ecbc:	4619      	mov	r1, r3
 801ecbe:	f04f 0c0a 	mov.w	ip, #10
 801ecc2:	4620      	mov	r0, r4
 801ecc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ecc8:	3a30      	subs	r2, #48	; 0x30
 801ecca:	2a09      	cmp	r2, #9
 801eccc:	d903      	bls.n	801ecd6 <_svfiprintf_r+0x1a6>
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d0c6      	beq.n	801ec60 <_svfiprintf_r+0x130>
 801ecd2:	9105      	str	r1, [sp, #20]
 801ecd4:	e7c4      	b.n	801ec60 <_svfiprintf_r+0x130>
 801ecd6:	fb0c 2101 	mla	r1, ip, r1, r2
 801ecda:	4604      	mov	r4, r0
 801ecdc:	2301      	movs	r3, #1
 801ecde:	e7f0      	b.n	801ecc2 <_svfiprintf_r+0x192>
 801ece0:	ab03      	add	r3, sp, #12
 801ece2:	9300      	str	r3, [sp, #0]
 801ece4:	462a      	mov	r2, r5
 801ece6:	4b0f      	ldr	r3, [pc, #60]	; (801ed24 <_svfiprintf_r+0x1f4>)
 801ece8:	a904      	add	r1, sp, #16
 801ecea:	4638      	mov	r0, r7
 801ecec:	f7fd fd54 	bl	801c798 <_printf_float>
 801ecf0:	1c42      	adds	r2, r0, #1
 801ecf2:	4606      	mov	r6, r0
 801ecf4:	d1d6      	bne.n	801eca4 <_svfiprintf_r+0x174>
 801ecf6:	89ab      	ldrh	r3, [r5, #12]
 801ecf8:	065b      	lsls	r3, r3, #25
 801ecfa:	f53f af2d 	bmi.w	801eb58 <_svfiprintf_r+0x28>
 801ecfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed00:	b01d      	add	sp, #116	; 0x74
 801ed02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed06:	ab03      	add	r3, sp, #12
 801ed08:	9300      	str	r3, [sp, #0]
 801ed0a:	462a      	mov	r2, r5
 801ed0c:	4b05      	ldr	r3, [pc, #20]	; (801ed24 <_svfiprintf_r+0x1f4>)
 801ed0e:	a904      	add	r1, sp, #16
 801ed10:	4638      	mov	r0, r7
 801ed12:	f7fd ffe5 	bl	801cce0 <_printf_i>
 801ed16:	e7eb      	b.n	801ecf0 <_svfiprintf_r+0x1c0>
 801ed18:	0802498c 	.word	0x0802498c
 801ed1c:	08024996 	.word	0x08024996
 801ed20:	0801c799 	.word	0x0801c799
 801ed24:	0801ea7d 	.word	0x0801ea7d
 801ed28:	08024992 	.word	0x08024992

0801ed2c <__sfputc_r>:
 801ed2c:	6893      	ldr	r3, [r2, #8]
 801ed2e:	3b01      	subs	r3, #1
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	b410      	push	{r4}
 801ed34:	6093      	str	r3, [r2, #8]
 801ed36:	da08      	bge.n	801ed4a <__sfputc_r+0x1e>
 801ed38:	6994      	ldr	r4, [r2, #24]
 801ed3a:	42a3      	cmp	r3, r4
 801ed3c:	db01      	blt.n	801ed42 <__sfputc_r+0x16>
 801ed3e:	290a      	cmp	r1, #10
 801ed40:	d103      	bne.n	801ed4a <__sfputc_r+0x1e>
 801ed42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed46:	f7fe ba92 	b.w	801d26e <__swbuf_r>
 801ed4a:	6813      	ldr	r3, [r2, #0]
 801ed4c:	1c58      	adds	r0, r3, #1
 801ed4e:	6010      	str	r0, [r2, #0]
 801ed50:	7019      	strb	r1, [r3, #0]
 801ed52:	4608      	mov	r0, r1
 801ed54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed58:	4770      	bx	lr

0801ed5a <__sfputs_r>:
 801ed5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed5c:	4606      	mov	r6, r0
 801ed5e:	460f      	mov	r7, r1
 801ed60:	4614      	mov	r4, r2
 801ed62:	18d5      	adds	r5, r2, r3
 801ed64:	42ac      	cmp	r4, r5
 801ed66:	d101      	bne.n	801ed6c <__sfputs_r+0x12>
 801ed68:	2000      	movs	r0, #0
 801ed6a:	e007      	b.n	801ed7c <__sfputs_r+0x22>
 801ed6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed70:	463a      	mov	r2, r7
 801ed72:	4630      	mov	r0, r6
 801ed74:	f7ff ffda 	bl	801ed2c <__sfputc_r>
 801ed78:	1c43      	adds	r3, r0, #1
 801ed7a:	d1f3      	bne.n	801ed64 <__sfputs_r+0xa>
 801ed7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ed80 <_vfiprintf_r>:
 801ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed84:	460d      	mov	r5, r1
 801ed86:	b09d      	sub	sp, #116	; 0x74
 801ed88:	4614      	mov	r4, r2
 801ed8a:	4698      	mov	r8, r3
 801ed8c:	4606      	mov	r6, r0
 801ed8e:	b118      	cbz	r0, 801ed98 <_vfiprintf_r+0x18>
 801ed90:	6a03      	ldr	r3, [r0, #32]
 801ed92:	b90b      	cbnz	r3, 801ed98 <_vfiprintf_r+0x18>
 801ed94:	f7fe f952 	bl	801d03c <__sinit>
 801ed98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed9a:	07d9      	lsls	r1, r3, #31
 801ed9c:	d405      	bmi.n	801edaa <_vfiprintf_r+0x2a>
 801ed9e:	89ab      	ldrh	r3, [r5, #12]
 801eda0:	059a      	lsls	r2, r3, #22
 801eda2:	d402      	bmi.n	801edaa <_vfiprintf_r+0x2a>
 801eda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eda6:	f7fe fc10 	bl	801d5ca <__retarget_lock_acquire_recursive>
 801edaa:	89ab      	ldrh	r3, [r5, #12]
 801edac:	071b      	lsls	r3, r3, #28
 801edae:	d501      	bpl.n	801edb4 <_vfiprintf_r+0x34>
 801edb0:	692b      	ldr	r3, [r5, #16]
 801edb2:	b99b      	cbnz	r3, 801eddc <_vfiprintf_r+0x5c>
 801edb4:	4629      	mov	r1, r5
 801edb6:	4630      	mov	r0, r6
 801edb8:	f7fe fa96 	bl	801d2e8 <__swsetup_r>
 801edbc:	b170      	cbz	r0, 801eddc <_vfiprintf_r+0x5c>
 801edbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801edc0:	07dc      	lsls	r4, r3, #31
 801edc2:	d504      	bpl.n	801edce <_vfiprintf_r+0x4e>
 801edc4:	f04f 30ff 	mov.w	r0, #4294967295
 801edc8:	b01d      	add	sp, #116	; 0x74
 801edca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edce:	89ab      	ldrh	r3, [r5, #12]
 801edd0:	0598      	lsls	r0, r3, #22
 801edd2:	d4f7      	bmi.n	801edc4 <_vfiprintf_r+0x44>
 801edd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801edd6:	f7fe fbf9 	bl	801d5cc <__retarget_lock_release_recursive>
 801edda:	e7f3      	b.n	801edc4 <_vfiprintf_r+0x44>
 801eddc:	2300      	movs	r3, #0
 801edde:	9309      	str	r3, [sp, #36]	; 0x24
 801ede0:	2320      	movs	r3, #32
 801ede2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ede6:	f8cd 800c 	str.w	r8, [sp, #12]
 801edea:	2330      	movs	r3, #48	; 0x30
 801edec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801efa0 <_vfiprintf_r+0x220>
 801edf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801edf4:	f04f 0901 	mov.w	r9, #1
 801edf8:	4623      	mov	r3, r4
 801edfa:	469a      	mov	sl, r3
 801edfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee00:	b10a      	cbz	r2, 801ee06 <_vfiprintf_r+0x86>
 801ee02:	2a25      	cmp	r2, #37	; 0x25
 801ee04:	d1f9      	bne.n	801edfa <_vfiprintf_r+0x7a>
 801ee06:	ebba 0b04 	subs.w	fp, sl, r4
 801ee0a:	d00b      	beq.n	801ee24 <_vfiprintf_r+0xa4>
 801ee0c:	465b      	mov	r3, fp
 801ee0e:	4622      	mov	r2, r4
 801ee10:	4629      	mov	r1, r5
 801ee12:	4630      	mov	r0, r6
 801ee14:	f7ff ffa1 	bl	801ed5a <__sfputs_r>
 801ee18:	3001      	adds	r0, #1
 801ee1a:	f000 80a9 	beq.w	801ef70 <_vfiprintf_r+0x1f0>
 801ee1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee20:	445a      	add	r2, fp
 801ee22:	9209      	str	r2, [sp, #36]	; 0x24
 801ee24:	f89a 3000 	ldrb.w	r3, [sl]
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	f000 80a1 	beq.w	801ef70 <_vfiprintf_r+0x1f0>
 801ee2e:	2300      	movs	r3, #0
 801ee30:	f04f 32ff 	mov.w	r2, #4294967295
 801ee34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee38:	f10a 0a01 	add.w	sl, sl, #1
 801ee3c:	9304      	str	r3, [sp, #16]
 801ee3e:	9307      	str	r3, [sp, #28]
 801ee40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ee44:	931a      	str	r3, [sp, #104]	; 0x68
 801ee46:	4654      	mov	r4, sl
 801ee48:	2205      	movs	r2, #5
 801ee4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee4e:	4854      	ldr	r0, [pc, #336]	; (801efa0 <_vfiprintf_r+0x220>)
 801ee50:	f7e1 f9de 	bl	8000210 <memchr>
 801ee54:	9a04      	ldr	r2, [sp, #16]
 801ee56:	b9d8      	cbnz	r0, 801ee90 <_vfiprintf_r+0x110>
 801ee58:	06d1      	lsls	r1, r2, #27
 801ee5a:	bf44      	itt	mi
 801ee5c:	2320      	movmi	r3, #32
 801ee5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee62:	0713      	lsls	r3, r2, #28
 801ee64:	bf44      	itt	mi
 801ee66:	232b      	movmi	r3, #43	; 0x2b
 801ee68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee6c:	f89a 3000 	ldrb.w	r3, [sl]
 801ee70:	2b2a      	cmp	r3, #42	; 0x2a
 801ee72:	d015      	beq.n	801eea0 <_vfiprintf_r+0x120>
 801ee74:	9a07      	ldr	r2, [sp, #28]
 801ee76:	4654      	mov	r4, sl
 801ee78:	2000      	movs	r0, #0
 801ee7a:	f04f 0c0a 	mov.w	ip, #10
 801ee7e:	4621      	mov	r1, r4
 801ee80:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ee84:	3b30      	subs	r3, #48	; 0x30
 801ee86:	2b09      	cmp	r3, #9
 801ee88:	d94d      	bls.n	801ef26 <_vfiprintf_r+0x1a6>
 801ee8a:	b1b0      	cbz	r0, 801eeba <_vfiprintf_r+0x13a>
 801ee8c:	9207      	str	r2, [sp, #28]
 801ee8e:	e014      	b.n	801eeba <_vfiprintf_r+0x13a>
 801ee90:	eba0 0308 	sub.w	r3, r0, r8
 801ee94:	fa09 f303 	lsl.w	r3, r9, r3
 801ee98:	4313      	orrs	r3, r2
 801ee9a:	9304      	str	r3, [sp, #16]
 801ee9c:	46a2      	mov	sl, r4
 801ee9e:	e7d2      	b.n	801ee46 <_vfiprintf_r+0xc6>
 801eea0:	9b03      	ldr	r3, [sp, #12]
 801eea2:	1d19      	adds	r1, r3, #4
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	9103      	str	r1, [sp, #12]
 801eea8:	2b00      	cmp	r3, #0
 801eeaa:	bfbb      	ittet	lt
 801eeac:	425b      	neglt	r3, r3
 801eeae:	f042 0202 	orrlt.w	r2, r2, #2
 801eeb2:	9307      	strge	r3, [sp, #28]
 801eeb4:	9307      	strlt	r3, [sp, #28]
 801eeb6:	bfb8      	it	lt
 801eeb8:	9204      	strlt	r2, [sp, #16]
 801eeba:	7823      	ldrb	r3, [r4, #0]
 801eebc:	2b2e      	cmp	r3, #46	; 0x2e
 801eebe:	d10c      	bne.n	801eeda <_vfiprintf_r+0x15a>
 801eec0:	7863      	ldrb	r3, [r4, #1]
 801eec2:	2b2a      	cmp	r3, #42	; 0x2a
 801eec4:	d134      	bne.n	801ef30 <_vfiprintf_r+0x1b0>
 801eec6:	9b03      	ldr	r3, [sp, #12]
 801eec8:	1d1a      	adds	r2, r3, #4
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	9203      	str	r2, [sp, #12]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	bfb8      	it	lt
 801eed2:	f04f 33ff 	movlt.w	r3, #4294967295
 801eed6:	3402      	adds	r4, #2
 801eed8:	9305      	str	r3, [sp, #20]
 801eeda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801efb0 <_vfiprintf_r+0x230>
 801eede:	7821      	ldrb	r1, [r4, #0]
 801eee0:	2203      	movs	r2, #3
 801eee2:	4650      	mov	r0, sl
 801eee4:	f7e1 f994 	bl	8000210 <memchr>
 801eee8:	b138      	cbz	r0, 801eefa <_vfiprintf_r+0x17a>
 801eeea:	9b04      	ldr	r3, [sp, #16]
 801eeec:	eba0 000a 	sub.w	r0, r0, sl
 801eef0:	2240      	movs	r2, #64	; 0x40
 801eef2:	4082      	lsls	r2, r0
 801eef4:	4313      	orrs	r3, r2
 801eef6:	3401      	adds	r4, #1
 801eef8:	9304      	str	r3, [sp, #16]
 801eefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eefe:	4829      	ldr	r0, [pc, #164]	; (801efa4 <_vfiprintf_r+0x224>)
 801ef00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ef04:	2206      	movs	r2, #6
 801ef06:	f7e1 f983 	bl	8000210 <memchr>
 801ef0a:	2800      	cmp	r0, #0
 801ef0c:	d03f      	beq.n	801ef8e <_vfiprintf_r+0x20e>
 801ef0e:	4b26      	ldr	r3, [pc, #152]	; (801efa8 <_vfiprintf_r+0x228>)
 801ef10:	bb1b      	cbnz	r3, 801ef5a <_vfiprintf_r+0x1da>
 801ef12:	9b03      	ldr	r3, [sp, #12]
 801ef14:	3307      	adds	r3, #7
 801ef16:	f023 0307 	bic.w	r3, r3, #7
 801ef1a:	3308      	adds	r3, #8
 801ef1c:	9303      	str	r3, [sp, #12]
 801ef1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef20:	443b      	add	r3, r7
 801ef22:	9309      	str	r3, [sp, #36]	; 0x24
 801ef24:	e768      	b.n	801edf8 <_vfiprintf_r+0x78>
 801ef26:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef2a:	460c      	mov	r4, r1
 801ef2c:	2001      	movs	r0, #1
 801ef2e:	e7a6      	b.n	801ee7e <_vfiprintf_r+0xfe>
 801ef30:	2300      	movs	r3, #0
 801ef32:	3401      	adds	r4, #1
 801ef34:	9305      	str	r3, [sp, #20]
 801ef36:	4619      	mov	r1, r3
 801ef38:	f04f 0c0a 	mov.w	ip, #10
 801ef3c:	4620      	mov	r0, r4
 801ef3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef42:	3a30      	subs	r2, #48	; 0x30
 801ef44:	2a09      	cmp	r2, #9
 801ef46:	d903      	bls.n	801ef50 <_vfiprintf_r+0x1d0>
 801ef48:	2b00      	cmp	r3, #0
 801ef4a:	d0c6      	beq.n	801eeda <_vfiprintf_r+0x15a>
 801ef4c:	9105      	str	r1, [sp, #20]
 801ef4e:	e7c4      	b.n	801eeda <_vfiprintf_r+0x15a>
 801ef50:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef54:	4604      	mov	r4, r0
 801ef56:	2301      	movs	r3, #1
 801ef58:	e7f0      	b.n	801ef3c <_vfiprintf_r+0x1bc>
 801ef5a:	ab03      	add	r3, sp, #12
 801ef5c:	9300      	str	r3, [sp, #0]
 801ef5e:	462a      	mov	r2, r5
 801ef60:	4b12      	ldr	r3, [pc, #72]	; (801efac <_vfiprintf_r+0x22c>)
 801ef62:	a904      	add	r1, sp, #16
 801ef64:	4630      	mov	r0, r6
 801ef66:	f7fd fc17 	bl	801c798 <_printf_float>
 801ef6a:	4607      	mov	r7, r0
 801ef6c:	1c78      	adds	r0, r7, #1
 801ef6e:	d1d6      	bne.n	801ef1e <_vfiprintf_r+0x19e>
 801ef70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef72:	07d9      	lsls	r1, r3, #31
 801ef74:	d405      	bmi.n	801ef82 <_vfiprintf_r+0x202>
 801ef76:	89ab      	ldrh	r3, [r5, #12]
 801ef78:	059a      	lsls	r2, r3, #22
 801ef7a:	d402      	bmi.n	801ef82 <_vfiprintf_r+0x202>
 801ef7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef7e:	f7fe fb25 	bl	801d5cc <__retarget_lock_release_recursive>
 801ef82:	89ab      	ldrh	r3, [r5, #12]
 801ef84:	065b      	lsls	r3, r3, #25
 801ef86:	f53f af1d 	bmi.w	801edc4 <_vfiprintf_r+0x44>
 801ef8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef8c:	e71c      	b.n	801edc8 <_vfiprintf_r+0x48>
 801ef8e:	ab03      	add	r3, sp, #12
 801ef90:	9300      	str	r3, [sp, #0]
 801ef92:	462a      	mov	r2, r5
 801ef94:	4b05      	ldr	r3, [pc, #20]	; (801efac <_vfiprintf_r+0x22c>)
 801ef96:	a904      	add	r1, sp, #16
 801ef98:	4630      	mov	r0, r6
 801ef9a:	f7fd fea1 	bl	801cce0 <_printf_i>
 801ef9e:	e7e4      	b.n	801ef6a <_vfiprintf_r+0x1ea>
 801efa0:	0802498c 	.word	0x0802498c
 801efa4:	08024996 	.word	0x08024996
 801efa8:	0801c799 	.word	0x0801c799
 801efac:	0801ed5b 	.word	0x0801ed5b
 801efb0:	08024992 	.word	0x08024992

0801efb4 <__sflush_r>:
 801efb4:	898a      	ldrh	r2, [r1, #12]
 801efb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efba:	4605      	mov	r5, r0
 801efbc:	0710      	lsls	r0, r2, #28
 801efbe:	460c      	mov	r4, r1
 801efc0:	d458      	bmi.n	801f074 <__sflush_r+0xc0>
 801efc2:	684b      	ldr	r3, [r1, #4]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	dc05      	bgt.n	801efd4 <__sflush_r+0x20>
 801efc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801efca:	2b00      	cmp	r3, #0
 801efcc:	dc02      	bgt.n	801efd4 <__sflush_r+0x20>
 801efce:	2000      	movs	r0, #0
 801efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801efd6:	2e00      	cmp	r6, #0
 801efd8:	d0f9      	beq.n	801efce <__sflush_r+0x1a>
 801efda:	2300      	movs	r3, #0
 801efdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801efe0:	682f      	ldr	r7, [r5, #0]
 801efe2:	6a21      	ldr	r1, [r4, #32]
 801efe4:	602b      	str	r3, [r5, #0]
 801efe6:	d032      	beq.n	801f04e <__sflush_r+0x9a>
 801efe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801efea:	89a3      	ldrh	r3, [r4, #12]
 801efec:	075a      	lsls	r2, r3, #29
 801efee:	d505      	bpl.n	801effc <__sflush_r+0x48>
 801eff0:	6863      	ldr	r3, [r4, #4]
 801eff2:	1ac0      	subs	r0, r0, r3
 801eff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eff6:	b10b      	cbz	r3, 801effc <__sflush_r+0x48>
 801eff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801effa:	1ac0      	subs	r0, r0, r3
 801effc:	2300      	movs	r3, #0
 801effe:	4602      	mov	r2, r0
 801f000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f002:	6a21      	ldr	r1, [r4, #32]
 801f004:	4628      	mov	r0, r5
 801f006:	47b0      	blx	r6
 801f008:	1c43      	adds	r3, r0, #1
 801f00a:	89a3      	ldrh	r3, [r4, #12]
 801f00c:	d106      	bne.n	801f01c <__sflush_r+0x68>
 801f00e:	6829      	ldr	r1, [r5, #0]
 801f010:	291d      	cmp	r1, #29
 801f012:	d82b      	bhi.n	801f06c <__sflush_r+0xb8>
 801f014:	4a29      	ldr	r2, [pc, #164]	; (801f0bc <__sflush_r+0x108>)
 801f016:	410a      	asrs	r2, r1
 801f018:	07d6      	lsls	r6, r2, #31
 801f01a:	d427      	bmi.n	801f06c <__sflush_r+0xb8>
 801f01c:	2200      	movs	r2, #0
 801f01e:	6062      	str	r2, [r4, #4]
 801f020:	04d9      	lsls	r1, r3, #19
 801f022:	6922      	ldr	r2, [r4, #16]
 801f024:	6022      	str	r2, [r4, #0]
 801f026:	d504      	bpl.n	801f032 <__sflush_r+0x7e>
 801f028:	1c42      	adds	r2, r0, #1
 801f02a:	d101      	bne.n	801f030 <__sflush_r+0x7c>
 801f02c:	682b      	ldr	r3, [r5, #0]
 801f02e:	b903      	cbnz	r3, 801f032 <__sflush_r+0x7e>
 801f030:	6560      	str	r0, [r4, #84]	; 0x54
 801f032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f034:	602f      	str	r7, [r5, #0]
 801f036:	2900      	cmp	r1, #0
 801f038:	d0c9      	beq.n	801efce <__sflush_r+0x1a>
 801f03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f03e:	4299      	cmp	r1, r3
 801f040:	d002      	beq.n	801f048 <__sflush_r+0x94>
 801f042:	4628      	mov	r0, r5
 801f044:	f7ff f952 	bl	801e2ec <_free_r>
 801f048:	2000      	movs	r0, #0
 801f04a:	6360      	str	r0, [r4, #52]	; 0x34
 801f04c:	e7c0      	b.n	801efd0 <__sflush_r+0x1c>
 801f04e:	2301      	movs	r3, #1
 801f050:	4628      	mov	r0, r5
 801f052:	47b0      	blx	r6
 801f054:	1c41      	adds	r1, r0, #1
 801f056:	d1c8      	bne.n	801efea <__sflush_r+0x36>
 801f058:	682b      	ldr	r3, [r5, #0]
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d0c5      	beq.n	801efea <__sflush_r+0x36>
 801f05e:	2b1d      	cmp	r3, #29
 801f060:	d001      	beq.n	801f066 <__sflush_r+0xb2>
 801f062:	2b16      	cmp	r3, #22
 801f064:	d101      	bne.n	801f06a <__sflush_r+0xb6>
 801f066:	602f      	str	r7, [r5, #0]
 801f068:	e7b1      	b.n	801efce <__sflush_r+0x1a>
 801f06a:	89a3      	ldrh	r3, [r4, #12]
 801f06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f070:	81a3      	strh	r3, [r4, #12]
 801f072:	e7ad      	b.n	801efd0 <__sflush_r+0x1c>
 801f074:	690f      	ldr	r7, [r1, #16]
 801f076:	2f00      	cmp	r7, #0
 801f078:	d0a9      	beq.n	801efce <__sflush_r+0x1a>
 801f07a:	0793      	lsls	r3, r2, #30
 801f07c:	680e      	ldr	r6, [r1, #0]
 801f07e:	bf08      	it	eq
 801f080:	694b      	ldreq	r3, [r1, #20]
 801f082:	600f      	str	r7, [r1, #0]
 801f084:	bf18      	it	ne
 801f086:	2300      	movne	r3, #0
 801f088:	eba6 0807 	sub.w	r8, r6, r7
 801f08c:	608b      	str	r3, [r1, #8]
 801f08e:	f1b8 0f00 	cmp.w	r8, #0
 801f092:	dd9c      	ble.n	801efce <__sflush_r+0x1a>
 801f094:	6a21      	ldr	r1, [r4, #32]
 801f096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f098:	4643      	mov	r3, r8
 801f09a:	463a      	mov	r2, r7
 801f09c:	4628      	mov	r0, r5
 801f09e:	47b0      	blx	r6
 801f0a0:	2800      	cmp	r0, #0
 801f0a2:	dc06      	bgt.n	801f0b2 <__sflush_r+0xfe>
 801f0a4:	89a3      	ldrh	r3, [r4, #12]
 801f0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0aa:	81a3      	strh	r3, [r4, #12]
 801f0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801f0b0:	e78e      	b.n	801efd0 <__sflush_r+0x1c>
 801f0b2:	4407      	add	r7, r0
 801f0b4:	eba8 0800 	sub.w	r8, r8, r0
 801f0b8:	e7e9      	b.n	801f08e <__sflush_r+0xda>
 801f0ba:	bf00      	nop
 801f0bc:	dfbffffe 	.word	0xdfbffffe

0801f0c0 <_fflush_r>:
 801f0c0:	b538      	push	{r3, r4, r5, lr}
 801f0c2:	690b      	ldr	r3, [r1, #16]
 801f0c4:	4605      	mov	r5, r0
 801f0c6:	460c      	mov	r4, r1
 801f0c8:	b913      	cbnz	r3, 801f0d0 <_fflush_r+0x10>
 801f0ca:	2500      	movs	r5, #0
 801f0cc:	4628      	mov	r0, r5
 801f0ce:	bd38      	pop	{r3, r4, r5, pc}
 801f0d0:	b118      	cbz	r0, 801f0da <_fflush_r+0x1a>
 801f0d2:	6a03      	ldr	r3, [r0, #32]
 801f0d4:	b90b      	cbnz	r3, 801f0da <_fflush_r+0x1a>
 801f0d6:	f7fd ffb1 	bl	801d03c <__sinit>
 801f0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d0f3      	beq.n	801f0ca <_fflush_r+0xa>
 801f0e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f0e4:	07d0      	lsls	r0, r2, #31
 801f0e6:	d404      	bmi.n	801f0f2 <_fflush_r+0x32>
 801f0e8:	0599      	lsls	r1, r3, #22
 801f0ea:	d402      	bmi.n	801f0f2 <_fflush_r+0x32>
 801f0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f0ee:	f7fe fa6c 	bl	801d5ca <__retarget_lock_acquire_recursive>
 801f0f2:	4628      	mov	r0, r5
 801f0f4:	4621      	mov	r1, r4
 801f0f6:	f7ff ff5d 	bl	801efb4 <__sflush_r>
 801f0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f0fc:	07da      	lsls	r2, r3, #31
 801f0fe:	4605      	mov	r5, r0
 801f100:	d4e4      	bmi.n	801f0cc <_fflush_r+0xc>
 801f102:	89a3      	ldrh	r3, [r4, #12]
 801f104:	059b      	lsls	r3, r3, #22
 801f106:	d4e1      	bmi.n	801f0cc <_fflush_r+0xc>
 801f108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f10a:	f7fe fa5f 	bl	801d5cc <__retarget_lock_release_recursive>
 801f10e:	e7dd      	b.n	801f0cc <_fflush_r+0xc>

0801f110 <__swhatbuf_r>:
 801f110:	b570      	push	{r4, r5, r6, lr}
 801f112:	460c      	mov	r4, r1
 801f114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f118:	2900      	cmp	r1, #0
 801f11a:	b096      	sub	sp, #88	; 0x58
 801f11c:	4615      	mov	r5, r2
 801f11e:	461e      	mov	r6, r3
 801f120:	da0d      	bge.n	801f13e <__swhatbuf_r+0x2e>
 801f122:	89a3      	ldrh	r3, [r4, #12]
 801f124:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f128:	f04f 0100 	mov.w	r1, #0
 801f12c:	bf0c      	ite	eq
 801f12e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f132:	2340      	movne	r3, #64	; 0x40
 801f134:	2000      	movs	r0, #0
 801f136:	6031      	str	r1, [r6, #0]
 801f138:	602b      	str	r3, [r5, #0]
 801f13a:	b016      	add	sp, #88	; 0x58
 801f13c:	bd70      	pop	{r4, r5, r6, pc}
 801f13e:	466a      	mov	r2, sp
 801f140:	f000 f878 	bl	801f234 <_fstat_r>
 801f144:	2800      	cmp	r0, #0
 801f146:	dbec      	blt.n	801f122 <__swhatbuf_r+0x12>
 801f148:	9901      	ldr	r1, [sp, #4]
 801f14a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f14e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f152:	4259      	negs	r1, r3
 801f154:	4159      	adcs	r1, r3
 801f156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f15a:	e7eb      	b.n	801f134 <__swhatbuf_r+0x24>

0801f15c <__smakebuf_r>:
 801f15c:	898b      	ldrh	r3, [r1, #12]
 801f15e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f160:	079d      	lsls	r5, r3, #30
 801f162:	4606      	mov	r6, r0
 801f164:	460c      	mov	r4, r1
 801f166:	d507      	bpl.n	801f178 <__smakebuf_r+0x1c>
 801f168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f16c:	6023      	str	r3, [r4, #0]
 801f16e:	6123      	str	r3, [r4, #16]
 801f170:	2301      	movs	r3, #1
 801f172:	6163      	str	r3, [r4, #20]
 801f174:	b002      	add	sp, #8
 801f176:	bd70      	pop	{r4, r5, r6, pc}
 801f178:	ab01      	add	r3, sp, #4
 801f17a:	466a      	mov	r2, sp
 801f17c:	f7ff ffc8 	bl	801f110 <__swhatbuf_r>
 801f180:	9900      	ldr	r1, [sp, #0]
 801f182:	4605      	mov	r5, r0
 801f184:	4630      	mov	r0, r6
 801f186:	f7fd f921 	bl	801c3cc <_malloc_r>
 801f18a:	b948      	cbnz	r0, 801f1a0 <__smakebuf_r+0x44>
 801f18c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f190:	059a      	lsls	r2, r3, #22
 801f192:	d4ef      	bmi.n	801f174 <__smakebuf_r+0x18>
 801f194:	f023 0303 	bic.w	r3, r3, #3
 801f198:	f043 0302 	orr.w	r3, r3, #2
 801f19c:	81a3      	strh	r3, [r4, #12]
 801f19e:	e7e3      	b.n	801f168 <__smakebuf_r+0xc>
 801f1a0:	89a3      	ldrh	r3, [r4, #12]
 801f1a2:	6020      	str	r0, [r4, #0]
 801f1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1a8:	81a3      	strh	r3, [r4, #12]
 801f1aa:	9b00      	ldr	r3, [sp, #0]
 801f1ac:	6163      	str	r3, [r4, #20]
 801f1ae:	9b01      	ldr	r3, [sp, #4]
 801f1b0:	6120      	str	r0, [r4, #16]
 801f1b2:	b15b      	cbz	r3, 801f1cc <__smakebuf_r+0x70>
 801f1b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f1b8:	4630      	mov	r0, r6
 801f1ba:	f000 f84d 	bl	801f258 <_isatty_r>
 801f1be:	b128      	cbz	r0, 801f1cc <__smakebuf_r+0x70>
 801f1c0:	89a3      	ldrh	r3, [r4, #12]
 801f1c2:	f023 0303 	bic.w	r3, r3, #3
 801f1c6:	f043 0301 	orr.w	r3, r3, #1
 801f1ca:	81a3      	strh	r3, [r4, #12]
 801f1cc:	89a3      	ldrh	r3, [r4, #12]
 801f1ce:	431d      	orrs	r5, r3
 801f1d0:	81a5      	strh	r5, [r4, #12]
 801f1d2:	e7cf      	b.n	801f174 <__smakebuf_r+0x18>

0801f1d4 <_raise_r>:
 801f1d4:	291f      	cmp	r1, #31
 801f1d6:	b538      	push	{r3, r4, r5, lr}
 801f1d8:	4604      	mov	r4, r0
 801f1da:	460d      	mov	r5, r1
 801f1dc:	d904      	bls.n	801f1e8 <_raise_r+0x14>
 801f1de:	2316      	movs	r3, #22
 801f1e0:	6003      	str	r3, [r0, #0]
 801f1e2:	f04f 30ff 	mov.w	r0, #4294967295
 801f1e6:	bd38      	pop	{r3, r4, r5, pc}
 801f1e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f1ea:	b112      	cbz	r2, 801f1f2 <_raise_r+0x1e>
 801f1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f1f0:	b94b      	cbnz	r3, 801f206 <_raise_r+0x32>
 801f1f2:	4620      	mov	r0, r4
 801f1f4:	f000 f852 	bl	801f29c <_getpid_r>
 801f1f8:	462a      	mov	r2, r5
 801f1fa:	4601      	mov	r1, r0
 801f1fc:	4620      	mov	r0, r4
 801f1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f202:	f000 b839 	b.w	801f278 <_kill_r>
 801f206:	2b01      	cmp	r3, #1
 801f208:	d00a      	beq.n	801f220 <_raise_r+0x4c>
 801f20a:	1c59      	adds	r1, r3, #1
 801f20c:	d103      	bne.n	801f216 <_raise_r+0x42>
 801f20e:	2316      	movs	r3, #22
 801f210:	6003      	str	r3, [r0, #0]
 801f212:	2001      	movs	r0, #1
 801f214:	e7e7      	b.n	801f1e6 <_raise_r+0x12>
 801f216:	2400      	movs	r4, #0
 801f218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f21c:	4628      	mov	r0, r5
 801f21e:	4798      	blx	r3
 801f220:	2000      	movs	r0, #0
 801f222:	e7e0      	b.n	801f1e6 <_raise_r+0x12>

0801f224 <raise>:
 801f224:	4b02      	ldr	r3, [pc, #8]	; (801f230 <raise+0xc>)
 801f226:	4601      	mov	r1, r0
 801f228:	6818      	ldr	r0, [r3, #0]
 801f22a:	f7ff bfd3 	b.w	801f1d4 <_raise_r>
 801f22e:	bf00      	nop
 801f230:	20000088 	.word	0x20000088

0801f234 <_fstat_r>:
 801f234:	b538      	push	{r3, r4, r5, lr}
 801f236:	4d07      	ldr	r5, [pc, #28]	; (801f254 <_fstat_r+0x20>)
 801f238:	2300      	movs	r3, #0
 801f23a:	4604      	mov	r4, r0
 801f23c:	4608      	mov	r0, r1
 801f23e:	4611      	mov	r1, r2
 801f240:	602b      	str	r3, [r5, #0]
 801f242:	f7e3 fa22 	bl	800268a <_fstat>
 801f246:	1c43      	adds	r3, r0, #1
 801f248:	d102      	bne.n	801f250 <_fstat_r+0x1c>
 801f24a:	682b      	ldr	r3, [r5, #0]
 801f24c:	b103      	cbz	r3, 801f250 <_fstat_r+0x1c>
 801f24e:	6023      	str	r3, [r4, #0]
 801f250:	bd38      	pop	{r3, r4, r5, pc}
 801f252:	bf00      	nop
 801f254:	20013688 	.word	0x20013688

0801f258 <_isatty_r>:
 801f258:	b538      	push	{r3, r4, r5, lr}
 801f25a:	4d06      	ldr	r5, [pc, #24]	; (801f274 <_isatty_r+0x1c>)
 801f25c:	2300      	movs	r3, #0
 801f25e:	4604      	mov	r4, r0
 801f260:	4608      	mov	r0, r1
 801f262:	602b      	str	r3, [r5, #0]
 801f264:	f7e3 fa21 	bl	80026aa <_isatty>
 801f268:	1c43      	adds	r3, r0, #1
 801f26a:	d102      	bne.n	801f272 <_isatty_r+0x1a>
 801f26c:	682b      	ldr	r3, [r5, #0]
 801f26e:	b103      	cbz	r3, 801f272 <_isatty_r+0x1a>
 801f270:	6023      	str	r3, [r4, #0]
 801f272:	bd38      	pop	{r3, r4, r5, pc}
 801f274:	20013688 	.word	0x20013688

0801f278 <_kill_r>:
 801f278:	b538      	push	{r3, r4, r5, lr}
 801f27a:	4d07      	ldr	r5, [pc, #28]	; (801f298 <_kill_r+0x20>)
 801f27c:	2300      	movs	r3, #0
 801f27e:	4604      	mov	r4, r0
 801f280:	4608      	mov	r0, r1
 801f282:	4611      	mov	r1, r2
 801f284:	602b      	str	r3, [r5, #0]
 801f286:	f7e3 f99f 	bl	80025c8 <_kill>
 801f28a:	1c43      	adds	r3, r0, #1
 801f28c:	d102      	bne.n	801f294 <_kill_r+0x1c>
 801f28e:	682b      	ldr	r3, [r5, #0]
 801f290:	b103      	cbz	r3, 801f294 <_kill_r+0x1c>
 801f292:	6023      	str	r3, [r4, #0]
 801f294:	bd38      	pop	{r3, r4, r5, pc}
 801f296:	bf00      	nop
 801f298:	20013688 	.word	0x20013688

0801f29c <_getpid_r>:
 801f29c:	f7e3 b98c 	b.w	80025b8 <_getpid>

0801f2a0 <__ascii_mbtowc>:
 801f2a0:	b082      	sub	sp, #8
 801f2a2:	b901      	cbnz	r1, 801f2a6 <__ascii_mbtowc+0x6>
 801f2a4:	a901      	add	r1, sp, #4
 801f2a6:	b142      	cbz	r2, 801f2ba <__ascii_mbtowc+0x1a>
 801f2a8:	b14b      	cbz	r3, 801f2be <__ascii_mbtowc+0x1e>
 801f2aa:	7813      	ldrb	r3, [r2, #0]
 801f2ac:	600b      	str	r3, [r1, #0]
 801f2ae:	7812      	ldrb	r2, [r2, #0]
 801f2b0:	1e10      	subs	r0, r2, #0
 801f2b2:	bf18      	it	ne
 801f2b4:	2001      	movne	r0, #1
 801f2b6:	b002      	add	sp, #8
 801f2b8:	4770      	bx	lr
 801f2ba:	4610      	mov	r0, r2
 801f2bc:	e7fb      	b.n	801f2b6 <__ascii_mbtowc+0x16>
 801f2be:	f06f 0001 	mvn.w	r0, #1
 801f2c2:	e7f8      	b.n	801f2b6 <__ascii_mbtowc+0x16>

0801f2c4 <_realloc_r>:
 801f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2c8:	4680      	mov	r8, r0
 801f2ca:	4614      	mov	r4, r2
 801f2cc:	460e      	mov	r6, r1
 801f2ce:	b921      	cbnz	r1, 801f2da <_realloc_r+0x16>
 801f2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2d4:	4611      	mov	r1, r2
 801f2d6:	f7fd b879 	b.w	801c3cc <_malloc_r>
 801f2da:	b92a      	cbnz	r2, 801f2e8 <_realloc_r+0x24>
 801f2dc:	f7ff f806 	bl	801e2ec <_free_r>
 801f2e0:	4625      	mov	r5, r4
 801f2e2:	4628      	mov	r0, r5
 801f2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2e8:	f000 f828 	bl	801f33c <_malloc_usable_size_r>
 801f2ec:	4284      	cmp	r4, r0
 801f2ee:	4607      	mov	r7, r0
 801f2f0:	d802      	bhi.n	801f2f8 <_realloc_r+0x34>
 801f2f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f2f6:	d812      	bhi.n	801f31e <_realloc_r+0x5a>
 801f2f8:	4621      	mov	r1, r4
 801f2fa:	4640      	mov	r0, r8
 801f2fc:	f7fd f866 	bl	801c3cc <_malloc_r>
 801f300:	4605      	mov	r5, r0
 801f302:	2800      	cmp	r0, #0
 801f304:	d0ed      	beq.n	801f2e2 <_realloc_r+0x1e>
 801f306:	42bc      	cmp	r4, r7
 801f308:	4622      	mov	r2, r4
 801f30a:	4631      	mov	r1, r6
 801f30c:	bf28      	it	cs
 801f30e:	463a      	movcs	r2, r7
 801f310:	f7fe f95d 	bl	801d5ce <memcpy>
 801f314:	4631      	mov	r1, r6
 801f316:	4640      	mov	r0, r8
 801f318:	f7fe ffe8 	bl	801e2ec <_free_r>
 801f31c:	e7e1      	b.n	801f2e2 <_realloc_r+0x1e>
 801f31e:	4635      	mov	r5, r6
 801f320:	e7df      	b.n	801f2e2 <_realloc_r+0x1e>

0801f322 <__ascii_wctomb>:
 801f322:	b149      	cbz	r1, 801f338 <__ascii_wctomb+0x16>
 801f324:	2aff      	cmp	r2, #255	; 0xff
 801f326:	bf85      	ittet	hi
 801f328:	238a      	movhi	r3, #138	; 0x8a
 801f32a:	6003      	strhi	r3, [r0, #0]
 801f32c:	700a      	strbls	r2, [r1, #0]
 801f32e:	f04f 30ff 	movhi.w	r0, #4294967295
 801f332:	bf98      	it	ls
 801f334:	2001      	movls	r0, #1
 801f336:	4770      	bx	lr
 801f338:	4608      	mov	r0, r1
 801f33a:	4770      	bx	lr

0801f33c <_malloc_usable_size_r>:
 801f33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f340:	1f18      	subs	r0, r3, #4
 801f342:	2b00      	cmp	r3, #0
 801f344:	bfbc      	itt	lt
 801f346:	580b      	ldrlt	r3, [r1, r0]
 801f348:	18c0      	addlt	r0, r0, r3
 801f34a:	4770      	bx	lr

0801f34c <_init>:
 801f34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f34e:	bf00      	nop
 801f350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f352:	bc08      	pop	{r3}
 801f354:	469e      	mov	lr, r3
 801f356:	4770      	bx	lr

0801f358 <_fini>:
 801f358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f35a:	bf00      	nop
 801f35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f35e:	bc08      	pop	{r3}
 801f360:	469e      	mov	lr, r3
 801f362:	4770      	bx	lr
